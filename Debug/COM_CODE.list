
COM_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b0  080086b0  00020660  2**0
                  CONTENTS
  4 .ARM          00000008  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b8  080086b8  00020660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000660  20000000  080086c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000660  08008d20  00020660  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e54  08008d20  00020e54  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020660  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001510f  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031af  00000000  00000000  00035797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00038948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fd9  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c37  00000000  00000000  00054589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f32a  00000000  00000000  000681c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001074ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a0  00000000  00000000  0010753c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000660 	.word	0x20000660
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080085a0 	.word	0x080085a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000664 	.word	0x20000664
 8000100:	080085a0 	.word	0x080085a0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <BOARDTRX_Init>:
uint8_t brdRequestQueDataRx[BOARDTRX_DATA_COUNT];
uint8_t brdRequestQueCmdTx[BOARDTRX_CMD_COUNT];
uint8_t brdRequestQueCmdRx[BOARDTRX_CMD_COUNT];

// Does sanity checks and makes sure all is somewhat ok
BOARDTRX_Status BOARDTRX_Init(BOARDTRX_Handle *handle) {
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
    if (handle == 0x00) {
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d111      	bne.n	8000650 <BOARDTRX_Init+0x34>
        brdState.errorTRX = BOARDTRX_INT;
 800062c:	4ba2      	ldr	r3, [pc, #648]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800062e:	2200      	movs	r2, #0
 8000630:	70da      	strb	r2, [r3, #3]
        brdState.status = BOARDTRX_ERROR;
 8000632:	4ba1      	ldr	r3, [pc, #644]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 8000638:	4b9f      	ldr	r3, [pc, #636]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800063a:	2201      	movs	r2, #1
 800063c:	705a      	strb	r2, [r3, #1]
        return brdState;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a9d      	ldr	r2, [pc, #628]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000642:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000644:	c313      	stmia	r3!, {r0, r1, r4}
 8000646:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000648:	c313      	stmia	r3!, {r0, r1, r4}
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	e12f      	b.n	80008b0 <BOARDTRX_Init+0x294>
    }

    brdHandle = handle;
 8000650:	4b9a      	ldr	r3, [pc, #616]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	601a      	str	r2, [r3, #0]

    if (brdHandle->uart == 0x00) {
 8000656:	4b99      	ldr	r3, [pc, #612]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d111      	bne.n	8000684 <BOARDTRX_Init+0x68>
        brdState.errorTRX = BOARDTRX_INT;
 8000660:	4b95      	ldr	r3, [pc, #596]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000662:	2200      	movs	r2, #0
 8000664:	70da      	strb	r2, [r3, #3]
        brdState.status = BOARDTRX_ERROR;
 8000666:	4b94      	ldr	r3, [pc, #592]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 800066c:	4b92      	ldr	r3, [pc, #584]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800066e:	2201      	movs	r2, #1
 8000670:	705a      	strb	r2, [r3, #1]
        return brdState;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a90      	ldr	r2, [pc, #576]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000676:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000678:	c313      	stmia	r3!, {r0, r1, r4}
 800067a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800067c:	c313      	stmia	r3!, {r0, r1, r4}
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e115      	b.n	80008b0 <BOARDTRX_Init+0x294>
    }

    if (brdHandle->countDataRx > 0) {
 8000684:	4b8d      	ldr	r3, [pc, #564]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7b1b      	ldrb	r3, [r3, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d024      	beq.n	80006d8 <BOARDTRX_Init+0xbc>
        uint8_t tmpLen = brdHandle->countDataRx;
 800068e:	4b8b      	ldr	r3, [pc, #556]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	210f      	movs	r1, #15
 8000694:	187b      	adds	r3, r7, r1
 8000696:	7b12      	ldrb	r2, [r2, #12]
 8000698:	701a      	strb	r2, [r3, #0]
        if (brdHandle->dataRx == 0x00 || tmpLen > BOARDTRX_DATA_COUNT || tmpLen > BOARDTRX_HARD_MAX) {
 800069a:	4b88      	ldr	r3, [pc, #544]	; (80008bc <BOARDTRX_Init+0x2a0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d007      	beq.n	80006b4 <BOARDTRX_Init+0x98>
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b20      	cmp	r3, #32
 80006aa:	d803      	bhi.n	80006b4 <BOARDTRX_Init+0x98>
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b40      	cmp	r3, #64	; 0x40
 80006b2:	d911      	bls.n	80006d8 <BOARDTRX_Init+0xbc>
            brdState.status = BOARDTRX_ERROR;
 80006b4:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
            brdState.errorTRX = BOARDTRX_INT;
 80006ba:	4b7f      	ldr	r3, [pc, #508]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	70da      	strb	r2, [r3, #3]
            brdState.isNewError = 1;
 80006c0:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	705a      	strb	r2, [r3, #1]
            return brdState;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a7b      	ldr	r2, [pc, #492]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80006ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006cc:	c313      	stmia	r3!, {r0, r1, r4}
 80006ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006d0:	c313      	stmia	r3!, {r0, r1, r4}
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e0eb      	b.n	80008b0 <BOARDTRX_Init+0x294>
        }
    }

    if (brdHandle->countDataTx > 0) {
 80006d8:	4b78      	ldr	r3, [pc, #480]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d024      	beq.n	800072c <BOARDTRX_Init+0x110>
        uint8_t tmpLen = brdHandle->countDataTx;
 80006e2:	4b76      	ldr	r3, [pc, #472]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	210e      	movs	r1, #14
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	701a      	strb	r2, [r3, #0]
        if (brdHandle->dataTx == 0x00 || tmpLen > BOARDTRX_DATA_COUNT || tmpLen > BOARDTRX_HARD_MAX) {
 80006ee:	4b73      	ldr	r3, [pc, #460]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d007      	beq.n	8000708 <BOARDTRX_Init+0xec>
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d803      	bhi.n	8000708 <BOARDTRX_Init+0xec>
 8000700:	187b      	adds	r3, r7, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b40      	cmp	r3, #64	; 0x40
 8000706:	d911      	bls.n	800072c <BOARDTRX_Init+0x110>
            brdState.status = BOARDTRX_ERROR;
 8000708:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
            brdState.errorTRX = BOARDTRX_INT;
 800070e:	4b6a      	ldr	r3, [pc, #424]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000710:	2200      	movs	r2, #0
 8000712:	70da      	strb	r2, [r3, #3]
            brdState.isNewError = 1;
 8000714:	4b68      	ldr	r3, [pc, #416]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
            return brdState;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a66      	ldr	r2, [pc, #408]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800071e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000720:	c313      	stmia	r3!, {r0, r1, r4}
 8000722:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000724:	c313      	stmia	r3!, {r0, r1, r4}
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e0c1      	b.n	80008b0 <BOARDTRX_Init+0x294>
        }
    }

    if (brdHandle->countCmdRx > 0) {
 800072c:	4b63      	ldr	r3, [pc, #396]	; (80008bc <BOARDTRX_Init+0x2a0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	7f1b      	ldrb	r3, [r3, #28]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d024      	beq.n	8000780 <BOARDTRX_Init+0x164>
        uint8_t tmpLen = brdHandle->countCmdRx;
 8000736:	4b61      	ldr	r3, [pc, #388]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	210d      	movs	r1, #13
 800073c:	187b      	adds	r3, r7, r1
 800073e:	7f12      	ldrb	r2, [r2, #28]
 8000740:	701a      	strb	r2, [r3, #0]
        if (brdHandle->cmdRx == 0x00 || tmpLen > BOARDTRX_CMD_COUNT || tmpLen > BOARDTRX_HARD_MAX) {
 8000742:	4b5e      	ldr	r3, [pc, #376]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <BOARDTRX_Init+0x140>
 800074c:	187b      	adds	r3, r7, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b08      	cmp	r3, #8
 8000752:	d803      	bhi.n	800075c <BOARDTRX_Init+0x140>
 8000754:	187b      	adds	r3, r7, r1
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b40      	cmp	r3, #64	; 0x40
 800075a:	d911      	bls.n	8000780 <BOARDTRX_Init+0x164>
            brdState.status = BOARDTRX_ERROR;
 800075c:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
            brdState.errorTRX = BOARDTRX_INT;
 8000762:	4b55      	ldr	r3, [pc, #340]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000764:	2200      	movs	r2, #0
 8000766:	70da      	strb	r2, [r3, #3]
            brdState.isNewError = 1;
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800076a:	2201      	movs	r2, #1
 800076c:	705a      	strb	r2, [r3, #1]
            return brdState;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a51      	ldr	r2, [pc, #324]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000772:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000774:	c313      	stmia	r3!, {r0, r1, r4}
 8000776:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000778:	c313      	stmia	r3!, {r0, r1, r4}
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e097      	b.n	80008b0 <BOARDTRX_Init+0x294>
        }
    }

    if (brdHandle->countCmdTx > 0) {
 8000780:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	7d1b      	ldrb	r3, [r3, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d024      	beq.n	80007d4 <BOARDTRX_Init+0x1b8>
        uint8_t tmpLen = brdHandle->countCmdTx;
 800078a:	4b4c      	ldr	r3, [pc, #304]	; (80008bc <BOARDTRX_Init+0x2a0>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	210c      	movs	r1, #12
 8000790:	187b      	adds	r3, r7, r1
 8000792:	7d12      	ldrb	r2, [r2, #20]
 8000794:	701a      	strb	r2, [r3, #0]
        if (brdHandle->cmdTx == 0x00 || tmpLen > BOARDTRX_CMD_COUNT || tmpLen > BOARDTRX_HARD_MAX) {
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d007      	beq.n	80007b0 <BOARDTRX_Init+0x194>
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	d803      	bhi.n	80007b0 <BOARDTRX_Init+0x194>
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b40      	cmp	r3, #64	; 0x40
 80007ae:	d911      	bls.n	80007d4 <BOARDTRX_Init+0x1b8>
            brdState.status = BOARDTRX_ERROR;
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
            brdState.errorTRX = BOARDTRX_INT;
 80007b6:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	70da      	strb	r2, [r3, #3]
            brdState.isNewError = 1;
 80007bc:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	705a      	strb	r2, [r3, #1]
            return brdState;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80007c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c8:	c313      	stmia	r3!, {r0, r1, r4}
 80007ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007cc:	c313      	stmia	r3!, {r0, r1, r4}
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e06d      	b.n	80008b0 <BOARDTRX_Init+0x294>
        }
    }

    if (brdHandle->countDataTx == 0 && brdHandle->countDataRx == 0 && brdHandle->countCmdRx == 0 && brdHandle->countCmdTx == 0) {
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d120      	bne.n	8000820 <BOARDTRX_Init+0x204>
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	7b1b      	ldrb	r3, [r3, #12]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d11b      	bne.n	8000820 <BOARDTRX_Init+0x204>
 80007e8:	4b34      	ldr	r3, [pc, #208]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7f1b      	ldrb	r3, [r3, #28]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d116      	bne.n	8000820 <BOARDTRX_Init+0x204>
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <BOARDTRX_Init+0x2a0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	7d1b      	ldrb	r3, [r3, #20]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d111      	bne.n	8000820 <BOARDTRX_Init+0x204>
        brdState.status = BOARDTRX_ERROR;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
        brdState.errorTRX = BOARDTRX_INT;
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000804:	2200      	movs	r2, #0
 8000806:	70da      	strb	r2, [r3, #3]
        brdState.isNewError = 1;
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800080a:	2201      	movs	r2, #1
 800080c:	705a      	strb	r2, [r3, #1]
        return brdState;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000812:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000814:	c313      	stmia	r3!, {r0, r1, r4}
 8000816:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000818:	c313      	stmia	r3!, {r0, r1, r4}
 800081a:	6812      	ldr	r2, [r2, #0]
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	e047      	b.n	80008b0 <BOARDTRX_Init+0x294>
    }

    HAL_StatusTypeDef tmp = HAL_UART_Receive_DMA(brdHandle->uart, &brdUartRx, 1);
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <BOARDTRX_Init+0x2a0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	250b      	movs	r5, #11
 8000828:	197c      	adds	r4, r7, r5
 800082a:	4925      	ldr	r1, [pc, #148]	; (80008c0 <BOARDTRX_Init+0x2a4>)
 800082c:	2201      	movs	r2, #1
 800082e:	0018      	movs	r0, r3
 8000830:	f006 fd06 	bl	8007240 <HAL_UART_Receive_DMA>
 8000834:	0003      	movs	r3, r0
 8000836:	7023      	strb	r3, [r4, #0]

    if (tmp != HAL_OK) {
 8000838:	197b      	adds	r3, r7, r5
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d011      	beq.n	8000864 <BOARDTRX_Init+0x248>
        brdState.status = BOARDTRX_ERROR;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
        brdState.errorTRX = BOARDTRX_INT;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000848:	2200      	movs	r2, #0
 800084a:	70da      	strb	r2, [r3, #3]
        brdState.isNewError = 1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <BOARDTRX_Init+0x29c>)
 800084e:	2201      	movs	r2, #1
 8000850:	705a      	strb	r2, [r3, #1]
        return brdState;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000856:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000858:	c313      	stmia	r3!, {r0, r1, r4}
 800085a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800085c:	c313      	stmia	r3!, {r0, r1, r4}
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e025      	b.n	80008b0 <BOARDTRX_Init+0x294>
    }

    memset(brdRequestQueDataTx, 0, BOARDTRX_DATA_COUNT);
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <BOARDTRX_Init+0x2a8>)
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f007 fe7d 	bl	800856a <memset>
    memset(brdRequestQueDataRx, 0, BOARDTRX_DATA_COUNT);
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <BOARDTRX_Init+0x2ac>)
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f007 fe77 	bl	800856a <memset>
    memset(brdRequestQueCmdTx, 0, BOARDTRX_CMD_COUNT);
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <BOARDTRX_Init+0x2b0>)
 800087e:	2208      	movs	r2, #8
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f007 fe71 	bl	800856a <memset>
    memset(brdRequestQueCmdRx, 0, BOARDTRX_CMD_COUNT);
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <BOARDTRX_Init+0x2b4>)
 800088a:	2208      	movs	r2, #8
 800088c:	2100      	movs	r1, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f007 fe6b 	bl	800856a <memset>

    brdState.status = BOARDTRX_OK;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <BOARDTRX_Init+0x29c>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
    brdInitialised = 1;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <BOARDTRX_Init+0x2b8>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
    return brdState;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <BOARDTRX_Init+0x29c>)
 80008a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008a6:	c313      	stmia	r3!, {r0, r1, r4}
 80008a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008aa:	c313      	stmia	r3!, {r0, r1, r4}
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b004      	add	sp, #16
 80008b6:	bdb0      	pop	{r4, r5, r7, pc}
 80008b8:	2000067c 	.word	0x2000067c
 80008bc:	20000698 	.word	0x20000698
 80008c0:	2000069e 	.word	0x2000069e
 80008c4:	200008a4 	.word	0x200008a4
 80008c8:	200008c4 	.word	0x200008c4
 80008cc:	200008e4 	.word	0x200008e4
 80008d0:	200008ec 	.word	0x200008ec
 80008d4:	2000069c 	.word	0x2000069c

080008d8 <BOARDTRX_CmdSend>:
 * @brief adds cmd to que for processing
 * @param nr of cmd to add
 * @param id of the cmd
 * @param setId whether or not to set id manually, 1 - manually 0 - automatically
 */
BOARDTRX_Status BOARDTRX_CmdSend(uint8_t nr, uint8_t id, uint8_t setId) {
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	000c      	movs	r4, r1
 80008e2:	0010      	movs	r0, r2
 80008e4:	0019      	movs	r1, r3
 80008e6:	1cfb      	adds	r3, r7, #3
 80008e8:	1c22      	adds	r2, r4, #0
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	1cbb      	adds	r3, r7, #2
 80008ee:	1c02      	adds	r2, r0, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	1c7b      	adds	r3, r7, #1
 80008f4:	1c0a      	adds	r2, r1, #0
 80008f6:	701a      	strb	r2, [r3, #0]
    if (!brdInitialised) {
 80008f8:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <BOARDTRX_CmdSend+0x118>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10e      	bne.n	800091e <BOARDTRX_CmdSend+0x46>
        brdState.status = BOARDTRX_ERROR;
 8000900:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <BOARDTRX_CmdSend+0x11c>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 8000906:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <BOARDTRX_CmdSend+0x11c>)
 8000908:	2201      	movs	r2, #1
 800090a:	705a      	strb	r2, [r3, #1]
        return brdState;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a39      	ldr	r2, [pc, #228]	; (80009f4 <BOARDTRX_CmdSend+0x11c>)
 8000910:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000912:	c313      	stmia	r3!, {r0, r1, r4}
 8000914:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000916:	c313      	stmia	r3!, {r0, r1, r4}
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e063      	b.n	80009e6 <BOARDTRX_CmdSend+0x10e>
    }

    if (nr >= brdHandle->countCmdTx) {
 800091e:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	7d1b      	ldrb	r3, [r3, #20]
 8000924:	1cfa      	adds	r2, r7, #3
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	d30e      	bcc.n	800094a <BOARDTRX_CmdSend+0x72>
        brdState.status = BOARDTRX_ERROR;
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <BOARDTRX_CmdSend+0x11c>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <BOARDTRX_CmdSend+0x11c>)
 8000934:	2201      	movs	r2, #1
 8000936:	705a      	strb	r2, [r3, #1]
        return brdState;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a2e      	ldr	r2, [pc, #184]	; (80009f4 <BOARDTRX_CmdSend+0x11c>)
 800093c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800093e:	c313      	stmia	r3!, {r0, r1, r4}
 8000940:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000942:	c313      	stmia	r3!, {r0, r1, r4}
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e04d      	b.n	80009e6 <BOARDTRX_CmdSend+0x10e>
    }

    if(brdHandle->cmdTx[nr]->wasSent){
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	691a      	ldr	r2, [r3, #16]
 8000950:	1cfb      	adds	r3, r7, #3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	18d3      	adds	r3, r2, r3
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7b5b      	ldrb	r3, [r3, #13]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d015      	beq.n	800098c <BOARDTRX_CmdSend+0xb4>
        brdHandle->cmdTx[nr]->wasSent = 0;
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	1cfb      	adds	r3, r7, #3
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	735a      	strb	r2, [r3, #13]
        brdHandle->cmdTx[nr]->id++;
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	1cfb      	adds	r3, r7, #3
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7b1a      	ldrb	r2, [r3, #12]
 8000986:	3201      	adds	r2, #1
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	731a      	strb	r2, [r3, #12]
    }

    if(brdHandle->cmdTx[nr]->id == 0){
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	691a      	ldr	r2, [r3, #16]
 8000992:	1cfb      	adds	r3, r7, #3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	7b1b      	ldrb	r3, [r3, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10b      	bne.n	80009ba <BOARDTRX_CmdSend+0xe2>
        brdHandle->cmdTx[nr]->id++;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	691a      	ldr	r2, [r3, #16]
 80009a8:	1cfb      	adds	r3, r7, #3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	18d3      	adds	r3, r2, r3
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	7b1a      	ldrb	r2, [r3, #12]
 80009b4:	3201      	adds	r2, #1
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	731a      	strb	r2, [r3, #12]
    }

    if(setId){
 80009ba:	1c7b      	adds	r3, r7, #1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00a      	beq.n	80009d8 <BOARDTRX_CmdSend+0x100>
        brdHandle->cmdTx[nr]->id = id;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <BOARDTRX_CmdSend+0x120>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	691a      	ldr	r2, [r3, #16]
 80009c8:	1cfb      	adds	r3, r7, #3
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	18d3      	adds	r3, r2, r3
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1cba      	adds	r2, r7, #2
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	731a      	strb	r2, [r3, #12]
    }

    return BOARDTRX_AddToQue(BOARDTRX_CMD_TX, nr);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	1cfb      	adds	r3, r7, #3
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001a      	movs	r2, r3
 80009e0:	2102      	movs	r1, #2
 80009e2:	f000 fe99 	bl	8001718 <BOARDTRX_AddToQue>
}
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b003      	add	sp, #12
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	2000069c 	.word	0x2000069c
 80009f4:	2000067c 	.word	0x2000067c
 80009f8:	20000698 	.word	0x20000698

080009fc <BOARDTRX_CmdGetStatus>:
 * @Brief returns current TX CMD status
 * @param nr Nr of the CMD to return status of
 * @param clearStatus if set then on BOARDTRX_CMD_OK will clear it to BOARDTRX_CMD_DEF
 * @retval status of CMD
 */
BOARDTRX_CMD_Status BOARDTRX_CmdGetStatus(uint8_t nr) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	701a      	strb	r2, [r3, #0]
    if (nr < brdHandle->countCmdTx) {
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <BOARDTRX_CmdGetStatus+0x38>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	7d1b      	ldrb	r3, [r3, #20]
 8000a0e:	1dfa      	adds	r2, r7, #7
 8000a10:	7812      	ldrb	r2, [r2, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d209      	bcs.n	8000a2a <BOARDTRX_CmdGetStatus+0x2e>
        return brdHandle->cmdTx[nr]->status;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <BOARDTRX_CmdGetStatus+0x38>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	e000      	b.n	8000a2c <BOARDTRX_CmdGetStatus+0x30>
    }
    return BOARDTRX_CMD_DEF;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000698 	.word	0x20000698

08000a38 <BOARDTRX_DataRequest>:
    }

    return brdState;
}

BOARDTRX_Status BOARDTRX_DataRequest(uint8_t nr) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	000a      	movs	r2, r1
 8000a42:	1cfb      	adds	r3, r7, #3
 8000a44:	701a      	strb	r2, [r3, #0]
    if (!brdInitialised) {
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <BOARDTRX_DataRequest+0x78>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10e      	bne.n	8000a6c <BOARDTRX_DataRequest+0x34>
        brdState.status = BOARDTRX_ERROR;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <BOARDTRX_DataRequest+0x7c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <BOARDTRX_DataRequest+0x7c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	705a      	strb	r2, [r3, #1]
        return brdState;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <BOARDTRX_DataRequest+0x7c>)
 8000a5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a60:	c313      	stmia	r3!, {r0, r1, r4}
 8000a62:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a64:	c313      	stmia	r3!, {r0, r1, r4}
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e01c      	b.n	8000aa6 <BOARDTRX_DataRequest+0x6e>
    }

    if (nr >= brdHandle->countDataTx) {
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <BOARDTRX_DataRequest+0x80>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	1cfa      	adds	r2, r7, #3
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d30e      	bcc.n	8000a98 <BOARDTRX_DataRequest+0x60>
        brdState.status = BOARDTRX_ERROR;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <BOARDTRX_DataRequest+0x7c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <BOARDTRX_DataRequest+0x7c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	705a      	strb	r2, [r3, #1]
        return brdState;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <BOARDTRX_DataRequest+0x7c>)
 8000a8a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a8c:	c313      	stmia	r3!, {r0, r1, r4}
 8000a8e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a90:	c313      	stmia	r3!, {r0, r1, r4}
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e006      	b.n	8000aa6 <BOARDTRX_DataRequest+0x6e>
    }

    return BOARDTRX_AddToQue(BOARDTRX_DATA_TX, nr);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	1cfb      	adds	r3, r7, #3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f000 fe39 	bl	8001718 <BOARDTRX_AddToQue>
}
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b003      	add	sp, #12
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	2000069c 	.word	0x2000069c
 8000ab4:	2000067c 	.word	0x2000067c
 8000ab8:	20000698 	.word	0x20000698

08000abc <BOARDTRX_Loop>:

BOARDTRX_Status BOARDTRX_Loop() {
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    if (!brdInitialised) {
 8000ac4:	4b79      	ldr	r3, [pc, #484]	; (8000cac <BOARDTRX_Loop+0x1f0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10e      	bne.n	8000aea <BOARDTRX_Loop+0x2e>
        brdState.status = BOARDTRX_ERROR;
 8000acc:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <BOARDTRX_Loop+0x1f4>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
        brdState.isNewError = 1;
 8000ad2:	4b77      	ldr	r3, [pc, #476]	; (8000cb0 <BOARDTRX_Loop+0x1f4>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	705a      	strb	r2, [r3, #1]
        return brdState;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a75      	ldr	r2, [pc, #468]	; (8000cb0 <BOARDTRX_Loop+0x1f4>)
 8000adc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ade:	c313      	stmia	r3!, {r0, r1, r4}
 8000ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ae2:	c313      	stmia	r3!, {r0, r1, r4}
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e0db      	b.n	8000ca2 <BOARDTRX_Loop+0x1e6>
    }

    // process received data
    if (brdUartReceived) {
 8000aea:	4b72      	ldr	r3, [pc, #456]	; (8000cb4 <BOARDTRX_Loop+0x1f8>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <BOARDTRX_Loop+0x40>
        return BOARDTRX_ProcessRx();
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fa8b 	bl	8001010 <BOARDTRX_ProcessRx>
 8000afa:	e0d2      	b.n	8000ca2 <BOARDTRX_Loop+0x1e6>
    }

    // send data if any requested
    uint8_t tmp = BOARDTRX_GetFromQue(BOARDTRX_DATA_RX, 0);
 8000afc:	250f      	movs	r5, #15
 8000afe:	197c      	adds	r4, r7, r5
 8000b00:	2100      	movs	r1, #0
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fed2 	bl	80018ac <BOARDTRX_GetFromQue>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	7023      	strb	r3, [r4, #0]
    if (tmp != 255) {
 8000b0c:	002c      	movs	r4, r5
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2bff      	cmp	r3, #255	; 0xff
 8000b14:	d020      	beq.n	8000b58 <BOARDTRX_Loop+0x9c>
        BOARDTRX_ClearFromQue(BOARDTRX_DATA_RX, tmp);
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 ff59 	bl	80019d4 <BOARDTRX_ClearFromQue>
        return BOARDTRX_UART_Send(tmp, brdHandle->dataRx[tmp]->data, brdHandle->dataRx[tmp]->size);
 8000b22:	4b65      	ldr	r3, [pc, #404]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681c      	ldr	r4, [r3, #0]
 8000b36:	4b60      	ldr	r3, [pc, #384]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18d3      	adds	r3, r2, r3
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	791a      	ldrb	r2, [r3, #4]
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	7819      	ldrb	r1, [r3, #0]
 8000b4e:	0013      	movs	r3, r2
 8000b50:	0022      	movs	r2, r4
 8000b52:	f000 ff7b 	bl	8001a4c <BOARDTRX_UART_Send>
 8000b56:	e0a4      	b.n	8000ca2 <BOARDTRX_Loop+0x1e6>
    }

    // request data if any needed
    tmp = BOARDTRX_GetFromQue(BOARDTRX_DATA_TX, 0);
 8000b58:	250f      	movs	r5, #15
 8000b5a:	197c      	adds	r4, r7, r5
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 fea4 	bl	80018ac <BOARDTRX_GetFromQue>
 8000b64:	0003      	movs	r3, r0
 8000b66:	7023      	strb	r3, [r4, #0]
    while (1) {
        // dont return if did not do anything TODO
        if (tmp != 255) {
 8000b68:	002a      	movs	r2, r5
 8000b6a:	18bb      	adds	r3, r7, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2bff      	cmp	r3, #255	; 0xff
 8000b70:	d007      	beq.n	8000b82 <BOARDTRX_Loop+0xc6>
            return BOARDTRX_ProcessTx(BOARDTRX_DATA_TX, tmp);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	18bb      	adds	r3, r7, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f000 f89e 	bl	8000cbc <BOARDTRX_ProcessTx>
 8000b80:	e08f      	b.n	8000ca2 <BOARDTRX_Loop+0x1e6>
        } else {
            break;
 8000b82:	46c0      	nop			; (mov r8, r8)
        // get new request if already waiting current one
        tmp = BOARDTRX_GetFromQue(BOARDTRX_DATA_TX, tmp + 1);
    }

    // send cmd response if any requested
    tmp = BOARDTRX_GetFromQue(BOARDTRX_CMD_RX, 0);
 8000b84:	250f      	movs	r5, #15
 8000b86:	197c      	adds	r4, r7, r5
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f000 fe8e 	bl	80018ac <BOARDTRX_GetFromQue>
 8000b90:	0003      	movs	r3, r0
 8000b92:	7023      	strb	r3, [r4, #0]
    if (tmp != 255) {
 8000b94:	0029      	movs	r1, r5
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2bff      	cmp	r3, #255	; 0xff
 8000b9c:	d063      	beq.n	8000c66 <BOARDTRX_Loop+0x1aa>

        uint8_t response = BOARDTRX_RES_ACK;
 8000b9e:	200e      	movs	r0, #14
 8000ba0:	183b      	adds	r3, r7, r0
 8000ba2:	22aa      	movs	r2, #170	; 0xaa
 8000ba4:	701a      	strb	r2, [r3, #0]

        if (brdHandle->cmdRx[tmp]->status != BOARDTRX_CMD_NEW && brdHandle->cmdRx[tmp]->status != BOARDTRX_CMD_REP) {
 8000ba6:	4b44      	ldr	r3, [pc, #272]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	18d3      	adds	r3, r2, r3
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	7b1b      	ldrb	r3, [r3, #12]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d00d      	beq.n	8000bd8 <BOARDTRX_Loop+0x11c>
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	699a      	ldr	r2, [r3, #24]
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	7b1b      	ldrb	r3, [r3, #12]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d002      	beq.n	8000bd8 <BOARDTRX_Loop+0x11c>
            response = BOARDTRX_RES_NCK;
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	2255      	movs	r2, #85	; 0x55
 8000bd6:	701a      	strb	r2, [r3, #0]
        }

        if(brdHandle->cmdRx[tmp]->status == BOARDTRX_CMD_REP){
 8000bd8:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	699a      	ldr	r2, [r3, #24]
 8000bde:	230f      	movs	r3, #15
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	7b1b      	ldrb	r3, [r3, #12]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d103      	bne.n	8000bf8 <BOARDTRX_Loop+0x13c>
            response = BOARDTRX_RES_REP;
 8000bf0:	230e      	movs	r3, #14
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	225a      	movs	r2, #90	; 0x5a
 8000bf6:	701a      	strb	r2, [r3, #0]
        }

        // check wheter or not cmd is new, if is then callback
        if (brdHandle->cmdRx[tmp]->status == BOARDTRX_CMD_NEW) {
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	210f      	movs	r1, #15
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	18d3      	adds	r3, r2, r3
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	7b1b      	ldrb	r3, [r3, #12]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d114      	bne.n	8000c3a <BOARDTRX_Loop+0x17e>
            if (brdHandle->cmdRx[tmp]->CMD_CB != 0x00) {
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d009      	beq.n	8000c3a <BOARDTRX_Loop+0x17e>
                brdHandle->cmdRx[tmp]->CMD_CB();
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <BOARDTRX_Loop+0x1fc>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	699a      	ldr	r2, [r3, #24]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4798      	blx	r3
            }
        }

        BOARDTRX_ClearFromQue(BOARDTRX_CMD_RX, tmp);
 8000c3a:	240f      	movs	r4, #15
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	0019      	movs	r1, r3
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 fec6 	bl	80019d4 <BOARDTRX_ClearFromQue>
        tmp |= BOARDTRX_CMD_BYTE;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	193a      	adds	r2, r7, r4
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	430a      	orrs	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
        return BOARDTRX_UART_Send(tmp, &response, 1);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	230e      	movs	r3, #14
 8000c58:	18fa      	adds	r2, r7, r3
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	7819      	ldrb	r1, [r3, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f000 fef4 	bl	8001a4c <BOARDTRX_UART_Send>
        // get new request if already waiting current one
        tmp = BOARDTRX_GetFromQue(BOARDTRX_CMD_TX, tmp + 1);
    }

    return brdState;
}
 8000c64:	e01d      	b.n	8000ca2 <BOARDTRX_Loop+0x1e6>
    tmp = BOARDTRX_GetFromQue(BOARDTRX_CMD_TX, 0);
 8000c66:	250f      	movs	r5, #15
 8000c68:	197c      	adds	r4, r7, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f000 fe1d 	bl	80018ac <BOARDTRX_GetFromQue>
 8000c72:	0003      	movs	r3, r0
 8000c74:	7023      	strb	r3, [r4, #0]
        if (tmp != 255) {
 8000c76:	002a      	movs	r2, r5
 8000c78:	18bb      	adds	r3, r7, r2
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2bff      	cmp	r3, #255	; 0xff
 8000c7e:	d007      	beq.n	8000c90 <BOARDTRX_Loop+0x1d4>
            return BOARDTRX_ProcessTx(BOARDTRX_CMD_TX, tmp);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	18bb      	adds	r3, r7, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001a      	movs	r2, r3
 8000c88:	2102      	movs	r1, #2
 8000c8a:	f000 f817 	bl	8000cbc <BOARDTRX_ProcessTx>
 8000c8e:	e008      	b.n	8000ca2 <BOARDTRX_Loop+0x1e6>
            break;
 8000c90:	46c0      	nop			; (mov r8, r8)
    return brdState;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <BOARDTRX_Loop+0x1f4>)
 8000c96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c98:	c313      	stmia	r3!, {r0, r1, r4}
 8000c9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c9c:	c313      	stmia	r3!, {r0, r1, r4}
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	601a      	str	r2, [r3, #0]
}
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000069c 	.word	0x2000069c
 8000cb0:	2000067c 	.word	0x2000067c
 8000cb4:	2000069d 	.word	0x2000069d
 8000cb8:	20000698 	.word	0x20000698

08000cbc <BOARDTRX_ProcessTx>:

BOARDTRX_Status BOARDTRX_ProcessTx(BOARDTRX_TRX_Target target, uint8_t nr) {
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	1cfb      	adds	r3, r7, #3
 8000cca:	1c02      	adds	r2, r0, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	1cbb      	adds	r3, r7, #2
 8000cd0:	1c0a      	adds	r2, r1, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    uint32_t timeout;
    uint8_t retries;
    uint8_t tmp = nr;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	1cba      	adds	r2, r7, #2
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	701a      	strb	r2, [r3, #0]

    // is new transfer ?
    if (target == BOARDTRX_DATA_TX) {
 8000cde:	1cfb      	adds	r3, r7, #3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <BOARDTRX_ProcessTx+0x40>
        timeout = brdHandle->dataTx[nr]->timeout;
 8000ce6:	4bc8      	ldr	r3, [pc, #800]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	1cbb      	adds	r3, r7, #2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e009      	b.n	8000d10 <BOARDTRX_ProcessTx+0x54>
    } else {
        timeout = brdHandle->cmdTx[nr]->timeout;
 8000cfc:	4bc2      	ldr	r3, [pc, #776]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	1cbb      	adds	r3, r7, #2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	60fb      	str	r3, [r7, #12]
    }

    if (timeout == 0) {
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d174      	bne.n	8000e00 <BOARDTRX_ProcessTx+0x144>
        if (target == BOARDTRX_DATA_TX) {
 8000d16:	1cfb      	adds	r3, r7, #3
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <BOARDTRX_ProcessTx+0x7c>
            timeout = brdHandle->dataTx[nr]->retries = 0;
 8000d1e:	4bba      	ldr	r3, [pc, #744]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	1cbb      	adds	r3, r7, #2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e00b      	b.n	8000d50 <BOARDTRX_ProcessTx+0x94>
        } else {
            timeout = brdHandle->cmdTx[nr]->retries = 0;
 8000d38:	4bb3      	ldr	r3, [pc, #716]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	1cbb      	adds	r3, r7, #2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	719a      	strb	r2, [r3, #6]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
        }

        timeout = HAL_GetTick() + brdHandle->rxTimeout;
 8000d50:	f003 fd08 	bl	8004764 <HAL_GetTick>
 8000d54:	0002      	movs	r2, r0
 8000d56:	4bac      	ldr	r3, [pc, #688]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	18d3      	adds	r3, r2, r3
 8000d5e:	60fb      	str	r3, [r7, #12]
        if (target == BOARDTRX_DATA_TX) {
 8000d60:	1cfb      	adds	r3, r7, #3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10c      	bne.n	8000d82 <BOARDTRX_ProcessTx+0xc6>
            timeout = brdHandle->dataTx[nr]->timeout = timeout;
 8000d68:	4ba7      	ldr	r3, [pc, #668]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	1cbb      	adds	r3, r7, #2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e00b      	b.n	8000d9a <BOARDTRX_ProcessTx+0xde>
        } else {
            timeout = brdHandle->cmdTx[nr]->timeout = timeout;
 8000d82:	4ba1      	ldr	r3, [pc, #644]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	1cbb      	adds	r3, r7, #2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	18d3      	adds	r3, r2, r3
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	60fb      	str	r3, [r7, #12]
        }

        tmp += BOARDTRX_REQUEST_BYTE;
 8000d9a:	210a      	movs	r1, #10
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	3b80      	subs	r3, #128	; 0x80
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	701a      	strb	r2, [r3, #0]
        if (target == BOARDTRX_CMD_TX) {
 8000da8:	1cfb      	adds	r3, r7, #3
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d11e      	bne.n	8000dee <BOARDTRX_ProcessTx+0x132>
            tmp += BOARDTRX_CMD_BYTE;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	3340      	adds	r3, #64	; 0x40
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	701a      	strb	r2, [r3, #0]
            return BOARDTRX_UART_Send(tmp, brdHandle->cmdTx[nr]->data, brdHandle->cmdTx[nr]->size);
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	7819      	ldrb	r1, [r3, #0]
 8000dc0:	4b91      	ldr	r3, [pc, #580]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	1cbb      	adds	r3, r7, #2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681c      	ldr	r4, [r3, #0]
 8000dd2:	4b8d      	ldr	r3, [pc, #564]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	791b      	ldrb	r3, [r3, #4]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	0022      	movs	r2, r4
 8000de8:	f000 fe30 	bl	8001a4c <BOARDTRX_UART_Send>
 8000dec:	e108      	b.n	8001000 <BOARDTRX_ProcessTx+0x344>
        }
        return BOARDTRX_UART_Send(tmp, &tmp, 0);
 8000dee:	220a      	movs	r2, #10
 8000df0:	18bb      	adds	r3, r7, r2
 8000df2:	7819      	ldrb	r1, [r3, #0]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	18ba      	adds	r2, r7, r2
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f000 fe27 	bl	8001a4c <BOARDTRX_UART_Send>
 8000dfe:	e0ff      	b.n	8001000 <BOARDTRX_ProcessTx+0x344>

        // or was requested already ?
    } else if (brdHandle->dataTx[tmp]->timeout < HAL_GetTick()) {
 8000e00:	4b81      	ldr	r3, [pc, #516]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	230a      	movs	r3, #10
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689c      	ldr	r4, [r3, #8]
 8000e14:	f003 fca6 	bl	8004764 <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	d300      	bcc.n	8000e20 <BOARDTRX_ProcessTx+0x164>
 8000e1e:	e0e4      	b.n	8000fea <BOARDTRX_ProcessTx+0x32e>
        if (target == BOARDTRX_DATA_TX) {
 8000e20:	1cfb      	adds	r3, r7, #3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d119      	bne.n	8000e5c <BOARDTRX_ProcessTx+0x1a0>
            timeout = brdHandle->dataTx[nr]->retries++;
 8000e28:	4b77      	ldr	r3, [pc, #476]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	1cbb      	adds	r3, r7, #2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	7993      	ldrb	r3, [r2, #6]
 8000e3a:	1c59      	adds	r1, r3, #1
 8000e3c:	b2c9      	uxtb	r1, r1
 8000e3e:	7191      	strb	r1, [r2, #6]
 8000e40:	60fb      	str	r3, [r7, #12]
            retries = brdHandle->dataTx[nr]->retries;
 8000e42:	4b71      	ldr	r3, [pc, #452]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	1cbb      	adds	r3, r7, #2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	18d3      	adds	r3, r2, r3
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	230b      	movs	r3, #11
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	7992      	ldrb	r2, [r2, #6]
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e018      	b.n	8000e8e <BOARDTRX_ProcessTx+0x1d2>
        } else {
            timeout = brdHandle->cmdTx[nr]->retries++;
 8000e5c:	4b6a      	ldr	r3, [pc, #424]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	7993      	ldrb	r3, [r2, #6]
 8000e6e:	1c59      	adds	r1, r3, #1
 8000e70:	b2c9      	uxtb	r1, r1
 8000e72:	7191      	strb	r1, [r2, #6]
 8000e74:	60fb      	str	r3, [r7, #12]
            retries = brdHandle->cmdTx[nr]->retries;
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	1cbb      	adds	r3, r7, #2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	230b      	movs	r3, #11
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	7992      	ldrb	r2, [r2, #6]
 8000e8c:	701a      	strb	r2, [r3, #0]
        }
        if (retries >= brdHandle->rxRetries) {
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2224      	movs	r2, #36	; 0x24
 8000e94:	5c9b      	ldrb	r3, [r3, r2]
 8000e96:	220b      	movs	r2, #11
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	7812      	ldrb	r2, [r2, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d34c      	bcc.n	8000f3a <BOARDTRX_ProcessTx+0x27e>
            brdState.isNewError = 1;
 8000ea0:	4b5a      	ldr	r3, [pc, #360]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	705a      	strb	r2, [r3, #1]
            brdState.errorsTimeout += 1;
 8000ea6:	4b59      	ldr	r3, [pc, #356]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000eae:	611a      	str	r2, [r3, #16]
            brdState.errorDataNr = tmp;
 8000eb0:	210a      	movs	r1, #10
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	4b55      	ldr	r3, [pc, #340]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000eb8:	709a      	strb	r2, [r3, #2]
            brdState.status = BOARDTRX_TIMEOUT;
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	701a      	strb	r2, [r3, #0]
            brdState.errorTRX = BOARDTRX_RX;
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	70da      	strb	r2, [r3, #3]
            // timed out clear request
            brdHandle->dataTx[tmp]->timeout = 0;
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	18d3      	adds	r3, r2, r3
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
            if (target == BOARDTRX_DATA_TX) {
 8000eda:	1cfb      	adds	r3, r7, #3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d111      	bne.n	8000f06 <BOARDTRX_ProcessTx+0x24a>
                BOARDTRX_ClearFromQue(BOARDTRX_DATA_TX, tmp);
 8000ee2:	000c      	movs	r4, r1
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	0019      	movs	r1, r3
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fd72 	bl	80019d4 <BOARDTRX_ClearFromQue>
                brdHandle->dataTx[tmp]->status = BOARDTRX_CMD_TIM;
 8000ef0:	4b45      	ldr	r3, [pc, #276]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	18d3      	adds	r3, r2, r3
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2207      	movs	r2, #7
 8000f02:	715a      	strb	r2, [r3, #5]
 8000f04:	e010      	b.n	8000f28 <BOARDTRX_ProcessTx+0x26c>
            } else {
                BOARDTRX_ClearFromQue(BOARDTRX_CMD_TX, tmp);
 8000f06:	240a      	movs	r4, #10
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f000 fd60 	bl	80019d4 <BOARDTRX_ClearFromQue>
                brdHandle->cmdTx[tmp]->status = BOARDTRX_CMD_TIM;
 8000f14:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2207      	movs	r2, #7
 8000f26:	715a      	strb	r2, [r3, #5]
            }

            return brdState;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a38      	ldr	r2, [pc, #224]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000f2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f2e:	c313      	stmia	r3!, {r0, r1, r4}
 8000f30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f32:	c313      	stmia	r3!, {r0, r1, r4}
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e062      	b.n	8001000 <BOARDTRX_ProcessTx+0x344>
        } else {
            // send new request to target
            timeout = HAL_GetTick() + brdHandle->rxTimeout;
 8000f3a:	f003 fc13 	bl	8004764 <HAL_GetTick>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	60fb      	str	r3, [r7, #12]
            if (target == BOARDTRX_DATA_TX) {
 8000f4a:	1cfb      	adds	r3, r7, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <BOARDTRX_ProcessTx+0x2b0>
                timeout = brdHandle->dataTx[nr]->timeout = timeout;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	1cbb      	adds	r3, r7, #2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	18d3      	adds	r3, r2, r3
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	e00b      	b.n	8000f84 <BOARDTRX_ProcessTx+0x2c8>
            } else {
                timeout = brdHandle->cmdTx[nr]->timeout = timeout;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	1cbb      	adds	r3, r7, #2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	60fb      	str	r3, [r7, #12]
            }

            tmp += BOARDTRX_REQUEST_BYTE;
 8000f84:	210a      	movs	r1, #10
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3b80      	subs	r3, #128	; 0x80
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	701a      	strb	r2, [r3, #0]
            if (target == BOARDTRX_CMD_TX) {
 8000f92:	1cfb      	adds	r3, r7, #3
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d11e      	bne.n	8000fd8 <BOARDTRX_ProcessTx+0x31c>
                tmp += BOARDTRX_CMD_BYTE;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3340      	adds	r3, #64	; 0x40
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
                return BOARDTRX_UART_Send(tmp, brdHandle->cmdTx[nr]->data, brdHandle->cmdTx[nr]->size);
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	7819      	ldrb	r1, [r3, #0]
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	1cbb      	adds	r3, r7, #2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	18d3      	adds	r3, r2, r3
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681c      	ldr	r4, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <BOARDTRX_ProcessTx+0x34c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	1cbb      	adds	r3, r7, #2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	18d3      	adds	r3, r2, r3
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	0022      	movs	r2, r4
 8000fd2:	f000 fd3b 	bl	8001a4c <BOARDTRX_UART_Send>
 8000fd6:	e013      	b.n	8001000 <BOARDTRX_ProcessTx+0x344>
            }
            return BOARDTRX_UART_Send(tmp, &tmp, 0);
 8000fd8:	220a      	movs	r2, #10
 8000fda:	18bb      	adds	r3, r7, r2
 8000fdc:	7819      	ldrb	r1, [r3, #0]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	18ba      	adds	r2, r7, r2
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f000 fd32 	bl	8001a4c <BOARDTRX_UART_Send>
 8000fe8:	e00a      	b.n	8001000 <BOARDTRX_ProcessTx+0x344>
        }
    }

    brdState.status = BOARDTRX_OK;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
    return brdState;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a06      	ldr	r2, [pc, #24]	; (800100c <BOARDTRX_ProcessTx+0x350>)
 8000ff4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ff6:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ffa:	c313      	stmia	r3!, {r0, r1, r4}
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	46bd      	mov	sp, r7
 8001004:	b005      	add	sp, #20
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	20000698 	.word	0x20000698
 800100c:	2000067c 	.word	0x2000067c

08001010 <BOARDTRX_ProcessRx>:

BOARDTRX_Status BOARDTRX_ProcessRx() {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    brdUartReceived = 0;
 8001018:	4bdb      	ldr	r3, [pc, #876]	; (8001388 <BOARDTRX_ProcessRx+0x378>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]

    // sanity check
    if (brdUartRxSize == 0) {
 800101e:	4bdb      	ldr	r3, [pc, #876]	; (800138c <BOARDTRX_ProcessRx+0x37c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d119      	bne.n	800105a <BOARDTRX_ProcessRx+0x4a>
        brdState.isNewError = 1;
 8001026:	4bda      	ldr	r3, [pc, #872]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001028:	2201      	movs	r2, #1
 800102a:	705a      	strb	r2, [r3, #1]
        brdState.errorsRX += 1;
 800102c:	4bd8      	ldr	r3, [pc, #864]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	4bd7      	ldr	r3, [pc, #860]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001034:	609a      	str	r2, [r3, #8]
        brdState.errorDataNr = 255;
 8001036:	4bd6      	ldr	r3, [pc, #856]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	709a      	strb	r2, [r3, #2]
        brdState.status = BOARDTRX_ERROR_CMD;
 800103c:	4bd4      	ldr	r3, [pc, #848]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800103e:	2206      	movs	r2, #6
 8001040:	701a      	strb	r2, [r3, #0]
        brdState.errorTRX = BOARDTRX_RX;
 8001042:	4bd3      	ldr	r3, [pc, #844]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001044:	2202      	movs	r2, #2
 8001046:	70da      	strb	r2, [r3, #3]
        return brdState;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4ad1      	ldr	r2, [pc, #836]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800104c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800104e:	c313      	stmia	r3!, {r0, r1, r4}
 8001050:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001052:	c313      	stmia	r3!, {r0, r1, r4}
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e2d5      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
    }

    // check crc
    if (BOARDTRX_CheckCRC(brdUartRxBuf, brdUartRxSize) == 0) {
 800105a:	4bcc      	ldr	r3, [pc, #816]	; (800138c <BOARDTRX_ProcessRx+0x37c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4bcc      	ldr	r3, [pc, #816]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fadf 	bl	8001628 <BOARDTRX_CheckCRC>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d119      	bne.n	80010a2 <BOARDTRX_ProcessRx+0x92>
        brdState.isNewError = 1;
 800106e:	4bc8      	ldr	r3, [pc, #800]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001070:	2201      	movs	r2, #1
 8001072:	705a      	strb	r2, [r3, #1]
        brdState.errorsCRC += 1;
 8001074:	4bc6      	ldr	r3, [pc, #792]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	4bc5      	ldr	r3, [pc, #788]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800107c:	605a      	str	r2, [r3, #4]
        brdState.errorDataNr = 255;
 800107e:	4bc4      	ldr	r3, [pc, #784]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001080:	22ff      	movs	r2, #255	; 0xff
 8001082:	709a      	strb	r2, [r3, #2]
        brdState.status = BOARDTRX_ERROR_CRC;
 8001084:	4bc2      	ldr	r3, [pc, #776]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001086:	2205      	movs	r2, #5
 8001088:	701a      	strb	r2, [r3, #0]
        brdState.errorTRX = BOARDTRX_RX;
 800108a:	4bc1      	ldr	r3, [pc, #772]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800108c:	2202      	movs	r2, #2
 800108e:	70da      	strb	r2, [r3, #3]
        return brdState;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4abf      	ldr	r2, [pc, #764]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001094:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001096:	c313      	stmia	r3!, {r0, r1, r4}
 8001098:	ca13      	ldmia	r2!, {r0, r1, r4}
 800109a:	c313      	stmia	r3!, {r0, r1, r4}
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e2b1      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
    }

    uint8_t rqCmd = brdUartRxBuf[1] & (~BOARDTRX_REQUEST_BYTE);
 80010a2:	4bbc      	ldr	r3, [pc, #752]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80010a4:	785a      	ldrb	r2, [r3, #1]
 80010a6:	200f      	movs	r0, #15
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	217f      	movs	r1, #127	; 0x7f
 80010ac:	400a      	ands	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]
    rqCmd = rqCmd & (~BOARDTRX_CMD_BYTE);
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	183a      	adds	r2, r7, r0
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	2140      	movs	r1, #64	; 0x40
 80010b8:	438a      	bics	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]

    // check if requesting data or sending to us
    if (brdUartRxBuf[1] & BOARDTRX_REQUEST_BYTE) {
 80010bc:	4bb5      	ldr	r3, [pc, #724]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db00      	blt.n	80010c8 <BOARDTRX_ProcessRx+0xb8>
 80010c6:	e0f9      	b.n	80012bc <BOARDTRX_ProcessRx+0x2ac>
        // CMD request
        if (brdUartRxBuf[1] & BOARDTRX_CMD_BYTE) {
 80010c8:	4bb2      	ldr	r3, [pc, #712]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	001a      	movs	r2, r3
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <BOARDTRX_ProcessRx+0xc6>
 80010d4:	e0b6      	b.n	8001244 <BOARDTRX_ProcessRx+0x234>
            uint8_t id = brdUartRxBuf[2];
 80010d6:	230a      	movs	r3, #10
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	4aae      	ldr	r2, [pc, #696]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80010dc:	7892      	ldrb	r2, [r2, #2]
 80010de:	701a      	strb	r2, [r3, #0]
            // is in bounds ?
            if (rqCmd >= brdHandle->countCmdRx) {
 80010e0:	4bad      	ldr	r3, [pc, #692]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	7f1b      	ldrb	r3, [r3, #28]
 80010e6:	0001      	movs	r1, r0
 80010e8:	187a      	adds	r2, r7, r1
 80010ea:	7812      	ldrb	r2, [r2, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d324      	bcc.n	800113a <BOARDTRX_ProcessRx+0x12a>
                brdState.isNewError = 1;
 80010f0:	4ba7      	ldr	r3, [pc, #668]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 80010f6:	4ba6      	ldr	r3, [pc, #664]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	4ba4      	ldr	r3, [pc, #656]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 80010fe:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = brdUartRxBuf[1];
 8001100:	4ba4      	ldr	r3, [pc, #656]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 8001102:	785a      	ldrb	r2, [r3, #1]
 8001104:	4ba2      	ldr	r3, [pc, #648]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001106:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 8001108:	4ba1      	ldr	r3, [pc, #644]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800110a:	2206      	movs	r2, #6
 800110c:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 800110e:	4ba0      	ldr	r3, [pc, #640]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001110:	2202      	movs	r2, #2
 8001112:	70da      	strb	r2, [r3, #3]
                brdHandle->cmdRx[rqCmd]->status = BOARDTRX_CMD_NCK;
 8001114:	4ba0      	ldr	r3, [pc, #640]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	187b      	adds	r3, r7, r1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2203      	movs	r2, #3
 8001126:	731a      	strb	r2, [r3, #12]
                return brdState;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a99      	ldr	r2, [pc, #612]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800112c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800112e:	c313      	stmia	r3!, {r0, r1, r4}
 8001130:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001132:	c313      	stmia	r3!, {r0, r1, r4}
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e265      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            }

            // is size correct ?
            if (brdHandle->cmdRx[rqCmd]->size != (brdUartRxSize - BOARDTRX_CMD_HEADER_SIZE)) {
 800113a:	4b97      	ldr	r3, [pc, #604]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	699a      	ldr	r2, [r3, #24]
 8001140:	210f      	movs	r1, #15
 8001142:	187b      	adds	r3, r7, r1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	001a      	movs	r2, r3
 8001150:	4b8e      	ldr	r3, [pc, #568]	; (800138c <BOARDTRX_ProcessRx+0x37c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b04      	subs	r3, #4
 8001156:	429a      	cmp	r2, r3
 8001158:	d024      	beq.n	80011a4 <BOARDTRX_ProcessRx+0x194>
                brdState.isNewError = 1;
 800115a:	4b8d      	ldr	r3, [pc, #564]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800115c:	2201      	movs	r2, #1
 800115e:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 8001160:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	4b8a      	ldr	r3, [pc, #552]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001168:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = rqCmd;
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800116c:	187a      	adds	r2, r7, r1
 800116e:	7812      	ldrb	r2, [r2, #0]
 8001170:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 8001172:	4b87      	ldr	r3, [pc, #540]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001174:	2206      	movs	r2, #6
 8001176:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 8001178:	4b85      	ldr	r3, [pc, #532]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800117a:	2202      	movs	r2, #2
 800117c:	70da      	strb	r2, [r3, #3]
                brdHandle->cmdRx[rqCmd]->status = BOARDTRX_CMD_NCK;
 800117e:	4b86      	ldr	r3, [pc, #536]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	187b      	adds	r3, r7, r1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2203      	movs	r2, #3
 8001190:	731a      	strb	r2, [r3, #12]
                return brdState;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a7e      	ldr	r2, [pc, #504]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001196:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001198:	c313      	stmia	r3!, {r0, r1, r4}
 800119a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800119c:	c313      	stmia	r3!, {r0, r1, r4}
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e230      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            }

            if (id != brdHandle->cmdRx[rqCmd]->id) {
 80011a4:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	210f      	movs	r1, #15
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7b5b      	ldrb	r3, [r3, #13]
 80011b8:	200a      	movs	r0, #10
 80011ba:	183a      	adds	r2, r7, r0
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d02c      	beq.n	800121c <BOARDTRX_ProcessRx+0x20c>
                brdHandle->cmdRx[rqCmd]->status = BOARDTRX_CMD_NEW;
 80011c2:	4b75      	ldr	r3, [pc, #468]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	18d3      	adds	r3, r2, r3
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	731a      	strb	r2, [r3, #12]
                brdHandle->cmdRx[rqCmd]->id = id;
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	18d3      	adds	r3, r2, r3
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	183a      	adds	r2, r7, r0
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	735a      	strb	r2, [r3, #13]
                memcpy(brdHandle->cmdRx[rqCmd]->data, &brdUartRxBuf[3], brdHandle->cmdRx[rqCmd]->size);
 80011ec:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	18d3      	adds	r3, r2, r3
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	4b66      	ldr	r3, [pc, #408]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	187b      	adds	r3, r7, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	001a      	movs	r2, r3
 8001212:	4b62      	ldr	r3, [pc, #392]	; (800139c <BOARDTRX_ProcessRx+0x38c>)
 8001214:	0019      	movs	r1, r3
 8001216:	f007 f99f 	bl	8008558 <memcpy>
 800121a:	e00a      	b.n	8001232 <BOARDTRX_ProcessRx+0x222>
            } else {
                brdHandle->cmdRx[rqCmd]->status = BOARDTRX_CMD_REP;
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	18d3      	adds	r3, r2, r3
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2202      	movs	r2, #2
 8001230:	731a      	strb	r2, [r3, #12]
            }
            return BOARDTRX_AddToQue(BOARDTRX_CMD_RX, rqCmd);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001a      	movs	r2, r3
 800123c:	2103      	movs	r1, #3
 800123e:	f000 fa6b 	bl	8001718 <BOARDTRX_AddToQue>
 8001242:	e1e0      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
        } else {
            uint8_t rqCmd = brdUartRxBuf[1] & (~BOARDTRX_REQUEST_BYTE);
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 8001246:	785a      	ldrb	r2, [r3, #1]
 8001248:	200b      	movs	r0, #11
 800124a:	183b      	adds	r3, r7, r0
 800124c:	217f      	movs	r1, #127	; 0x7f
 800124e:	400a      	ands	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
            // is in bounds ?
            if (rqCmd >= brdHandle->countDataRx) {
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	183a      	adds	r2, r7, r0
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d31a      	bcc.n	8001296 <BOARDTRX_ProcessRx+0x286>
                brdState.isNewError = 1;
 8001260:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001262:	2201      	movs	r2, #1
 8001264:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800126e:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = brdUartRxBuf[1];
 8001270:	4b48      	ldr	r3, [pc, #288]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001276:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800127a:	2206      	movs	r2, #6
 800127c:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001280:	2202      	movs	r2, #2
 8001282:	70da      	strb	r2, [r3, #3]
                return brdState;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a42      	ldr	r2, [pc, #264]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800128a:	c313      	stmia	r3!, {r0, r1, r4}
 800128c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800128e:	c313      	stmia	r3!, {r0, r1, r4}
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e1b7      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            }

            brdHandle->dataRx[rqCmd]->wasRequested = 1;
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	210b      	movs	r1, #11
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	715a      	strb	r2, [r3, #5]
            return BOARDTRX_AddToQue(BOARDTRX_DATA_RX, rqCmd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001a      	movs	r2, r3
 80012b4:	2101      	movs	r1, #1
 80012b6:	f000 fa2f 	bl	8001718 <BOARDTRX_AddToQue>
 80012ba:	e1a4      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
        }
    } else {
        if (brdUartRxBuf[1] & BOARDTRX_CMD_BYTE) {
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	001a      	movs	r2, r3
 80012c2:	2340      	movs	r3, #64	; 0x40
 80012c4:	4013      	ands	r3, r2
 80012c6:	d100      	bne.n	80012ca <BOARDTRX_ProcessRx+0x2ba>
 80012c8:	e0e1      	b.n	800148e <BOARDTRX_ProcessRx+0x47e>
            // processing CMD response, should have ACK or NCK in response
            uint8_t id = brdUartRxBuf[2];
 80012ca:	240d      	movs	r4, #13
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	4a31      	ldr	r2, [pc, #196]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80012d0:	7892      	ldrb	r2, [r2, #2]
 80012d2:	701a      	strb	r2, [r3, #0]
            uint8_t response = brdUartRxBuf[3];
 80012d4:	230c      	movs	r3, #12
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 80012da:	78d2      	ldrb	r2, [r2, #3]
 80012dc:	701a      	strb	r2, [r3, #0]

            BOARDTRX_ClearFromQue(BOARDTRX_CMD_TX, rqCmd);
 80012de:	250f      	movs	r5, #15
 80012e0:	197b      	adds	r3, r7, r5
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	0019      	movs	r1, r3
 80012e6:	2002      	movs	r0, #2
 80012e8:	f000 fb74 	bl	80019d4 <BOARDTRX_ClearFromQue>

            // id check, should match
            if (id != brdHandle->cmdTx[rqCmd]->id) {
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	7b1b      	ldrb	r3, [r3, #12]
 80012fe:	193a      	adds	r2, r7, r4
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d01a      	beq.n	800133c <BOARDTRX_ProcessRx+0x32c>
                brdState.isNewError = 1;
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001308:	2201      	movs	r2, #1
 800130a:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001314:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = brdUartRxBuf[1];
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <BOARDTRX_ProcessRx+0x384>)
 8001318:	785a      	ldrb	r2, [r3, #1]
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800131c:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001320:	2206      	movs	r2, #6
 8001322:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001326:	2202      	movs	r2, #2
 8001328:	70da      	strb	r2, [r3, #3]
                return brdState;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800132e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001330:	c313      	stmia	r3!, {r0, r1, r4}
 8001332:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001334:	c313      	stmia	r3!, {r0, r1, r4}
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e164      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            }

            // response check
            if (response == BOARDTRX_RES_ACK) {
 800133c:	230c      	movs	r3, #12
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2baa      	cmp	r3, #170	; 0xaa
 8001344:	d12c      	bne.n	80013a0 <BOARDTRX_ProcessRx+0x390>
                brdHandle->cmdTx[rqCmd]->status = BOARDTRX_CMD_OK;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	210f      	movs	r1, #15
 800134e:	187b      	adds	r3, r7, r1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	18d3      	adds	r3, r2, r3
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2205      	movs	r2, #5
 800135a:	715a      	strb	r2, [r3, #5]
                brdHandle->cmdTx[rqCmd]->wasSent = 1;
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <BOARDTRX_ProcessRx+0x388>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	187b      	adds	r3, r7, r1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2201      	movs	r2, #1
 800136e:	735a      	strb	r2, [r3, #13]
                brdState.status = BOARDTRX_OK;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
                return brdState;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <BOARDTRX_ProcessRx+0x380>)
 800137a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800137c:	c313      	stmia	r3!, {r0, r1, r4}
 800137e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001380:	c313      	stmia	r3!, {r0, r1, r4}
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e13e      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
 8001388:	2000069d 	.word	0x2000069d
 800138c:	200008a0 	.word	0x200008a0
 8001390:	2000067c 	.word	0x2000067c
 8001394:	200006a0 	.word	0x200006a0
 8001398:	20000698 	.word	0x20000698
 800139c:	200006a3 	.word	0x200006a3
            } else if (response == BOARDTRX_RES_NCK) {
 80013a0:	230c      	movs	r3, #12
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b55      	cmp	r3, #85	; 0x55
 80013a8:	d125      	bne.n	80013f6 <BOARDTRX_ProcessRx+0x3e6>
                brdHandle->cmdTx[rqCmd]->status = BOARDTRX_CMD_NOK;
 80013aa:	4b99      	ldr	r3, [pc, #612]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2206      	movs	r2, #6
 80013be:	715a      	strb	r2, [r3, #5]
                brdState.isNewError = 1;
 80013c0:	4b94      	ldr	r3, [pc, #592]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	4b91      	ldr	r3, [pc, #580]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013ce:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = brdUartRxBuf[1];
 80013d0:	4b91      	ldr	r3, [pc, #580]	; (8001618 <BOARDTRX_ProcessRx+0x608>)
 80013d2:	785a      	ldrb	r2, [r3, #1]
 80013d4:	4b8f      	ldr	r3, [pc, #572]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013d6:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 80013d8:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013da:	2206      	movs	r2, #6
 80013dc:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 80013de:	4b8d      	ldr	r3, [pc, #564]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	70da      	strb	r2, [r3, #3]
                return brdState;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a8b      	ldr	r2, [pc, #556]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80013e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013ea:	c313      	stmia	r3!, {r0, r1, r4}
 80013ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013ee:	c313      	stmia	r3!, {r0, r1, r4}
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e107      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            } else if (response == BOARDTRX_RES_REP) {
 80013f6:	230c      	movs	r3, #12
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b5a      	cmp	r3, #90	; 0x5a
 80013fe:	d120      	bne.n	8001442 <BOARDTRX_ProcessRx+0x432>
                brdHandle->cmdTx[rqCmd]->status = BOARDTRX_CMD_REP;
 8001400:	4b83      	ldr	r3, [pc, #524]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	210f      	movs	r1, #15
 8001408:	187b      	adds	r3, r7, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	18d3      	adds	r3, r2, r3
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2202      	movs	r2, #2
 8001414:	715a      	strb	r2, [r3, #5]
                brdHandle->cmdTx[rqCmd]->wasSent = 1;
 8001416:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	18d3      	adds	r3, r2, r3
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	735a      	strb	r2, [r3, #13]
                brdState.status = BOARDTRX_OK;
 800142a:	4b7a      	ldr	r3, [pc, #488]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
                return brdState;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a78      	ldr	r2, [pc, #480]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001434:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001436:	c313      	stmia	r3!, {r0, r1, r4}
 8001438:	ca13      	ldmia	r2!, {r0, r1, r4}
 800143a:	c313      	stmia	r3!, {r0, r1, r4}
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e0e1      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            } else {
                brdHandle->cmdTx[rqCmd]->status = BOARDTRX_CMD_NOK;
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	230f      	movs	r3, #15
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2206      	movs	r2, #6
 8001456:	715a      	strb	r2, [r3, #5]
                brdState.isNewError = 1;
 8001458:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 800145a:	2201      	movs	r2, #1
 800145c:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 800145e:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001466:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = brdUartRxBuf[1];
 8001468:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <BOARDTRX_ProcessRx+0x608>)
 800146a:	785a      	ldrb	r2, [r3, #1]
 800146c:	4b69      	ldr	r3, [pc, #420]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 800146e:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001472:	2206      	movs	r2, #6
 8001474:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001478:	2202      	movs	r2, #2
 800147a:	70da      	strb	r2, [r3, #3]
                return brdState;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a65      	ldr	r2, [pc, #404]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001480:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001482:	c313      	stmia	r3!, {r0, r1, r4}
 8001484:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001486:	c313      	stmia	r3!, {r0, r1, r4}
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e0bb      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
//            }
//
//            brdState.status = BOARDTRX_OK;
//            return brdState;
        } else {
            uint8_t rqCmd = brdUartRxBuf[1];
 800148e:	210e      	movs	r1, #14
 8001490:	187b      	adds	r3, r7, r1
 8001492:	4a61      	ldr	r2, [pc, #388]	; (8001618 <BOARDTRX_ProcessRx+0x608>)
 8001494:	7852      	ldrb	r2, [r2, #1]
 8001496:	701a      	strb	r2, [r3, #0]

            // is in bounds ?
            if (rqCmd >= brdHandle->countDataTx) {
 8001498:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	791b      	ldrb	r3, [r3, #4]
 800149e:	187a      	adds	r2, r7, r1
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d31a      	bcc.n	80014dc <BOARDTRX_ProcessRx+0x4cc>
                brdState.isNewError = 1;
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 80014ac:	4b59      	ldr	r3, [pc, #356]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	4b58      	ldr	r3, [pc, #352]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014b4:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = rqCmd;
 80014b6:	4b57      	ldr	r3, [pc, #348]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014b8:	187a      	adds	r2, r7, r1
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014c0:	2206      	movs	r2, #6
 80014c2:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	70da      	strb	r2, [r3, #3]
                return brdState;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a51      	ldr	r2, [pc, #324]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014d0:	c313      	stmia	r3!, {r0, r1, r4}
 80014d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014d4:	c313      	stmia	r3!, {r0, r1, r4}
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e094      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            }

            // is size correct ?
            if (brdHandle->dataTx[rqCmd]->size != (brdUartRxSize - BOARDTRX_DATA_HEADER_SIZE)) {
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	210e      	movs	r1, #14
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	18d3      	adds	r3, r2, r3
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	001a      	movs	r2, r3
 80014f2:	4b4a      	ldr	r3, [pc, #296]	; (800161c <BOARDTRX_ProcessRx+0x60c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3b03      	subs	r3, #3
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d01a      	beq.n	8001532 <BOARDTRX_ProcessRx+0x522>
                brdState.isNewError = 1;
 80014fc:	4b45      	ldr	r3, [pc, #276]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80014fe:	2201      	movs	r2, #1
 8001500:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 8001502:	4b44      	ldr	r3, [pc, #272]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 800150a:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = rqCmd;
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 800150e:	187a      	adds	r2, r7, r1
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_ERROR_CMD;
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001516:	2206      	movs	r2, #6
 8001518:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 800151a:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 800151c:	2202      	movs	r2, #2
 800151e:	70da      	strb	r2, [r3, #3]
                return brdState;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 8001524:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001526:	c313      	stmia	r3!, {r0, r1, r4}
 8001528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800152a:	c313      	stmia	r3!, {r0, r1, r4}
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e069      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            }

            // copy received data to the memory pointed by struct
            memcpy(brdHandle->dataTx[rqCmd]->data, &brdUartRxBuf[2], brdHandle->dataTx[rqCmd]->size);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	240e      	movs	r4, #14
 800153a:	193b      	adds	r3, r7, r4
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	193b      	adds	r3, r7, r4
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	001a      	movs	r2, r3
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <BOARDTRX_ProcessRx+0x610>)
 800155c:	0019      	movs	r1, r3
 800155e:	f006 fffb 	bl	8008558 <memcpy>
            brdHandle->dataTx[rqCmd]->status = BOARDTRX_CMD_NEW;
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	193b      	adds	r3, r7, r4
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	18d3      	adds	r3, r2, r3
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	715a      	strb	r2, [r3, #5]
            brdHandle->dataTx[rqCmd]->timeout = 0;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	193b      	adds	r3, r7, r4
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	18d3      	adds	r3, r2, r3
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
            brdHandle->dataTx[rqCmd]->retries = 0;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <BOARDTRX_ProcessRx+0x600>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	193b      	adds	r3, r7, r4
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	18d3      	adds	r3, r2, r3
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	719a      	strb	r2, [r3, #6]

            // is request even active ?
            if (brdRequestQueDataTx[rqCmd] == 0) {
 800159e:	0021      	movs	r1, r4
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <BOARDTRX_ProcessRx+0x614>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d11a      	bne.n	80015e2 <BOARDTRX_ProcessRx+0x5d2>
                brdState.isNewError = 1;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	705a      	strb	r2, [r3, #1]
                brdState.errorsRX += 1;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015ba:	609a      	str	r2, [r3, #8]
                brdState.errorDataNr = rqCmd;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015be:	187a      	adds	r2, r7, r1
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	709a      	strb	r2, [r3, #2]
                brdState.status = BOARDTRX_MISS;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	701a      	strb	r2, [r3, #0]
                brdState.errorTRX = BOARDTRX_RX;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	70da      	strb	r2, [r3, #3]
                return brdState;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015d6:	c313      	stmia	r3!, {r0, r1, r4}
 80015d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015da:	c313      	stmia	r3!, {r0, r1, r4}
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e011      	b.n	8001606 <BOARDTRX_ProcessRx+0x5f6>
            } else {
                BOARDTRX_ClearFromQue(BOARDTRX_DATA_TX, rqCmd);
 80015e2:	230e      	movs	r3, #14
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	0019      	movs	r1, r3
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f9f2 	bl	80019d4 <BOARDTRX_ClearFromQue>
            }

            brdState.status = BOARDTRX_OK;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
            return brdState;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <BOARDTRX_ProcessRx+0x604>)
 80015fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015fc:	c313      	stmia	r3!, {r0, r1, r4}
 80015fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001600:	c313      	stmia	r3!, {r0, r1, r4}
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	20000698 	.word	0x20000698
 8001614:	2000067c 	.word	0x2000067c
 8001618:	200006a0 	.word	0x200006a0
 800161c:	200008a0 	.word	0x200008a0
 8001620:	200006a2 	.word	0x200006a2
 8001624:	200008a4 	.word	0x200008a4

08001628 <BOARDTRX_CheckCRC>:

uint8_t BOARDTRX_CheckCRC(uint8_t *data, uint8_t size) {
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	000a      	movs	r2, r1
 8001632:	1cfb      	adds	r3, r7, #3
 8001634:	701a      	strb	r2, [r3, #0]
    uint16_t tmpCrc = BOARDTRX_CalcCRC(data + 1, size - 2);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	1cfb      	adds	r3, r7, #3
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3b02      	subs	r3, #2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	250e      	movs	r5, #14
 8001644:	197c      	adds	r4, r7, r5
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f000 f821 	bl	8001690 <BOARDTRX_CalcCRC>
 800164e:	0003      	movs	r3, r0
 8001650:	8023      	strh	r3, [r4, #0]
    uint16_t crc = (data[size - 1] << 8) + data[size];
 8001652:	1cfb      	adds	r3, r7, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	18d3      	adds	r3, r2, r3
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b299      	uxth	r1, r3
 8001664:	1cfb      	adds	r3, r7, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b29a      	uxth	r2, r3
 8001670:	200c      	movs	r0, #12
 8001672:	183b      	adds	r3, r7, r0
 8001674:	188a      	adds	r2, r1, r2
 8001676:	801a      	strh	r2, [r3, #0]
    return crc == tmpCrc;
 8001678:	183a      	adds	r2, r7, r0
 800167a:	197b      	adds	r3, r7, r5
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	425a      	negs	r2, r3
 8001684:	4153      	adcs	r3, r2
 8001686:	b2db      	uxtb	r3, r3
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bdb0      	pop	{r4, r5, r7, pc}

08001690 <BOARDTRX_CalcCRC>:

// internal functions
uint16_t BOARDTRX_CalcCRC(uint8_t *data, uint8_t size) {
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	000a      	movs	r2, r1
 800169a:	1cfb      	adds	r3, r7, #3
 800169c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_a = 0;
 800169e:	230f      	movs	r3, #15
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_b = 0;
 80016a6:	230e      	movs	r3, #14
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < size; i++) {
 80016ae:	230d      	movs	r3, #13
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e018      	b.n	80016ea <BOARDTRX_CalcCRC+0x5a>
        crc_a ^= data[i];
 80016b8:	200d      	movs	r0, #13
 80016ba:	183b      	adds	r3, r7, r0
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	240f      	movs	r4, #15
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	193a      	adds	r2, r7, r4
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	404a      	eors	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
        crc_b ^= crc_a;
 80016d0:	220e      	movs	r2, #14
 80016d2:	18bb      	adds	r3, r7, r2
 80016d4:	18b9      	adds	r1, r7, r2
 80016d6:	193a      	adds	r2, r7, r4
 80016d8:	7809      	ldrb	r1, [r1, #0]
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	404a      	eors	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < size; i++) {
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	183b      	adds	r3, r7, r0
 80016e6:	3201      	adds	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	230d      	movs	r3, #13
 80016ec:	18fa      	adds	r2, r7, r3
 80016ee:	1cfb      	adds	r3, r7, #3
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3df      	bcc.n	80016b8 <BOARDTRX_CalcCRC+0x28>
    }

    return (crc_a << 8) + crc_b;
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b29a      	uxth	r2, r3
 8001704:	230e      	movs	r3, #14
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	b29b      	uxth	r3, r3
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b005      	add	sp, #20
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <BOARDTRX_AddToQue>:
/*
 * @brief Ads requested dataNr, from target, to queue, if already was requested then ads to error status
 *        but still keeps request active
 * @retVal status of system
 */
BOARDTRX_Status BOARDTRX_AddToQue(BOARDTRX_TRX_Target target, uint8_t dataNr) {
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	0008      	movs	r0, r1
 8001722:	0011      	movs	r1, r2
 8001724:	1cfb      	adds	r3, r7, #3
 8001726:	1c02      	adds	r2, r0, #0
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	1cbb      	adds	r3, r7, #2
 800172c:	1c0a      	adds	r2, r1, #0
 800172e:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = 0;
 8001730:	210f      	movs	r1, #15
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]

    if (target == BOARDTRX_DATA_RX) {
 8001738:	1cfb      	adds	r3, r7, #3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d11a      	bne.n	8001776 <BOARDTRX_AddToQue+0x5e>
        tmp = brdRequestQueDataRx[dataNr];
 8001740:	1cbb      	adds	r3, r7, #2
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	0008      	movs	r0, r1
 8001746:	187b      	adds	r3, r7, r1
 8001748:	4952      	ldr	r1, [pc, #328]	; (8001894 <BOARDTRX_AddToQue+0x17c>)
 800174a:	5c8a      	ldrb	r2, [r1, r2]
 800174c:	701a      	strb	r2, [r3, #0]
        if (!tmp) {
 800174e:	183b      	adds	r3, r7, r0
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <BOARDTRX_AddToQue+0x48>
            brdRequestQueDataRx[dataNr] = 1;
 8001756:	1cbb      	adds	r3, r7, #2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <BOARDTRX_AddToQue+0x17c>)
 800175c:	2101      	movs	r1, #1
 800175e:	54d1      	strb	r1, [r2, r3]
        }

        brdHandle->dataRx[dataNr]->wasRequested = 1;
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <BOARDTRX_AddToQue+0x180>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	1cbb      	adds	r3, r7, #2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	715a      	strb	r2, [r3, #5]
 8001774:	e065      	b.n	8001842 <BOARDTRX_AddToQue+0x12a>

    } else if (target == BOARDTRX_DATA_TX) {
 8001776:	1cfb      	adds	r3, r7, #3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d124      	bne.n	80017c8 <BOARDTRX_AddToQue+0xb0>
        tmp = brdRequestQueDataTx[dataNr];
 800177e:	1cbb      	adds	r3, r7, #2
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	200f      	movs	r0, #15
 8001784:	183b      	adds	r3, r7, r0
 8001786:	4945      	ldr	r1, [pc, #276]	; (800189c <BOARDTRX_AddToQue+0x184>)
 8001788:	5c8a      	ldrb	r2, [r1, r2]
 800178a:	701a      	strb	r2, [r3, #0]
        if (!tmp) {
 800178c:	183b      	adds	r3, r7, r0
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d104      	bne.n	800179e <BOARDTRX_AddToQue+0x86>
            brdRequestQueDataTx[dataNr] = 1;
 8001794:	1cbb      	adds	r3, r7, #2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4a40      	ldr	r2, [pc, #256]	; (800189c <BOARDTRX_AddToQue+0x184>)
 800179a:	2101      	movs	r1, #1
 800179c:	54d1      	strb	r1, [r2, r3]
        }

        brdHandle->dataTx[dataNr]->retries = 1;
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <BOARDTRX_AddToQue+0x180>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	1cbb      	adds	r3, r7, #2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	18d3      	adds	r3, r2, r3
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	719a      	strb	r2, [r3, #6]
        brdHandle->dataTx[dataNr]->status = BOARDTRX_CMD_SEN;
 80017b2:	4b39      	ldr	r3, [pc, #228]	; (8001898 <BOARDTRX_AddToQue+0x180>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	1cbb      	adds	r3, r7, #2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	18d3      	adds	r3, r2, r3
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2204      	movs	r2, #4
 80017c4:	715a      	strb	r2, [r3, #5]
 80017c6:	e03c      	b.n	8001842 <BOARDTRX_AddToQue+0x12a>

    } else if (target == BOARDTRX_CMD_RX) {
 80017c8:	1cfb      	adds	r3, r7, #3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d110      	bne.n	80017f2 <BOARDTRX_AddToQue+0xda>
        tmp = brdRequestQueCmdRx[dataNr];
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	200f      	movs	r0, #15
 80017d6:	183b      	adds	r3, r7, r0
 80017d8:	4931      	ldr	r1, [pc, #196]	; (80018a0 <BOARDTRX_AddToQue+0x188>)
 80017da:	5c8a      	ldrb	r2, [r1, r2]
 80017dc:	701a      	strb	r2, [r3, #0]
        if (!tmp) {
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d12d      	bne.n	8001842 <BOARDTRX_AddToQue+0x12a>
            brdRequestQueCmdRx[dataNr] = 1;
 80017e6:	1cbb      	adds	r3, r7, #2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <BOARDTRX_AddToQue+0x188>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	54d1      	strb	r1, [r2, r3]
 80017f0:	e027      	b.n	8001842 <BOARDTRX_AddToQue+0x12a>
        }

    } else if (target == BOARDTRX_CMD_TX) {
 80017f2:	1cfb      	adds	r3, r7, #3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d123      	bne.n	8001842 <BOARDTRX_AddToQue+0x12a>
        tmp = brdRequestQueCmdTx[dataNr];
 80017fa:	1cbb      	adds	r3, r7, #2
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	200f      	movs	r0, #15
 8001800:	183b      	adds	r3, r7, r0
 8001802:	4928      	ldr	r1, [pc, #160]	; (80018a4 <BOARDTRX_AddToQue+0x18c>)
 8001804:	5c8a      	ldrb	r2, [r1, r2]
 8001806:	701a      	strb	r2, [r3, #0]
        if (!tmp) {
 8001808:	183b      	adds	r3, r7, r0
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <BOARDTRX_AddToQue+0x102>
            brdRequestQueCmdTx[dataNr] = 1;
 8001810:	1cbb      	adds	r3, r7, #2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <BOARDTRX_AddToQue+0x18c>)
 8001816:	2101      	movs	r1, #1
 8001818:	54d1      	strb	r1, [r2, r3]
        }

        // reset retry parameter
        brdHandle->cmdTx[dataNr]->retries = 0;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <BOARDTRX_AddToQue+0x180>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	18d3      	adds	r3, r2, r3
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	719a      	strb	r2, [r3, #6]
        brdHandle->cmdTx[dataNr]->status = BOARDTRX_CMD_SEN;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <BOARDTRX_AddToQue+0x180>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	1cbb      	adds	r3, r7, #2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18d3      	adds	r3, r2, r3
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2204      	movs	r2, #4
 8001840:	715a      	strb	r2, [r3, #5]
    }

    if (tmp) {
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <BOARDTRX_AddToQue+0x15c>
        brdState.isNewError = 1;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 800184e:	2201      	movs	r2, #1
 8001850:	705a      	strb	r2, [r3, #1]
        brdState.errorsMissed += 1;
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 800185a:	615a      	str	r2, [r3, #20]
        brdState.errorDataNr = dataNr;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 800185e:	1cba      	adds	r2, r7, #2
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	709a      	strb	r2, [r3, #2]
        brdState.status = BOARDTRX_MISS;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 8001866:	2204      	movs	r2, #4
 8001868:	701a      	strb	r2, [r3, #0]
        brdState.errorTRX = target;
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 800186c:	1cfa      	adds	r2, r7, #3
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	70da      	strb	r2, [r3, #3]
 8001872:	e002      	b.n	800187a <BOARDTRX_AddToQue+0x162>
    } else {
        brdState.status = BOARDTRX_OK;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
    }

    return brdState;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <BOARDTRX_AddToQue+0x190>)
 800187e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001880:	c313      	stmia	r3!, {r0, r1, r4}
 8001882:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001884:	c313      	stmia	r3!, {r0, r1, r4}
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	46bd      	mov	sp, r7
 800188e:	b005      	add	sp, #20
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	200008c4 	.word	0x200008c4
 8001898:	20000698 	.word	0x20000698
 800189c:	200008a4 	.word	0x200008a4
 80018a0:	200008ec 	.word	0x200008ec
 80018a4:	200008e4 	.word	0x200008e4
 80018a8:	2000067c 	.word	0x2000067c

080018ac <BOARDTRX_GetFromQue>:
 * @brief Checks if there is any active requests if is then returns its nr
 * @param target target queue to get active request from
 * @param startInd start index, allows to get next active request
 * @retval active request Nr or 255 if none
 */
uint8_t BOARDTRX_GetFromQue(BOARDTRX_TRX_Target target, uint8_t startInd) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	0002      	movs	r2, r0
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	1dbb      	adds	r3, r7, #6
 80018ba:	1c0a      	adds	r2, r1, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    uint8_t max;

    if (target == BOARDTRX_DATA_RX) {
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d106      	bne.n	80018d4 <BOARDTRX_GetFromQue+0x28>
        max = brdHandle->countDataRx;
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <BOARDTRX_GetFromQue+0x114>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	230e      	movs	r3, #14
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	7b12      	ldrb	r2, [r2, #12]
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e01f      	b.n	8001914 <BOARDTRX_GetFromQue+0x68>
    } else if (target == BOARDTRX_DATA_TX) {
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <BOARDTRX_GetFromQue+0x3e>
        max = brdHandle->countDataTx;
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <BOARDTRX_GetFromQue+0x114>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	230e      	movs	r3, #14
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	7912      	ldrb	r2, [r2, #4]
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e014      	b.n	8001914 <BOARDTRX_GetFromQue+0x68>
    } else if (target == BOARDTRX_CMD_RX) {
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d106      	bne.n	8001900 <BOARDTRX_GetFromQue+0x54>
        max = brdHandle->countCmdRx;
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <BOARDTRX_GetFromQue+0x114>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	230e      	movs	r3, #14
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	7f12      	ldrb	r2, [r2, #28]
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e009      	b.n	8001914 <BOARDTRX_GetFromQue+0x68>
    } else if (target == BOARDTRX_CMD_TX) {
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d105      	bne.n	8001914 <BOARDTRX_GetFromQue+0x68>
        max = brdHandle->countCmdTx;
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <BOARDTRX_GetFromQue+0x114>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	230e      	movs	r3, #14
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	7d12      	ldrb	r2, [r2, #20]
 8001912:	701a      	strb	r2, [r3, #0]
    }

    for (uint8_t i = startInd; i < max; i++) {
 8001914:	230d      	movs	r3, #13
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	1dba      	adds	r2, r7, #6
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e041      	b.n	80019a4 <BOARDTRX_GetFromQue+0xf8>
        if (target == BOARDTRX_DATA_RX) {
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <BOARDTRX_GetFromQue+0x8e>
            tmp = brdRequestQueDataRx[i];
 8001928:	230d      	movs	r3, #13
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	4924      	ldr	r1, [pc, #144]	; (80019c4 <BOARDTRX_GetFromQue+0x118>)
 8001934:	5c8a      	ldrb	r2, [r1, r2]
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e025      	b.n	8001986 <BOARDTRX_GetFromQue+0xda>
        } else if (target == BOARDTRX_DATA_TX) {
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <BOARDTRX_GetFromQue+0xa8>
            tmp = brdRequestQueDataTx[i];
 8001942:	230d      	movs	r3, #13
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	491e      	ldr	r1, [pc, #120]	; (80019c8 <BOARDTRX_GetFromQue+0x11c>)
 800194e:	5c8a      	ldrb	r2, [r1, r2]
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e018      	b.n	8001986 <BOARDTRX_GetFromQue+0xda>
        } else if (target == BOARDTRX_CMD_RX) {
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d108      	bne.n	800196e <BOARDTRX_GetFromQue+0xc2>
            tmp = brdRequestQueCmdRx[i];
 800195c:	230d      	movs	r3, #13
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	230f      	movs	r3, #15
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	4919      	ldr	r1, [pc, #100]	; (80019cc <BOARDTRX_GetFromQue+0x120>)
 8001968:	5c8a      	ldrb	r2, [r1, r2]
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e00b      	b.n	8001986 <BOARDTRX_GetFromQue+0xda>
        } else if (target == BOARDTRX_CMD_TX) {
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <BOARDTRX_GetFromQue+0xda>
            tmp = brdRequestQueCmdTx[i];
 8001976:	230d      	movs	r3, #13
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	230f      	movs	r3, #15
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	4913      	ldr	r1, [pc, #76]	; (80019d0 <BOARDTRX_GetFromQue+0x124>)
 8001982:	5c8a      	ldrb	r2, [r1, r2]
 8001984:	701a      	strb	r2, [r3, #0]
        }

        if (tmp) {
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <BOARDTRX_GetFromQue+0xec>
            return i;
 8001990:	230d      	movs	r3, #13
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	e00e      	b.n	80019b6 <BOARDTRX_GetFromQue+0x10a>
    for (uint8_t i = startInd; i < max; i++) {
 8001998:	210d      	movs	r1, #13
 800199a:	187b      	adds	r3, r7, r1
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	3201      	adds	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	230d      	movs	r3, #13
 80019a6:	18fa      	adds	r2, r7, r3
 80019a8:	230e      	movs	r3, #14
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3b5      	bcc.n	8001920 <BOARDTRX_GetFromQue+0x74>
        }
    }

    return 255;
 80019b4:	23ff      	movs	r3, #255	; 0xff
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	20000698 	.word	0x20000698
 80019c4:	200008c4 	.word	0x200008c4
 80019c8:	200008a4 	.word	0x200008a4
 80019cc:	200008ec 	.word	0x200008ec
 80019d0:	200008e4 	.word	0x200008e4

080019d4 <BOARDTRX_ClearFromQue>:

/*
 * @brief Clears request from que
 *
 */
void BOARDTRX_ClearFromQue(BOARDTRX_TRX_Target target, uint8_t dataNr) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	0002      	movs	r2, r0
 80019dc:	1dfb      	adds	r3, r7, #7
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	1dbb      	adds	r3, r7, #6
 80019e2:	1c0a      	adds	r2, r1, #0
 80019e4:	701a      	strb	r2, [r3, #0]
    if (target == BOARDTRX_DATA_RX) {
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <BOARDTRX_ClearFromQue+0x26>
        brdRequestQueDataRx[dataNr] = 0;
 80019ee:	1dbb      	adds	r3, r7, #6
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <BOARDTRX_ClearFromQue+0x68>)
 80019f4:	2100      	movs	r1, #0
 80019f6:	54d1      	strb	r1, [r2, r3]
    } else if (target == BOARDTRX_CMD_RX) {
        brdRequestQueCmdRx[dataNr] = 0;
    } else if (target == BOARDTRX_CMD_TX) {
        brdRequestQueCmdTx[dataNr] = 0;
    }
}
 80019f8:	e01c      	b.n	8001a34 <BOARDTRX_ClearFromQue+0x60>
    } else if (target == BOARDTRX_DATA_TX) {
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <BOARDTRX_ClearFromQue+0x3a>
        brdRequestQueDataTx[dataNr] = 0;
 8001a02:	1dbb      	adds	r3, r7, #6
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <BOARDTRX_ClearFromQue+0x6c>)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	54d1      	strb	r1, [r2, r3]
}
 8001a0c:	e012      	b.n	8001a34 <BOARDTRX_ClearFromQue+0x60>
    } else if (target == BOARDTRX_CMD_RX) {
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d105      	bne.n	8001a22 <BOARDTRX_ClearFromQue+0x4e>
        brdRequestQueCmdRx[dataNr] = 0;
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <BOARDTRX_ClearFromQue+0x70>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	54d1      	strb	r1, [r2, r3]
}
 8001a20:	e008      	b.n	8001a34 <BOARDTRX_ClearFromQue+0x60>
    } else if (target == BOARDTRX_CMD_TX) {
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d104      	bne.n	8001a34 <BOARDTRX_ClearFromQue+0x60>
        brdRequestQueCmdTx[dataNr] = 0;
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <BOARDTRX_ClearFromQue+0x74>)
 8001a30:	2100      	movs	r1, #0
 8001a32:	54d1      	strb	r1, [r2, r3]
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200008c4 	.word	0x200008c4
 8001a40:	200008a4 	.word	0x200008a4
 8001a44:	200008ec 	.word	0x200008ec
 8001a48:	200008e4 	.word	0x200008e4

08001a4c <BOARDTRX_UART_Send>:
 * @brief sends data to target devices, adds necessary data packet information
 * @param nr data number
 * @param data pointer to data to send
 * @param size size of data to send
 */
BOARDTRX_Status BOARDTRX_UART_Send(uint8_t nr, uint8_t *data, uint8_t size) {
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	0008      	movs	r0, r1
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	0019      	movs	r1, r3
 8001a5a:	240b      	movs	r4, #11
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	1c02      	adds	r2, r0, #0
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	250a      	movs	r5, #10
 8001a64:	197b      	adds	r3, r7, r5
 8001a66:	1c0a      	adds	r2, r1, #0
 8001a68:	701a      	strb	r2, [r3, #0]
    uint8_t ptr = 0;
 8001a6a:	2017      	movs	r0, #23
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]

    // set start byte
    brdUartTxBuf[ptr] = BOARDTRX_START_BYTE;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001a78:	2145      	movs	r1, #69	; 0x45
 8001a7a:	54d1      	strb	r1, [r2, r3]
    ptr++;
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	3201      	adds	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]

    // set length of data packet, 1 byte for nr + data size + 2 bytes crc
    uint8_t totalSize = 1 + size + 2;
 8001a86:	2116      	movs	r1, #22
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	197a      	adds	r2, r7, r5
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	3203      	adds	r2, #3
 8001a90:	701a      	strb	r2, [r3, #0]
    if (nr & BOARDTRX_CMD_BYTE) {
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <BOARDTRX_UART_Send+0x5a>
        totalSize++; // id byte
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
    }
    brdUartTxBuf[ptr] = totalSize;
 8001aa6:	2017      	movs	r0, #23
 8001aa8:	183b      	adds	r3, r7, r0
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001aae:	2116      	movs	r1, #22
 8001ab0:	1879      	adds	r1, r7, r1
 8001ab2:	7809      	ldrb	r1, [r1, #0]
 8001ab4:	54d1      	strb	r1, [r2, r3]
    ptr++;
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	183b      	adds	r3, r7, r0
 8001abc:	3201      	adds	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]

    // set data Nr
    brdUartTxBuf[ptr] = nr;
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4a61      	ldr	r2, [pc, #388]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001ac6:	240b      	movs	r4, #11
 8001ac8:	1939      	adds	r1, r7, r4
 8001aca:	7809      	ldrb	r1, [r1, #0]
 8001acc:	54d1      	strb	r1, [r2, r3]
    ptr++;
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	3201      	adds	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]

    // if cmd byte then add id
    if (nr & BOARDTRX_CMD_BYTE) {
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d034      	beq.n	8001b4c <BOARDTRX_UART_Send+0x100>
        uint8_t ind = nr & (~BOARDTRX_CMD_BYTE);
 8001ae2:	2515      	movs	r5, #21
 8001ae4:	197b      	adds	r3, r7, r5
 8001ae6:	193a      	adds	r2, r7, r4
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	2140      	movs	r1, #64	; 0x40
 8001aec:	438a      	bics	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
        ind = ind & (~BOARDTRX_REQUEST_BYTE);
 8001af0:	197b      	adds	r3, r7, r5
 8001af2:	197a      	adds	r2, r7, r5
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	217f      	movs	r1, #127	; 0x7f
 8001af8:	400a      	ands	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
        if (nr & BOARDTRX_REQUEST_BYTE) {
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da0d      	bge.n	8001b22 <BOARDTRX_UART_Send+0xd6>
            brdUartTxBuf[ptr] = brdHandle->cmdTx[ind]->id;
 8001b06:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <BOARDTRX_UART_Send+0x204>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	197b      	adds	r3, r7, r5
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	7b11      	ldrb	r1, [r2, #12]
 8001b1c:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001b1e:	54d1      	strb	r1, [r2, r3]
 8001b20:	e00e      	b.n	8001b40 <BOARDTRX_UART_Send+0xf4>
        } else {
            brdUartTxBuf[ptr] = brdHandle->cmdRx[ind]->id;
 8001b22:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <BOARDTRX_UART_Send+0x204>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	2315      	movs	r3, #21
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2317      	movs	r3, #23
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	7b51      	ldrb	r1, [r2, #13]
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001b3e:	54d1      	strb	r1, [r2, r3]
        }
        ptr++;
 8001b40:	2117      	movs	r1, #23
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	3201      	adds	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
    }

    // copy data if any
    if (size > 0) {
 8001b4c:	240a      	movs	r4, #10
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d011      	beq.n	8001b7a <BOARDTRX_UART_Send+0x12e>
        memcpy(&brdUartTxBuf[ptr], data, size);
 8001b56:	2517      	movs	r5, #23
 8001b58:	197b      	adds	r3, r7, r5
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001b5e:	18d0      	adds	r0, r2, r3
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0019      	movs	r1, r3
 8001b68:	f006 fcf6 	bl	8008558 <memcpy>
        ptr += size;
 8001b6c:	197b      	adds	r3, r7, r5
 8001b6e:	1979      	adds	r1, r7, r5
 8001b70:	193a      	adds	r2, r7, r4
 8001b72:	7809      	ldrb	r1, [r1, #0]
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	188a      	adds	r2, r1, r2
 8001b78:	701a      	strb	r2, [r3, #0]
    }

    // calculate crc for Nr + data
    uint16_t crc = BOARDTRX_CalcCRC(&brdUartTxBuf[2], totalSize - 2);
 8001b7a:	2316      	movs	r3, #22
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	3b02      	subs	r3, #2
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	2512      	movs	r5, #18
 8001b86:	197c      	adds	r4, r7, r5
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <BOARDTRX_UART_Send+0x208>)
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7ff fd7f 	bl	8001690 <BOARDTRX_CalcCRC>
 8001b92:	0003      	movs	r3, r0
 8001b94:	8023      	strh	r3, [r4, #0]

    // copy crc
    brdUartTxBuf[ptr] = crc >> 8;
 8001b96:	002c      	movs	r4, r5
 8001b98:	193b      	adds	r3, r7, r4
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2017      	movs	r0, #23
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2d1      	uxtb	r1, r2
 8001ba8:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001baa:	54d1      	strb	r1, [r2, r3]
    ptr++;
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	183b      	adds	r3, r7, r0
 8001bb2:	3201      	adds	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
    brdUartTxBuf[ptr] = crc & 0xff;
 8001bb6:	183b      	adds	r3, r7, r0
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	193a      	adds	r2, r7, r4
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	b2d1      	uxtb	r1, r2
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001bc2:	54d1      	strb	r1, [r2, r3]
    ptr++;
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	3201      	adds	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef ret = HAL_UART_Transmit(brdHandle->uart, brdUartTxBuf, ptr, 1000);
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <BOARDTRX_UART_Send+0x204>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a18      	ldr	r0, [r3, #32]
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2511      	movs	r5, #17
 8001bde:	197c      	adds	r4, r7, r5
 8001be0:	23fa      	movs	r3, #250	; 0xfa
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4919      	ldr	r1, [pc, #100]	; (8001c4c <BOARDTRX_UART_Send+0x200>)
 8001be6:	f005 fa8f 	bl	8007108 <HAL_UART_Transmit>
 8001bea:	0003      	movs	r3, r0
 8001bec:	7023      	strb	r3, [r4, #0]

    if (ret != HAL_OK) {
 8001bee:	197b      	adds	r3, r7, r5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01b      	beq.n	8001c2e <BOARDTRX_UART_Send+0x1e2>
        brdState.isNewError = 1;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	705a      	strb	r2, [r3, #1]
        brdState.errorsTX += 1;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c04:	60da      	str	r2, [r3, #12]
        brdState.errorDataNr = nr;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c08:	220b      	movs	r2, #11
 8001c0a:	18ba      	adds	r2, r7, r2
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	709a      	strb	r2, [r3, #2]
        brdState.status = BOARDTRX_ERROR_TX;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c12:	2207      	movs	r2, #7
 8001c14:	701a      	strb	r2, [r3, #0]
        brdState.errorTRX = BOARDTRX_TX;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	70da      	strb	r2, [r3, #3]
        return brdState;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c22:	c313      	stmia	r3!, {r0, r1, r4}
 8001c24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c26:	c313      	stmia	r3!, {r0, r1, r4}
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e00a      	b.n	8001c44 <BOARDTRX_UART_Send+0x1f8>
    }

    brdState.status = BOARDTRX_OK;
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    return brdState;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <BOARDTRX_UART_Send+0x20c>)
 8001c38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c3a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4c:	200007a0 	.word	0x200007a0
 8001c50:	20000698 	.word	0x20000698
 8001c54:	200007a2 	.word	0x200007a2
 8001c58:	2000067c 	.word	0x2000067c

08001c5c <BOARDTRX_UART_RX_CB>:
/*
 * if data packet then store inside bigger buffer
 * when whole packet is received mark as such
 *
 */
void BOARDTRX_UART_RX_CB() {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    if (brdUartRxInd >= 256) {
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2bff      	cmp	r3, #255	; 0xff
 8001c66:	d90a      	bls.n	8001c7e <BOARDTRX_UART_RX_CB+0x22>
        if (brdUartRx == BOARDTRX_START_BYTE) {
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <BOARDTRX_UART_RX_CB+0x70>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b45      	cmp	r3, #69	; 0x45
 8001c6e:	d127      	bne.n	8001cc0 <BOARDTRX_UART_RX_CB+0x64>
            brdUartRxInd = 0;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
            brdUartRxSize = 0;
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <BOARDTRX_UART_RX_CB+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
            brdUartRxInd = 257;
        }

        brdUartRxInd++;
    }
}
 8001c7c:	e020      	b.n	8001cc0 <BOARDTRX_UART_RX_CB+0x64>
        brdUartRxBuf[brdUartRxInd] = brdUartRx;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <BOARDTRX_UART_RX_CB+0x70>)
 8001c84:	7811      	ldrb	r1, [r2, #0]
 8001c86:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <BOARDTRX_UART_RX_CB+0x78>)
 8001c88:	54d1      	strb	r1, [r2, r3]
        if (brdUartRxInd == 0) {    // first byte will be size of packet
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d104      	bne.n	8001c9c <BOARDTRX_UART_RX_CB+0x40>
            brdUartRxSize = brdUartRx;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <BOARDTRX_UART_RX_CB+0x70>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	001a      	movs	r2, r3
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <BOARDTRX_UART_RX_CB+0x74>)
 8001c9a:	601a      	str	r2, [r3, #0]
        if (brdUartRxInd == brdUartRxSize) {    // packet is received
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <BOARDTRX_UART_RX_CB+0x74>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <BOARDTRX_UART_RX_CB+0x5a>
            brdUartReceived = 1;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <BOARDTRX_UART_RX_CB+0x7c>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
            brdUartRxInd = 257;
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	32ff      	adds	r2, #255	; 0xff
 8001cb4:	601a      	str	r2, [r3, #0]
        brdUartRxInd++;
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <BOARDTRX_UART_RX_CB+0x6c>)
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	2000069e 	.word	0x2000069e
 8001cd0:	200008a0 	.word	0x200008a0
 8001cd4:	200006a0 	.word	0x200006a0
 8001cd8:	2000069d 	.word	0x2000069d

08001cdc <GPS_Receive>:
    data[i] = a;
    data[++i] = b;
}

/* Pass uint8_t of received data */
void GPS_Receive(uint8_t data) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
    if (data == '$') {
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b24      	cmp	r3, #36	; 0x24
 8001cee:	d103      	bne.n	8001cf8 <GPS_Receive+0x1c>
        gpsTempLen = 0;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <GPS_Receive+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
        gpsTempLen = 255;
    } else if (gpsTempLen != 255) {
        gpsTemp[gpsTempLen] = data;
        gpsTempLen++;
    }
}
 8001cf6:	e027      	b.n	8001d48 <GPS_Receive+0x6c>
    } else if ((data == 13 || data == 10) && gpsTempLen != 255) { // looks for new_line or vertical tab
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0d      	cmp	r3, #13
 8001cfe:	d003      	beq.n	8001d08 <GPS_Receive+0x2c>
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d10e      	bne.n	8001d26 <GPS_Receive+0x4a>
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <GPS_Receive+0x74>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2bff      	cmp	r3, #255	; 0xff
 8001d0e:	d00a      	beq.n	8001d26 <GPS_Receive+0x4a>
        GPS_Parse(gpsTemp, gpsTempLen);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <GPS_Receive+0x74>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <GPS_Receive+0x78>)
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f81d 	bl	8001d58 <GPS_Parse>
        gpsTempLen = 255;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <GPS_Receive+0x74>)
 8001d20:	22ff      	movs	r2, #255	; 0xff
 8001d22:	701a      	strb	r2, [r3, #0]
}
 8001d24:	e010      	b.n	8001d48 <GPS_Receive+0x6c>
    } else if (gpsTempLen != 255) {
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <GPS_Receive+0x74>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2bff      	cmp	r3, #255	; 0xff
 8001d2c:	d00c      	beq.n	8001d48 <GPS_Receive+0x6c>
        gpsTemp[gpsTempLen] = data;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <GPS_Receive+0x74>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0019      	movs	r1, r3
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <GPS_Receive+0x78>)
 8001d36:	1dfa      	adds	r2, r7, #7
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	545a      	strb	r2, [r3, r1]
        gpsTempLen++;
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <GPS_Receive+0x74>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <GPS_Receive+0x74>)
 8001d46:	701a      	strb	r2, [r3, #0]
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000032 	.word	0x20000032
 8001d54:	20000918 	.word	0x20000918

08001d58 <GPS_Parse>:
    }
    return --i;
}

/* parses received frame */
GPS_StatusTypeDef GPS_Parse(uint8_t *buf, uint8_t len) {
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b099      	sub	sp, #100	; 0x64
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	000a      	movs	r2, r1
 8001d62:	1cfb      	adds	r3, r7, #3
 8001d64:	701a      	strb	r2, [r3, #0]
    if (strncmp("GPGGA", (char*) buf, 5) == 0) { // get coordinates and height
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4bdf      	ldr	r3, [pc, #892]	; (80020e8 <GPS_Parse+0x390>)
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f006 fc04 	bl	800857a <strncmp>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d000      	beq.n	8001d78 <GPS_Parse+0x20>
 8001d76:	e175      	b.n	8002064 <GPS_Parse+0x30c>
        if (GPS_CheckSum(buf, len) == GPS_OK) {
 8001d78:	1cfb      	adds	r3, r7, #3
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0011      	movs	r1, r2
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 fc0f 	bl	80025a4 <GPS_CheckSum>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d000      	beq.n	8001d8c <GPS_Parse+0x34>
 8001d8a:	e169      	b.n	8002060 <GPS_Parse+0x308>
            uint8_t step = 0;
 8001d8c:	235f      	movs	r3, #95	; 0x5f
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
            uint8_t i = 0;
 8001d94:	235e      	movs	r3, #94	; 0x5e
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
            while (step < 8) {
 8001d9c:	e152      	b.n	8002044 <GPS_Parse+0x2ec>
                if (buf[i] == ',') {
 8001d9e:	215e      	movs	r1, #94	; 0x5e
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	18d3      	adds	r3, r2, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b2c      	cmp	r3, #44	; 0x2c
 8001dac:	d000      	beq.n	8001db0 <GPS_Parse+0x58>
 8001dae:	e143      	b.n	8002038 <GPS_Parse+0x2e0>
                    i++;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	3201      	adds	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
                    step++;
 8001dba:	215f      	movs	r1, #95	; 0x5f
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
                    if (step == 1) {
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d146      	bne.n	8001e5c <GPS_Parse+0x104>
                        uint8_t tempData[6] = { 0 };
 8001dce:	2348      	movs	r3, #72	; 0x48
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	809a      	strh	r2, [r3, #4]
                        uint8_t leng = 0;
 8001dda:	235d      	movs	r3, #93	; 0x5d
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8001de2:	e015      	b.n	8001e10 <GPS_Parse+0xb8>
                            tempData[leng] = buf[i];
 8001de4:	205e      	movs	r0, #94	; 0x5e
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	18d2      	adds	r2, r2, r3
 8001dee:	245d      	movs	r4, #93	; 0x5d
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	7811      	ldrb	r1, [r2, #0]
 8001df6:	2248      	movs	r2, #72	; 0x48
 8001df8:	18ba      	adds	r2, r7, r2
 8001dfa:	54d1      	strb	r1, [r2, r3]
                            leng++;
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	193b      	adds	r3, r7, r4
 8001e02:	3201      	adds	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
                            i++;
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	183b      	adds	r3, r7, r0
 8001e0c:	3201      	adds	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8001e10:	235e      	movs	r3, #94	; 0x5e
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	18d3      	adds	r3, r2, r3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001e1e:	d1e1      	bne.n	8001de4 <GPS_Parse+0x8c>
                        }
                        if (leng == 0) {
 8001e20:	235d      	movs	r3, #93	; 0x5d
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <GPS_Parse+0xd8>
                            return GPS_NOK;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f000 fbb3 	bl	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsTime, '0', 6);
 8001e30:	4bae      	ldr	r3, [pc, #696]	; (80020ec <GPS_Parse+0x394>)
 8001e32:	2206      	movs	r2, #6
 8001e34:	2130      	movs	r1, #48	; 0x30
 8001e36:	0018      	movs	r0, r3
 8001e38:	f006 fb97 	bl	800856a <memset>
                        memcpy(gpsTime + (6 - leng), tempData, leng);
 8001e3c:	215d      	movs	r1, #93	; 0x5d
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2206      	movs	r2, #6
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	001a      	movs	r2, r3
 8001e48:	4ba8      	ldr	r3, [pc, #672]	; (80020ec <GPS_Parse+0x394>)
 8001e4a:	18d0      	adds	r0, r2, r3
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	2348      	movs	r3, #72	; 0x48
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	0019      	movs	r1, r3
 8001e56:	f006 fb7f 	bl	8008558 <memcpy>
 8001e5a:	e0ed      	b.n	8002038 <GPS_Parse+0x2e0>
                    } else if (step == 2 || step == 3) {
 8001e5c:	225f      	movs	r2, #95	; 0x5f
 8001e5e:	18bb      	adds	r3, r7, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d004      	beq.n	8001e70 <GPS_Parse+0x118>
 8001e66:	18bb      	adds	r3, r7, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d000      	beq.n	8001e70 <GPS_Parse+0x118>
 8001e6e:	e08f      	b.n	8001f90 <GPS_Parse+0x238>
                        uint8_t tempData[12] = { 0 };
 8001e70:	233c      	movs	r3, #60	; 0x3c
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f006 fb73 	bl	800856a <memset>
                        uint8_t leng = 0;
 8001e84:	235c      	movs	r3, #92	; 0x5c
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8001e8c:	e015      	b.n	8001eba <GPS_Parse+0x162>
                            tempData[leng] = buf[i];
 8001e8e:	205e      	movs	r0, #94	; 0x5e
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	18d2      	adds	r2, r2, r3
 8001e98:	245c      	movs	r4, #92	; 0x5c
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	7811      	ldrb	r1, [r2, #0]
 8001ea0:	223c      	movs	r2, #60	; 0x3c
 8001ea2:	18ba      	adds	r2, r7, r2
 8001ea4:	54d1      	strb	r1, [r2, r3]
                            leng++;
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	193b      	adds	r3, r7, r4
 8001eac:	3201      	adds	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
                            i++;
 8001eb0:	183b      	adds	r3, r7, r0
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	183b      	adds	r3, r7, r0
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8001eba:	235e      	movs	r3, #94	; 0x5e
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	18d3      	adds	r3, r2, r3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ec8:	d1e1      	bne.n	8001e8e <GPS_Parse+0x136>
                        }
                        if (leng == 0) {
 8001eca:	235c      	movs	r3, #92	; 0x5c
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <GPS_Parse+0x180>
                            return GPS_NOK;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e35e      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        i++;
 8001ed8:	215e      	movs	r1, #94	; 0x5e
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
                        if (buf[i] == 'N' || buf[i] == 'S' || buf[i] == 'E' || buf[i] == 'W') {
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	18d3      	adds	r3, r2, r3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b4e      	cmp	r3, #78	; 0x4e
 8001ef0:	d014      	beq.n	8001f1c <GPS_Parse+0x1c4>
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	18d3      	adds	r3, r2, r3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b53      	cmp	r3, #83	; 0x53
 8001efe:	d00d      	beq.n	8001f1c <GPS_Parse+0x1c4>
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	18d3      	adds	r3, r2, r3
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b45      	cmp	r3, #69	; 0x45
 8001f0c:	d006      	beq.n	8001f1c <GPS_Parse+0x1c4>
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	18d3      	adds	r3, r2, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b57      	cmp	r3, #87	; 0x57
 8001f1a:	d137      	bne.n	8001f8c <GPS_Parse+0x234>
                            memset((gpsData + (step - 2) * 12), '0', 12);
 8001f1c:	245f      	movs	r4, #95	; 0x5f
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	1e9a      	subs	r2, r3, #2
 8001f24:	0013      	movs	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	189b      	adds	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <GPS_Parse+0x398>)
 8001f30:	18d3      	adds	r3, r2, r3
 8001f32:	220c      	movs	r2, #12
 8001f34:	2130      	movs	r1, #48	; 0x30
 8001f36:	0018      	movs	r0, r3
 8001f38:	f006 fb17 	bl	800856a <memset>
                            gpsData[(step - 2) * 12 + 11] = buf[i];
 8001f3c:	235e      	movs	r3, #94	; 0x5e
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	18d1      	adds	r1, r2, r3
 8001f46:	193b      	adds	r3, r7, r4
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	1e9a      	subs	r2, r3, #2
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	189b      	adds	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	330b      	adds	r3, #11
 8001f56:	7809      	ldrb	r1, [r1, #0]
 8001f58:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <GPS_Parse+0x398>)
 8001f5a:	54d1      	strb	r1, [r2, r3]
                        } else {
                            return GPS_NOK;
                        }
                        memcpy(gpsData + (step - 2) * 12 + (11 - leng), tempData, leng);
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	1e9a      	subs	r2, r3, #2
 8001f62:	0013      	movs	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	215c      	movs	r1, #92	; 0x5c
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	330b      	adds	r3, #11
 8001f76:	001a      	movs	r2, r3
 8001f78:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <GPS_Parse+0x398>)
 8001f7a:	18d0      	adds	r0, r2, r3
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	233c      	movs	r3, #60	; 0x3c
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	0019      	movs	r1, r3
 8001f86:	f006 fae7 	bl	8008558 <memcpy>
                    } else if (step == 2 || step == 3) {
 8001f8a:	e055      	b.n	8002038 <GPS_Parse+0x2e0>
                            return GPS_NOK;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e302      	b.n	8002596 <GPS_Parse+0x83e>
                    } else if (step == 7) {
 8001f90:	235f      	movs	r3, #95	; 0x5f
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	d14e      	bne.n	8002038 <GPS_Parse+0x2e0>
                        i++;
 8001f9a:	215e      	movs	r1, #94	; 0x5e
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	3201      	adds	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
                        uint8_t tempData[12] = { 0 };
 8001fa6:	2330      	movs	r3, #48	; 0x30
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f006 fad8 	bl	800856a <memset>
                        uint8_t leng = 0;
 8001fba:	235b      	movs	r3, #91	; 0x5b
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8001fc2:	e015      	b.n	8001ff0 <GPS_Parse+0x298>
                            tempData[leng] = buf[i];
 8001fc4:	205e      	movs	r0, #94	; 0x5e
 8001fc6:	183b      	adds	r3, r7, r0
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	18d2      	adds	r2, r2, r3
 8001fce:	245b      	movs	r4, #91	; 0x5b
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	7811      	ldrb	r1, [r2, #0]
 8001fd6:	2230      	movs	r2, #48	; 0x30
 8001fd8:	18ba      	adds	r2, r7, r2
 8001fda:	54d1      	strb	r1, [r2, r3]
                            leng++;
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	193b      	adds	r3, r7, r4
 8001fe2:	3201      	adds	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
                            i++;
 8001fe6:	183b      	adds	r3, r7, r0
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	3201      	adds	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8001ff0:	235e      	movs	r3, #94	; 0x5e
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b2c      	cmp	r3, #44	; 0x2c
 8001ffe:	d1e1      	bne.n	8001fc4 <GPS_Parse+0x26c>
                        }
                        if (leng == 0) {
 8002000:	235b      	movs	r3, #91	; 0x5b
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <GPS_Parse+0x2b6>
                            return GPS_NOK;
 800200a:	2302      	movs	r3, #2
 800200c:	e2c3      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsHeight, '0', 8);
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <GPS_Parse+0x39c>)
 8002010:	2208      	movs	r2, #8
 8002012:	2130      	movs	r1, #48	; 0x30
 8002014:	0018      	movs	r0, r3
 8002016:	f006 faa8 	bl	800856a <memset>
                        memcpy(gpsHeight + (8 - leng), tempData, leng);
 800201a:	215b      	movs	r1, #91	; 0x5b
 800201c:	187b      	adds	r3, r7, r1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2208      	movs	r2, #8
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	001a      	movs	r2, r3
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <GPS_Parse+0x39c>)
 8002028:	18d0      	adds	r0, r2, r3
 800202a:	187b      	adds	r3, r7, r1
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	2330      	movs	r3, #48	; 0x30
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	0019      	movs	r1, r3
 8002034:	f006 fa90 	bl	8008558 <memcpy>
                    }
                }
                i++;
 8002038:	215e      	movs	r1, #94	; 0x5e
 800203a:	187b      	adds	r3, r7, r1
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	187b      	adds	r3, r7, r1
 8002040:	3201      	adds	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
            while (step < 8) {
 8002044:	235f      	movs	r3, #95	; 0x5f
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b07      	cmp	r3, #7
 800204c:	d800      	bhi.n	8002050 <GPS_Parse+0x2f8>
 800204e:	e6a6      	b.n	8001d9e <GPS_Parse+0x46>
            }
            isNewData = 1;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <GPS_Parse+0x3a0>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
            isData = 1;
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <GPS_Parse+0x3a4>)
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
            return GPS_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e29a      	b.n	8002596 <GPS_Parse+0x83e>
        } else {
            return GPS_NOK;
 8002060:	2302      	movs	r3, #2
 8002062:	e298      	b.n	8002596 <GPS_Parse+0x83e>
        }
    } else if (strncmp("GPVTG", (char*) buf, 5) == 0) { // get speed in km/h
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <GPS_Parse+0x3a8>)
 8002068:	2205      	movs	r2, #5
 800206a:	0018      	movs	r0, r3
 800206c:	f006 fa85 	bl	800857a <strncmp>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d000      	beq.n	8002076 <GPS_Parse+0x31e>
 8002074:	e08f      	b.n	8002196 <GPS_Parse+0x43e>
        if (GPS_CheckSum(buf, len) == GPS_OK) {
 8002076:	1cfb      	adds	r3, r7, #3
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0011      	movs	r1, r2
 800207e:	0018      	movs	r0, r3
 8002080:	f000 fa90 	bl	80025a4 <GPS_CheckSum>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d000      	beq.n	800208a <GPS_Parse+0x332>
 8002088:	e083      	b.n	8002192 <GPS_Parse+0x43a>
            uint8_t step = 0;
 800208a:	235a      	movs	r3, #90	; 0x5a
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
            uint8_t i = 0;
 8002092:	2359      	movs	r3, #89	; 0x59
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
            while (step < 8) {
 800209a:	e073      	b.n	8002184 <GPS_Parse+0x42c>
                if (buf[i] == ',') {
 800209c:	2159      	movs	r1, #89	; 0x59
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2c      	cmp	r3, #44	; 0x2c
 80020aa:	d165      	bne.n	8002178 <GPS_Parse+0x420>
                    step++;
 80020ac:	205a      	movs	r0, #90	; 0x5a
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	183b      	adds	r3, r7, r0
 80020b4:	3201      	adds	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
                    if (step == 7) {
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b07      	cmp	r3, #7
 80020be:	d15b      	bne.n	8002178 <GPS_Parse+0x420>
                        i++;
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	3201      	adds	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
                        uint8_t tempData[12] = { 0 };
 80020ca:	2324      	movs	r3, #36	; 0x24
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	3304      	adds	r3, #4
 80020d4:	2208      	movs	r2, #8
 80020d6:	2100      	movs	r1, #0
 80020d8:	0018      	movs	r0, r3
 80020da:	f006 fa46 	bl	800856a <memset>
                        uint8_t leng = 0;
 80020de:	2358      	movs	r3, #88	; 0x58
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 80020e6:	e023      	b.n	8002130 <GPS_Parse+0x3d8>
 80020e8:	08008610 	.word	0x08008610
 80020ec:	2000002c 	.word	0x2000002c
 80020f0:	20000004 	.word	0x20000004
 80020f4:	2000001c 	.word	0x2000001c
 80020f8:	20000969 	.word	0x20000969
 80020fc:	20000968 	.word	0x20000968
 8002100:	08008618 	.word	0x08008618
                            tempData[leng] = buf[i];
 8002104:	2059      	movs	r0, #89	; 0x59
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	18d2      	adds	r2, r2, r3
 800210e:	2458      	movs	r4, #88	; 0x58
 8002110:	193b      	adds	r3, r7, r4
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	7811      	ldrb	r1, [r2, #0]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	18ba      	adds	r2, r7, r2
 800211a:	54d1      	strb	r1, [r2, r3]
                            leng++;
 800211c:	193b      	adds	r3, r7, r4
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	193b      	adds	r3, r7, r4
 8002122:	3201      	adds	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
                            i++;
 8002126:	183b      	adds	r3, r7, r0
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	183b      	adds	r3, r7, r0
 800212c:	3201      	adds	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8002130:	2359      	movs	r3, #89	; 0x59
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	18d3      	adds	r3, r2, r3
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b2c      	cmp	r3, #44	; 0x2c
 800213e:	d1e1      	bne.n	8002104 <GPS_Parse+0x3ac>
                        }
                        if (leng == 0) {
 8002140:	2358      	movs	r3, #88	; 0x58
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <GPS_Parse+0x3f6>
                            return GPS_NOK;
 800214a:	2302      	movs	r3, #2
 800214c:	e223      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsSpeed, '0', 7);
 800214e:	4bde      	ldr	r3, [pc, #888]	; (80024c8 <GPS_Parse+0x770>)
 8002150:	2207      	movs	r2, #7
 8002152:	2130      	movs	r1, #48	; 0x30
 8002154:	0018      	movs	r0, r3
 8002156:	f006 fa08 	bl	800856a <memset>
                        memcpy(gpsSpeed + (7 - leng), tempData, leng);
 800215a:	2158      	movs	r1, #88	; 0x58
 800215c:	187b      	adds	r3, r7, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2207      	movs	r2, #7
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	001a      	movs	r2, r3
 8002166:	4bd8      	ldr	r3, [pc, #864]	; (80024c8 <GPS_Parse+0x770>)
 8002168:	18d0      	adds	r0, r2, r3
 800216a:	187b      	adds	r3, r7, r1
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	2324      	movs	r3, #36	; 0x24
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	0019      	movs	r1, r3
 8002174:	f006 f9f0 	bl	8008558 <memcpy>
                    }
                }
                i++;
 8002178:	2159      	movs	r1, #89	; 0x59
 800217a:	187b      	adds	r3, r7, r1
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	187b      	adds	r3, r7, r1
 8002180:	3201      	adds	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
            while (step < 8) {
 8002184:	235a      	movs	r3, #90	; 0x5a
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b07      	cmp	r3, #7
 800218c:	d986      	bls.n	800209c <GPS_Parse+0x344>
            }
            return GPS_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e201      	b.n	8002596 <GPS_Parse+0x83e>
        } else {
            return GPS_NOK;
 8002192:	2302      	movs	r3, #2
 8002194:	e1ff      	b.n	8002596 <GPS_Parse+0x83e>
        }
    } else if (strncmp("GPZDA", (char*) buf, 5) == 0) { // get precise time
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4bcc      	ldr	r3, [pc, #816]	; (80024cc <GPS_Parse+0x774>)
 800219a:	2205      	movs	r2, #5
 800219c:	0018      	movs	r0, r3
 800219e:	f006 f9ec 	bl	800857a <strncmp>
 80021a2:	1e03      	subs	r3, r0, #0
 80021a4:	d000      	beq.n	80021a8 <GPS_Parse+0x450>
 80021a6:	e1f5      	b.n	8002594 <GPS_Parse+0x83c>
        if (GPS_CheckSum(buf, len) == GPS_OK) {
 80021a8:	1cfb      	adds	r3, r7, #3
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 f9f7 	bl	80025a4 <GPS_CheckSum>
 80021b6:	1e03      	subs	r3, r0, #0
 80021b8:	d000      	beq.n	80021bc <GPS_Parse+0x464>
 80021ba:	e1e9      	b.n	8002590 <GPS_Parse+0x838>
            uint8_t step = 0;
 80021bc:	2357      	movs	r3, #87	; 0x57
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
            uint8_t i = 0;
 80021c4:	2356      	movs	r3, #86	; 0x56
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
            while (step < 6) {
 80021cc:	e1d8      	b.n	8002580 <GPS_Parse+0x828>
                if (buf[i] == ',') {
 80021ce:	2356      	movs	r3, #86	; 0x56
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	18d3      	adds	r3, r2, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b2c      	cmp	r3, #44	; 0x2c
 80021dc:	d000      	beq.n	80021e0 <GPS_Parse+0x488>
 80021de:	e1c9      	b.n	8002574 <GPS_Parse+0x81c>
                    step++;
 80021e0:	2157      	movs	r1, #87	; 0x57
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	3201      	adds	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
                    if (step == 1) {
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d145      	bne.n	8002280 <GPS_Parse+0x528>
                        uint8_t tempData[8] = { 0 };
 80021f4:	231c      	movs	r3, #28
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
                        uint8_t leng = 0;
 8002200:	2355      	movs	r3, #85	; 0x55
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8002208:	e015      	b.n	8002236 <GPS_Parse+0x4de>
                            tempData[leng] = buf[i];
 800220a:	2056      	movs	r0, #86	; 0x56
 800220c:	183b      	adds	r3, r7, r0
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	18d2      	adds	r2, r2, r3
 8002214:	2455      	movs	r4, #85	; 0x55
 8002216:	193b      	adds	r3, r7, r4
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	7811      	ldrb	r1, [r2, #0]
 800221c:	221c      	movs	r2, #28
 800221e:	18ba      	adds	r2, r7, r2
 8002220:	54d1      	strb	r1, [r2, r3]
                            leng++;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	193b      	adds	r3, r7, r4
 8002228:	3201      	adds	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
                            i++;
 800222c:	183b      	adds	r3, r7, r0
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	183b      	adds	r3, r7, r0
 8002232:	3201      	adds	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8002236:	2356      	movs	r3, #86	; 0x56
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	18d3      	adds	r3, r2, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b2c      	cmp	r3, #44	; 0x2c
 8002244:	d1e1      	bne.n	800220a <GPS_Parse+0x4b2>
                        }
                        if (leng == 0) {
 8002246:	2355      	movs	r3, #85	; 0x55
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <GPS_Parse+0x4fc>
                            return GPS_NOK;
 8002250:	2302      	movs	r3, #2
 8002252:	e1a0      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsTime_UTC, '0', 9);
 8002254:	4b9e      	ldr	r3, [pc, #632]	; (80024d0 <GPS_Parse+0x778>)
 8002256:	2209      	movs	r2, #9
 8002258:	2130      	movs	r1, #48	; 0x30
 800225a:	0018      	movs	r0, r3
 800225c:	f006 f985 	bl	800856a <memset>
                        memcpy(gpsTime_UTC + (8 - leng), tempData, leng);
 8002260:	2155      	movs	r1, #85	; 0x55
 8002262:	187b      	adds	r3, r7, r1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	001a      	movs	r2, r3
 800226c:	4b98      	ldr	r3, [pc, #608]	; (80024d0 <GPS_Parse+0x778>)
 800226e:	18d0      	adds	r0, r2, r3
 8002270:	187b      	adds	r3, r7, r1
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	231c      	movs	r3, #28
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	0019      	movs	r1, r3
 800227a:	f006 f96d 	bl	8008558 <memcpy>
 800227e:	e179      	b.n	8002574 <GPS_Parse+0x81c>
                    } else if (step == 2) {
 8002280:	2357      	movs	r3, #87	; 0x57
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d143      	bne.n	8002312 <GPS_Parse+0x5ba>
                        uint8_t tempData[2] = { 0 };
 800228a:	2318      	movs	r3, #24
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2200      	movs	r2, #0
 8002290:	801a      	strh	r2, [r3, #0]
                        uint8_t leng = 0;
 8002292:	2354      	movs	r3, #84	; 0x54
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 800229a:	e015      	b.n	80022c8 <GPS_Parse+0x570>
                            tempData[leng] = buf[i];
 800229c:	2056      	movs	r0, #86	; 0x56
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	18d2      	adds	r2, r2, r3
 80022a6:	2454      	movs	r4, #84	; 0x54
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	7811      	ldrb	r1, [r2, #0]
 80022ae:	2218      	movs	r2, #24
 80022b0:	18ba      	adds	r2, r7, r2
 80022b2:	54d1      	strb	r1, [r2, r3]
                            leng++;
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	3201      	adds	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
                            i++;
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	183b      	adds	r3, r7, r0
 80022c4:	3201      	adds	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 80022c8:	2356      	movs	r3, #86	; 0x56
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	18d3      	adds	r3, r2, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b2c      	cmp	r3, #44	; 0x2c
 80022d6:	d1e1      	bne.n	800229c <GPS_Parse+0x544>
                        }
                        if (leng == 0) {
 80022d8:	2354      	movs	r3, #84	; 0x54
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <GPS_Parse+0x58e>
                            return GPS_NOK;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e157      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsDate, '0', 3);
 80022e6:	4b7b      	ldr	r3, [pc, #492]	; (80024d4 <GPS_Parse+0x77c>)
 80022e8:	2203      	movs	r2, #3
 80022ea:	2130      	movs	r1, #48	; 0x30
 80022ec:	0018      	movs	r0, r3
 80022ee:	f006 f93c 	bl	800856a <memset>
                        memcpy(gpsDate + (2 - leng), tempData, leng);
 80022f2:	2154      	movs	r1, #84	; 0x54
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2202      	movs	r2, #2
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	001a      	movs	r2, r3
 80022fe:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <GPS_Parse+0x77c>)
 8002300:	18d0      	adds	r0, r2, r3
 8002302:	187b      	adds	r3, r7, r1
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	2318      	movs	r3, #24
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	0019      	movs	r1, r3
 800230c:	f006 f924 	bl	8008558 <memcpy>
 8002310:	e130      	b.n	8002574 <GPS_Parse+0x81c>
                    } else if (step == 3) {
 8002312:	2357      	movs	r3, #87	; 0x57
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d143      	bne.n	80023a4 <GPS_Parse+0x64c>
                        uint8_t tempData[2] = { 0 };
 800231c:	2314      	movs	r3, #20
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2200      	movs	r2, #0
 8002322:	801a      	strh	r2, [r3, #0]
                        uint8_t leng = 0;
 8002324:	2353      	movs	r3, #83	; 0x53
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 800232c:	e015      	b.n	800235a <GPS_Parse+0x602>
                            tempData[leng] = buf[i];
 800232e:	2056      	movs	r0, #86	; 0x56
 8002330:	183b      	adds	r3, r7, r0
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	18d2      	adds	r2, r2, r3
 8002338:	2453      	movs	r4, #83	; 0x53
 800233a:	193b      	adds	r3, r7, r4
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	7811      	ldrb	r1, [r2, #0]
 8002340:	2214      	movs	r2, #20
 8002342:	18ba      	adds	r2, r7, r2
 8002344:	54d1      	strb	r1, [r2, r3]
                            leng++;
 8002346:	193b      	adds	r3, r7, r4
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	193b      	adds	r3, r7, r4
 800234c:	3201      	adds	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
                            i++;
 8002350:	183b      	adds	r3, r7, r0
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	183b      	adds	r3, r7, r0
 8002356:	3201      	adds	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 800235a:	2356      	movs	r3, #86	; 0x56
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	18d3      	adds	r3, r2, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b2c      	cmp	r3, #44	; 0x2c
 8002368:	d1e1      	bne.n	800232e <GPS_Parse+0x5d6>
                        }
                        if (leng == 0) {
 800236a:	2353      	movs	r3, #83	; 0x53
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <GPS_Parse+0x620>
                            return GPS_NOK;
 8002374:	2302      	movs	r3, #2
 8002376:	e10e      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsMonth, '0', 3);
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <GPS_Parse+0x780>)
 800237a:	2203      	movs	r2, #3
 800237c:	2130      	movs	r1, #48	; 0x30
 800237e:	0018      	movs	r0, r3
 8002380:	f006 f8f3 	bl	800856a <memset>
                        memcpy(gpsMonth + (2 - leng), tempData, leng);
 8002384:	2153      	movs	r1, #83	; 0x53
 8002386:	187b      	adds	r3, r7, r1
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2202      	movs	r2, #2
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	001a      	movs	r2, r3
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <GPS_Parse+0x780>)
 8002392:	18d0      	adds	r0, r2, r3
 8002394:	187b      	adds	r3, r7, r1
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	2314      	movs	r3, #20
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	0019      	movs	r1, r3
 800239e:	f006 f8db 	bl	8008558 <memcpy>
 80023a2:	e0e7      	b.n	8002574 <GPS_Parse+0x81c>
                    } else if (step == 4) {
 80023a4:	2357      	movs	r3, #87	; 0x57
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d143      	bne.n	8002436 <GPS_Parse+0x6de>
                        uint8_t tempData[4] = { 0 };
 80023ae:	2310      	movs	r3, #16
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
                        uint8_t leng = 0;
 80023b6:	2352      	movs	r3, #82	; 0x52
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 80023be:	e015      	b.n	80023ec <GPS_Parse+0x694>
                            tempData[leng] = buf[i];
 80023c0:	2056      	movs	r0, #86	; 0x56
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	18d2      	adds	r2, r2, r3
 80023ca:	2452      	movs	r4, #82	; 0x52
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	7811      	ldrb	r1, [r2, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	18ba      	adds	r2, r7, r2
 80023d6:	54d1      	strb	r1, [r2, r3]
                            leng++;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	3201      	adds	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
                            i++;
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	183b      	adds	r3, r7, r0
 80023e8:	3201      	adds	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 80023ec:	2356      	movs	r3, #86	; 0x56
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b2c      	cmp	r3, #44	; 0x2c
 80023fa:	d1e1      	bne.n	80023c0 <GPS_Parse+0x668>
                        }
                        if (leng == 0) {
 80023fc:	2352      	movs	r3, #82	; 0x52
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <GPS_Parse+0x6b2>
                            return GPS_NOK;
 8002406:	2302      	movs	r3, #2
 8002408:	e0c5      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(gpsYear, '0', 5);
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <GPS_Parse+0x784>)
 800240c:	2205      	movs	r2, #5
 800240e:	2130      	movs	r1, #48	; 0x30
 8002410:	0018      	movs	r0, r3
 8002412:	f006 f8aa 	bl	800856a <memset>
                        memcpy(gpsYear + (4 - leng), tempData, leng);
 8002416:	2152      	movs	r1, #82	; 0x52
 8002418:	187b      	adds	r3, r7, r1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2204      	movs	r2, #4
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	001a      	movs	r2, r3
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <GPS_Parse+0x784>)
 8002424:	18d0      	adds	r0, r2, r3
 8002426:	187b      	adds	r3, r7, r1
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	2310      	movs	r3, #16
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	0019      	movs	r1, r3
 8002430:	f006 f892 	bl	8008558 <memcpy>
 8002434:	e09e      	b.n	8002574 <GPS_Parse+0x81c>
                    } else if (step == 5) {
 8002436:	2357      	movs	r3, #87	; 0x57
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d151      	bne.n	80024e4 <GPS_Parse+0x78c>
                        uint8_t tempData[2] = { 0 };
 8002440:	230c      	movs	r3, #12
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	801a      	strh	r2, [r3, #0]
                        uint8_t leng = 0;
 8002448:	2351      	movs	r3, #81	; 0x51
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 8002450:	e015      	b.n	800247e <GPS_Parse+0x726>
                            tempData[leng] = buf[i];
 8002452:	2056      	movs	r0, #86	; 0x56
 8002454:	183b      	adds	r3, r7, r0
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	18d2      	adds	r2, r2, r3
 800245c:	2451      	movs	r4, #81	; 0x51
 800245e:	193b      	adds	r3, r7, r4
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	7811      	ldrb	r1, [r2, #0]
 8002464:	220c      	movs	r2, #12
 8002466:	18ba      	adds	r2, r7, r2
 8002468:	54d1      	strb	r1, [r2, r3]
                            leng++;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	193b      	adds	r3, r7, r4
 8002470:	3201      	adds	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
                            i++;
 8002474:	183b      	adds	r3, r7, r0
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	183b      	adds	r3, r7, r0
 800247a:	3201      	adds	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 800247e:	2356      	movs	r3, #86	; 0x56
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	18d3      	adds	r3, r2, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b2c      	cmp	r3, #44	; 0x2c
 800248c:	d1e1      	bne.n	8002452 <GPS_Parse+0x6fa>
                        }
                        if (leng == 0) {
 800248e:	2351      	movs	r3, #81	; 0x51
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <GPS_Parse+0x744>
                            return GPS_NOK;
 8002498:	2302      	movs	r3, #2
 800249a:	e07c      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(local_zone_desc, '0', 3);
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <GPS_Parse+0x788>)
 800249e:	2203      	movs	r2, #3
 80024a0:	2130      	movs	r1, #48	; 0x30
 80024a2:	0018      	movs	r0, r3
 80024a4:	f006 f861 	bl	800856a <memset>
                        memcpy(local_zone_desc + (2 - leng), tempData, leng);
 80024a8:	2151      	movs	r1, #81	; 0x51
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2202      	movs	r2, #2
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	001a      	movs	r2, r3
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <GPS_Parse+0x788>)
 80024b6:	18d0      	adds	r0, r2, r3
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	230c      	movs	r3, #12
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	0019      	movs	r1, r3
 80024c2:	f006 f849 	bl	8008558 <memcpy>
 80024c6:	e055      	b.n	8002574 <GPS_Parse+0x81c>
 80024c8:	20000024 	.word	0x20000024
 80024cc:	08008620 	.word	0x08008620
 80024d0:	200008f4 	.word	0x200008f4
 80024d4:	20000900 	.word	0x20000900
 80024d8:	20000904 	.word	0x20000904
 80024dc:	20000908 	.word	0x20000908
 80024e0:	20000910 	.word	0x20000910
                    } else if (step == 5) {
 80024e4:	2357      	movs	r3, #87	; 0x57
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d142      	bne.n	8002574 <GPS_Parse+0x81c>
                        uint8_t tempData[2] = { 0 };
 80024ee:	2308      	movs	r3, #8
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2200      	movs	r2, #0
 80024f4:	801a      	strh	r2, [r3, #0]
                        uint8_t leng = 0;
 80024f6:	2350      	movs	r3, #80	; 0x50
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 80024fe:	e015      	b.n	800252c <GPS_Parse+0x7d4>
                            tempData[leng] = buf[i];
 8002500:	2056      	movs	r0, #86	; 0x56
 8002502:	183b      	adds	r3, r7, r0
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	18d2      	adds	r2, r2, r3
 800250a:	2450      	movs	r4, #80	; 0x50
 800250c:	193b      	adds	r3, r7, r4
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	7811      	ldrb	r1, [r2, #0]
 8002512:	2208      	movs	r2, #8
 8002514:	18ba      	adds	r2, r7, r2
 8002516:	54d1      	strb	r1, [r2, r3]
                            leng++;
 8002518:	193b      	adds	r3, r7, r4
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	193b      	adds	r3, r7, r4
 800251e:	3201      	adds	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
                            i++;
 8002522:	183b      	adds	r3, r7, r0
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	183b      	adds	r3, r7, r0
 8002528:	3201      	adds	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
                        while (buf[i] != ',') {
 800252c:	2356      	movs	r3, #86	; 0x56
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b2c      	cmp	r3, #44	; 0x2c
 800253a:	d1e1      	bne.n	8002500 <GPS_Parse+0x7a8>
                        }
                        if (leng == 0) {
 800253c:	2350      	movs	r3, #80	; 0x50
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <GPS_Parse+0x7f2>
                            return GPS_NOK;
 8002546:	2302      	movs	r3, #2
 8002548:	e025      	b.n	8002596 <GPS_Parse+0x83e>
                        }
                        memset(local_zone_min_desc, '0', 3);
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <GPS_Parse+0x848>)
 800254c:	2203      	movs	r2, #3
 800254e:	2130      	movs	r1, #48	; 0x30
 8002550:	0018      	movs	r0, r3
 8002552:	f006 f80a 	bl	800856a <memset>
                        memcpy(local_zone_min_desc + (2 - leng), tempData, leng);
 8002556:	2150      	movs	r1, #80	; 0x50
 8002558:	187b      	adds	r3, r7, r1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2202      	movs	r2, #2
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	001a      	movs	r2, r3
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <GPS_Parse+0x848>)
 8002564:	18d0      	adds	r0, r2, r3
 8002566:	187b      	adds	r3, r7, r1
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	2308      	movs	r3, #8
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	0019      	movs	r1, r3
 8002570:	f005 fff2 	bl	8008558 <memcpy>
                    }
                }
                i++;
 8002574:	2156      	movs	r1, #86	; 0x56
 8002576:	187b      	adds	r3, r7, r1
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	187b      	adds	r3, r7, r1
 800257c:	3201      	adds	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
            while (step < 6) {
 8002580:	2357      	movs	r3, #87	; 0x57
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d800      	bhi.n	800258c <GPS_Parse+0x834>
 800258a:	e620      	b.n	80021ce <GPS_Parse+0x476>
            }
            return GPS_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e002      	b.n	8002596 <GPS_Parse+0x83e>
        } else {
            return GPS_NOK;
 8002590:	2302      	movs	r3, #2
 8002592:	e000      	b.n	8002596 <GPS_Parse+0x83e>
        }
    } else {
        return GPS_NOK;
 8002594:	2302      	movs	r3, #2
    }
    return GPS_NOK;
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b019      	add	sp, #100	; 0x64
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000914 	.word	0x20000914

080025a4 <GPS_CheckSum>:

/* checks checksum returns GPS_ok if data is valid*/
GPS_StatusTypeDef GPS_CheckSum(uint8_t *buf, uint8_t len) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	000a      	movs	r2, r1
 80025ae:	1cfb      	adds	r3, r7, #3
 80025b0:	701a      	strb	r2, [r3, #0]
    uint8_t sum;
    uint8_t check = 0;
 80025b2:	230f      	movs	r3, #15
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]

    if (GPS_HexToByte((buf + len - 2), &sum) != GPS_OK) {
 80025ba:	1cfb      	adds	r3, r7, #3
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	3b02      	subs	r3, #2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	18d3      	adds	r3, r2, r3
 80025c4:	220d      	movs	r2, #13
 80025c6:	18ba      	adds	r2, r7, r2
 80025c8:	0011      	movs	r1, r2
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 f831 	bl	8002632 <GPS_HexToByte>
 80025d0:	1e03      	subs	r3, r0, #0
 80025d2:	d001      	beq.n	80025d8 <GPS_CheckSum+0x34>
        return GPS_NOK;
 80025d4:	2302      	movs	r3, #2
 80025d6:	e028      	b.n	800262a <GPS_CheckSum+0x86>
    }

    for (uint8_t i = 0; i < (len - 3); i++) {
 80025d8:	230e      	movs	r3, #14
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e010      	b.n	8002604 <GPS_CheckSum+0x60>
        check ^= buf[i];
 80025e2:	200e      	movs	r0, #14
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	220f      	movs	r2, #15
 80025f0:	18bb      	adds	r3, r7, r2
 80025f2:	18ba      	adds	r2, r7, r2
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	404a      	eors	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (len - 3); i++) {
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	3201      	adds	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	230e      	movs	r3, #14
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	1cfb      	adds	r3, r7, #3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	3b03      	subs	r3, #3
 8002610:	429a      	cmp	r2, r3
 8002612:	dbe6      	blt.n	80025e2 <GPS_CheckSum+0x3e>
    }

    if (check == sum) {
 8002614:	230d      	movs	r3, #13
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	220f      	movs	r2, #15
 800261c:	18ba      	adds	r2, r7, r2
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d101      	bne.n	8002628 <GPS_CheckSum+0x84>
        return GPS_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <GPS_CheckSum+0x86>
    }

    return GPS_NOK;
 8002628:	2302      	movs	r3, #2

}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}

08002632 <GPS_HexToByte>:
    }
    return checksum;
}

/* converts hex string e.g. AB (0xAB) to byte value writes to value, returns GPS_OK if valid hex */
GPS_StatusTypeDef GPS_HexToByte(uint8_t *hex, uint8_t *value) {
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    uint8_t temp[2];

    for (uint8_t i = 0; i < 2; i++) {
 800263c:	230f      	movs	r3, #15
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e044      	b.n	80026d0 <GPS_HexToByte+0x9e>
        temp[i] = hex[i];
 8002646:	200f      	movs	r0, #15
 8002648:	183b      	adds	r3, r7, r0
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	18d2      	adds	r2, r2, r3
 8002650:	183b      	adds	r3, r7, r0
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	7811      	ldrb	r1, [r2, #0]
 8002656:	240c      	movs	r4, #12
 8002658:	193a      	adds	r2, r7, r4
 800265a:	54d1      	strb	r1, [r2, r3]
        if (temp[i] > 47 && temp[i] < 58) {
 800265c:	0001      	movs	r1, r0
 800265e:	187b      	adds	r3, r7, r1
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	0020      	movs	r0, r4
 8002664:	183a      	adds	r2, r7, r0
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	2b2f      	cmp	r3, #47	; 0x2f
 800266a:	d910      	bls.n	800268e <GPS_HexToByte+0x5c>
 800266c:	187b      	adds	r3, r7, r1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	183a      	adds	r2, r7, r0
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	2b39      	cmp	r3, #57	; 0x39
 8002676:	d80a      	bhi.n	800268e <GPS_HexToByte+0x5c>
            temp[i] -= 48;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	183a      	adds	r2, r7, r0
 800267e:	5cd2      	ldrb	r2, [r2, r3]
 8002680:	187b      	adds	r3, r7, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3a30      	subs	r2, #48	; 0x30
 8002686:	b2d1      	uxtb	r1, r2
 8002688:	183a      	adds	r2, r7, r0
 800268a:	54d1      	strb	r1, [r2, r3]
 800268c:	e01a      	b.n	80026c4 <GPS_HexToByte+0x92>
        } else if (temp[i] > 64 && temp[i] < 71) {
 800268e:	210f      	movs	r1, #15
 8002690:	187b      	adds	r3, r7, r1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	200c      	movs	r0, #12
 8002696:	183a      	adds	r2, r7, r0
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d910      	bls.n	80026c0 <GPS_HexToByte+0x8e>
 800269e:	187b      	adds	r3, r7, r1
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	183a      	adds	r2, r7, r0
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	2b46      	cmp	r3, #70	; 0x46
 80026a8:	d80a      	bhi.n	80026c0 <GPS_HexToByte+0x8e>
            temp[i] -= 55;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	183a      	adds	r2, r7, r0
 80026b0:	5cd2      	ldrb	r2, [r2, r3]
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3a37      	subs	r2, #55	; 0x37
 80026b8:	b2d1      	uxtb	r1, r2
 80026ba:	183a      	adds	r2, r7, r0
 80026bc:	54d1      	strb	r1, [r2, r3]
 80026be:	e001      	b.n	80026c4 <GPS_HexToByte+0x92>
        } else {
            return GPS_NOK;
 80026c0:	2302      	movs	r3, #2
 80026c2:	e016      	b.n	80026f2 <GPS_HexToByte+0xc0>
    for (uint8_t i = 0; i < 2; i++) {
 80026c4:	210f      	movs	r1, #15
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	3201      	adds	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	230f      	movs	r3, #15
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d9b5      	bls.n	8002646 <GPS_HexToByte+0x14>
        }
    }

    *value = (temp[0] << 4) + temp[1];
 80026da:	210c      	movs	r1, #12
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	18d3      	adds	r3, r2, r3
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	701a      	strb	r2, [r3, #0]

    return GPS_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b005      	add	sp, #20
 80026f8:	bd90      	pop	{r4, r7, pc}
	...

080026fc <GSM_Init>:

/*
 * @Brief Initializes GSM
 * @retVal GSM_OK if initializes, GSM_ERROR if not
 */
uint8_t GSM_Init(GSM_Handle *GSM_Handle) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    if (GSM_Handle == 0x00) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <GSM_Init+0x12>
        return GSM_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00a      	b.n	8002724 <GSM_Init+0x28>
    }

    handle = GSM_Handle;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <GSM_Init+0x30>)
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	601a      	str	r2, [r3, #0]

    if (handle->uart == 0x00) {
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <GSM_Init+0x30>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <GSM_Init+0x26>
        return GSM_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <GSM_Init+0x28>
    }

    // TODO check for GSM device

    return GSM_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000096c 	.word	0x2000096c

08002730 <GSM_Off>:
}

/*
 * @Brief Turns off GSM
 */
void GSM_Off() {
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(handle->PWRPort, handle->PWRPin, GPIO_PIN_RESET);
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <GSM_Off+0x34>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6858      	ldr	r0, [r3, #4]
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <GSM_Off+0x34>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	891b      	ldrh	r3, [r3, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	0019      	movs	r1, r3
 8002744:	f002 fe10 	bl	8005368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(handle->RSTPort, handle->RSTPin, GPIO_PIN_SET);
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <GSM_Off+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d8      	ldr	r0, [r3, #12]
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <GSM_Off+0x34>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	8a1b      	ldrh	r3, [r3, #16]
 8002754:	2201      	movs	r2, #1
 8002756:	0019      	movs	r1, r3
 8002758:	f002 fe06 	bl	8005368 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	2000096c 	.word	0x2000096c

08002768 <HQ_Init>:
/*
 * @Brief Initializes HQ_Handle and starts data reiceiving
 * @param HQ_Handle - pointer to configured handle
 * @retval value of initialization status
 */
HQ_StatusTypeDef HQ_Init(HQ_Handle *handle) {
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b08b      	sub	sp, #44	; 0x2c
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    HQ_StatusTypeDef retVal = HQ_OK;
 8002770:	2427      	movs	r4, #39	; 0x27
 8002772:	193b      	adds	r3, r7, r4
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]

    hqHandle = handle;
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HQ_Init+0x158>)
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	601a      	str	r2, [r3, #0]

    // first thing we should do is go into RX mode
    if (SI4463_Receive_FSK_IRQ(hqHandle->siHandle) != SI4463_OK) {
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HQ_Init+0x158>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0018      	movs	r0, r3
 8002786:	f001 faeb 	bl	8003d60 <SI4463_Receive_FSK_IRQ>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d005      	beq.n	800279a <HQ_Init+0x32>
        retVal |= HQ_ERROR_SI;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	193a      	adds	r2, r7, r4
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	2108      	movs	r1, #8
 8002796:	430a      	orrs	r2, r1
 8002798:	701a      	strb	r2, [r3, #0]
    }

    // initialize shared variables rx

    comRxGpsLong.data = (uint8_t *)&gpsData;
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HQ_Init+0x15c>)
 800279c:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HQ_Init+0x160>)
 800279e:	601a      	str	r2, [r3, #0]
    comRxGpsLong.size = 12;
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HQ_Init+0x15c>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	711a      	strb	r2, [r3, #4]

    comRxGpsLat.data = (uint8_t *)&gpsData[12];
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HQ_Init+0x164>)
 80027a8:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HQ_Init+0x168>)
 80027aa:	601a      	str	r2, [r3, #0]
    comRxGpsLat.size = 12;
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HQ_Init+0x164>)
 80027ae:	220c      	movs	r2, #12
 80027b0:	711a      	strb	r2, [r3, #4]

    comRxGpsAlt.data = (uint8_t *)&gpsHeight;
 80027b2:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HQ_Init+0x16c>)
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HQ_Init+0x170>)
 80027b6:	601a      	str	r2, [r3, #0]
    comRxGpsAlt.size = 8;
 80027b8:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <HQ_Init+0x16c>)
 80027ba:	2208      	movs	r2, #8
 80027bc:	711a      	strb	r2, [r3, #4]

    comRxGpsSpeed.data = (uint8_t *)&gpsSpeed;
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HQ_Init+0x174>)
 80027c0:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HQ_Init+0x178>)
 80027c2:	601a      	str	r2, [r3, #0]
    comRxGpsSpeed.size = 7;
 80027c4:	4b45      	ldr	r3, [pc, #276]	; (80028dc <HQ_Init+0x174>)
 80027c6:	2207      	movs	r2, #7
 80027c8:	711a      	strb	r2, [r3, #4]

    comRxGpsTime.data = (uint8_t *)&gpsTime;
 80027ca:	4b46      	ldr	r3, [pc, #280]	; (80028e4 <HQ_Init+0x17c>)
 80027cc:	4a46      	ldr	r2, [pc, #280]	; (80028e8 <HQ_Init+0x180>)
 80027ce:	601a      	str	r2, [r3, #0]
    comRxGpsTime.size = 6;
 80027d0:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <HQ_Init+0x17c>)
 80027d2:	2206      	movs	r2, #6
 80027d4:	711a      	strb	r2, [r3, #4]

    comRxComTemperature.data = (uint8_t *)&STATS_CMD_MCU_TEMP;
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <HQ_Init+0x184>)
 80027d8:	4a45      	ldr	r2, [pc, #276]	; (80028f0 <HQ_Init+0x188>)
 80027da:	601a      	str	r2, [r3, #0]
    comRxComTemperature.size = 4;
 80027dc:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HQ_Init+0x184>)
 80027de:	2204      	movs	r2, #4
 80027e0:	711a      	strb	r2, [r3, #4]

    comRxComCmdOk.data = (uint8_t *)&STATS_CMD_ACK;
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <HQ_Init+0x18c>)
 80027e4:	4a44      	ldr	r2, [pc, #272]	; (80028f8 <HQ_Init+0x190>)
 80027e6:	601a      	str	r2, [r3, #0]
    comRxComCmdOk.size = 4;
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <HQ_Init+0x18c>)
 80027ea:	2204      	movs	r2, #4
 80027ec:	711a      	strb	r2, [r3, #4]

    comRxComCmdNck.data = (uint8_t *)&STATS_CMD_NCK;
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HQ_Init+0x194>)
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HQ_Init+0x198>)
 80027f2:	601a      	str	r2, [r3, #0]
    comRxComCmdNck.size = 4;
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HQ_Init+0x194>)
 80027f6:	2204      	movs	r2, #4
 80027f8:	711a      	strb	r2, [r3, #4]

    comRxComCmdCrc.data = (uint8_t *)&STATS_CMD_CRC;
 80027fa:	4b42      	ldr	r3, [pc, #264]	; (8002904 <HQ_Init+0x19c>)
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HQ_Init+0x1a0>)
 80027fe:	601a      	str	r2, [r3, #0]
    comRxComCmdCrc.size = 4;
 8002800:	4b40      	ldr	r3, [pc, #256]	; (8002904 <HQ_Init+0x19c>)
 8002802:	2204      	movs	r2, #4
 8002804:	711a      	strb	r2, [r3, #4]

    comRxComCmdTmo.data = (uint8_t *)&STATS_CMD_TMO;
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HQ_Init+0x1a4>)
 8002808:	4a41      	ldr	r2, [pc, #260]	; (8002910 <HQ_Init+0x1a8>)
 800280a:	601a      	str	r2, [r3, #0]
    comRxComCmdTmo.size = 4;
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HQ_Init+0x1a4>)
 800280e:	2204      	movs	r2, #4
 8002810:	711a      	strb	r2, [r3, #4]

    // initialize shared variables rx
    mcuTxBatVolt.data = (uint8_t*) &bat_v;
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HQ_Init+0x1ac>)
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <HQ_Init+0x1b0>)
 8002816:	601a      	str	r2, [r3, #0]
    mcuTxBatVolt.size = 4;
 8002818:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HQ_Init+0x1ac>)
 800281a:	2204      	movs	r2, #4
 800281c:	711a      	strb	r2, [r3, #4]

    mcuTx4vCurr.data = (uint8_t*) &i4;
 800281e:	4b3f      	ldr	r3, [pc, #252]	; (800291c <HQ_Init+0x1b4>)
 8002820:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <HQ_Init+0x1b8>)
 8002822:	601a      	str	r2, [r3, #0]
    mcuTx4vCurr.size = 4;
 8002824:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HQ_Init+0x1b4>)
 8002826:	2204      	movs	r2, #4
 8002828:	711a      	strb	r2, [r3, #4]

    mcuTx3v3Curr.data = (uint8_t*) &i3_3;
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HQ_Init+0x1bc>)
 800282c:	4a3e      	ldr	r2, [pc, #248]	; (8002928 <HQ_Init+0x1c0>)
 800282e:	601a      	str	r2, [r3, #0]
    mcuTx3v3Curr.size = 4;
 8002830:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <HQ_Init+0x1bc>)
 8002832:	2204      	movs	r2, #4
 8002834:	711a      	strb	r2, [r3, #4]

    mcuTxTemp.data = (uint8_t*) &temp;
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <HQ_Init+0x1c4>)
 8002838:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <HQ_Init+0x1c8>)
 800283a:	601a      	str	r2, [r3, #0]
    mcuTxTemp.size = 4;
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HQ_Init+0x1c4>)
 800283e:	2204      	movs	r2, #4
 8002840:	711a      	strb	r2, [r3, #4]

    mcuTxTemporary.data = (uint8_t*) &testVar1;
 8002842:	4b3c      	ldr	r3, [pc, #240]	; (8002934 <HQ_Init+0x1cc>)
 8002844:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <HQ_Init+0x1d0>)
 8002846:	601a      	str	r2, [r3, #0]
    mcuTxTemporary.size = 4;
 8002848:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HQ_Init+0x1cc>)
 800284a:	2204      	movs	r2, #4
 800284c:	711a      	strb	r2, [r3, #4]

    uint8_t burnTime = 5;
 800284e:	2126      	movs	r1, #38	; 0x26
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2205      	movs	r2, #5
 8002854:	701a      	strb	r2, [r3, #0]
    mcuTxBurn.data = &burnTime;
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HQ_Init+0x1d4>)
 8002858:	187a      	adds	r2, r7, r1
 800285a:	601a      	str	r2, [r3, #0]
    mcuTxBurn.size = 1;
 800285c:	4b37      	ldr	r3, [pc, #220]	; (800293c <HQ_Init+0x1d4>)
 800285e:	2201      	movs	r2, #1
 8002860:	711a      	strb	r2, [r3, #4]

    // this is what we can request
    mcuTrxHandle.countDataTx = 12;
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HQ_Init+0x1d8>)
 8002864:	220c      	movs	r2, #12
 8002866:	711a      	strb	r2, [r3, #4]
    mcuTrxHandle.dataTx = txDataArray;
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HQ_Init+0x1d8>)
 800286a:	4a36      	ldr	r2, [pc, #216]	; (8002944 <HQ_Init+0x1dc>)
 800286c:	601a      	str	r2, [r3, #0]
    // some timings
    mcuTrxHandle.rxRetries = 3;
 800286e:	4b34      	ldr	r3, [pc, #208]	; (8002940 <HQ_Init+0x1d8>)
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	2103      	movs	r1, #3
 8002874:	5499      	strb	r1, [r3, r2]
    mcuTrxHandle.rxTimeout = 20000;
 8002876:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HQ_Init+0x1d8>)
 8002878:	4a33      	ldr	r2, [pc, #204]	; (8002948 <HQ_Init+0x1e0>)
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
    // this is what can be requested from us
    mcuTrxHandle.countDataRx = 10;
 800287c:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HQ_Init+0x1d8>)
 800287e:	220a      	movs	r2, #10
 8002880:	731a      	strb	r2, [r3, #12]
    mcuTrxHandle.dataRx = rxDataArray;
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HQ_Init+0x1d8>)
 8002884:	4a31      	ldr	r2, [pc, #196]	; (800294c <HQ_Init+0x1e4>)
 8002886:	609a      	str	r2, [r3, #8]
    // this is commands that can be sent to be executed
    mcuTrxHandle.cmdTx = txCmdArray;
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HQ_Init+0x1d8>)
 800288a:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HQ_Init+0x1e8>)
 800288c:	611a      	str	r2, [r3, #16]
    mcuTrxHandle.countCmdTx = 1;
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HQ_Init+0x1d8>)
 8002890:	2201      	movs	r2, #1
 8002892:	751a      	strb	r2, [r3, #20]
    // other config
    mcuTrxHandle.uart = handle->uart;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HQ_Init+0x1d8>)
 800289a:	621a      	str	r2, [r3, #32]

    BOARDTRX_Status ret;
    ret = BOARDTRX_Init(&mcuTrxHandle);
 800289c:	2308      	movs	r3, #8
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HQ_Init+0x1d8>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fd feb9 	bl	800061c <BOARDTRX_Init>

    initialised = 1;
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HQ_Init+0x1ec>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]

    return retVal;
 80028b0:	2327      	movs	r3, #39	; 0x27
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b00b      	add	sp, #44	; 0x2c
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000970 	.word	0x20000970
 80028c4:	200009e8 	.word	0x200009e8
 80028c8:	20000004 	.word	0x20000004
 80028cc:	200009f0 	.word	0x200009f0
 80028d0:	20000010 	.word	0x20000010
 80028d4:	200009f8 	.word	0x200009f8
 80028d8:	2000001c 	.word	0x2000001c
 80028dc:	20000a00 	.word	0x20000a00
 80028e0:	20000024 	.word	0x20000024
 80028e4:	20000a08 	.word	0x20000a08
 80028e8:	2000002c 	.word	0x2000002c
 80028ec:	20000a10 	.word	0x20000a10
 80028f0:	20000998 	.word	0x20000998
 80028f4:	20000a18 	.word	0x20000a18
 80028f8:	2000099c 	.word	0x2000099c
 80028fc:	20000a20 	.word	0x20000a20
 8002900:	200009a0 	.word	0x200009a0
 8002904:	20000a28 	.word	0x20000a28
 8002908:	200009a4 	.word	0x200009a4
 800290c:	20000a30 	.word	0x20000a30
 8002910:	200009a8 	.word	0x200009a8
 8002914:	200009ac 	.word	0x200009ac
 8002918:	20000988 	.word	0x20000988
 800291c:	200009b8 	.word	0x200009b8
 8002920:	2000098c 	.word	0x2000098c
 8002924:	200009c4 	.word	0x200009c4
 8002928:	20000990 	.word	0x20000990
 800292c:	200009d0 	.word	0x200009d0
 8002930:	20000994 	.word	0x20000994
 8002934:	200009dc 	.word	0x200009dc
 8002938:	20000098 	.word	0x20000098
 800293c:	20000a38 	.word	0x20000a38
 8002940:	20000a48 	.word	0x20000a48
 8002944:	20000038 	.word	0x20000038
 8002948:	00004e20 	.word	0x00004e20
 800294c:	20000068 	.word	0x20000068
 8002950:	20000090 	.word	0x20000090
 8002954:	20000974 	.word	0x20000974

08002958 <HQ_Loop>:
#endif

/*
 * @Brief goes trough things, processes them etc
 */
HQ_StatusTypeDef HQ_Loop() {
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
    BOARDTRX_Status ret;

    if (!initialised) {
 800295e:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <HQ_Loop+0x84>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HQ_Loop+0x12>
        return HQ_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e034      	b.n	80029d4 <HQ_Loop+0x7c>
    }

    ret = BOARDTRX_Loop();
 800296a:	003b      	movs	r3, r7
 800296c:	0018      	movs	r0, r3
 800296e:	f7fe f8a5 	bl	8000abc <BOARDTRX_Loop>

    // TODO count errors, manage them or whatever
    // count errors
    if (ret.isNewError) {
 8002972:	003b      	movs	r3, r7
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HQ_Loop+0x3a>
        ret.isNewError = 0;
 800297a:	003b      	movs	r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	705a      	strb	r2, [r3, #1]
        if (ret.status == BOARDTRX_ERROR_CRC) {
 8002980:	003b      	movs	r3, r7
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d104      	bne.n	8002992 <HQ_Loop+0x3a>
            STATS_CMD_CRC++;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HQ_Loop+0x88>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HQ_Loop+0x88>)
 8002990:	601a      	str	r2, [r3, #0]
        }
    }

    if (siRxToReceive) {
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HQ_Loop+0x8c>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d017      	beq.n	80029ca <HQ_Loop+0x72>
        siRxToReceive = 0;
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HQ_Loop+0x8c>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
        SI4463_StatusTypeDef ret;
        ret = SI4463_Receive_FSK(hqHandle->siHandle, rxRawBuf, 8, 100);
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HQ_Loop+0x90>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	251f      	movs	r5, #31
 80029a8:	197c      	adds	r4, r7, r5
 80029aa:	4910      	ldr	r1, [pc, #64]	; (80029ec <HQ_Loop+0x94>)
 80029ac:	2364      	movs	r3, #100	; 0x64
 80029ae:	2208      	movs	r2, #8
 80029b0:	f001 f8c1 	bl	8003b36 <SI4463_Receive_FSK>
 80029b4:	0003      	movs	r3, r0
 80029b6:	7023      	strb	r3, [r4, #0]
        if (ret == SI4463_OK) {
 80029b8:	197b      	adds	r3, r7, r5
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HQ_Loop+0x6e>
            rxReceived = 1;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HQ_Loop+0x98>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
        }

        // data from GS
        HQ_SI_Process_Data();
 80029c6:	f000 fa01 	bl	8002dcc <HQ_SI_Process_Data>
    }

    HQ_VAR_Process();
 80029ca:	f000 f813 	bl	80029f4 <HQ_VAR_Process>
    HQ_CMD_Process();
 80029ce:	f000 f8c1 	bl	8002b54 <HQ_CMD_Process>

    return SI4463_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	0018      	movs	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b008      	add	sp, #32
 80029da:	bdb0      	pop	{r4, r5, r7, pc}
 80029dc:	20000974 	.word	0x20000974
 80029e0:	200009a4 	.word	0x200009a4
 80029e4:	20000981 	.word	0x20000981
 80029e8:	20000970 	.word	0x20000970
 80029ec:	20000978 	.word	0x20000978
 80029f0:	20000980 	.word	0x20000980

080029f4 <HQ_VAR_Process>:

/*
 * @brief goes trough VAR things and processes them
 */
void HQ_VAR_Process() {
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b08b      	sub	sp, #44	; 0x2c
 80029f8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < (HQ_VARS_TOTAL_SIZE - 1); i++) {
 80029fa:	2327      	movs	r3, #39	; 0x27
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e092      	b.n	8002b2a <HQ_VAR_Process+0x136>
        if (varRequests[i]) {
 8002a04:	2427      	movs	r4, #39	; 0x27
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4a4d      	ldr	r2, [pc, #308]	; (8002b40 <HQ_VAR_Process+0x14c>)
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <HQ_VAR_Process+0x20>
 8002a12:	e084      	b.n	8002b1e <HQ_VAR_Process+0x12a>
            if (i < HQ_VARS_LOCAL_LIMIT) {
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d80d      	bhi.n	8002a38 <HQ_VAR_Process+0x44>
                if (HQ_VAR_Send(i)) {
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f919 	bl	8002c58 <HQ_VAR_Send>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d100      	bne.n	8002a2c <HQ_VAR_Process+0x38>
 8002a2a:	e078      	b.n	8002b1e <HQ_VAR_Process+0x12a>
                    varRequests[i] = 0;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <HQ_VAR_Process+0x14c>)
 8002a32:	2100      	movs	r1, #0
 8002a34:	54d1      	strb	r1, [r2, r3]
 8002a36:	e072      	b.n	8002b1e <HQ_VAR_Process+0x12a>
                }
            } else {
                // check if received from mcu before sending
                // if has then send
                uint8_t tmpInd = (i - HQ_VARS_LOCAL_LIMIT);
 8002a38:	2126      	movs	r1, #38	; 0x26
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2227      	movs	r2, #39	; 0x27
 8002a3e:	18ba      	adds	r2, r7, r2
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	3a0a      	subs	r2, #10
 8002a44:	701a      	strb	r2, [r3, #0]
                uint8_t status = txDataArray[tmpInd]->status;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HQ_VAR_Process+0x150>)
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	58d2      	ldr	r2, [r2, r3]
 8002a50:	2125      	movs	r1, #37	; 0x25
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	7952      	ldrb	r2, [r2, #5]
 8002a56:	701a      	strb	r2, [r3, #0]
                if (status == BOARDTRX_CMD_NEW || status == BOARDTRX_CMD_REP) {
 8002a58:	000a      	movs	r2, r1
 8002a5a:	18bb      	adds	r3, r7, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d003      	beq.n	8002a6a <HQ_VAR_Process+0x76>
 8002a62:	18bb      	adds	r3, r7, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d11a      	bne.n	8002aa0 <HQ_VAR_Process+0xac>
                    STATS_CMD_ACK++;
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HQ_VAR_Process+0x154>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <HQ_VAR_Process+0x154>)
 8002a72:	601a      	str	r2, [r3, #0]
                    if (HQ_VAR_Send(i)) {
 8002a74:	2427      	movs	r4, #39	; 0x27
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f8ec 	bl	8002c58 <HQ_VAR_Send>
 8002a80:	1e03      	subs	r3, r0, #0
 8002a82:	d04c      	beq.n	8002b1e <HQ_VAR_Process+0x12a>
                        txDataArray[tmpInd]->status = BOARDTRX_CMD_DEF;
 8002a84:	2326      	movs	r3, #38	; 0x26
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HQ_VAR_Process+0x150>)
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	58d3      	ldr	r3, [r2, r3]
 8002a90:	2200      	movs	r2, #0
 8002a92:	715a      	strb	r2, [r3, #5]
                        varRequests[i] = 0;
 8002a94:	193b      	adds	r3, r7, r4
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HQ_VAR_Process+0x14c>)
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	54d1      	strb	r1, [r2, r3]
                    if (HQ_VAR_Send(i)) {
 8002a9e:	e03e      	b.n	8002b1e <HQ_VAR_Process+0x12a>
                    }

                } else if (status == BOARDTRX_CMD_TIM) {
 8002aa0:	2325      	movs	r3, #37	; 0x25
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b07      	cmp	r3, #7
 8002aa8:	d113      	bne.n	8002ad2 <HQ_VAR_Process+0xde>
                    STATS_CMD_TMO++;
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HQ_VAR_Process+0x158>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <HQ_VAR_Process+0x158>)
 8002ab2:	601a      	str	r2, [r3, #0]
                    // timed out
                    txDataArray[tmpInd]->status = BOARDTRX_CMD_DEF;
 8002ab4:	2326      	movs	r3, #38	; 0x26
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HQ_VAR_Process+0x150>)
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	58d3      	ldr	r3, [r2, r3]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	715a      	strb	r2, [r3, #5]
                    varRequests[i] = 0;
 8002ac4:	2327      	movs	r3, #39	; 0x27
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HQ_VAR_Process+0x14c>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	54d1      	strb	r1, [r2, r3]
 8002ad0:	e025      	b.n	8002b1e <HQ_VAR_Process+0x12a>

                } else if (status == BOARDTRX_CMD_DEF) {
 8002ad2:	2325      	movs	r3, #37	; 0x25
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HQ_VAR_Process+0xfa>
                    BOARDTRX_DataRequest(tmpInd);
 8002adc:	003a      	movs	r2, r7
 8002ade:	2326      	movs	r3, #38	; 0x26
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	0010      	movs	r0, r2
 8002ae8:	f7fd ffa6 	bl	8000a38 <BOARDTRX_DataRequest>
 8002aec:	e017      	b.n	8002b1e <HQ_VAR_Process+0x12a>

                } else if (status == BOARDTRX_CMD_SEN) {
 8002aee:	2325      	movs	r3, #37	; 0x25
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d01f      	beq.n	8002b38 <HQ_VAR_Process+0x144>
                    return;
                } else {
                    STATS_CMD_NCK++;
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HQ_VAR_Process+0x15c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HQ_VAR_Process+0x15c>)
 8002b00:	601a      	str	r2, [r3, #0]
                    varRequests[i] = 0;
 8002b02:	2327      	movs	r3, #39	; 0x27
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <HQ_VAR_Process+0x14c>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	54d1      	strb	r1, [r2, r3]
                    txDataArray[tmpInd]->status = BOARDTRX_CMD_DEF;
 8002b0e:	2326      	movs	r3, #38	; 0x26
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HQ_VAR_Process+0x150>)
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	58d3      	ldr	r3, [r2, r3]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	715a      	strb	r2, [r3, #5]
    for (uint8_t i = 0; i < (HQ_VARS_TOTAL_SIZE - 1); i++) {
 8002b1e:	2127      	movs	r1, #39	; 0x27
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	3201      	adds	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	2327      	movs	r3, #39	; 0x27
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b15      	cmp	r3, #21
 8002b32:	d800      	bhi.n	8002b36 <HQ_VAR_Process+0x142>
 8002b34:	e766      	b.n	8002a04 <HQ_VAR_Process+0x10>
 8002b36:	e000      	b.n	8002b3a <HQ_VAR_Process+0x146>
                    return;
 8002b38:	46c0      	nop			; (mov r8, r8)

                }
            }
        }
    }
}
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b00b      	add	sp, #44	; 0x2c
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	20000a98 	.word	0x20000a98
 8002b44:	20000038 	.word	0x20000038
 8002b48:	2000099c 	.word	0x2000099c
 8002b4c:	200009a8 	.word	0x200009a8
 8002b50:	200009a0 	.word	0x200009a0

08002b54 <HQ_CMD_Process>:

/*
 * @brief goes trough CMD things and processes them
 */
void HQ_CMD_Process() {
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0

    if (cmdReqState == 1) {
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10b      	bne.n	8002b7a <HQ_CMD_Process+0x26>
        // send cmd request to mcu
        BOARDTRX_CmdSend(cmdReqNr, cmdReqId, 1);
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HQ_CMD_Process+0xfc>)
 8002b64:	7819      	ldrb	r1, [r3, #0]
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HQ_CMD_Process+0x100>)
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	0038      	movs	r0, r7
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f7fd feb3 	bl	80008d8 <BOARDTRX_CmdSend>
        cmdReqState = 2;
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
    } else if (cmdReqState >= HQ_CMD_STATUS_NR) {
        // invalid cmd data size
        cmdReqState = 0;
        HQ_CMD_Send(HQ_CMD_STATUS_ERROR);
    }
}
 8002b78:	e063      	b.n	8002c42 <HQ_CMD_Process+0xee>
    } else if (cmdReqState == 2) {
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d129      	bne.n	8002bd6 <HQ_CMD_Process+0x82>
        BOARDTRX_CMD_Status retVal = BOARDTRX_CMD_DEF;
 8002b82:	2527      	movs	r5, #39	; 0x27
 8002b84:	197b      	adds	r3, r7, r5
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
        retVal = BOARDTRX_CmdGetStatus(cmdReqNr);
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HQ_CMD_Process+0xfc>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	197c      	adds	r4, r7, r5
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fd ff33 	bl	80009fc <BOARDTRX_CmdGetStatus>
 8002b96:	0003      	movs	r3, r0
 8002b98:	7023      	strb	r3, [r4, #0]
        if (retVal == BOARDTRX_CMD_NEW || retVal == BOARDTRX_CMD_OK) {
 8002b9a:	197b      	adds	r3, r7, r5
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d003      	beq.n	8002baa <HQ_CMD_Process+0x56>
 8002ba2:	197b      	adds	r3, r7, r5
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d103      	bne.n	8002bb2 <HQ_CMD_Process+0x5e>
            cmdReqState = 3;
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002bac:	2203      	movs	r2, #3
 8002bae:	701a      	strb	r2, [r3, #0]
}
 8002bb0:	e047      	b.n	8002c42 <HQ_CMD_Process+0xee>
        } else if (retVal == BOARDTRX_CMD_REP) {
 8002bb2:	2327      	movs	r3, #39	; 0x27
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d103      	bne.n	8002bc4 <HQ_CMD_Process+0x70>
            cmdReqState = 4;
 8002bbc:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	701a      	strb	r2, [r3, #0]
}
 8002bc2:	e03e      	b.n	8002c42 <HQ_CMD_Process+0xee>
        } else if (retVal == BOARDTRX_CMD_NOK) {
 8002bc4:	2327      	movs	r3, #39	; 0x27
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d139      	bne.n	8002c42 <HQ_CMD_Process+0xee>
            cmdReqState = 255;
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	701a      	strb	r2, [r3, #0]
}
 8002bd4:	e035      	b.n	8002c42 <HQ_CMD_Process+0xee>
    } else if (cmdReqState == 3) {
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d106      	bne.n	8002bec <HQ_CMD_Process+0x98>
        cmdReqState = 0;
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
        HQ_CMD_Send(HQ_CMD_STATUS_OK);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f000 f8c9 	bl	8002d7c <HQ_CMD_Send>
}
 8002bea:	e02a      	b.n	8002c42 <HQ_CMD_Process+0xee>
    } else if (cmdReqState == 4) {
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d106      	bne.n	8002c02 <HQ_CMD_Process+0xae>
        cmdReqState = 0;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
        HQ_CMD_Send(HQ_CMD_STATUS_REP);
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	f000 f8be 	bl	8002d7c <HQ_CMD_Send>
}
 8002c00:	e01f      	b.n	8002c42 <HQ_CMD_Process+0xee>
    } else if (cmdReqState == 5) {
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d106      	bne.n	8002c18 <HQ_CMD_Process+0xc4>
        cmdReqState = 0;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
        HQ_CMD_Send(HQ_CMD_STATUS_NR);
 8002c10:	2006      	movs	r0, #6
 8002c12:	f000 f8b3 	bl	8002d7c <HQ_CMD_Send>
}
 8002c16:	e014      	b.n	8002c42 <HQ_CMD_Process+0xee>
    } else if (cmdReqState == 6) {
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d106      	bne.n	8002c2e <HQ_CMD_Process+0xda>
        cmdReqState = 0;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
        HQ_CMD_Send(HQ_CMD_STATUS_SIZE);
 8002c26:	2005      	movs	r0, #5
 8002c28:	f000 f8a8 	bl	8002d7c <HQ_CMD_Send>
}
 8002c2c:	e009      	b.n	8002c42 <HQ_CMD_Process+0xee>
    } else if (cmdReqState >= HQ_CMD_STATUS_NR) {
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d905      	bls.n	8002c42 <HQ_CMD_Process+0xee>
        cmdReqState = 0;
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HQ_CMD_Process+0xf8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
        HQ_CMD_Send(HQ_CMD_STATUS_ERROR);
 8002c3c:	2007      	movs	r0, #7
 8002c3e:	f000 f89d 	bl	8002d7c <HQ_CMD_Send>
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b00a      	add	sp, #40	; 0x28
 8002c48:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	20000ab1 	.word	0x20000ab1
 8002c50:	20000aaf 	.word	0x20000aaf
 8002c54:	20000ab0 	.word	0x20000ab0

08002c58 <HQ_VAR_Send>:
/*
 * @Brief sends variable trough SI, if sent fully returns 1 if more data needs to be sent returns 0
 * @param ind index of variable to send from varPointers
 * @retval 1 if variable was sent fully, 0 if more data needs to be sent
 */
uint8_t HQ_VAR_Send(uint8_t ind) {
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	0002      	movs	r2, r0
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	701a      	strb	r2, [r3, #0]
    uint8_t *data = 0x00;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
    uint8_t *parts = &varSentParts[ind];
 8002c68:	1dfb      	adds	r3, r7, #7
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HQ_VAR_Send+0x118>)
 8002c6e:	18d3      	adds	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    data = varPointers[ind];
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HQ_VAR_Send+0x11c>)
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	58d3      	ldr	r3, [r2, r3]
 8002c7c:	61bb      	str	r3, [r7, #24]

    uint8_t sentParts = *parts;
 8002c7e:	2413      	movs	r4, #19
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	701a      	strb	r2, [r3, #0]
    uint8_t totalParts = varSize[ind];
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	2512      	movs	r5, #18
 8002c8e:	197b      	adds	r3, r7, r5
 8002c90:	4939      	ldr	r1, [pc, #228]	; (8002d78 <HQ_VAR_Send+0x120>)
 8002c92:	5c8a      	ldrb	r2, [r1, r2]
 8002c94:	701a      	strb	r2, [r3, #0]
    uint8_t toSend = totalParts - sentParts;
 8002c96:	201f      	movs	r0, #31
 8002c98:	183b      	adds	r3, r7, r0
 8002c9a:	1979      	adds	r1, r7, r5
 8002c9c:	193a      	adds	r2, r7, r4
 8002c9e:	7809      	ldrb	r1, [r1, #0]
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	1a8a      	subs	r2, r1, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    // send as much as we can in one go
    if (toSend > HQ_FSK_MAX_DATA_SIZE) {
 8002ca6:	183b      	adds	r3, r7, r0
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d902      	bls.n	8002cb4 <HQ_VAR_Send+0x5c>
        toSend = HQ_FSK_MAX_DATA_SIZE;
 8002cae:	183b      	adds	r3, r7, r0
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	701a      	strb	r2, [r3, #0]
    }

    // variable is split into parts in case it cant be sent in a single 8 byte packet
    uint8_t tmp[8] = { 0 };
 8002cb4:	2108      	movs	r1, #8
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
    tmp[0] = GS_COM_VAR;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
    tmp[1] = ind;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	1dfa      	adds	r2, r7, #7
 8002cca:	7812      	ldrb	r2, [r2, #0]
 8002ccc:	705a      	strb	r2, [r3, #1]
    tmp[2] = totalParts;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2212      	movs	r2, #18
 8002cd2:	18ba      	adds	r2, r7, r2
 8002cd4:	7812      	ldrb	r2, [r2, #0]
 8002cd6:	709a      	strb	r2, [r3, #2]
    tmp[3] = sentParts;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2213      	movs	r2, #19
 8002cdc:	18ba      	adds	r2, r7, r2
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < toSend; i++) {
 8002ce2:	231e      	movs	r3, #30
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e015      	b.n	8002d18 <HQ_VAR_Send+0xc0>
        tmp[4 + i] = data[sentParts + i];
 8002cec:	2313      	movs	r3, #19
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	201e      	movs	r0, #30
 8002cf4:	183b      	adds	r3, r7, r0
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	18d3      	adds	r3, r2, r3
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	189a      	adds	r2, r3, r2
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3304      	adds	r3, #4
 8002d06:	7811      	ldrb	r1, [r2, #0]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	18ba      	adds	r2, r7, r2
 8002d0c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < toSend; i++) {
 8002d0e:	183b      	adds	r3, r7, r0
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	183b      	adds	r3, r7, r0
 8002d14:	3201      	adds	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	231e      	movs	r3, #30
 8002d1a:	18fa      	adds	r2, r7, r3
 8002d1c:	241f      	movs	r4, #31
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3e1      	bcc.n	8002cec <HQ_VAR_Send+0x94>
    }

    HQ_SI_Send(tmp, 8);
 8002d28:	2308      	movs	r3, #8
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f92e 	bl	8002f90 <HQ_SI_Send>

    sentParts += toSend;
 8002d34:	2013      	movs	r0, #19
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	1839      	adds	r1, r7, r0
 8002d3a:	193a      	adds	r2, r7, r4
 8002d3c:	7809      	ldrb	r1, [r1, #0]
 8002d3e:	7812      	ldrb	r2, [r2, #0]
 8002d40:	188a      	adds	r2, r1, r2
 8002d42:	701a      	strb	r2, [r3, #0]

    // save how many we have sent
    if (sentParts == totalParts) {
 8002d44:	183a      	adds	r2, r7, r0
 8002d46:	2312      	movs	r3, #18
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d104      	bne.n	8002d5c <HQ_VAR_Send+0x104>
        *parts = 0;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
        return 1;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e005      	b.n	8002d68 <HQ_VAR_Send+0x110>
    } else {
        *parts = sentParts;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2213      	movs	r2, #19
 8002d60:	18ba      	adds	r2, r7, r2
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b008      	add	sp, #32
 8002d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d70:	20000a80 	.word	0x20000a80
 8002d74:	200000b4 	.word	0x200000b4
 8002d78:	2000009c 	.word	0x2000009c

08002d7c <HQ_CMD_Send>:
/*
 * @Brief sends CMD trough SI, if sent returns 1
 * @param status status of cmd that will be sent
 * @retval 1 if sent
 */
uint8_t HQ_CMD_Send(HQ_CmdStatusTypeDef status) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	0002      	movs	r2, r0
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	701a      	strb	r2, [r3, #0]

    uint8_t tmp[4] = { 0 };
 8002d88:	210c      	movs	r1, #12
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    tmp[0] = GS_COM_CMD;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2204      	movs	r2, #4
 8002d94:	701a      	strb	r2, [r3, #0]
    tmp[1] = cmdReqNr;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HQ_CMD_Send+0x48>)
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	705a      	strb	r2, [r3, #1]
    tmp[2] = cmdReqId;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HQ_CMD_Send+0x4c>)
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	709a      	strb	r2, [r3, #2]
    tmp[3] = status;
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	1dfa      	adds	r2, r7, #7
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	70da      	strb	r2, [r3, #3]

    HQ_SI_Send(tmp, 8);
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2108      	movs	r1, #8
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f8ec 	bl	8002f90 <HQ_SI_Send>

    return 1;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000aaf 	.word	0x20000aaf
 8002dc8:	20000ab0 	.word	0x20000ab0

08002dcc <HQ_SI_Process_Data>:
    }

    return HQ_BUSY;
}

HQ_StatusTypeDef HQ_SI_Process_Data() {
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
     *  simple FSK packet format
     *  y   : x - 6 bytes   - data itself, no more than 6 bytes
     *  CRC : 2 bytes       - XOR checksum of data, HQ_CalcCRC()
     */

    HQ_StatusTypeDef retVal = SI4463_RX_CRC_ERROR;
 8002dd2:	2317      	movs	r3, #23
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	701a      	strb	r2, [r3, #0]

    // process received data from FSK
    if (rxReceived) {
 8002dda:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <HQ_SI_Process_Data+0x190>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d100      	bne.n	8002de4 <HQ_SI_Process_Data+0x18>
 8002de2:	e0a8      	b.n	8002f36 <HQ_SI_Process_Data+0x16a>
        rxReceived = 0;
 8002de4:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HQ_SI_Process_Data+0x190>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
        uint8_t data[9] = { 0 };
 8002dea:	240c      	movs	r4, #12
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2205      	movs	r2, #5
 8002df6:	2100      	movs	r1, #0
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f005 fbb6 	bl	800856a <memset>
        memcpy(data, &rxRawBuf, 8);
 8002dfe:	0021      	movs	r1, r4
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	4a57      	ldr	r2, [pc, #348]	; (8002f60 <HQ_SI_Process_Data+0x194>)
 8002e04:	ca11      	ldmia	r2!, {r0, r4}
 8002e06:	c311      	stmia	r3!, {r0, r4}
#endif

        // check crc
//        uint16_t tmpCrc = HQ_CalcCRC(data, 6);
//        if ((tmpCrc >> 8 == data[6]) && ((uint8_t) tmpCrc) == data[7]) {
        if (data[0] == GS_COM_REG) {
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d100      	bne.n	8002e12 <HQ_SI_Process_Data+0x46>
 8002e10:	e087      	b.n	8002f22 <HQ_SI_Process_Data+0x156>

        } else if (data[0] == GS_COM_CMD) {
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d147      	bne.n	8002eaa <HQ_SI_Process_Data+0xde>
            cmdReqState = 1;
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <HQ_SI_Process_Data+0x198>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
            cmdReqNr = data[1];
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	785a      	ldrb	r2, [r3, #1]
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HQ_SI_Process_Data+0x19c>)
 8002e26:	701a      	strb	r2, [r3, #0]
            cmdReqId = data[2];
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	789a      	ldrb	r2, [r3, #2]
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HQ_SI_Process_Data+0x1a0>)
 8002e2e:	701a      	strb	r2, [r3, #0]
            cmdReqSize = data[3];
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	78da      	ldrb	r2, [r3, #3]
 8002e34:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <HQ_SI_Process_Data+0x1a4>)
 8002e36:	701a      	strb	r2, [r3, #0]

            if (cmdReqNr >= CMD_COUNT) {
 8002e38:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HQ_SI_Process_Data+0x19c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HQ_SI_Process_Data+0x88>
                cmdReqState = 5;
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <HQ_SI_Process_Data+0x198>)
 8002e42:	2205      	movs	r2, #5
 8002e44:	701a      	strb	r2, [r3, #0]
                STATS_CMD_NCK++;
 8002e46:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002e4e:	601a      	str	r2, [r3, #0]
                return SI4463_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e07f      	b.n	8002f54 <HQ_SI_Process_Data+0x188>
            }

            if (txCmdArray[cmdReqNr]->size != cmdReqSize) {
 8002e54:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <HQ_SI_Process_Data+0x19c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	001a      	movs	r2, r3
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HQ_SI_Process_Data+0x1ac>)
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	58d3      	ldr	r3, [r2, r3]
 8002e60:	791a      	ldrb	r2, [r3, #4]
 8002e62:	4b43      	ldr	r3, [pc, #268]	; (8002f70 <HQ_SI_Process_Data+0x1a4>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d009      	beq.n	8002e7e <HQ_SI_Process_Data+0xb2>
                cmdReqState = 6;
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <HQ_SI_Process_Data+0x198>)
 8002e6c:	2206      	movs	r2, #6
 8002e6e:	701a      	strb	r2, [r3, #0]
                STATS_CMD_NCK++;
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002e78:	601a      	str	r2, [r3, #0]
                return SI4463_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06a      	b.n	8002f54 <HQ_SI_Process_Data+0x188>
            }

            STATS_CMD_ACK++;
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HQ_SI_Process_Data+0x1b0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HQ_SI_Process_Data+0x1b0>)
 8002e86:	601a      	str	r2, [r3, #0]
            memcpy(txCmdArray[cmdReqNr]->data, &data[4], cmdReqSize);
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HQ_SI_Process_Data+0x19c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <HQ_SI_Process_Data+0x1ac>)
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	58d3      	ldr	r3, [r2, r3]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <HQ_SI_Process_Data+0x1a4>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	f005 fb58 	bl	8008558 <memcpy>
 8002ea8:	e03b      	b.n	8002f22 <HQ_SI_Process_Data+0x156>

        } else if (data[0] == GS_COM_VAR) {
 8002eaa:	220c      	movs	r2, #12
 8002eac:	18bb      	adds	r3, r7, r2
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d125      	bne.n	8002f00 <HQ_SI_Process_Data+0x134>
            if (data[1] < (HQ_VARS_TOTAL_SIZE - 1)) {
 8002eb4:	18bb      	adds	r3, r7, r2
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	2b15      	cmp	r3, #21
 8002eba:	d806      	bhi.n	8002eca <HQ_SI_Process_Data+0xfe>
                varRequests[data[1]] = 1;
 8002ebc:	18bb      	adds	r3, r7, r2
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HQ_SI_Process_Data+0x1b4>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]
 8002ec8:	e014      	b.n	8002ef4 <HQ_SI_Process_Data+0x128>
            } else {
                uint8_t res[2];
                res[0] = GS_COM_VAR_RES;
 8002eca:	2108      	movs	r1, #8
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	701a      	strb	r2, [r3, #0]
                res[1] = GS_COM_NCK;
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	22ab      	movs	r2, #171	; 0xab
 8002ed6:	705a      	strb	r2, [r3, #1]
                HQ_SI_Send(res, 2);
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2102      	movs	r1, #2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f857 	bl	8002f90 <HQ_SI_Send>
                retVal = SI4463_RX_CRC_ERROR;
 8002ee2:	2317      	movs	r3, #23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	701a      	strb	r2, [r3, #0]
                STATS_CMD_NCK++;
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002ef2:	601a      	str	r2, [r3, #0]
            }
            STATS_CMD_ACK++;
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <HQ_SI_Process_Data+0x1b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HQ_SI_Process_Data+0x1b0>)
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e010      	b.n	8002f22 <HQ_SI_Process_Data+0x156>
        } else {
            // command / message unknown or faulty
            STATS_CMD_NCK++;
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HQ_SI_Process_Data+0x1a8>)
 8002f08:	601a      	str	r2, [r3, #0]
            uint8_t res = GS_COM_UNK;
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	22ac      	movs	r2, #172	; 0xac
 8002f0e:	701a      	strb	r2, [r3, #0]
            HQ_SI_Send(&res, 1);
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	2101      	movs	r1, #1
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f83b 	bl	8002f90 <HQ_SI_Send>
            retVal = SI4463_RX_CRC_ERROR;
 8002f1a:	2317      	movs	r3, #23
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2205      	movs	r2, #5
 8002f20:	701a      	strb	r2, [r3, #0]
//            // command / message unknown or faulty
//            HQ_SI_Send(fskTxCrcE, sizeof(fskTxCrcE));
//            retVal = SI4463_RX_UNKNOWN;
//        }

        SI4463_Receive_FSK_IRQ(hqHandle->siHandle);
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HQ_SI_Process_Data+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 ff19 	bl	8003d60 <SI4463_Receive_FSK_IRQ>
        return retVal;
 8002f2e:	2317      	movs	r3, #23
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	e00e      	b.n	8002f54 <HQ_SI_Process_Data+0x188>
    }

    if (timer < HAL_GetTick()) {
 8002f36:	f001 fc15 	bl	8004764 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HQ_SI_Process_Data+0x1bc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d906      	bls.n	8002f52 <HQ_SI_Process_Data+0x186>
        timer += timerDelay;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HQ_SI_Process_Data+0x1bc>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HQ_SI_Process_Data+0x1c0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	18d2      	adds	r2, r2, r3
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HQ_SI_Process_Data+0x1bc>)
 8002f50:	601a      	str	r2, [r3, #0]
#if DEBUG_ENABLE
        printf("Tick %ld\n\r", HAL_GetTick() / 1000);
#endif
    }

    return SI4463_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b007      	add	sp, #28
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	20000980 	.word	0x20000980
 8002f60:	20000978 	.word	0x20000978
 8002f64:	20000ab1 	.word	0x20000ab1
 8002f68:	20000aaf 	.word	0x20000aaf
 8002f6c:	20000ab0 	.word	0x20000ab0
 8002f70:	20000aae 	.word	0x20000aae
 8002f74:	200009a0 	.word	0x200009a0
 8002f78:	20000090 	.word	0x20000090
 8002f7c:	2000099c 	.word	0x2000099c
 8002f80:	20000a98 	.word	0x20000a98
 8002f84:	20000970 	.word	0x20000970
 8002f88:	20000984 	.word	0x20000984
 8002f8c:	20000034 	.word	0x20000034

08002f90 <HQ_SI_Send>:
/*
 * @Brief sends data trough FSK to WASSUP. before formating data packet and adding checksum
 * @param data - pointer to data to send
 * @param size - size of data to send
 */
HQ_StatusTypeDef HQ_SI_Send(uint8_t *data, uint8_t size) {
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	000a      	movs	r2, r1
 8002f9a:	1cfb      	adds	r3, r7, #3
 8002f9c:	701a      	strb	r2, [r3, #0]
    uint8_t txData[8] = { 0 };
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]

    if (size > 8 || size == 0) {
 8002faa:	1cfb      	adds	r3, r7, #3
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d803      	bhi.n	8002fba <HQ_SI_Send+0x2a>
 8002fb2:	1cfb      	adds	r3, r7, #3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HQ_SI_Send+0x2e>
        return SI4463_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e026      	b.n	800300c <HQ_SI_Send+0x7c>
    }

    // copy data to send to packet
    memcpy(txData, data, size);
 8002fbe:	1cfb      	adds	r3, r7, #3
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	250c      	movs	r5, #12
 8002fc6:	197b      	adds	r3, r7, r5
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f005 fac5 	bl	8008558 <memcpy>
//    txData[6] = tmpCrc >> 8;
//    txData[7] = tmpCrc & 0xff;

    // send data and then go back to RX
    SI4463_StatusTypeDef ret;
    ret = SI4463_Transmit_FSK(hqHandle->siHandle, txData, 8, 100);
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HQ_SI_Send+0x84>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	2617      	movs	r6, #23
 8002fd6:	19bc      	adds	r4, r7, r6
 8002fd8:	1979      	adds	r1, r7, r5
 8002fda:	2364      	movs	r3, #100	; 0x64
 8002fdc:	2208      	movs	r2, #8
 8002fde:	f000 ff28 	bl	8003e32 <SI4463_Transmit_FSK>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	7023      	strb	r3, [r4, #0]
    if (ret != SI4463_OK) {
 8002fe6:	19bb      	adds	r3, r7, r6
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HQ_SI_Send+0x6e>
        SI4463_Receive_FSK_IRQ(hqHandle->siHandle);
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HQ_SI_Send+0x84>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 feb3 	bl	8003d60 <SI4463_Receive_FSK_IRQ>
        return HQ_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e006      	b.n	800300c <HQ_SI_Send+0x7c>
    }

    SI4463_Receive_FSK_IRQ(hqHandle->siHandle);
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HQ_SI_Send+0x84>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 feab 	bl	8003d60 <SI4463_Receive_FSK_IRQ>

    return HQ_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b007      	add	sp, #28
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003014:	20000970 	.word	0x20000970

08003018 <HQ_SI_RX_CallBack>:
void HQ_UART_RX_CallBack() {
    //uartRxToReceive = 1;
}

// gets received data and puts it in rxBufQue
void HQ_SI_RX_CallBack() {
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
    siRxToReceive = 1;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HQ_SI_RX_CallBack+0x10>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
//    SI4463_Receive_FSK(hqHandle->siHandle, rxBufQue, 8, 100);
//    rxReceived = 1;
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000981 	.word	0x20000981

0800302c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	b098      	sub	sp, #96	; 0x60
 8003030:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003032:	f001 fb1b 	bl	800466c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8003036:	f000 f8af 	bl	8003198 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800303a:	f000 fa81 	bl	8003540 <MX_GPIO_Init>
    MX_DMA_Init();
 800303e:	f000 fa59 	bl	80034f4 <MX_DMA_Init>
    MX_SPI1_Init();
 8003042:	f000 f915 	bl	8003270 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8003046:	f000 f951 	bl	80032ec <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 800304a:	f000 f9eb 	bl	8003424 <MX_USART3_UART_Init>
    MX_USART4_UART_Init();
 800304e:	f000 fa1d 	bl	800348c <MX_USART4_UART_Init>
    MX_USART2_UART_Init();
 8003052:	f000 f999 	bl	8003388 <MX_USART2_UART_Init>
    MX_CRC_Init();
 8003056:	f000 f8e7 	bl	8003228 <MX_CRC_Init>
    // TODO get COM temperature

    /* SI4463 Configuration--------------------------------------------------------*/

    SI4463_StatusTypeDef retVal;
    SI4463_Handle SI4463_Handle = { 0 };
 800305a:	2420      	movs	r4, #32
 800305c:	193b      	adds	r3, r7, r4
 800305e:	0018      	movs	r0, r3
 8003060:	232c      	movs	r3, #44	; 0x2c
 8003062:	001a      	movs	r2, r3
 8003064:	2100      	movs	r1, #0
 8003066:	f005 fa80 	bl	800856a <memset>

    // configure handle
    SI4463_Handle.spi = &hspi1;
 800306a:	0021      	movs	r1, r4
 800306c:	187b      	adds	r3, r7, r1
 800306e:	4a42      	ldr	r2, [pc, #264]	; (8003178 <main+0x14c>)
 8003070:	601a      	str	r2, [r3, #0]
    SI4463_Handle.SDNPort = SPI1_SDN_GPIO_Port;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	4a41      	ldr	r2, [pc, #260]	; (800317c <main+0x150>)
 8003076:	605a      	str	r2, [r3, #4]
    SI4463_Handle.SDNPin = SPI1_SDN_Pin;
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	811a      	strh	r2, [r3, #8]
    SI4463_Handle.CSPort = SPI1_CS_GPIO_Port;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <main+0x154>)
 8003082:	60da      	str	r2, [r3, #12]
    SI4463_Handle.CSPin = SPI1_CS_Pin;
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2201      	movs	r2, #1
 8003088:	821a      	strh	r2, [r3, #16]
    SI4463_Handle.GPIO0_Port = SPI1_GPIO0_GPIO_Port;   // required for RTTY only
 800308a:	187b      	adds	r3, r7, r1
 800308c:	22a0      	movs	r2, #160	; 0xa0
 800308e:	05d2      	lsls	r2, r2, #23
 8003090:	615a      	str	r2, [r3, #20]
    SI4463_Handle.GPIO0_Pin = SPI1_GPIO0_Pin;
 8003092:	187b      	adds	r3, r7, r1
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	0052      	lsls	r2, r2, #1
 8003098:	831a      	strh	r2, [r3, #24]
    SI4463_Handle.freq = SI4463_FREQ_26MHZ;     // change to XIN frequency
 800309a:	0008      	movs	r0, r1
 800309c:	183b      	adds	r3, r7, r0
 800309e:	2223      	movs	r2, #35	; 0x23
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]
    SI4463_Handle.baudDelay = 20;
 80030a4:	183b      	adds	r3, r7, r0
 80030a6:	2214      	movs	r2, #20
 80030a8:	849a      	strh	r2, [r3, #36]	; 0x24
    SI4463_Handle.power = 0x01;
 80030aa:	183b      	adds	r3, r7, r0
 80030ac:	2222      	movs	r2, #34	; 0x22
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
    // 0x02 = -3 dBm
    // 0x01 = -9.7 dBm
    // 0x00 = -41.5 dBm

    // set RTTY config
    SI4463_Handle.config = SI4463_CONFIG_FSK;
 80030b2:	183b      	adds	r3, r7, r0
 80030b4:	2226      	movs	r2, #38	; 0x26
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]
    // try to initialise device
    retVal = SI4463_Init(&SI4463_Handle);
 80030ba:	255b      	movs	r5, #91	; 0x5b
 80030bc:	197c      	adds	r4, r7, r5
 80030be:	183b      	adds	r3, r7, r0
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 fb32 	bl	800372a <SI4463_Init>
 80030c6:	0003      	movs	r3, r0
 80030c8:	7023      	strb	r3, [r4, #0]
    // check if was able to initialise device
    if (retVal != SI4463_OK) {
 80030ca:	197b      	adds	r3, r7, r5
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <main+0xa8>
        while (1);
 80030d2:	e7fe      	b.n	80030d2 <main+0xa6>
    }

    /* GSM Configuration--------------------------------------------------------*/

    GSM_Handle GSM_Handle;
    GSM_Handle.uart = &huart1;
 80030d4:	210c      	movs	r1, #12
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <main+0x158>)
 80030da:	601a      	str	r2, [r3, #0]
    GSM_Handle.PWRPort = GSM_PWR_GPIO_Port;
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	4a28      	ldr	r2, [pc, #160]	; (8003180 <main+0x154>)
 80030e0:	605a      	str	r2, [r3, #4]
    GSM_Handle.PWRPin = GSM_PWR_Pin;
 80030e2:	187b      	adds	r3, r7, r1
 80030e4:	2210      	movs	r2, #16
 80030e6:	811a      	strh	r2, [r3, #8]
    GSM_Handle.RSTPort = GSM_RST_GPIO_Port;
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	22a0      	movs	r2, #160	; 0xa0
 80030ec:	05d2      	lsls	r2, r2, #23
 80030ee:	60da      	str	r2, [r3, #12]
    GSM_Handle.RSTPin = GSM_RST_Pin;
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	4a25      	ldr	r2, [pc, #148]	; (8003188 <main+0x15c>)
 80030f4:	821a      	strh	r2, [r3, #16]

    if (GSM_Init(&GSM_Handle) == GSM_ERROR) {
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff faff 	bl	80026fc <GSM_Init>
 80030fe:	0003      	movs	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	d100      	bne.n	8003106 <main+0xda>
        while (1);
 8003104:	e7fe      	b.n	8003104 <main+0xd8>
    }

    GSM_Off();
 8003106:	f7ff fb13 	bl	8002730 <GSM_Off>
                break;
            }
        }
    #endif

    GSM_Off();
 800310a:	f7ff fb11 	bl	8002730 <GSM_Off>

    /* GPS Configuration--------------------------------------------------------*/

    HAL_Delay(1000);
 800310e:	23fa      	movs	r3, #250	; 0xfa
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	0018      	movs	r0, r3
 8003114:	f001 fb30 	bl	8004778 <HAL_Delay>

    //if (GPS_init_Uart(&huart2) != HAL_OK) {
        //while (1);
    //}

    HAL_UART_Abort(&huart2);
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <main+0x160>)
 800311a:	0018      	movs	r0, r3
 800311c:	f004 f8ee 	bl	80072fc <HAL_UART_Abort>
    HAL_UART_Receive_DMA(&huart2, &rxBufGPS, 1);
 8003120:	491b      	ldr	r1, [pc, #108]	; (8003190 <main+0x164>)
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <main+0x160>)
 8003124:	2201      	movs	r2, #1
 8003126:	0018      	movs	r0, r3
 8003128:	f004 f88a 	bl	8007240 <HAL_UART_Receive_DMA>

    /* HQ Configuration--------------------------------------------------------*/

    HQ_Handle hqHandle;
    hqHandle.siHandle = &SI4463_Handle;
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	2220      	movs	r2, #32
 8003130:	18ba      	adds	r2, r7, r2
 8003132:	601a      	str	r2, [r3, #0]
    hqHandle.uart = &huart4;
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <main+0x168>)
 8003138:	605a      	str	r2, [r3, #4]

    HQ_Init(&hqHandle);
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff fb13 	bl	8002768 <HQ_Init>
    // enable interrupt after configuring SI4463 else will hard fault, should check if is initialised
    HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003142:	2005      	movs	r0, #5
 8003144:	f001 fbfd 	bl	8004942 <HAL_NVIC_EnableIRQ>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t timer = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t errorLedDelay = 200;
 800314c:	23c8      	movs	r3, #200	; 0xc8
 800314e:	657b      	str	r3, [r7, #84]	; 0x54
    uint32_t okLedDelay = 1000;
 8003150:	23fa      	movs	r3, #250	; 0xfa
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t trxLedDelay = 1000;
 8003156:	23fa      	movs	r3, #250	; 0xfa
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c



    while (1) {

        if (timer < HAL_GetTick()) {
 800315c:	f001 fb02 	bl	8004764 <HAL_GetTick>
 8003160:	0002      	movs	r2, r0
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	4293      	cmp	r3, r2
 8003166:	d203      	bcs.n	8003170 <main+0x144>
            timer += okLedDelay;
 8003168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
#endif
        }

        // process RX data and anything else we need to do
        HQ_Loop();
 8003170:	f7ff fbf2 	bl	8002958 <HQ_Loop>
        if (timer < HAL_GetTick()) {
 8003174:	e7f2      	b.n	800315c <main+0x130>
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	20000ad8 	.word	0x20000ad8
 800317c:	50000800 	.word	0x50000800
 8003180:	50000400 	.word	0x50000400
 8003184:	20000b3c 	.word	0x20000b3c
 8003188:	ffff8000 	.word	0xffff8000
 800318c:	20000bd0 	.word	0x20000bd0
 8003190:	20000e44 	.word	0x20000e44
 8003194:	20000cf8 	.word	0x20000cf8

08003198 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b093      	sub	sp, #76	; 0x4c
 800319c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800319e:	2410      	movs	r4, #16
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	0018      	movs	r0, r3
 80031a4:	2338      	movs	r3, #56	; 0x38
 80031a6:	001a      	movs	r2, r3
 80031a8:	2100      	movs	r1, #0
 80031aa:	f005 f9de 	bl	800856a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80031ae:	003b      	movs	r3, r7
 80031b0:	0018      	movs	r0, r3
 80031b2:	2310      	movs	r3, #16
 80031b4:	001a      	movs	r2, r3
 80031b6:	2100      	movs	r1, #0
 80031b8:	f005 f9d7 	bl	800856a <memset>

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	0018      	movs	r0, r3
 80031c2:	f002 f923 	bl	800540c <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	2202      	movs	r2, #2
 80031ca:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031cc:	193b      	adds	r3, r7, r4
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	0052      	lsls	r2, r2, #1
 80031d2:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	0018      	movs	r0, r3
 80031ea:	f002 f95b 	bl	80054a4 <HAL_RCC_OscConfig>
 80031ee:	1e03      	subs	r3, r0, #0
 80031f0:	d001      	beq.n	80031f6 <SystemClock_Config+0x5e>
        Error_Handler();
 80031f2:	f000 fa95 	bl	8003720 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80031f6:	003b      	movs	r3, r7
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031fc:	003b      	movs	r3, r7
 80031fe:	2200      	movs	r2, #0
 8003200:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003202:	003b      	movs	r3, r7
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003208:	003b      	movs	r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800320e:	003b      	movs	r3, r7
 8003210:	2100      	movs	r1, #0
 8003212:	0018      	movs	r0, r3
 8003214:	f002 fc60 	bl	8005ad8 <HAL_RCC_ClockConfig>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d001      	beq.n	8003220 <SystemClock_Config+0x88>
        Error_Handler();
 800321c:	f000 fa80 	bl	8003720 <Error_Handler>
    }
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b013      	add	sp, #76	; 0x4c
 8003226:	bd90      	pop	{r4, r7, pc}

08003228 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_CRC_Init+0x40>)
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <MX_CRC_Init+0x44>)
 8003230:	601a      	str	r2, [r3, #0]
    hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <MX_CRC_Init+0x40>)
 8003234:	2200      	movs	r2, #0
 8003236:	711a      	strb	r2, [r3, #4]
    hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_CRC_Init+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	715a      	strb	r2, [r3, #5]
    hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <MX_CRC_Init+0x40>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
    hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <MX_CRC_Init+0x40>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
    hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <MX_CRC_Init+0x40>)
 800324c:	2201      	movs	r2, #1
 800324e:	621a      	str	r2, [r3, #32]
    if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <MX_CRC_Init+0x40>)
 8003252:	0018      	movs	r0, r3
 8003254:	f001 fb92 	bl	800497c <HAL_CRC_Init>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d001      	beq.n	8003260 <MX_CRC_Init+0x38>
        Error_Handler();
 800325c:	f000 fa60 	bl	8003720 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000ab4 	.word	0x20000ab4
 800326c:	40023000 	.word	0x40023000

08003270 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_SPI1_Init+0x74>)
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <MX_SPI1_Init+0x78>)
 8003278:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <MX_SPI1_Init+0x74>)
 800327c:	2282      	movs	r2, #130	; 0x82
 800327e:	0052      	lsls	r2, r2, #1
 8003280:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <MX_SPI1_Init+0x74>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <MX_SPI1_Init+0x74>)
 800328a:	22e0      	movs	r2, #224	; 0xe0
 800328c:	00d2      	lsls	r2, r2, #3
 800328e:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <MX_SPI1_Init+0x74>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <MX_SPI1_Init+0x74>)
 8003298:	2200      	movs	r2, #0
 800329a:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <MX_SPI1_Init+0x74>)
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032a6:	2218      	movs	r2, #24
 80032a8:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 7;
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032be:	2207      	movs	r2, #7
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032ca:	2208      	movs	r2, #8
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <MX_SPI1_Init+0x74>)
 80032d0:	0018      	movs	r0, r3
 80032d2:	f002 ff63 	bl	800619c <HAL_SPI_Init>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <MX_SPI1_Init+0x6e>
        Error_Handler();
 80032da:	f000 fa21 	bl	8003720 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000ad8 	.word	0x20000ad8
 80032e8:	40013000 	.word	0x40013000

080032ec <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <MX_USART1_UART_Init+0x94>)
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <MX_USART1_UART_Init+0x98>)
 80032f4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <MX_USART1_UART_Init+0x94>)
 80032f8:	22e1      	movs	r2, #225	; 0xe1
 80032fa:	0252      	lsls	r2, r2, #9
 80032fc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <MX_USART1_UART_Init+0x94>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003312:	220c      	movs	r2, #12
 8003314:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <MX_USART1_UART_Init+0x94>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <MX_USART1_UART_Init+0x94>)
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003330:	2200      	movs	r2, #0
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003336:	0018      	movs	r0, r3
 8003338:	f003 fe32 	bl	8006fa0 <HAL_UART_Init>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d001      	beq.n	8003344 <MX_USART1_UART_Init+0x58>
        Error_Handler();
 8003340:	f000 f9ee 	bl	8003720 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003346:	2100      	movs	r1, #0
 8003348:	0018      	movs	r0, r3
 800334a:	f005 f801 	bl	8008350 <HAL_UARTEx_SetTxFifoThreshold>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <MX_USART1_UART_Init+0x6a>
        Error_Handler();
 8003352:	f000 f9e5 	bl	8003720 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <MX_USART1_UART_Init+0x94>)
 8003358:	2100      	movs	r1, #0
 800335a:	0018      	movs	r0, r3
 800335c:	f005 f838 	bl	80083d0 <HAL_UARTEx_SetRxFifoThreshold>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d001      	beq.n	8003368 <MX_USART1_UART_Init+0x7c>
        Error_Handler();
 8003364:	f000 f9dc 	bl	8003720 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <MX_USART1_UART_Init+0x94>)
 800336a:	0018      	movs	r0, r3
 800336c:	f004 ffb6 	bl	80082dc <HAL_UARTEx_DisableFifoMode>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <MX_USART1_UART_Init+0x8c>
        Error_Handler();
 8003374:	f000 f9d4 	bl	8003720 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20000b3c 	.word	0x20000b3c
 8003384:	40013800 	.word	0x40013800

08003388 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 800338c:	4b23      	ldr	r3, [pc, #140]	; (800341c <MX_USART2_UART_Init+0x94>)
 800338e:	4a24      	ldr	r2, [pc, #144]	; (8003420 <MX_USART2_UART_Init+0x98>)
 8003390:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <MX_USART2_UART_Init+0x94>)
 8003394:	2296      	movs	r2, #150	; 0x96
 8003396:	0192      	lsls	r2, r2, #6
 8003398:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <MX_USART2_UART_Init+0x94>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033ae:	220c      	movs	r2, #12
 80033b0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b8:	4b18      	ldr	r3, [pc, #96]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f003 fde4 	bl	8006fa0 <HAL_UART_Init>
 80033d8:	1e03      	subs	r3, r0, #0
 80033da:	d001      	beq.n	80033e0 <MX_USART2_UART_Init+0x58>
        Error_Handler();
 80033dc:	f000 f9a0 	bl	8003720 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033e2:	2100      	movs	r1, #0
 80033e4:	0018      	movs	r0, r3
 80033e6:	f004 ffb3 	bl	8008350 <HAL_UARTEx_SetTxFifoThreshold>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d001      	beq.n	80033f2 <MX_USART2_UART_Init+0x6a>
        Error_Handler();
 80033ee:	f000 f997 	bl	8003720 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <MX_USART2_UART_Init+0x94>)
 80033f4:	2100      	movs	r1, #0
 80033f6:	0018      	movs	r0, r3
 80033f8:	f004 ffea 	bl	80083d0 <HAL_UARTEx_SetRxFifoThreshold>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d001      	beq.n	8003404 <MX_USART2_UART_Init+0x7c>
        Error_Handler();
 8003400:	f000 f98e 	bl	8003720 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <MX_USART2_UART_Init+0x94>)
 8003406:	0018      	movs	r0, r3
 8003408:	f004 ff68 	bl	80082dc <HAL_UARTEx_DisableFifoMode>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <MX_USART2_UART_Init+0x8c>
        Error_Handler();
 8003410:	f000 f986 	bl	8003720 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	20000bd0 	.word	0x20000bd0
 8003420:	40004400 	.word	0x40004400

08003424 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <MX_USART3_UART_Init+0x60>)
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <MX_USART3_UART_Init+0x64>)
 800342c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003430:	22e1      	movs	r2, #225	; 0xe1
 8003432:	0252      	lsls	r2, r2, #9
 8003434:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_USART3_UART_Init+0x60>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_USART3_UART_Init+0x60>)
 800344a:	220c      	movs	r2, #12
 800344c:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <MX_USART3_UART_Init+0x60>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <MX_USART3_UART_Init+0x60>)
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_HalfDuplex_Init(&huart3) != HAL_OK) {
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <MX_USART3_UART_Init+0x60>)
 800346e:	0018      	movs	r0, r3
 8003470:	f003 fdec 	bl	800704c <HAL_HalfDuplex_Init>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <MX_USART3_UART_Init+0x58>
        Error_Handler();
 8003478:	f000 f952 	bl	8003720 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	20000c64 	.word	0x20000c64
 8003488:	40004800 	.word	0x40004800

0800348c <MX_USART4_UART_Init>:
/**
 * @brief USART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART4_UART_Init(void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
    /* USER CODE END USART4_Init 0 */

    /* USER CODE BEGIN USART4_Init 1 */

    /* USER CODE END USART4_Init 1 */
    huart4.Instance = USART4;
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <MX_USART4_UART_Init+0x60>)
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <MX_USART4_UART_Init+0x64>)
 8003494:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 115200;
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <MX_USART4_UART_Init+0x60>)
 8003498:	22e1      	movs	r2, #225	; 0xe1
 800349a:	0252      	lsls	r2, r2, #9
 800349c:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034b2:	220c      	movs	r2, #12
 80034b4:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK) {
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <MX_USART4_UART_Init+0x60>)
 80034d6:	0018      	movs	r0, r3
 80034d8:	f003 fd62 	bl	8006fa0 <HAL_UART_Init>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_USART4_UART_Init+0x58>
        Error_Handler();
 80034e0:	f000 f91e 	bl	8003720 <Error_Handler>
    }
    /* USER CODE BEGIN USART4_Init 2 */

    /* USER CODE END USART4_Init 2 */

}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	20000cf8 	.word	0x20000cf8
 80034f0:	40004c00 	.word	0x40004c00

080034f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <MX_DMA_Init+0x48>)
 80034fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <MX_DMA_Init+0x48>)
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <MX_DMA_Init+0x48>)
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	2201      	movs	r2, #1
 800350c:	4013      	ands	r3, r2
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2009      	movs	r0, #9
 8003518:	f001 f9fe 	bl	8004918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800351c:	2009      	movs	r0, #9
 800351e:	f001 fa10 	bl	8004942 <HAL_NVIC_EnableIRQ>
    /* DMA1_Channel2_3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	200a      	movs	r0, #10
 8003528:	f001 f9f6 	bl	8004918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800352c:	200a      	movs	r0, #10
 800352e:	f001 fa08 	bl	8004942 <HAL_NVIC_EnableIRQ>

}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40021000 	.word	0x40021000

08003540 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003546:	240c      	movs	r4, #12
 8003548:	193b      	adds	r3, r7, r4
 800354a:	0018      	movs	r0, r3
 800354c:	2314      	movs	r3, #20
 800354e:	001a      	movs	r2, r3
 8003550:	2100      	movs	r1, #0
 8003552:	f005 f80a 	bl	800856a <memset>

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <MX_GPIO_Init+0x148>)
 8003558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355a:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <MX_GPIO_Init+0x148>)
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	635a      	str	r2, [r3, #52]	; 0x34
 8003562:	4b49      	ldr	r3, [pc, #292]	; (8003688 <MX_GPIO_Init+0x148>)
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	4b46      	ldr	r3, [pc, #280]	; (8003688 <MX_GPIO_Init+0x148>)
 8003570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003572:	4b45      	ldr	r3, [pc, #276]	; (8003688 <MX_GPIO_Init+0x148>)
 8003574:	2102      	movs	r1, #2
 8003576:	430a      	orrs	r2, r1
 8003578:	635a      	str	r2, [r3, #52]	; 0x34
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <MX_GPIO_Init+0x148>)
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	2202      	movs	r2, #2
 8003580:	4013      	ands	r3, r2
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <MX_GPIO_Init+0x148>)
 8003588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <MX_GPIO_Init+0x148>)
 800358c:	2104      	movs	r1, #4
 800358e:	430a      	orrs	r2, r1
 8003590:	635a      	str	r2, [r3, #52]	; 0x34
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <MX_GPIO_Init+0x148>)
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	2204      	movs	r2, #4
 8003598:	4013      	ands	r3, r2
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LED3_Pin | SPI1_GPIO0_Pin | LED0_Pin | LED1_Pin | GSM_RST_Pin, GPIO_PIN_RESET);
 800359e:	493b      	ldr	r1, [pc, #236]	; (800368c <MX_GPIO_Init+0x14c>)
 80035a0:	23a0      	movs	r3, #160	; 0xa0
 80035a2:	05db      	lsls	r3, r3, #23
 80035a4:	2200      	movs	r2, #0
 80035a6:	0018      	movs	r0, r3
 80035a8:	f001 fede 	bl	8005368 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin | GSM_PWR_Pin | LED2_Pin, GPIO_PIN_RESET);
 80035ac:	4b38      	ldr	r3, [pc, #224]	; (8003690 <MX_GPIO_Init+0x150>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	2131      	movs	r1, #49	; 0x31
 80035b2:	0018      	movs	r0, r3
 80035b4:	f001 fed8 	bl	8005368 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPI1_SDN_GPIO_Port, SPI1_SDN_Pin, GPIO_PIN_RESET);
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <MX_GPIO_Init+0x154>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	0018      	movs	r0, r3
 80035c0:	f001 fed2 	bl	8005368 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED3_Pin SPI1_GPIO0_Pin LED0_Pin LED1_Pin
     GSM_RST_Pin */
    GPIO_InitStruct.Pin = LED3_Pin | SPI1_GPIO0_Pin | LED0_Pin | LED1_Pin | GSM_RST_Pin;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	4a31      	ldr	r2, [pc, #196]	; (800368c <MX_GPIO_Init+0x14c>)
 80035c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2201      	movs	r2, #1
 80035ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035dc:	193a      	adds	r2, r7, r4
 80035de:	23a0      	movs	r3, #160	; 0xa0
 80035e0:	05db      	lsls	r3, r3, #23
 80035e2:	0011      	movs	r1, r2
 80035e4:	0018      	movs	r0, r3
 80035e6:	f001 fd5b 	bl	80050a0 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI1_CS_Pin GSM_PWR_Pin LED2_Pin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin | GSM_PWR_Pin | LED2_Pin;
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	2231      	movs	r2, #49	; 0x31
 80035ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f0:	193b      	adds	r3, r7, r4
 80035f2:	2201      	movs	r2, #1
 80035f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	193b      	adds	r3, r7, r4
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	193b      	adds	r3, r7, r4
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	193b      	adds	r3, r7, r4
 8003604:	4a22      	ldr	r2, [pc, #136]	; (8003690 <MX_GPIO_Init+0x150>)
 8003606:	0019      	movs	r1, r3
 8003608:	0010      	movs	r0, r2
 800360a:	f001 fd49 	bl	80050a0 <HAL_GPIO_Init>

    /*Configure GPIO pin : SPI1_IRQ_Pin */
    GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 800360e:	0021      	movs	r1, r4
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2202      	movs	r2, #2
 8003614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2284      	movs	r2, #132	; 0x84
 800361a:	0392      	lsls	r2, r2, #14
 800361c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	000c      	movs	r4, r1
 8003620:	193b      	adds	r3, r7, r4
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003626:	193b      	adds	r3, r7, r4
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <MX_GPIO_Init+0x150>)
 800362a:	0019      	movs	r1, r3
 800362c:	0010      	movs	r0, r2
 800362e:	f001 fd37 	bl	80050a0 <HAL_GPIO_Init>

    /*Configure GPIO pin : SPI1_SDN_Pin */
    GPIO_InitStruct.Pin = SPI1_SDN_Pin;
 8003632:	193b      	adds	r3, r7, r4
 8003634:	2240      	movs	r2, #64	; 0x40
 8003636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003638:	193b      	adds	r3, r7, r4
 800363a:	2201      	movs	r2, #1
 800363c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	193b      	adds	r3, r7, r4
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	193b      	adds	r3, r7, r4
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(SPI1_SDN_GPIO_Port, &GPIO_InitStruct);
 800364a:	193b      	adds	r3, r7, r4
 800364c:	4a11      	ldr	r2, [pc, #68]	; (8003694 <MX_GPIO_Init+0x154>)
 800364e:	0019      	movs	r1, r3
 8003650:	0010      	movs	r0, r2
 8003652:	f001 fd25 	bl	80050a0 <HAL_GPIO_Init>

    /*Configure GPIO pin : GSM_INT_Pin */
    GPIO_InitStruct.Pin = GSM_INT_Pin;
 8003656:	0021      	movs	r1, r4
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2208      	movs	r2, #8
 800365c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2200      	movs	r2, #0
 8003662:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GSM_INT_GPIO_Port, &GPIO_InitStruct);
 800366a:	187b      	adds	r3, r7, r1
 800366c:	4a08      	ldr	r2, [pc, #32]	; (8003690 <MX_GPIO_Init+0x150>)
 800366e:	0019      	movs	r1, r3
 8003670:	0010      	movs	r0, r2
 8003672:	f001 fd15 	bl	80050a0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2100      	movs	r1, #0
 800367a:	2005      	movs	r0, #5
 800367c:	f001 f94c 	bl	8004918 <HAL_NVIC_SetPriority>
    //HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);

}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b009      	add	sp, #36	; 0x24
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	00009910 	.word	0x00009910
 8003690:	50000400 	.word	0x50000400
 8003694:	50000800 	.word	0x50000800

08003698 <HAL_GPIO_EXTI_Falling_Callback>:

void MAIN_HQ_Response() {
    hqGotResponse = 1;
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	0002      	movs	r2, r0
 80036a0:	1dbb      	adds	r3, r7, #6
 80036a2:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == SPI1_IRQ_Pin) {
 80036a4:	1dbb      	adds	r3, r7, #6
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d101      	bne.n	80036b0 <HAL_GPIO_EXTI_Falling_Callback+0x18>
        HQ_SI_RX_CallBack();
 80036ac:	f7ff fcb4 	bl	8003018 <HQ_SI_RX_CallBack>
    }
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b002      	add	sp, #8
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_UART_RxCpltCallback+0x30>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d104      	bne.n	80036d2 <HAL_UART_RxCpltCallback+0x1a>
        GPS_Receive(rxBufGPS);
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_UART_RxCpltCallback+0x34>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fe fb05 	bl	8001cdc <GPS_Receive>
    }
    if (huart == &huart4) {
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_UART_RxCpltCallback+0x38>)
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d101      	bne.n	80036de <HAL_UART_RxCpltCallback+0x26>
        BOARDTRX_UART_RX_CB();
 80036da:	f7fe fabf 	bl	8001c5c <BOARDTRX_UART_RX_CB>
    }
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20000bd0 	.word	0x20000bd0
 80036ec:	20000e44 	.word	0x20000e44
 80036f0:	20000cf8 	.word	0x20000cf8

080036f4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_UART_ErrorCallback+0x24>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d105      	bne.n	8003710 <HAL_UART_ErrorCallback+0x1c>
        HAL_UART_Receive_DMA(&huart2, &rxBufGPS, 1);
 8003704:	4905      	ldr	r1, [pc, #20]	; (800371c <HAL_UART_ErrorCallback+0x28>)
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <HAL_UART_ErrorCallback+0x24>)
 8003708:	2201      	movs	r2, #1
 800370a:	0018      	movs	r0, r3
 800370c:	f003 fd98 	bl	8007240 <HAL_UART_Receive_DMA>
    }
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b002      	add	sp, #8
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000bd0 	.word	0x20000bd0
 800371c:	20000e44 	.word	0x20000e44

08003720 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003724:	b672      	cpsid	i
}
 8003726:	46c0      	nop			; (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8003728:	e7fe      	b.n	8003728 <Error_Handler+0x8>

0800372a <SI4463_Init>:
 * @Param *buf pointer to buffer where received data will be written to
 * @Param size size of data to receive
 * @Param timeout how long will try to receive
 * @Retval status of CTS and Receive
 */
SI4463_StatusTypeDef SI4463_Init(SI4463_Handle *handle) {
 800372a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372c:	b08b      	sub	sp, #44	; 0x2c
 800372e:	af02      	add	r7, sp, #8
 8003730:	6078      	str	r0, [r7, #4]
    if (handle->spi == 0x00) {
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <SI4463_Init+0x14>
        return SI4463_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e071      	b.n	8003822 <SI4463_Init+0xf8>
    }
    if (handle->CSPort == 0x00) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <SI4463_Init+0x20>
        return SI4463_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06b      	b.n	8003822 <SI4463_Init+0xf8>
    }

    // deselect
    SI4463_Deselect(handle);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fd0f 	bl	8004170 <SI4463_Deselect>
    // Shutdown TRX
    HAL_GPIO_WritePin(handle->SDNPort, handle->SDNPin, GPIO_PIN_SET);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6858      	ldr	r0, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	891b      	ldrh	r3, [r3, #8]
 800375a:	2201      	movs	r2, #1
 800375c:	0019      	movs	r1, r3
 800375e:	f001 fe03 	bl	8005368 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003762:	200a      	movs	r0, #10
 8003764:	f001 f808 	bl	8004778 <HAL_Delay>
    // turn on TRX
    HAL_GPIO_WritePin(handle->SDNPort, handle->SDNPin, GPIO_PIN_RESET);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6858      	ldr	r0, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	891b      	ldrh	r3, [r3, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	0019      	movs	r1, r3
 8003774:	f001 fdf8 	bl	8005368 <HAL_GPIO_WritePin>
    HAL_Delay(14);
 8003778:	200e      	movs	r0, #14
 800377a:	f000 fffd 	bl	8004778 <HAL_Delay>

    uint8_t rxData[8];
    uint8_t idCmd = 0x01;
 800377e:	211f      	movs	r1, #31
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
    SI4463_SPI_Receive(handle, idCmd, rxData, 8, 1000);
 8003786:	2414      	movs	r4, #20
 8003788:	193a      	adds	r2, r7, r4
 800378a:	187b      	adds	r3, r7, r1
 800378c:	7819      	ldrb	r1, [r3, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	23fa      	movs	r3, #250	; 0xfa
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2308      	movs	r3, #8
 8003798:	f000 fc3c 	bl	8004014 <SI4463_SPI_Receive>
    // check for correct device ID
    if( rxData[1] != 0x44 || rxData[2] != 0x63){
 800379c:	193b      	adds	r3, r7, r4
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	2b44      	cmp	r3, #68	; 0x44
 80037a2:	d103      	bne.n	80037ac <SI4463_Init+0x82>
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	789b      	ldrb	r3, [r3, #2]
 80037a8:	2b63      	cmp	r3, #99	; 0x63
 80037aa:	d001      	beq.n	80037b0 <SI4463_Init+0x86>
        return SI4463_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e038      	b.n	8003822 <SI4463_Init+0xf8>
    }

    // config device
    SI4463_Config(handle);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f83a 	bl	800382c <SI4463_Config>

    // check device id
    uint8_t data[12] = { 0 };
 80037b8:	2608      	movs	r6, #8
 80037ba:	19bb      	adds	r3, r7, r6
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2208      	movs	r2, #8
 80037c4:	2100      	movs	r1, #0
 80037c6:	0018      	movs	r0, r3
 80037c8:	f004 fecf 	bl	800856a <memset>
    uint8_t cmd = 0;
 80037cc:	211e      	movs	r1, #30
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
    SI4463_StatusTypeDef retVal = SI4463_ERROR;
 80037d4:	251d      	movs	r5, #29
 80037d6:	197b      	adds	r3, r7, r5
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]

    cmd = SI4463_CMD_PART_INFO;
 80037dc:	187b      	adds	r3, r7, r1
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
    retVal = SI4463_SPI_Receive(handle, cmd, data, 8, 1000);
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	19ba      	adds	r2, r7, r6
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	7819      	ldrb	r1, [r3, #0]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	23fa      	movs	r3, #250	; 0xfa
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2308      	movs	r3, #8
 80037f4:	f000 fc0e 	bl	8004014 <SI4463_SPI_Receive>
 80037f8:	0003      	movs	r3, r0
 80037fa:	7023      	strb	r3, [r4, #0]
    if (retVal != SI4463_OK) {
 80037fc:	197b      	adds	r3, r7, r5
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <SI4463_Init+0xe0>
        return retVal;
 8003804:	197b      	adds	r3, r7, r5
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	e00b      	b.n	8003822 <SI4463_Init+0xf8>
    }
    // check if device ID matches
    if (data[1] != 0x44 || data[2] != 0x63) {
 800380a:	2208      	movs	r2, #8
 800380c:	18bb      	adds	r3, r7, r2
 800380e:	785b      	ldrb	r3, [r3, #1]
 8003810:	2b44      	cmp	r3, #68	; 0x44
 8003812:	d103      	bne.n	800381c <SI4463_Init+0xf2>
 8003814:	18bb      	adds	r3, r7, r2
 8003816:	789b      	ldrb	r3, [r3, #2]
 8003818:	2b63      	cmp	r3, #99	; 0x63
 800381a:	d001      	beq.n	8003820 <SI4463_Init+0xf6>
        return SI4463_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <SI4463_Init+0xf8>
    }

    return SI4463_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b009      	add	sp, #36	; 0x24
 8003828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800382c <SI4463_Config>:
 * @Brief configures SI4463 from from WDS generated config header
 * @Param *config pointer to generated config array
 * @Retval status of configuration
 */
volatile GPIO_PinState test = 0;
SI4463_StatusTypeDef SI4463_Config(SI4463_Handle *handle) {
 800382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382e:	b08f      	sub	sp, #60	; 0x3c
 8003830:	af02      	add	r7, sp, #8
 8003832:	6078      	str	r0, [r7, #4]
    SI4463_StatusTypeDef retVal;
    uint8_t *config;
    uint8_t cmd = 0x00;
 8003834:	2423      	movs	r4, #35	; 0x23
 8003836:	193b      	adds	r3, r7, r4
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
    uint8_t rxData[8] = { 0 };
 800383c:	2318      	movs	r3, #24
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	2200      	movs	r2, #0
 8003846:	605a      	str	r2, [r3, #4]

    // send NOP before everything else
    SI4463_Select(handle);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 fc6a 	bl	8004124 <SI4463_Select>
    HAL_SPI_Transmit(handle->spi, &cmd, 1, 20);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	1939      	adds	r1, r7, r4
 8003856:	2314      	movs	r3, #20
 8003858:	2201      	movs	r2, #1
 800385a:	f002 fd57 	bl	800630c <HAL_SPI_Transmit>
    SI4463_Deselect(handle);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fc85 	bl	8004170 <SI4463_Deselect>

    if (handle->config == SI4463_CONFIG_FSK) {
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2226      	movs	r2, #38	; 0x26
 800386a:	5c9b      	ldrb	r3, [r3, r2]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <SI4463_Config+0x68>
        if (handle->freq == SI4463_FREQ_26MHZ) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2223      	movs	r2, #35	; 0x23
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <SI4463_Config+0x54>
            config = FSK_26;
 800387a:	4b69      	ldr	r3, [pc, #420]	; (8003a20 <SI4463_Config+0x1f4>)
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387e:	e0c5      	b.n	8003a0c <SI4463_Config+0x1e0>
        } else if (handle->freq == SI4463_FREQ_30MHZ) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2223      	movs	r2, #35	; 0x23
 8003884:	5c9b      	ldrb	r3, [r3, r2]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <SI4463_Config+0x64>
            config = FSK_30;
 800388a:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <SI4463_Config+0x1f8>)
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388e:	e0bd      	b.n	8003a0c <SI4463_Config+0x1e0>
        } else {
            return SI4463_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0c1      	b.n	8003a18 <SI4463_Config+0x1ec>
        }
    } else if (handle->config == SI4463_CONFIG_RTTY) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2226      	movs	r2, #38	; 0x26
 8003898:	5c9b      	ldrb	r3, [r3, r2]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d111      	bne.n	80038c2 <SI4463_Config+0x96>
        if (handle->freq == SI4463_FREQ_26MHZ) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2223      	movs	r2, #35	; 0x23
 80038a2:	5c9b      	ldrb	r3, [r3, r2]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <SI4463_Config+0x82>
            config = RTTY_26;
 80038a8:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <SI4463_Config+0x1fc>)
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ac:	e0ae      	b.n	8003a0c <SI4463_Config+0x1e0>
        } else if (handle->freq == SI4463_FREQ_30MHZ) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2223      	movs	r2, #35	; 0x23
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d102      	bne.n	80038be <SI4463_Config+0x92>
            config = RTTY_30;
 80038b8:	4b5c      	ldr	r3, [pc, #368]	; (8003a2c <SI4463_Config+0x200>)
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038bc:	e0a6      	b.n	8003a0c <SI4463_Config+0x1e0>
        } else {
            return SI4463_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0aa      	b.n	8003a18 <SI4463_Config+0x1ec>
        }
    } else {
        return SI4463_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a8      	b.n	8003a18 <SI4463_Config+0x1ec>
    }

    // go trough configuration file and configure SI4463
    while (*config != 0) {
        uint8_t len = *config;
 80038c6:	212b      	movs	r1, #43	; 0x2b
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
        if (len > 16) {
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d901      	bls.n	80038dc <SI4463_Config+0xb0>
            return SI4463_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e09d      	b.n	8003a18 <SI4463_Config+0x1ec>
        }
         // 0x02, 0x01, 0x01, 0x01, 0x8C, 0xBA, 0x80
        config++;
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	3301      	adds	r3, #1
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t buf[16];
        memcpy(buf, config, len);
 80038e2:	252b      	movs	r5, #43	; 0x2b
 80038e4:	197b      	adds	r3, r7, r5
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ea:	2408      	movs	r4, #8
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	0018      	movs	r0, r3
 80038f0:	f004 fe32 	bl	8008558 <memcpy>
        config += len;
 80038f4:	197b      	adds	r3, r7, r5
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fa:	18d3      	adds	r3, r2, r3
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c

        // hijack power level settings and replace it with user set one
        if (buf[1] == SI4463_GRP_PA) {
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b22      	cmp	r3, #34	; 0x22
 8003904:	d104      	bne.n	8003910 <SI4463_Config+0xe4>
            buf[5] = handle->power;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2222      	movs	r2, #34	; 0x22
 800390a:	5c9a      	ldrb	r2, [r3, r2]
 800390c:	193b      	adds	r3, r7, r4
 800390e:	715a      	strb	r2, [r3, #5]
        }

        // hijack GPIO SETTINGS
        if (buf[0] == SI4463_CMD_GPIO_PIN_CFG) {
 8003910:	2108      	movs	r1, #8
 8003912:	187b      	adds	r3, r7, r1
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b13      	cmp	r3, #19
 8003918:	d10d      	bne.n	8003936 <SI4463_Config+0x10a>
            // set as TX in default
            buf[3] = SI4463_GPIO_HIGH;
 800391a:	187b      	adds	r3, r7, r1
 800391c:	2203      	movs	r2, #3
 800391e:	70da      	strb	r2, [r3, #3]
            buf[4] = SI4463_GPIO_LOW;
 8003920:	187b      	adds	r3, r7, r1
 8003922:	2202      	movs	r2, #2
 8003924:	711a      	strb	r2, [r3, #4]

            // copy to local buffer so we dont need to read it every time we change GPIO state
            memcpy(confGPIO, buf, 8);
 8003926:	4b42      	ldr	r3, [pc, #264]	; (8003a30 <SI4463_Config+0x204>)
 8003928:	187a      	adds	r2, r7, r1
 800392a:	ca03      	ldmia	r2!, {r0, r1}
 800392c:	c303      	stmia	r3!, {r0, r1}

            // set as in TX mode
            handle->isInTX = 1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2227      	movs	r2, #39	; 0x27
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]
        }

        retVal = SI4463_SPI_Transmit(handle, buf[0], &buf[1], (len - 1), 1000);
 8003936:	2208      	movs	r2, #8
 8003938:	18bb      	adds	r3, r7, r2
 800393a:	7819      	ldrb	r1, [r3, #0]
 800393c:	232b      	movs	r3, #43	; 0x2b
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	3b01      	subs	r3, #1
 8003944:	b2dd      	uxtb	r5, r3
 8003946:	262a      	movs	r6, #42	; 0x2a
 8003948:	19bc      	adds	r4, r7, r6
 800394a:	18bb      	adds	r3, r7, r2
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	23fa      	movs	r3, #250	; 0xfa
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	002b      	movs	r3, r5
 8003958:	f000 fba2 	bl	80040a0 <SI4463_SPI_Transmit>
 800395c:	0003      	movs	r3, r0
 800395e:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003960:	19bb      	adds	r3, r7, r6
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <SI4463_Config+0x142>
            return retVal;
 8003968:	19bb      	adds	r3, r7, r6
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	e054      	b.n	8003a18 <SI4463_Config+0x1ec>
        }

        SI4463_SPI_Transmit(handle, cmd, rxData, 3, 1000);
 800396e:	2423      	movs	r4, #35	; 0x23
 8003970:	193b      	adds	r3, r7, r4
 8003972:	7819      	ldrb	r1, [r3, #0]
 8003974:	2518      	movs	r5, #24
 8003976:	197a      	adds	r2, r7, r5
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	23fa      	movs	r3, #250	; 0xfa
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2303      	movs	r3, #3
 8003982:	f000 fb8d 	bl	80040a0 <SI4463_SPI_Transmit>

        cmd = SI4463_CMD_CHIP_STATUS;
 8003986:	0021      	movs	r1, r4
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2223      	movs	r2, #35	; 0x23
 800398c:	701a      	strb	r2, [r3, #0]
        if (buf[0] != SI4463_CMD_POWER_UP) {
 800398e:	2408      	movs	r4, #8
 8003990:	193b      	adds	r3, r7, r4
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d010      	beq.n	80039ba <SI4463_Config+0x18e>
            SI4463_SPI_Receive(handle, cmd, rxData, 8, 1000);
 8003998:	187b      	adds	r3, r7, r1
 800399a:	7819      	ldrb	r1, [r3, #0]
 800399c:	197a      	adds	r2, r7, r5
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	23fa      	movs	r3, #250	; 0xfa
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2308      	movs	r3, #8
 80039a8:	f000 fb34 	bl	8004014 <SI4463_SPI_Receive>
            if (rxData[3] == buf[0]) {
 80039ac:	197b      	adds	r3, r7, r5
 80039ae:	78da      	ldrb	r2, [r3, #3]
 80039b0:	193b      	adds	r3, r7, r4
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d129      	bne.n	8003a0c <SI4463_Config+0x1e0>
                while (1);  // error in configuration pls fix
 80039b8:	e7fe      	b.n	80039b8 <SI4463_Config+0x18c>
            }
        } else {
            // if SI4463_CMD_POWER_UP then wait for chip ready bit
            // timeout in 100 ms
            uint32_t endTime = HAL_GetTick() + 100;
 80039ba:	f000 fed3 	bl	8004764 <HAL_GetTick>
 80039be:	0003      	movs	r3, r0
 80039c0:	3364      	adds	r3, #100	; 0x64
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
            while (1) {
                SI4463_SPI_Receive(handle, cmd, rxData, 8, 1000);
 80039c4:	2323      	movs	r3, #35	; 0x23
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	7819      	ldrb	r1, [r3, #0]
 80039ca:	2418      	movs	r4, #24
 80039cc:	193a      	adds	r2, r7, r4
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	23fa      	movs	r3, #250	; 0xfa
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2308      	movs	r3, #8
 80039d8:	f000 fb1c 	bl	8004014 <SI4463_SPI_Receive>
                if (rxData[0] & 0b100) { // chip ready bit
 80039dc:	0021      	movs	r1, r4
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	001a      	movs	r2, r3
 80039e4:	2304      	movs	r3, #4
 80039e6:	4013      	ands	r3, r2
 80039e8:	d10f      	bne.n	8003a0a <SI4463_Config+0x1de>
                    break;
                }

                if (rxData[0] & 0b1000) { // cmd error bit
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	001a      	movs	r2, r3
 80039f0:	2308      	movs	r3, #8
 80039f2:	4013      	ands	r3, r2
 80039f4:	d001      	beq.n	80039fa <SI4463_Config+0x1ce>
                    return SI4463_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00e      	b.n	8003a18 <SI4463_Config+0x1ec>
                }

                if (endTime < HAL_GetTick()) {
 80039fa:	f000 feb3 	bl	8004764 <HAL_GetTick>
 80039fe:	0002      	movs	r2, r0
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d2de      	bcs.n	80039c4 <SI4463_Config+0x198>
                    return SI4463_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e006      	b.n	8003a18 <SI4463_Config+0x1ec>
                    break;
 8003a0a:	46c0      	nop			; (mov r8, r8)
    while (*config != 0) {
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d000      	beq.n	8003a16 <SI4463_Config+0x1ea>
 8003a14:	e757      	b.n	80038c6 <SI4463_Config+0x9a>
                }
            }
        }
    }

    return SI4463_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b00d      	add	sp, #52	; 0x34
 8003a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a20:	2000010c 	.word	0x2000010c
 8003a24:	200003b0 	.word	0x200003b0
 8003a28:	20000298 	.word	0x20000298
 8003a2c:	2000053c 	.word	0x2000053c
 8003a30:	20000e48 	.word	0x20000e48

08003a34 <SI4463_GPIO_Set>:
 * @Brief Sets GPIO state
 * @Param gpio to which gpio set state
 * @Param state what state to set
 * @Retval status of CTS and Receive
 */
SI4463_StatusTypeDef SI4463_GPIO_Set(SI4463_Handle *handle, uint8_t gpio, uint8_t state) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	0008      	movs	r0, r1
 8003a3e:	0011      	movs	r1, r2
 8003a40:	1cfb      	adds	r3, r7, #3
 8003a42:	1c02      	adds	r2, r0, #0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	1cbb      	adds	r3, r7, #2
 8003a48:	1c0a      	adds	r2, r1, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
    if (state == SI4463_GPIO_HIGH || state == SI4463_GPIO_LOW) {
 8003a4c:	1cbb      	adds	r3, r7, #2
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <SI4463_GPIO_Set+0x28>
 8003a54:	1cbb      	adds	r3, r7, #2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d116      	bne.n	8003a8a <SI4463_GPIO_Set+0x56>
        if (gpio < 4) {
 8003a5c:	1cfb      	adds	r3, r7, #3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d812      	bhi.n	8003a8a <SI4463_GPIO_Set+0x56>
            confGPIO[gpio + 1] = state;
 8003a64:	1cfb      	adds	r3, r7, #3
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <SI4463_GPIO_Set+0x60>)
 8003a6c:	1cb9      	adds	r1, r7, #2
 8003a6e:	7809      	ldrb	r1, [r1, #0]
 8003a70:	54d1      	strb	r1, [r2, r3]
            return SI4463_SPI_Transmit(handle, *confGPIO, &confGPIO[1], 7, 1000);
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <SI4463_GPIO_Set+0x60>)
 8003a74:	7819      	ldrb	r1, [r3, #0]
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <SI4463_GPIO_Set+0x64>)
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	23fa      	movs	r3, #250	; 0xfa
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2307      	movs	r3, #7
 8003a82:	f000 fb0d 	bl	80040a0 <SI4463_SPI_Transmit>
 8003a86:	0003      	movs	r3, r0
 8003a88:	e000      	b.n	8003a8c <SI4463_GPIO_Set+0x58>
        }
    }

    return SI4463_ERROR;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000e48 	.word	0x20000e48
 8003a98:	20000e49 	.word	0x20000e49

08003a9c <SI4463_PollCTSAndReceive>:
 * @Param *buf pointer to buffer where received data will be written to
 * @Param size size of data to receive
 * @Param timeout how long will try to receive
 * @Retval status of CTS and Receive
 */
SI4463_StatusTypeDef SI4463_PollCTSAndReceive(SI4463_Handle *handle, uint8_t *buf, uint8_t size, uint32_t timeout) {
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	701a      	strb	r2, [r3, #0]

    uint32_t endTime = timeout + HAL_GetTick();
 8003aac:	f000 fe5a 	bl	8004764 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
    uint8_t tmp = SI4463_CMD_BUFF;
 8003ab8:	2313      	movs	r3, #19
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2244      	movs	r2, #68	; 0x44
 8003abe:	701a      	strb	r2, [r3, #0]
    uint8_t data = 0;
 8003ac0:	2312      	movs	r3, #18
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]

    // CTS check
    while (1) {
        SI4463_Select(handle);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fb2a 	bl	8004124 <SI4463_Select>
        HAL_SPI_Transmit(handle->spi, &tmp, 1, 10);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	2313      	movs	r3, #19
 8003ad6:	18f9      	adds	r1, r7, r3
 8003ad8:	230a      	movs	r3, #10
 8003ada:	2201      	movs	r2, #1
 8003adc:	f002 fc16 	bl	800630c <HAL_SPI_Transmit>
        HAL_SPI_Receive(handle->spi, &data, 1, 10);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	2412      	movs	r4, #18
 8003ae6:	1939      	adds	r1, r7, r4
 8003ae8:	230a      	movs	r3, #10
 8003aea:	2201      	movs	r2, #1
 8003aec:	f002 fd66 	bl	80065bc <HAL_SPI_Receive>
        if (data == 0xff) {
 8003af0:	193b      	adds	r3, r7, r4
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2bff      	cmp	r3, #255	; 0xff
 8003af6:	d10f      	bne.n	8003b18 <SI4463_PollCTSAndReceive+0x7c>
            HAL_SPI_Receive(handle->spi, buf, size, 10);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	230a      	movs	r3, #10
 8003b06:	f002 fd59 	bl	80065bc <HAL_SPI_Receive>
            SI4463_Deselect(handle);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 fb2f 	bl	8004170 <SI4463_Deselect>
            break;
 8003b12:	46c0      	nop			; (mov r8, r8)
        if (endTime < HAL_GetTick()) {
            return SI4463_TIMEOUT;
        }
    }

    return SI4463_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e00a      	b.n	8003b2e <SI4463_PollCTSAndReceive+0x92>
        SI4463_Deselect(handle);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 fb28 	bl	8004170 <SI4463_Deselect>
        if (endTime < HAL_GetTick()) {
 8003b20:	f000 fe20 	bl	8004764 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d2cd      	bcs.n	8003ac8 <SI4463_PollCTSAndReceive+0x2c>
            return SI4463_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b007      	add	sp, #28
 8003b34:	bd90      	pop	{r4, r7, pc}

08003b36 <SI4463_Receive_FSK>:
 * @Param *buf pointer to buffer where received data will be written to
 * @Param size size of data to receive
 * @Param timeout how long will try to receive
 * @Retval status of CTS and Receive
 */
SI4463_StatusTypeDef SI4463_Receive_FSK(SI4463_Handle *handle, uint8_t *buf, uint8_t size, uint32_t timeout) {
 8003b36:	b5b0      	push	{r4, r5, r7, lr}
 8003b38:	b08c      	sub	sp, #48	; 0x30
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	1dfb      	adds	r3, r7, #7
 8003b44:	701a      	strb	r2, [r3, #0]
    // must be configured in FSK mode
    if (handle->config != SI4463_CONFIG_FSK) {
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2226      	movs	r2, #38	; 0x26
 8003b4a:	5c9b      	ldrb	r3, [r3, r2]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <SI4463_Receive_FSK+0x2a>
        handle->config = SI4463_CONFIG_FSK;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2226      	movs	r2, #38	; 0x26
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]
        SI4463_Config(handle);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff fe66 	bl	800382c <SI4463_Config>
    }

    SI4463_StatusTypeDef retVal = SI4463_ERROR;
 8003b60:	2327      	movs	r3, #39	; 0x27
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
    uint32_t endTime = timeout + HAL_GetTick();
 8003b68:	f000 fdfc 	bl	8004764 <HAL_GetTick>
 8003b6c:	0002      	movs	r2, r0
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	623b      	str	r3, [r7, #32]
    uint8_t cmd = SI4463_CMD_START_RX;
 8003b74:	231f      	movs	r3, #31
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2232      	movs	r2, #50	; 0x32
 8003b7a:	701a      	strb	r2, [r3, #0]

    // can receive 8 bytes in single packet
    if (size != 8) {
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d001      	beq.n	8003b88 <SI4463_Receive_FSK+0x52>
        return SI4463_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e091      	b.n	8003cac <SI4463_Receive_FSK+0x176>
    }

    // toggle RF switch to input if set as output
    if (handle->isInTX) {
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2227      	movs	r2, #39	; 0x27
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d025      	beq.n	8003bde <SI4463_Receive_FSK+0xa8>
        retVal = SI4463_GPIO_Set(handle, 2, SI4463_GPIO_LOW);
 8003b92:	2527      	movs	r5, #39	; 0x27
 8003b94:	197c      	adds	r4, r7, r5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff ff49 	bl	8003a34 <SI4463_GPIO_Set>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003ba6:	197b      	adds	r3, r7, r5
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <SI4463_Receive_FSK+0x7e>
            return retVal;
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	e07b      	b.n	8003cac <SI4463_Receive_FSK+0x176>
        }
        retVal = SI4463_GPIO_Set(handle, 3, SI4463_GPIO_HIGH);
 8003bb4:	2527      	movs	r5, #39	; 0x27
 8003bb6:	197c      	adds	r4, r7, r5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2203      	movs	r2, #3
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7ff ff38 	bl	8003a34 <SI4463_GPIO_Set>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003bc8:	197b      	adds	r3, r7, r5
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <SI4463_Receive_FSK+0xa0>
            return retVal;
 8003bd0:	197b      	adds	r3, r7, r5
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	e06a      	b.n	8003cac <SI4463_Receive_FSK+0x176>
        }
        handle->isInTX = 0;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2227      	movs	r2, #39	; 0x27
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]
    }

    uint8_t data[8];
    data[0] = 0;
 8003bde:	2014      	movs	r0, #20
 8003be0:	183b      	adds	r3, r7, r0
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
    data[1] = 0;
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	2200      	movs	r2, #0
 8003bea:	705a      	strb	r2, [r3, #1]
    data[2] = 0; // len msb
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	2200      	movs	r2, #0
 8003bf0:	709a      	strb	r2, [r3, #2]
    data[3] = size; // len lsb
 8003bf2:	183b      	adds	r3, r7, r0
 8003bf4:	1dfa      	adds	r2, r7, #7
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	70da      	strb	r2, [r3, #3]
    data[4] = 0; // stay in rx if timedout
 8003bfa:	183b      	adds	r3, r7, r0
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	711a      	strb	r2, [r3, #4]
    data[5] = 8; // stay in rx if received
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	2208      	movs	r2, #8
 8003c04:	715a      	strb	r2, [r3, #5]
    data[6] = 8; // stay in rx if invalid
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	2208      	movs	r2, #8
 8003c0a:	719a      	strb	r2, [r3, #6]
    SI4463_SPI_Transmit(handle, cmd, data, 7, 10);
 8003c0c:	231f      	movs	r3, #31
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	7819      	ldrb	r1, [r3, #0]
 8003c12:	183a      	adds	r2, r7, r0
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	230a      	movs	r3, #10
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	f000 fa40 	bl	80040a0 <SI4463_SPI_Transmit>

    // poll for RX received interrupt
    while (1) {
        SI4463_SPI_Receive(handle, SI4463_CMD_INT_STATUS, data, 8, 3);
 8003c20:	2414      	movs	r4, #20
 8003c22:	193a      	adds	r2, r7, r4
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	2303      	movs	r3, #3
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	2120      	movs	r1, #32
 8003c2e:	f000 f9f1 	bl	8004014 <SI4463_SPI_Receive>
        if (data[2] & 0b10000 || data[3] & 0b10000) {
 8003c32:	0021      	movs	r1, r4
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	789b      	ldrb	r3, [r3, #2]
 8003c38:	001a      	movs	r2, r3
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d114      	bne.n	8003c6a <SI4463_Receive_FSK+0x134>
 8003c40:	187b      	adds	r3, r7, r1
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	001a      	movs	r2, r3
 8003c46:	2310      	movs	r3, #16
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d10e      	bne.n	8003c6a <SI4463_Receive_FSK+0x134>
            break;
        }

        if (data[2] & 0b1) {
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	789b      	ldrb	r3, [r3, #2]
 8003c50:	001a      	movs	r2, r3
 8003c52:	2301      	movs	r3, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	d107      	bne.n	8003c68 <SI4463_Receive_FSK+0x132>
            break;
        }

        if (endTime < HAL_GetTick()) {
 8003c58:	f000 fd84 	bl	8004764 <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d2dd      	bcs.n	8003c20 <SI4463_Receive_FSK+0xea>
            return SI4463_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e021      	b.n	8003cac <SI4463_Receive_FSK+0x176>
            break;
 8003c68:	46c0      	nop			; (mov r8, r8)
        }
    }

    // get data from FIFO
    cmd = SI4463_CMD_RX_FIFO;
 8003c6a:	241f      	movs	r4, #31
 8003c6c:	193b      	adds	r3, r7, r4
 8003c6e:	2277      	movs	r2, #119	; 0x77
 8003c70:	701a      	strb	r2, [r3, #0]
    SI4463_Select(handle);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fa55 	bl	8004124 <SI4463_Select>
    HAL_SPI_Transmit(handle->spi, &cmd, 1, 20);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	1939      	adds	r1, r7, r4
 8003c80:	2314      	movs	r3, #20
 8003c82:	2201      	movs	r2, #1
 8003c84:	f002 fb42 	bl	800630c <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle->spi, buf, size, 20);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	1dfb      	adds	r3, r7, #7
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	2314      	movs	r3, #20
 8003c96:	f002 fc91 	bl	80065bc <HAL_SPI_Receive>
    SI4463_Deselect(handle);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f000 fa67 	bl	8004170 <SI4463_Deselect>

    SI4463_FifoRxClear(handle);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f805 	bl	8003cb4 <SI4463_FifoRxClear>

    return SI4463_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b00a      	add	sp, #40	; 0x28
 8003cb2:	bdb0      	pop	{r4, r5, r7, pc}

08003cb4 <SI4463_FifoRxClear>:

SI4463_StatusTypeDef SI4463_FifoRxClear(SI4463_Handle *handle){
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
    uint8_t tmp[2] = { 0 };
 8003cbc:	240c      	movs	r4, #12
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	801a      	strh	r2, [r3, #0]

    SI4463_SPI_Receive(handle, SI4463_CMD_FIFO_INFO, tmp, 2, 10);
 8003cc4:	193a      	adds	r2, r7, r4
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	230a      	movs	r3, #10
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2302      	movs	r3, #2
 8003cce:	2115      	movs	r1, #21
 8003cd0:	f000 f9a0 	bl	8004014 <SI4463_SPI_Receive>

    uint8_t fifoRxCount = tmp[0];
 8003cd4:	230f      	movs	r3, #15
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	193a      	adds	r2, r7, r4
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
    uint8_t size;
    while(fifoRxCount){
 8003cde:	e035      	b.n	8003d4c <SI4463_FifoRxClear+0x98>
        if(fifoRxCount > 2){
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d904      	bls.n	8003cf4 <SI4463_FifoRxClear+0x40>
            size = 2;
 8003cea:	230e      	movs	r3, #14
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e005      	b.n	8003d00 <SI4463_FifoRxClear+0x4c>
        } else {
            size = fifoRxCount;
 8003cf4:	230e      	movs	r3, #14
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	18ba      	adds	r2, r7, r2
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	701a      	strb	r2, [r3, #0]
        }

        uint8_t cmd = SI4463_CMD_RX_FIFO;
 8003d00:	240b      	movs	r4, #11
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	2277      	movs	r2, #119	; 0x77
 8003d06:	701a      	strb	r2, [r3, #0]
        SI4463_Select(handle);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 fa0a 	bl	8004124 <SI4463_Select>
        HAL_SPI_Transmit(handle->spi, &cmd, 1, 20);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	1939      	adds	r1, r7, r4
 8003d16:	2314      	movs	r3, #20
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f002 faf7 	bl	800630c <HAL_SPI_Transmit>
        HAL_SPI_Receive(handle->spi, tmp, size, 20);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	240e      	movs	r4, #14
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	18f9      	adds	r1, r7, r3
 8003d2e:	2314      	movs	r3, #20
 8003d30:	f002 fc44 	bl	80065bc <HAL_SPI_Receive>
        SI4463_Deselect(handle);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fa1a 	bl	8004170 <SI4463_Deselect>

        fifoRxCount -= size;
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	18bb      	adds	r3, r7, r2
 8003d40:	18b9      	adds	r1, r7, r2
 8003d42:	193a      	adds	r2, r7, r4
 8003d44:	7809      	ldrb	r1, [r1, #0]
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	1a8a      	subs	r2, r1, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
    while(fifoRxCount){
 8003d4c:	230f      	movs	r3, #15
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1c4      	bne.n	8003ce0 <SI4463_FifoRxClear+0x2c>
    }

    return SI4463_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b005      	add	sp, #20
 8003d5e:	bd90      	pop	{r4, r7, pc}

08003d60 <SI4463_Receive_FSK_IRQ>:

/*
 * @Brief Starts RX process and thats it
 */
SI4463_StatusTypeDef SI4463_Receive_FSK_IRQ(SI4463_Handle *handle) {
 8003d60:	b5b0      	push	{r4, r5, r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	6078      	str	r0, [r7, #4]
    // must be configured in FSK mode
    if (handle->config != SI4463_CONFIG_FSK) {
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2226      	movs	r2, #38	; 0x26
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <SI4463_Receive_FSK_IRQ+0x22>
        handle->config = SI4463_CONFIG_FSK;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2226      	movs	r2, #38	; 0x26
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]
        SI4463_Config(handle);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff fd55 	bl	800382c <SI4463_Config>
    }

    SI4463_StatusTypeDef retVal = SI4463_ERROR;
 8003d82:	2117      	movs	r1, #23
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	2201      	movs	r2, #1
 8003d88:	701a      	strb	r2, [r3, #0]
    uint8_t cmd = SI4463_CMD_START_RX;
 8003d8a:	2316      	movs	r3, #22
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2232      	movs	r2, #50	; 0x32
 8003d90:	701a      	strb	r2, [r3, #0]

    // toggle RF switch to input if set as output
    if (handle->isInTX) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2227      	movs	r2, #39	; 0x27
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d025      	beq.n	8003de8 <SI4463_Receive_FSK_IRQ+0x88>
        retVal = SI4463_GPIO_Set(handle, 2, SI4463_GPIO_LOW);
 8003d9c:	000d      	movs	r5, r1
 8003d9e:	187c      	adds	r4, r7, r1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	2102      	movs	r1, #2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7ff fe44 	bl	8003a34 <SI4463_GPIO_Set>
 8003dac:	0003      	movs	r3, r0
 8003dae:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003db0:	197b      	adds	r3, r7, r5
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <SI4463_Receive_FSK_IRQ+0x5e>
            return retVal;
 8003db8:	197b      	adds	r3, r7, r5
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	e035      	b.n	8003e2a <SI4463_Receive_FSK_IRQ+0xca>
        }
        retVal = SI4463_GPIO_Set(handle, 3, SI4463_GPIO_HIGH);
 8003dbe:	2517      	movs	r5, #23
 8003dc0:	197c      	adds	r4, r7, r5
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff fe33 	bl	8003a34 <SI4463_GPIO_Set>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003dd2:	197b      	adds	r3, r7, r5
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <SI4463_Receive_FSK_IRQ+0x80>
            return retVal;
 8003dda:	197b      	adds	r3, r7, r5
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	e024      	b.n	8003e2a <SI4463_Receive_FSK_IRQ+0xca>
        }
        handle->isInTX = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2227      	movs	r2, #39	; 0x27
 8003de4:	2100      	movs	r1, #0
 8003de6:	5499      	strb	r1, [r3, r2]
    }

    uint8_t data[8];
    data[0] = 0;
 8003de8:	210c      	movs	r1, #12
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
    data[1] = 0;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2200      	movs	r2, #0
 8003df4:	705a      	strb	r2, [r3, #1]
    data[2] = 0; // len msb
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2200      	movs	r2, #0
 8003dfa:	709a      	strb	r2, [r3, #2]
    data[3] = 8; // len lsb
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	2208      	movs	r2, #8
 8003e00:	70da      	strb	r2, [r3, #3]
    data[4] = 8; // stay in rx if timedout
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	2208      	movs	r2, #8
 8003e06:	711a      	strb	r2, [r3, #4]
    data[5] = 8; // stay in rx if received
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	715a      	strb	r2, [r3, #5]
    data[6] = 8; // stay in rx if invalid
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2208      	movs	r2, #8
 8003e12:	719a      	strb	r2, [r3, #6]
    SI4463_SPI_Transmit(handle, cmd, data, 7, 10);
 8003e14:	187a      	adds	r2, r7, r1
 8003e16:	2316      	movs	r3, #22
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	7819      	ldrb	r1, [r3, #0]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	230a      	movs	r3, #10
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2307      	movs	r3, #7
 8003e24:	f000 f93c 	bl	80040a0 <SI4463_SPI_Transmit>

    return SI4463_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b006      	add	sp, #24
 8003e30:	bdb0      	pop	{r4, r5, r7, pc}

08003e32 <SI4463_Transmit_FSK>:
 * @Param *buf pointer to buffer to data that will be transmitted
 * @Param size size of data to receive
 * @Param timeout how long will try to transmit
 * @Retval status of CTS and transmit
 */
SI4463_StatusTypeDef SI4463_Transmit_FSK(SI4463_Handle *handle, uint8_t *buf, uint8_t size, uint32_t timeout) {
 8003e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e34:	b08b      	sub	sp, #44	; 0x2c
 8003e36:	af02      	add	r7, sp, #8
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	701a      	strb	r2, [r3, #0]
    uint32_t endTime = HAL_GetTick() + timeout;
 8003e42:	f000 fc8f 	bl	8004764 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	61fb      	str	r3, [r7, #28]
    // must be configured in FSK mode
    if (handle->config != SI4463_CONFIG_FSK) {
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2226      	movs	r2, #38	; 0x26
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <SI4463_Transmit_FSK+0x36>
        handle->config = SI4463_CONFIG_FSK;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2226      	movs	r2, #38	; 0x26
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]
        SI4463_Config(handle);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7ff fce2 	bl	800382c <SI4463_Config>
    }

    SI4463_StatusTypeDef retVal = SI4463_ERROR;
 8003e68:	231b      	movs	r3, #27
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]

    // can only send 8 bytes in single packet, for now
    if (size != 8) {
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d001      	beq.n	8003e7c <SI4463_Transmit_FSK+0x4a>
        return SI4463_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e08a      	b.n	8003f92 <SI4463_Transmit_FSK+0x160>
    }

    // toggle RF switch to input if set as output
    if (!handle->isInTX) {
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2227      	movs	r2, #39	; 0x27
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d125      	bne.n	8003ed2 <SI4463_Transmit_FSK+0xa0>
        retVal = SI4463_GPIO_Set(handle, 3, SI4463_GPIO_LOW);
 8003e86:	251b      	movs	r5, #27
 8003e88:	197c      	adds	r4, r7, r5
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	2103      	movs	r1, #3
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff fdcf 	bl	8003a34 <SI4463_GPIO_Set>
 8003e96:	0003      	movs	r3, r0
 8003e98:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003e9a:	197b      	adds	r3, r7, r5
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <SI4463_Transmit_FSK+0x76>
            return retVal;
 8003ea2:	197b      	adds	r3, r7, r5
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	e074      	b.n	8003f92 <SI4463_Transmit_FSK+0x160>
        }
        retVal = SI4463_GPIO_Set(handle, 2, SI4463_GPIO_HIGH);
 8003ea8:	251b      	movs	r5, #27
 8003eaa:	197c      	adds	r4, r7, r5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7ff fdbe 	bl	8003a34 <SI4463_GPIO_Set>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	7023      	strb	r3, [r4, #0]
        if (retVal != SI4463_OK) {
 8003ebc:	197b      	adds	r3, r7, r5
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <SI4463_Transmit_FSK+0x98>
            return retVal;
 8003ec4:	197b      	adds	r3, r7, r5
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	e063      	b.n	8003f92 <SI4463_Transmit_FSK+0x160>
        }
        handle->isInTX = 1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2227      	movs	r2, #39	; 0x27
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
    }

    // write data to send to TX FIFO
    uint8_t data[8];
    data[0] = SI4463_CMD_WRITE_TX_FIFO;
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	2266      	movs	r2, #102	; 0x66
 8003ed8:	701a      	strb	r2, [r3, #0]
    retVal = SI4463_SPI_Transmit(handle, data[0], buf, size, timeout);
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	7819      	ldrb	r1, [r3, #0]
 8003ede:	261b      	movs	r6, #27
 8003ee0:	19bc      	adds	r4, r7, r6
 8003ee2:	1dfb      	adds	r3, r7, #7
 8003ee4:	781d      	ldrb	r5, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	002b      	movs	r3, r5
 8003ef0:	f000 f8d6 	bl	80040a0 <SI4463_SPI_Transmit>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	7023      	strb	r3, [r4, #0]
    if (retVal != SI4463_OK) {
 8003ef8:	19bb      	adds	r3, r7, r6
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <SI4463_Transmit_FSK+0xd4>
        return retVal;
 8003f00:	19bb      	adds	r3, r7, r6
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	e045      	b.n	8003f92 <SI4463_Transmit_FSK+0x160>
    }

    // start TX
    data[0] = SI4463_CMD_START_TX;
 8003f06:	2110      	movs	r1, #16
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	2231      	movs	r2, #49	; 0x31
 8003f0c:	701a      	strb	r2, [r3, #0]
    data[1] = 0; // channel
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	2200      	movs	r2, #0
 8003f12:	705a      	strb	r2, [r3, #1]
    data[2] = 128; // after TX enter RX
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	709a      	strb	r2, [r3, #2]
    data[3] = 0; // size msb
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	70da      	strb	r2, [r3, #3]
    data[4] = size; // size lsb
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	1dfa      	adds	r2, r7, #7
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	711a      	strb	r2, [r3, #4]
    data[5] = 0; // delay
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	715a      	strb	r2, [r3, #5]
    data[6] = 0; // repeat
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	719a      	strb	r2, [r3, #6]
    retVal = SI4463_SPI_Transmit(handle, data[0], data + 1, 6, timeout);
 8003f34:	000a      	movs	r2, r1
 8003f36:	18bb      	adds	r3, r7, r2
 8003f38:	7819      	ldrb	r1, [r3, #0]
 8003f3a:	18ba      	adds	r2, r7, r2
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	251b      	movs	r5, #27
 8003f40:	197c      	adds	r4, r7, r5
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2306      	movs	r3, #6
 8003f4a:	f000 f8a9 	bl	80040a0 <SI4463_SPI_Transmit>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	7023      	strb	r3, [r4, #0]
    if (retVal != SI4463_OK) {
 8003f52:	197b      	adds	r3, r7, r5
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <SI4463_Transmit_FSK+0x12e>
        return retVal;
 8003f5a:	197b      	adds	r3, r7, r5
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	e018      	b.n	8003f92 <SI4463_Transmit_FSK+0x160>
    }

    // poll for packet sent
    while (1) {
        SI4463_SPI_Receive(handle, SI4463_CMD_INT_STATUS, data, 8, 3);
 8003f60:	2410      	movs	r4, #16
 8003f62:	193a      	adds	r2, r7, r4
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	2303      	movs	r3, #3
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	f000 f851 	bl	8004014 <SI4463_SPI_Receive>
        if (data[3] & 0b100000) {
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	78db      	ldrb	r3, [r3, #3]
 8003f76:	001a      	movs	r2, r3
 8003f78:	2320      	movs	r3, #32
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d107      	bne.n	8003f8e <SI4463_Transmit_FSK+0x15c>
            break;
        }
        if (endTime < HAL_GetTick()) {
 8003f7e:	f000 fbf1 	bl	8004764 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d2ea      	bcs.n	8003f60 <SI4463_Transmit_FSK+0x12e>
            return SI4463_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e001      	b.n	8003f92 <SI4463_Transmit_FSK+0x160>
            break;
 8003f8e:	46c0      	nop			; (mov r8, r8)
        }
    }

    return SI4463_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b009      	add	sp, #36	; 0x24
 8003f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f9a <SI4463_PollCTS>:
/*
 * @Brief Waits till SI4463 is ready to process next command
 * @Param timeout how long will try wait for SI4463 to be ready
 * @Retval status of CTS
 */
SI4463_StatusTypeDef SI4463_PollCTS(SI4463_Handle *handle, uint32_t timeout) {
 8003f9a:	b590      	push	{r4, r7, lr}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
    uint32_t endTime = timeout + HAL_GetTick();
 8003fa4:	f000 fbde 	bl	8004764 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
    uint8_t tmp = SI4463_CMD_BUFF;
 8003fb0:	230b      	movs	r3, #11
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2244      	movs	r2, #68	; 0x44
 8003fb6:	701a      	strb	r2, [r3, #0]
    uint8_t data = 0;
 8003fb8:	230a      	movs	r3, #10
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]

    // CTS check
    while (1) {
        SI4463_Select(handle);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 f8ae 	bl	8004124 <SI4463_Select>
        HAL_SPI_Transmit(handle->spi, &tmp, 1, 10);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	230b      	movs	r3, #11
 8003fce:	18f9      	adds	r1, r7, r3
 8003fd0:	230a      	movs	r3, #10
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f002 f99a 	bl	800630c <HAL_SPI_Transmit>
        HAL_SPI_Receive(handle->spi, &data, 1, 10);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	240a      	movs	r4, #10
 8003fde:	1939      	adds	r1, r7, r4
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f002 faea 	bl	80065bc <HAL_SPI_Receive>
        SI4463_Deselect(handle);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 f8c0 	bl	8004170 <SI4463_Deselect>
        if (data == 0xff) {
 8003ff0:	193b      	adds	r3, r7, r4
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2bff      	cmp	r3, #255	; 0xff
 8003ff6:	d007      	beq.n	8004008 <SI4463_PollCTS+0x6e>
            break;
        }
        if (endTime < HAL_GetTick()) {
 8003ff8:	f000 fbb4 	bl	8004764 <HAL_GetTick>
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4293      	cmp	r3, r2
 8004002:	d2dd      	bcs.n	8003fc0 <SI4463_PollCTS+0x26>
            return SI4463_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e001      	b.n	800400c <SI4463_PollCTS+0x72>
            break;
 8004008:	46c0      	nop			; (mov r8, r8)
        }
    }

    return SI4463_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b005      	add	sp, #20
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <SI4463_SPI_Receive>:
 * @Param *buf pointer to buffer where received data will be written to
 * @Param size size of data to receive
 * @Param timeout how long will try to receive
 * @Retval status of receive
 */
SI4463_StatusTypeDef SI4463_SPI_Receive(SI4463_Handle *handle, uint8_t cmd, uint8_t *buf, uint8_t size, uint32_t timeout) {
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	0008      	movs	r0, r1
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	0019      	movs	r1, r3
 8004022:	230b      	movs	r3, #11
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	1c02      	adds	r2, r0, #0
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	230a      	movs	r3, #10
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	1c0a      	adds	r2, r1, #0
 8004030:	701a      	strb	r2, [r3, #0]
    SI4463_StatusTypeDef retVal = SI4463_ERROR;
 8004032:	2517      	movs	r5, #23
 8004034:	197b      	adds	r3, r7, r5
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]

    retVal = SI4463_PollCTS(handle, timeout);   // wait for ready
 800403a:	197c      	adds	r4, r7, r5
 800403c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff ffa9 	bl	8003f9a <SI4463_PollCTS>
 8004048:	0003      	movs	r3, r0
 800404a:	7023      	strb	r3, [r4, #0]
    if (retVal != SI4463_OK) {
 800404c:	197b      	adds	r3, r7, r5
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <SI4463_SPI_Receive+0x46>
        return retVal;
 8004054:	197b      	adds	r3, r7, r5
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	e01e      	b.n	8004098 <SI4463_SPI_Receive+0x84>
    }

    SI4463_Select(handle);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f861 	bl	8004124 <SI4463_Select>
    HAL_SPI_Transmit(handle->spi, &cmd, 1, 10);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	230b      	movs	r3, #11
 8004068:	18f9      	adds	r1, r7, r3
 800406a:	230a      	movs	r3, #10
 800406c:	2201      	movs	r2, #1
 800406e:	f002 f94d 	bl	800630c <HAL_SPI_Transmit>
    SI4463_Deselect(handle);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f87b 	bl	8004170 <SI4463_Deselect>
    retVal = SI4463_PollCTSAndReceive(handle, buf, size, timeout);
 800407a:	2617      	movs	r6, #23
 800407c:	19bc      	adds	r4, r7, r6
 800407e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8004080:	230a      	movs	r3, #10
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	002b      	movs	r3, r5
 800408c:	f7ff fd06 	bl	8003a9c <SI4463_PollCTSAndReceive>
 8004090:	0003      	movs	r3, r0
 8004092:	7023      	strb	r3, [r4, #0]

    return retVal;
 8004094:	19bb      	adds	r3, r7, r6
 8004096:	781b      	ldrb	r3, [r3, #0]
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b007      	add	sp, #28
 800409e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040a0 <SI4463_SPI_Transmit>:
 * @Param size size of data to send
 * @Param timeout how long will try to send
 * @Retval status of transmit
 */

SI4463_StatusTypeDef SI4463_SPI_Transmit(SI4463_Handle *handle, uint8_t cmd, uint8_t *data, uint8_t size, uint32_t timeout) {
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	0008      	movs	r0, r1
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	0019      	movs	r1, r3
 80040ae:	230b      	movs	r3, #11
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	1c02      	adds	r2, r0, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	230a      	movs	r3, #10
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	1c0a      	adds	r2, r1, #0
 80040bc:	701a      	strb	r2, [r3, #0]
    SI4463_StatusTypeDef retVal = SI4463_ERROR;
 80040be:	2517      	movs	r5, #23
 80040c0:	197b      	adds	r3, r7, r5
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]

    retVal = SI4463_PollCTS(handle, timeout);   // wait for ready
 80040c6:	197c      	adds	r4, r7, r5
 80040c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0011      	movs	r1, r2
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7ff ff63 	bl	8003f9a <SI4463_PollCTS>
 80040d4:	0003      	movs	r3, r0
 80040d6:	7023      	strb	r3, [r4, #0]
    if (retVal != SI4463_OK) {
 80040d8:	197b      	adds	r3, r7, r5
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <SI4463_SPI_Transmit+0x46>
        return retVal;
 80040e0:	197b      	adds	r3, r7, r5
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	e01a      	b.n	800411c <SI4463_SPI_Transmit+0x7c>
    }

    SI4463_Select(handle);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 f81b 	bl	8004124 <SI4463_Select>
    HAL_SPI_Transmit(handle->spi, &cmd, 1, 20);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	230b      	movs	r3, #11
 80040f4:	18f9      	adds	r1, r7, r3
 80040f6:	2314      	movs	r3, #20
 80040f8:	2201      	movs	r2, #1
 80040fa:	f002 f907 	bl	800630c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(handle->spi, data, size, 20);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	230a      	movs	r3, #10
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b29a      	uxth	r2, r3
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	2314      	movs	r3, #20
 800410e:	f002 f8fd 	bl	800630c <HAL_SPI_Transmit>
    SI4463_Deselect(handle);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f82b 	bl	8004170 <SI4463_Deselect>

    return SI4463_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b006      	add	sp, #24
 8004122:	bdb0      	pop	{r4, r5, r7, pc}

08004124 <SI4463_Select>:

void SI4463_Select(SI4463_Handle *handle) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(handle->CSPort, handle->CSPin, GPIO_PIN_RESET);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68d8      	ldr	r0, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8a1b      	ldrh	r3, [r3, #16]
 8004134:	2200      	movs	r2, #0
 8004136:	0019      	movs	r1, r3
 8004138:	f001 f916 	bl	8005368 <HAL_GPIO_WritePin>
    // dumb delay, for somewhat correct timing
    uint32_t clockFreq = HAL_RCC_GetSysClockFreq() / 100000;
 800413c:	f001 fdd4 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8004140:	0003      	movs	r3, r0
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <SI4463_Select+0x48>)
 8004144:	0018      	movs	r0, r3
 8004146:	f7fb ffdd 	bl	8000104 <__udivsi3>
 800414a:	0003      	movs	r3, r0
 800414c:	60bb      	str	r3, [r7, #8]
    for(uint32_t i = 0; i < clockFreq; i++);
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e002      	b.n	800415a <SI4463_Select+0x36>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	d3f8      	bcc.n	8004154 <SI4463_Select+0x30>
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b004      	add	sp, #16
 800416a:	bd80      	pop	{r7, pc}
 800416c:	000186a0 	.word	0x000186a0

08004170 <SI4463_Deselect>:

void SI4463_Deselect(SI4463_Handle *handle) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(handle->CSPort, handle->CSPin, GPIO_PIN_SET);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68d8      	ldr	r0, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8a1b      	ldrh	r3, [r3, #16]
 8004180:	2201      	movs	r2, #1
 8004182:	0019      	movs	r1, r3
 8004184:	f001 f8f0 	bl	8005368 <HAL_GPIO_WritePin>
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_MspInit+0x44>)
 8004198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_MspInit+0x44>)
 800419c:	2101      	movs	r1, #1
 800419e:	430a      	orrs	r2, r1
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_MspInit+0x44>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2201      	movs	r2, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_MspInit+0x44>)
 80041b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_MspInit+0x44>)
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	0549      	lsls	r1, r1, #21
 80041b8:	430a      	orrs	r2, r1
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_MspInit+0x44>)
 80041be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	055b      	lsls	r3, r3, #21
 80041c4:	4013      	ands	r3, r2
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b002      	add	sp, #8
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <HAL_CRC_MspInit+0x38>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10d      	bne.n	8004206 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_CRC_MspInit+0x3c>)
 80041ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_CRC_MspInit+0x3c>)
 80041f0:	2180      	movs	r1, #128	; 0x80
 80041f2:	0149      	lsls	r1, r1, #5
 80041f4:	430a      	orrs	r2, r1
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_CRC_MspInit+0x3c>)
 80041fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	015b      	lsls	r3, r3, #5
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40023000 	.word	0x40023000
 8004214:	40021000 	.word	0x40021000

08004218 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b08b      	sub	sp, #44	; 0x2c
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	2414      	movs	r4, #20
 8004222:	193b      	adds	r3, r7, r4
 8004224:	0018      	movs	r0, r3
 8004226:	2314      	movs	r3, #20
 8004228:	001a      	movs	r2, r3
 800422a:	2100      	movs	r1, #0
 800422c:	f004 f99d 	bl	800856a <memset>
  if(hspi->Instance==SPI1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_SPI_MspInit+0x8c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d130      	bne.n	800429c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_SPI_MspInit+0x90>)
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_SPI_MspInit+0x90>)
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	0149      	lsls	r1, r1, #5
 8004244:	430a      	orrs	r2, r1
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_SPI_MspInit+0x90>)
 800424a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	015b      	lsls	r3, r3, #5
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <HAL_SPI_MspInit+0x90>)
 8004258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_SPI_MspInit+0x90>)
 800425c:	2101      	movs	r1, #1
 800425e:	430a      	orrs	r2, r1
 8004260:	635a      	str	r2, [r3, #52]	; 0x34
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_SPI_MspInit+0x90>)
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800426e:	0021      	movs	r1, r4
 8004270:	187b      	adds	r3, r7, r1
 8004272:	22e0      	movs	r2, #224	; 0xe0
 8004274:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2202      	movs	r2, #2
 800427a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	187b      	adds	r3, r7, r1
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004288:	187b      	adds	r3, r7, r1
 800428a:	2200      	movs	r2, #0
 800428c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428e:	187a      	adds	r2, r7, r1
 8004290:	23a0      	movs	r3, #160	; 0xa0
 8004292:	05db      	lsls	r3, r3, #23
 8004294:	0011      	movs	r1, r2
 8004296:	0018      	movs	r0, r3
 8004298:	f000 ff02 	bl	80050a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b00b      	add	sp, #44	; 0x2c
 80042a2:	bd90      	pop	{r4, r7, pc}
 80042a4:	40013000 	.word	0x40013000
 80042a8:	40021000 	.word	0x40021000

080042ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b09d      	sub	sp, #116	; 0x74
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	235c      	movs	r3, #92	; 0x5c
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	0018      	movs	r0, r3
 80042ba:	2314      	movs	r3, #20
 80042bc:	001a      	movs	r2, r3
 80042be:	2100      	movs	r1, #0
 80042c0:	f004 f953 	bl	800856a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042c4:	2428      	movs	r4, #40	; 0x28
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	0018      	movs	r0, r3
 80042ca:	2334      	movs	r3, #52	; 0x34
 80042cc:	001a      	movs	r2, r3
 80042ce:	2100      	movs	r1, #0
 80042d0:	f004 f94b 	bl	800856a <memset>
  if(huart->Instance==USART1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4aa6      	ldr	r2, [pc, #664]	; (8004574 <HAL_UART_MspInit+0x2c8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d13e      	bne.n	800435c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80042de:	193b      	adds	r3, r7, r4
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80042e4:	193b      	adds	r3, r7, r4
 80042e6:	2200      	movs	r2, #0
 80042e8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042ea:	193b      	adds	r3, r7, r4
 80042ec:	0018      	movs	r0, r3
 80042ee:	f001 fd9d 	bl	8005e2c <HAL_RCCEx_PeriphCLKConfig>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d001      	beq.n	80042fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80042f6:	f7ff fa13 	bl	8003720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042fa:	4b9f      	ldr	r3, [pc, #636]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80042fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fe:	4b9e      	ldr	r3, [pc, #632]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	01c9      	lsls	r1, r1, #7
 8004304:	430a      	orrs	r2, r1
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
 8004308:	4b9b      	ldr	r3, [pc, #620]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 800430a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	01db      	lsls	r3, r3, #7
 8004310:	4013      	ands	r3, r2
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004316:	4b98      	ldr	r3, [pc, #608]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431a:	4b97      	ldr	r3, [pc, #604]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 800431c:	2102      	movs	r1, #2
 800431e:	430a      	orrs	r2, r1
 8004320:	635a      	str	r2, [r3, #52]	; 0x34
 8004322:	4b95      	ldr	r3, [pc, #596]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	2202      	movs	r2, #2
 8004328:	4013      	ands	r3, r2
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800432e:	215c      	movs	r1, #92	; 0x5c
 8004330:	187b      	adds	r3, r7, r1
 8004332:	22c0      	movs	r2, #192	; 0xc0
 8004334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004336:	187b      	adds	r3, r7, r1
 8004338:	2202      	movs	r2, #2
 800433a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	187b      	adds	r3, r7, r1
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	187b      	adds	r3, r7, r1
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434e:	187b      	adds	r3, r7, r1
 8004350:	4a8a      	ldr	r2, [pc, #552]	; (800457c <HAL_UART_MspInit+0x2d0>)
 8004352:	0019      	movs	r1, r3
 8004354:	0010      	movs	r0, r2
 8004356:	f000 fea3 	bl	80050a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800435a:	e106      	b.n	800456a <HAL_UART_MspInit+0x2be>
  else if(huart->Instance==USART2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a87      	ldr	r2, [pc, #540]	; (8004580 <HAL_UART_MspInit+0x2d4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d16a      	bne.n	800443c <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004366:	2128      	movs	r1, #40	; 0x28
 8004368:	187b      	adds	r3, r7, r1
 800436a:	2202      	movs	r2, #2
 800436c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800436e:	187b      	adds	r3, r7, r1
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004374:	187b      	adds	r3, r7, r1
 8004376:	0018      	movs	r0, r3
 8004378:	f001 fd58 	bl	8005e2c <HAL_RCCEx_PeriphCLKConfig>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8004380:	f7ff f9ce 	bl	8003720 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004384:	4b7c      	ldr	r3, [pc, #496]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004388:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	0289      	lsls	r1, r1, #10
 800438e:	430a      	orrs	r2, r1
 8004390:	63da      	str	r2, [r3, #60]	; 0x3c
 8004392:	4b79      	ldr	r3, [pc, #484]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	4013      	ands	r3, r2
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a0:	4b75      	ldr	r3, [pc, #468]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80043a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a4:	4b74      	ldr	r3, [pc, #464]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80043a6:	2101      	movs	r1, #1
 80043a8:	430a      	orrs	r2, r1
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34
 80043ac:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043b8:	215c      	movs	r1, #92	; 0x5c
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	220c      	movs	r2, #12
 80043be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	187b      	adds	r3, r7, r1
 80043c2:	2202      	movs	r2, #2
 80043c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	2201      	movs	r2, #1
 80043d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d8:	187a      	adds	r2, r7, r1
 80043da:	23a0      	movs	r3, #160	; 0xa0
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	0011      	movs	r1, r2
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 fe5d 	bl	80050a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80043e6:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 80043e8:	4a67      	ldr	r2, [pc, #412]	; (8004588 <HAL_UART_MspInit+0x2dc>)
 80043ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80043ec:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 80043ee:	2234      	movs	r2, #52	; 0x34
 80043f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043f2:	4b64      	ldr	r3, [pc, #400]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f8:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004404:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 8004406:	2200      	movs	r2, #0
 8004408:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800440a:	4b5e      	ldr	r3, [pc, #376]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004410:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 8004412:	2220      	movs	r2, #32
 8004414:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004416:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 8004418:	2200      	movs	r2, #0
 800441a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 800441e:	0018      	movs	r0, r3
 8004420:	f000 fb80 	bl	8004b24 <HAL_DMA_Init>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8004428:	f7ff f97a 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	4a54      	ldr	r2, [pc, #336]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 8004432:	505a      	str	r2, [r3, r1]
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_UART_MspInit+0x2d8>)
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	629a      	str	r2, [r3, #40]	; 0x28
}
 800443a:	e096      	b.n	800456a <HAL_UART_MspInit+0x2be>
  else if(huart->Instance==USART3)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a52      	ldr	r2, [pc, #328]	; (800458c <HAL_UART_MspInit+0x2e0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d131      	bne.n	80044aa <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004446:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444a:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	02c9      	lsls	r1, r1, #11
 8004450:	430a      	orrs	r2, r1
 8004452:	63da      	str	r2, [r3, #60]	; 0x3c
 8004454:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	02db      	lsls	r3, r3, #11
 800445c:	4013      	ands	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	4b45      	ldr	r3, [pc, #276]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004466:	4b44      	ldr	r3, [pc, #272]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004468:	2102      	movs	r1, #2
 800446a:	430a      	orrs	r2, r1
 800446c:	635a      	str	r2, [r3, #52]	; 0x34
 800446e:	4b42      	ldr	r3, [pc, #264]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	2202      	movs	r2, #2
 8004474:	4013      	ands	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800447a:	215c      	movs	r1, #92	; 0x5c
 800447c:	187b      	adds	r3, r7, r1
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	0052      	lsls	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004484:	187b      	adds	r3, r7, r1
 8004486:	2212      	movs	r2, #18
 8004488:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800448a:	187b      	adds	r3, r7, r1
 800448c:	2201      	movs	r2, #1
 800448e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004490:	187b      	adds	r3, r7, r1
 8004492:	2200      	movs	r2, #0
 8004494:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004496:	187b      	adds	r3, r7, r1
 8004498:	2204      	movs	r2, #4
 800449a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449c:	187b      	adds	r3, r7, r1
 800449e:	4a37      	ldr	r2, [pc, #220]	; (800457c <HAL_UART_MspInit+0x2d0>)
 80044a0:	0019      	movs	r1, r3
 80044a2:	0010      	movs	r0, r2
 80044a4:	f000 fdfc 	bl	80050a0 <HAL_GPIO_Init>
}
 80044a8:	e05f      	b.n	800456a <HAL_UART_MspInit+0x2be>
  else if(huart->Instance==USART4)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_UART_MspInit+0x2e4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d15a      	bne.n	800456a <HAL_UART_MspInit+0x2be>
    __HAL_RCC_USART4_CLK_ENABLE();
 80044b4:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	0309      	lsls	r1, r1, #12
 80044be:	430a      	orrs	r2, r1
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80044c2:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80044c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	4013      	ands	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d0:	4b29      	ldr	r3, [pc, #164]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80044d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d4:	4b28      	ldr	r3, [pc, #160]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	430a      	orrs	r2, r1
 80044da:	635a      	str	r2, [r3, #52]	; 0x34
 80044dc:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_UART_MspInit+0x2cc>)
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	2201      	movs	r2, #1
 80044e2:	4013      	ands	r3, r2
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044e8:	215c      	movs	r1, #92	; 0x5c
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	2203      	movs	r2, #3
 80044ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	2202      	movs	r2, #2
 80044f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2200      	movs	r2, #0
 80044fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8004502:	187b      	adds	r3, r7, r1
 8004504:	2204      	movs	r2, #4
 8004506:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	187a      	adds	r2, r7, r1
 800450a:	23a0      	movs	r3, #160	; 0xa0
 800450c:	05db      	lsls	r3, r3, #23
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fdc5 	bl	80050a0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8004516:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004518:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_UART_MspInit+0x2ec>)
 800451a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 800451e:	2238      	movs	r2, #56	; 0x38
 8004520:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004522:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800452e:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004530:	2280      	movs	r2, #128	; 0x80
 8004532:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004542:	2220      	movs	r2, #32
 8004544:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004548:	2200      	movs	r2, #0
 800454a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 800454e:	0018      	movs	r0, r3
 8004550:	f000 fae8 	bl	8004b24 <HAL_DMA_Init>
 8004554:	1e03      	subs	r3, r0, #0
 8004556:	d001      	beq.n	800455c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8004558:	f7ff f8e2 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004562:	505a      	str	r2, [r3, r1]
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_UART_MspInit+0x2e8>)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b01d      	add	sp, #116	; 0x74
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	40013800 	.word	0x40013800
 8004578:	40021000 	.word	0x40021000
 800457c:	50000400 	.word	0x50000400
 8004580:	40004400 	.word	0x40004400
 8004584:	20000d8c 	.word	0x20000d8c
 8004588:	40020008 	.word	0x40020008
 800458c:	40004800 	.word	0x40004800
 8004590:	40004c00 	.word	0x40004c00
 8004594:	20000de8 	.word	0x20000de8
 8004598:	4002001c 	.word	0x4002001c

0800459c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045a0:	e7fe      	b.n	80045a0 <NMI_Handler+0x4>

080045a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045a6:	e7fe      	b.n	80045a6 <HardFault_Handler+0x4>

080045a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045c0:	f000 f8be 	bl	8004740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 80045ce:	2002      	movs	r0, #2
 80045d0:	f000 fee8 	bl	80053a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <DMA1_Channel1_IRQHandler+0x14>)
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fc10 	bl	8004e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	20000d8c 	.word	0x20000d8c

080045f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <DMA1_Channel2_3_IRQHandler+0x14>)
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fc04 	bl	8004e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	20000de8 	.word	0x20000de8

0800460c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004618:	480d      	ldr	r0, [pc, #52]	; (8004650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800461a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800461c:	f7ff fff6 	bl	800460c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004620:	480c      	ldr	r0, [pc, #48]	; (8004654 <LoopForever+0x6>)
  ldr r1, =_edata
 8004622:	490d      	ldr	r1, [pc, #52]	; (8004658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <LoopForever+0xe>)
  movs r3, #0
 8004626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004628:	e002      	b.n	8004630 <LoopCopyDataInit>

0800462a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800462a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800462c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800462e:	3304      	adds	r3, #4

08004630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004634:	d3f9      	bcc.n	800462a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004636:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004638:	4c0a      	ldr	r4, [pc, #40]	; (8004664 <LoopForever+0x16>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800463c:	e001      	b.n	8004642 <LoopFillZerobss>

0800463e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800463e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004640:	3204      	adds	r2, #4

08004642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004644:	d3fb      	bcc.n	800463e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004646:	f003 ff63 	bl	8008510 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800464a:	f7fe fcef 	bl	800302c <main>

0800464e <LoopForever>:

LoopForever:
  b LoopForever
 800464e:	e7fe      	b.n	800464e <LoopForever>
  ldr   r0, =_estack
 8004650:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004658:	20000660 	.word	0x20000660
  ldr r2, =_sidata
 800465c:	080086c0 	.word	0x080086c0
  ldr r2, =_sbss
 8004660:	20000660 	.word	0x20000660
  ldr r4, =_ebss
 8004664:	20000e54 	.word	0x20000e54

08004668 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004668:	e7fe      	b.n	8004668 <ADC1_COMP_IRQHandler>
	...

0800466c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_Init+0x3c>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_Init+0x3c>)
 800467e:	2180      	movs	r1, #128	; 0x80
 8004680:	0049      	lsls	r1, r1, #1
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004686:	2003      	movs	r0, #3
 8004688:	f000 f810 	bl	80046ac <HAL_InitTick>
 800468c:	1e03      	subs	r3, r0, #0
 800468e:	d003      	beq.n	8004698 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004690:	1dfb      	adds	r3, r7, #7
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e001      	b.n	800469c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004698:	f7ff fd7a 	bl	8004190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800469c:	1dfb      	adds	r3, r7, #7
 800469e:	781b      	ldrb	r3, [r3, #0]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b002      	add	sp, #8
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40022000 	.word	0x40022000

080046ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046b4:	230f      	movs	r3, #15
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80046bc:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_InitTick+0x88>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02b      	beq.n	800471c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80046c4:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <HAL_InitTick+0x8c>)
 80046c6:	681c      	ldr	r4, [r3, #0]
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <HAL_InitTick+0x88>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	0019      	movs	r1, r3
 80046ce:	23fa      	movs	r3, #250	; 0xfa
 80046d0:	0098      	lsls	r0, r3, #2
 80046d2:	f7fb fd17 	bl	8000104 <__udivsi3>
 80046d6:	0003      	movs	r3, r0
 80046d8:	0019      	movs	r1, r3
 80046da:	0020      	movs	r0, r4
 80046dc:	f7fb fd12 	bl	8000104 <__udivsi3>
 80046e0:	0003      	movs	r3, r0
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f93d 	bl	8004962 <HAL_SYSTICK_Config>
 80046e8:	1e03      	subs	r3, r0, #0
 80046ea:	d112      	bne.n	8004712 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d80a      	bhi.n	8004708 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	2301      	movs	r3, #1
 80046f6:	425b      	negs	r3, r3
 80046f8:	2200      	movs	r2, #0
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f90c 	bl	8004918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <HAL_InitTick+0x90>)
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e00d      	b.n	8004724 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004708:	230f      	movs	r3, #15
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e008      	b.n	8004724 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004712:	230f      	movs	r3, #15
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e003      	b.n	8004724 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800471c:	230f      	movs	r3, #15
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004724:	230f      	movs	r3, #15
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	781b      	ldrb	r3, [r3, #0]
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b005      	add	sp, #20
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	2000065c 	.word	0x2000065c
 8004738:	20000654 	.word	0x20000654
 800473c:	20000658 	.word	0x20000658

08004740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_IncTick+0x1c>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	001a      	movs	r2, r3
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_IncTick+0x20>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	18d2      	adds	r2, r2, r3
 8004750:	4b03      	ldr	r3, [pc, #12]	; (8004760 <HAL_IncTick+0x20>)
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	2000065c 	.word	0x2000065c
 8004760:	20000e50 	.word	0x20000e50

08004764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  return uwTick;
 8004768:	4b02      	ldr	r3, [pc, #8]	; (8004774 <HAL_GetTick+0x10>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	20000e50 	.word	0x20000e50

08004778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004780:	f7ff fff0 	bl	8004764 <HAL_GetTick>
 8004784:	0003      	movs	r3, r0
 8004786:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3301      	adds	r3, #1
 8004790:	d005      	beq.n	800479e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_Delay+0x44>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	001a      	movs	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	189b      	adds	r3, r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	f7ff ffe0 	bl	8004764 <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d8f7      	bhi.n	80047a0 <HAL_Delay+0x28>
  {
  }
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b004      	add	sp, #16
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	2000065c 	.word	0x2000065c

080047c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	0002      	movs	r2, r0
 80047c8:	1dfb      	adds	r3, r7, #7
 80047ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047cc:	1dfb      	adds	r3, r7, #7
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b7f      	cmp	r3, #127	; 0x7f
 80047d2:	d809      	bhi.n	80047e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d4:	1dfb      	adds	r3, r7, #7
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	001a      	movs	r2, r3
 80047da:	231f      	movs	r3, #31
 80047dc:	401a      	ands	r2, r3
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <__NVIC_EnableIRQ+0x30>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	4091      	lsls	r1, r2
 80047e4:	000a      	movs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	e000e100 	.word	0xe000e100

080047f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	0002      	movs	r2, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	1dfb      	adds	r3, r7, #7
 8004800:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b7f      	cmp	r3, #127	; 0x7f
 8004808:	d828      	bhi.n	800485c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800480a:	4a2f      	ldr	r2, [pc, #188]	; (80048c8 <__NVIC_SetPriority+0xd4>)
 800480c:	1dfb      	adds	r3, r7, #7
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b25b      	sxtb	r3, r3
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	33c0      	adds	r3, #192	; 0xc0
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	589b      	ldr	r3, [r3, r2]
 800481a:	1dfa      	adds	r2, r7, #7
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0011      	movs	r1, r2
 8004820:	2203      	movs	r2, #3
 8004822:	400a      	ands	r2, r1
 8004824:	00d2      	lsls	r2, r2, #3
 8004826:	21ff      	movs	r1, #255	; 0xff
 8004828:	4091      	lsls	r1, r2
 800482a:	000a      	movs	r2, r1
 800482c:	43d2      	mvns	r2, r2
 800482e:	401a      	ands	r2, r3
 8004830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	019b      	lsls	r3, r3, #6
 8004836:	22ff      	movs	r2, #255	; 0xff
 8004838:	401a      	ands	r2, r3
 800483a:	1dfb      	adds	r3, r7, #7
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	0018      	movs	r0, r3
 8004840:	2303      	movs	r3, #3
 8004842:	4003      	ands	r3, r0
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004848:	481f      	ldr	r0, [pc, #124]	; (80048c8 <__NVIC_SetPriority+0xd4>)
 800484a:	1dfb      	adds	r3, r7, #7
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b25b      	sxtb	r3, r3
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	430a      	orrs	r2, r1
 8004854:	33c0      	adds	r3, #192	; 0xc0
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800485a:	e031      	b.n	80048c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800485c:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <__NVIC_SetPriority+0xd8>)
 800485e:	1dfb      	adds	r3, r7, #7
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	0019      	movs	r1, r3
 8004864:	230f      	movs	r3, #15
 8004866:	400b      	ands	r3, r1
 8004868:	3b08      	subs	r3, #8
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	3306      	adds	r3, #6
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	18d3      	adds	r3, r2, r3
 8004872:	3304      	adds	r3, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	1dfa      	adds	r2, r7, #7
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	0011      	movs	r1, r2
 800487c:	2203      	movs	r2, #3
 800487e:	400a      	ands	r2, r1
 8004880:	00d2      	lsls	r2, r2, #3
 8004882:	21ff      	movs	r1, #255	; 0xff
 8004884:	4091      	lsls	r1, r2
 8004886:	000a      	movs	r2, r1
 8004888:	43d2      	mvns	r2, r2
 800488a:	401a      	ands	r2, r3
 800488c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	401a      	ands	r2, r3
 8004896:	1dfb      	adds	r3, r7, #7
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	0018      	movs	r0, r3
 800489c:	2303      	movs	r3, #3
 800489e:	4003      	ands	r3, r0
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048a4:	4809      	ldr	r0, [pc, #36]	; (80048cc <__NVIC_SetPriority+0xd8>)
 80048a6:	1dfb      	adds	r3, r7, #7
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	001c      	movs	r4, r3
 80048ac:	230f      	movs	r3, #15
 80048ae:	4023      	ands	r3, r4
 80048b0:	3b08      	subs	r3, #8
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	430a      	orrs	r2, r1
 80048b6:	3306      	adds	r3, #6
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	18c3      	adds	r3, r0, r3
 80048bc:	3304      	adds	r3, #4
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b003      	add	sp, #12
 80048c6:	bd90      	pop	{r4, r7, pc}
 80048c8:	e000e100 	.word	0xe000e100
 80048cc:	e000ed00 	.word	0xe000ed00

080048d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	045b      	lsls	r3, r3, #17
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d301      	bcc.n	80048e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048e4:	2301      	movs	r3, #1
 80048e6:	e010      	b.n	800490a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <SysTick_Config+0x44>)
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048f0:	2301      	movs	r3, #1
 80048f2:	425b      	negs	r3, r3
 80048f4:	2103      	movs	r1, #3
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7ff ff7c 	bl	80047f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <SysTick_Config+0x44>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004902:	4b04      	ldr	r3, [pc, #16]	; (8004914 <SysTick_Config+0x44>)
 8004904:	2207      	movs	r2, #7
 8004906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004908:	2300      	movs	r3, #0
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	e000e010 	.word	0xe000e010

08004918 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	210f      	movs	r1, #15
 8004924:	187b      	adds	r3, r7, r1
 8004926:	1c02      	adds	r2, r0, #0
 8004928:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	187b      	adds	r3, r7, r1
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b25b      	sxtb	r3, r3
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff ff5d 	bl	80047f4 <__NVIC_SetPriority>
}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	b004      	add	sp, #16
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	0002      	movs	r2, r0
 800494a:	1dfb      	adds	r3, r7, #7
 800494c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800494e:	1dfb      	adds	r3, r7, #7
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b25b      	sxtb	r3, r3
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff ff33 	bl	80047c0 <__NVIC_EnableIRQ>
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff ffaf 	bl	80048d0 <SysTick_Config>
 8004972:	0003      	movs	r3, r0
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e056      	b.n	8004a3c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7f5b      	ldrb	r3, [r3, #29]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fc19 	bl	80041d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10c      	bne.n	80049ce <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_CRC_Init+0xc8>)
 80049ba:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2118      	movs	r1, #24
 80049c8:	438a      	bics	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	e00b      	b.n	80049e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 f835 	bl	8004a48 <HAL_CRCEx_Polynomial_Set>
 80049de:	1e03      	subs	r3, r0, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e02a      	b.n	8004a3c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	795b      	ldrb	r3, [r3, #5]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	4252      	negs	r2, r2
 80049f6:	611a      	str	r2, [r3, #16]
 80049f8:	e004      	b.n	8004a04 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6912      	ldr	r2, [r2, #16]
 8004a02:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2260      	movs	r2, #96	; 0x60
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	4393      	bics	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	04c11db7 	.word	0x04c11db7

08004a48 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2317      	movs	r3, #23
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004a5c:	231f      	movs	r3, #31
 8004a5e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1e5a      	subs	r2, r3, #1
 8004a66:	613a      	str	r2, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_CRCEx_Polynomial_Set+0x36>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	221f      	movs	r2, #31
 8004a70:	4013      	ands	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	40da      	lsrs	r2, r3
 8004a76:	0013      	movs	r3, r2
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d0f1      	beq.n	8004a62 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b18      	cmp	r3, #24
 8004a82:	d00f      	beq.n	8004aa4 <HAL_CRCEx_Polynomial_Set+0x5c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b18      	cmp	r3, #24
 8004a88:	d824      	bhi.n	8004ad4 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d011      	beq.n	8004ab4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d81e      	bhi.n	8004ad4 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_CRCEx_Polynomial_Set+0x96>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d010      	beq.n	8004ac4 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004aa2:	e017      	b.n	8004ad4 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d91b      	bls.n	8004ae2 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004aaa:	2317      	movs	r3, #23
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ab2:	e016      	b.n	8004ae2 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b07      	cmp	r3, #7
 8004ab8:	d915      	bls.n	8004ae6 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004aba:	2317      	movs	r3, #23
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ac2:	e010      	b.n	8004ae6 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d90f      	bls.n	8004aea <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004aca:	2317      	movs	r3, #23
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ad2:	e00a      	b.n	8004aea <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004ad4:	2317      	movs	r3, #23
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
      break;
 8004adc:	e006      	b.n	8004aec <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	e004      	b.n	8004aec <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	e002      	b.n	8004aec <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	e000      	b.n	8004aec <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004aea:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004aec:	2317      	movs	r3, #23
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2218      	movs	r2, #24
 8004b06:	4393      	bics	r3, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004b14:	2317      	movs	r3, #23
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	781b      	ldrb	r3, [r3, #0]
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b006      	add	sp, #24
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e077      	b.n	8004c26 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3d      	ldr	r2, [pc, #244]	; (8004c30 <HAL_DMA_Init+0x10c>)
 8004b3c:	4694      	mov	ip, r2
 8004b3e:	4463      	add	r3, ip
 8004b40:	2114      	movs	r1, #20
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fb fade 	bl	8000104 <__udivsi3>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2225      	movs	r2, #37	; 0x25
 8004b54:	2102      	movs	r1, #2
 8004b56:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4934      	ldr	r1, [pc, #208]	; (8004c34 <HAL_DMA_Init+0x110>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6819      	ldr	r1, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 fa2d 	bl	8005000 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	01db      	lsls	r3, r3, #7
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d102      	bne.n	8004bb8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc0:	213f      	movs	r1, #63	; 0x3f
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004bce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_DMA_Init+0xd8>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d80d      	bhi.n	8004bfc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	0018      	movs	r0, r3
 8004be4:	f000 fa38 	bl	8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e008      	b.n	8004c0e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2225      	movs	r2, #37	; 0x25
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	0018      	movs	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b002      	add	sp, #8
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	bffdfff8 	.word	0xbffdfff8
 8004c34:	ffff800f 	.word	0xffff800f

08004c38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2317      	movs	r3, #23
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2224      	movs	r2, #36	; 0x24
 8004c52:	5c9b      	ldrb	r3, [r3, r2]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA_Start_IT+0x24>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e06f      	b.n	8004d3c <HAL_DMA_Start_IT+0x104>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	2101      	movs	r1, #1
 8004c62:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2225      	movs	r2, #37	; 0x25
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d157      	bne.n	8004d20 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2225      	movs	r2, #37	; 0x25
 8004c74:	2102      	movs	r1, #2
 8004c76:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2101      	movs	r1, #1
 8004c8a:	438a      	bics	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f973 	bl	8004f80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	210e      	movs	r1, #14
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e00f      	b.n	8004cd4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	210a      	movs	r1, #10
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	025b      	lsls	r3, r3, #9
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d008      	beq.n	8004cf4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0049      	lsls	r1, r1, #1
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	0049      	lsls	r1, r1, #1
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e00a      	b.n	8004d36 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2280      	movs	r2, #128	; 0x80
 8004d24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004d2e:	2317      	movs	r3, #23
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004d36:	2317      	movs	r3, #23
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b006      	add	sp, #24
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e050      	b.n	8004df8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2225      	movs	r2, #37	; 0x25
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d008      	beq.n	8004d74 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	; 0x24
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e041      	b.n	8004df8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	210e      	movs	r1, #14
 8004d80:	438a      	bics	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	491c      	ldr	r1, [pc, #112]	; (8004e00 <HAL_DMA_Abort+0xbc>)
 8004d90:	400a      	ands	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2101      	movs	r1, #1
 8004da0:	438a      	bics	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004da4:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <HAL_DMA_Abort+0xc0>)
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	221c      	movs	r2, #28
 8004dae:	4013      	ands	r3, r2
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_DMA_Abort+0xc0>)
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004dc2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00c      	beq.n	8004de6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd6:	490a      	ldr	r1, [pc, #40]	; (8004e00 <HAL_DMA_Abort+0xbc>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004de4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2225      	movs	r2, #37	; 0x25
 8004dea:	2101      	movs	r1, #1
 8004dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2224      	movs	r2, #36	; 0x24
 8004df2:	2100      	movs	r1, #0
 8004df4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	fffffeff 	.word	0xfffffeff
 8004e04:	40020000 	.word	0x40020000

08004e08 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	221c      	movs	r2, #28
 8004e24:	4013      	ands	r3, r2
 8004e26:	2204      	movs	r2, #4
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	0013      	movs	r3, r2
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d027      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x7a>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2204      	movs	r2, #4
 8004e36:	4013      	ands	r3, r2
 8004e38:	d023      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2220      	movs	r2, #32
 8004e42:	4013      	ands	r3, r2
 8004e44:	d107      	bne.n	8004e56 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2104      	movs	r1, #4
 8004e52:	438a      	bics	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004e56:	4b44      	ldr	r3, [pc, #272]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	221c      	movs	r2, #28
 8004e60:	4013      	ands	r3, r2
 8004e62:	2204      	movs	r2, #4
 8004e64:	409a      	lsls	r2, r3
 8004e66:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d100      	bne.n	8004e76 <HAL_DMA_IRQHandler+0x6e>
 8004e74:	e073      	b.n	8004f5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	0010      	movs	r0, r2
 8004e7e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004e80:	e06d      	b.n	8004f5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	221c      	movs	r2, #28
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	0013      	movs	r3, r2
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4013      	ands	r3, r2
 8004e94:	d02e      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0xec>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d02a      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	210a      	movs	r1, #10
 8004eb6:	438a      	bics	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2225      	movs	r2, #37	; 0x25
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	221c      	movs	r2, #28
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2202      	movs	r2, #2
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2224      	movs	r2, #36	; 0x24
 8004edc:	2100      	movs	r1, #0
 8004ede:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	0010      	movs	r0, r2
 8004ef0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004ef2:	e034      	b.n	8004f5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	221c      	movs	r2, #28
 8004efa:	4013      	ands	r3, r2
 8004efc:	2208      	movs	r2, #8
 8004efe:	409a      	lsls	r2, r3
 8004f00:	0013      	movs	r3, r2
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4013      	ands	r3, r2
 8004f06:	d02b      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x158>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d027      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	210e      	movs	r1, #14
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004f22:	6859      	ldr	r1, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	221c      	movs	r2, #28
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_DMA_IRQHandler+0x160>)
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2225      	movs	r2, #37	; 0x25
 8004f40:	2101      	movs	r1, #1
 8004f42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	; 0x24
 8004f48:	2100      	movs	r1, #0
 8004f4a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	0010      	movs	r0, r2
 8004f5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	46c0      	nop			; (mov r8, r8)
}
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40020000 	.word	0x40020000

08004f6c <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8004f78:	0018      	movs	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b002      	add	sp, #8
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004faa:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <DMA_SetConfig+0x7c>)
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	221c      	movs	r2, #28
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <DMA_SetConfig+0x7c>)
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d108      	bne.n	8004fe2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fe0:	e007      	b.n	8004ff2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	60da      	str	r2, [r3, #12]
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b004      	add	sp, #16
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	40020000 	.word	0x40020000

08005000 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005010:	4694      	mov	ip, r2
 8005012:	4463      	add	r3, ip
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	001a      	movs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	001a      	movs	r2, r3
 8005022:	23ff      	movs	r3, #255	; 0xff
 8005024:	4013      	ands	r3, r2
 8005026:	3b08      	subs	r3, #8
 8005028:	2114      	movs	r1, #20
 800502a:	0018      	movs	r0, r3
 800502c:	f7fb f86a 	bl	8000104 <__udivsi3>
 8005030:	0003      	movs	r3, r0
 8005032:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a07      	ldr	r2, [pc, #28]	; (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005038:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	221f      	movs	r2, #31
 800503e:	4013      	ands	r3, r2
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005048:	46c0      	nop			; (mov r8, r8)
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}
 8005050:	10008200 	.word	0x10008200
 8005054:	40020880 	.word	0x40020880

08005058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	223f      	movs	r2, #63	; 0x3f
 8005066:	4013      	ands	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800506e:	4694      	mov	ip, r2
 8005070:	4463      	add	r3, ip
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	001a      	movs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a07      	ldr	r2, [pc, #28]	; (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800507e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b01      	subs	r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	4013      	ands	r3, r2
 8005088:	2201      	movs	r2, #1
 800508a:	409a      	lsls	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b004      	add	sp, #16
 8005096:	bd80      	pop	{r7, pc}
 8005098:	1000823f 	.word	0x1000823f
 800509c:	40020940 	.word	0x40020940

080050a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ae:	e147      	b.n	8005340 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2101      	movs	r1, #1
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4091      	lsls	r1, r2
 80050ba:	000a      	movs	r2, r1
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d100      	bne.n	80050c8 <HAL_GPIO_Init+0x28>
 80050c6:	e138      	b.n	800533a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2203      	movs	r2, #3
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d005      	beq.n	80050e0 <HAL_GPIO_Init+0x40>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2203      	movs	r2, #3
 80050da:	4013      	ands	r3, r2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d130      	bne.n	8005142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	2203      	movs	r2, #3
 80050ec:	409a      	lsls	r2, r3
 80050ee:	0013      	movs	r3, r2
 80050f0:	43da      	mvns	r2, r3
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4013      	ands	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	409a      	lsls	r2, r3
 8005102:	0013      	movs	r3, r2
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005116:	2201      	movs	r2, #1
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	409a      	lsls	r2, r3
 800511c:	0013      	movs	r3, r2
 800511e:	43da      	mvns	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4013      	ands	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	2201      	movs	r2, #1
 800512e:	401a      	ands	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	409a      	lsls	r2, r3
 8005134:	0013      	movs	r3, r2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2203      	movs	r2, #3
 8005148:	4013      	ands	r3, r2
 800514a:	2b03      	cmp	r3, #3
 800514c:	d017      	beq.n	800517e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	2203      	movs	r2, #3
 800515a:	409a      	lsls	r2, r3
 800515c:	0013      	movs	r3, r2
 800515e:	43da      	mvns	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	0013      	movs	r3, r2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2203      	movs	r2, #3
 8005184:	4013      	ands	r3, r2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d123      	bne.n	80051d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	08da      	lsrs	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3208      	adds	r2, #8
 8005192:	0092      	lsls	r2, r2, #2
 8005194:	58d3      	ldr	r3, [r2, r3]
 8005196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2207      	movs	r2, #7
 800519c:	4013      	ands	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	220f      	movs	r2, #15
 80051a2:	409a      	lsls	r2, r3
 80051a4:	0013      	movs	r3, r2
 80051a6:	43da      	mvns	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2107      	movs	r1, #7
 80051b6:	400b      	ands	r3, r1
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	409a      	lsls	r2, r3
 80051bc:	0013      	movs	r3, r2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	08da      	lsrs	r2, r3, #3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3208      	adds	r2, #8
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	6939      	ldr	r1, [r7, #16]
 80051d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2203      	movs	r2, #3
 80051de:	409a      	lsls	r2, r3
 80051e0:	0013      	movs	r3, r2
 80051e2:	43da      	mvns	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2203      	movs	r2, #3
 80051f0:	401a      	ands	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	0013      	movs	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	23c0      	movs	r3, #192	; 0xc0
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	4013      	ands	r3, r2
 8005210:	d100      	bne.n	8005214 <HAL_GPIO_Init+0x174>
 8005212:	e092      	b.n	800533a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005214:	4a50      	ldr	r2, [pc, #320]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	3318      	adds	r3, #24
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	589b      	ldr	r3, [r3, r2]
 8005220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2203      	movs	r2, #3
 8005226:	4013      	ands	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	220f      	movs	r2, #15
 800522c:	409a      	lsls	r2, r3
 800522e:	0013      	movs	r3, r2
 8005230:	43da      	mvns	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4013      	ands	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	23a0      	movs	r3, #160	; 0xa0
 800523c:	05db      	lsls	r3, r3, #23
 800523e:	429a      	cmp	r2, r3
 8005240:	d013      	beq.n	800526a <HAL_GPIO_Init+0x1ca>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a45      	ldr	r2, [pc, #276]	; (800535c <HAL_GPIO_Init+0x2bc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00d      	beq.n	8005266 <HAL_GPIO_Init+0x1c6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a44      	ldr	r2, [pc, #272]	; (8005360 <HAL_GPIO_Init+0x2c0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <HAL_GPIO_Init+0x1c2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a43      	ldr	r2, [pc, #268]	; (8005364 <HAL_GPIO_Init+0x2c4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <HAL_GPIO_Init+0x1be>
 800525a:	2303      	movs	r3, #3
 800525c:	e006      	b.n	800526c <HAL_GPIO_Init+0x1cc>
 800525e:	2305      	movs	r3, #5
 8005260:	e004      	b.n	800526c <HAL_GPIO_Init+0x1cc>
 8005262:	2302      	movs	r3, #2
 8005264:	e002      	b.n	800526c <HAL_GPIO_Init+0x1cc>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_GPIO_Init+0x1cc>
 800526a:	2300      	movs	r3, #0
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	2103      	movs	r1, #3
 8005270:	400a      	ands	r2, r1
 8005272:	00d2      	lsls	r2, r2, #3
 8005274:	4093      	lsls	r3, r2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800527c:	4936      	ldr	r1, [pc, #216]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	3318      	adds	r3, #24
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800528a:	4b33      	ldr	r3, [pc, #204]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43da      	mvns	r2, r3
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	035b      	lsls	r3, r3, #13
 80052a2:	4013      	ands	r3, r2
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ae:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	43da      	mvns	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4013      	ands	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	039b      	lsls	r3, r3, #14
 80052cc:	4013      	ands	r3, r2
 80052ce:	d003      	beq.n	80052d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052d8:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 80052e0:	2384      	movs	r3, #132	; 0x84
 80052e2:	58d3      	ldr	r3, [r2, r3]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	4013      	ands	r3, r2
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005304:	4914      	ldr	r1, [pc, #80]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 8005306:	2284      	movs	r2, #132	; 0x84
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800530c:	4a12      	ldr	r2, [pc, #72]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	58d3      	ldr	r3, [r2, r3]
 8005312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	43da      	mvns	r2, r3
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4013      	ands	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	025b      	lsls	r3, r3, #9
 8005326:	4013      	ands	r3, r2
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005332:	4909      	ldr	r1, [pc, #36]	; (8005358 <HAL_GPIO_Init+0x2b8>)
 8005334:	2280      	movs	r2, #128	; 0x80
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	3301      	adds	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	40da      	lsrs	r2, r3
 8005348:	1e13      	subs	r3, r2, #0
 800534a:	d000      	beq.n	800534e <HAL_GPIO_Init+0x2ae>
 800534c:	e6b0      	b.n	80050b0 <HAL_GPIO_Init+0x10>
  }
}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	46c0      	nop			; (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b006      	add	sp, #24
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021800 	.word	0x40021800
 800535c:	50000400 	.word	0x50000400
 8005360:	50000800 	.word	0x50000800
 8005364:	50000c00 	.word	0x50000c00

08005368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	0008      	movs	r0, r1
 8005372:	0011      	movs	r1, r2
 8005374:	1cbb      	adds	r3, r7, #2
 8005376:	1c02      	adds	r2, r0, #0
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	1c7b      	adds	r3, r7, #1
 800537c:	1c0a      	adds	r2, r1, #0
 800537e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005380:	1c7b      	adds	r3, r7, #1
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005388:	1cbb      	adds	r3, r7, #2
 800538a:	881a      	ldrh	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005390:	e003      	b.n	800539a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005392:	1cbb      	adds	r3, r7, #2
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	629a      	str	r2, [r3, #40]	; 0x28
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	0002      	movs	r2, r0
 80053ac:	1dbb      	adds	r3, r7, #6
 80053ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	1dba      	adds	r2, r7, #6
 80053b6:	8812      	ldrh	r2, [r2, #0]
 80053b8:	4013      	ands	r3, r2
 80053ba:	d008      	beq.n	80053ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80053bc:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80053be:	1dba      	adds	r2, r7, #6
 80053c0:	8812      	ldrh	r2, [r2, #0]
 80053c2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80053c4:	1dbb      	adds	r3, r7, #6
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 f815 	bl	80053f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	1dba      	adds	r2, r7, #6
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	4013      	ands	r3, r2
 80053d8:	d008      	beq.n	80053ec <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80053dc:	1dba      	adds	r2, r7, #6
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80053e2:	1dbb      	adds	r3, r7, #6
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fe f956 	bl	8003698 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021800 	.word	0x40021800

080053f8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	0002      	movs	r2, r0
 8005400:	1dbb      	adds	r3, r7, #6
 8005402:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	b002      	add	sp, #8
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005414:	4b19      	ldr	r3, [pc, #100]	; (800547c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800541a:	4013      	ands	r3, r2
 800541c:	0019      	movs	r1, r3
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	430a      	orrs	r2, r1
 8005424:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d11f      	bne.n	8005470 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005430:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	0013      	movs	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	189b      	adds	r3, r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4912      	ldr	r1, [pc, #72]	; (8005488 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800543e:	0018      	movs	r0, r3
 8005440:	f7fa fe60 	bl	8000104 <__udivsi3>
 8005444:	0003      	movs	r3, r0
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544a:	e008      	b.n	800545e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e001      	b.n	800545e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e009      	b.n	8005472 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	401a      	ands	r2, r3
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	429a      	cmp	r2, r3
 800546e:	d0ed      	beq.n	800544c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b004      	add	sp, #16
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	40007000 	.word	0x40007000
 8005480:	fffff9ff 	.word	0xfffff9ff
 8005484:	20000654 	.word	0x20000654
 8005488:	000f4240 	.word	0x000f4240

0800548c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	23e0      	movs	r3, #224	; 0xe0
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	4013      	ands	r3, r2
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000

080054a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e2fe      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2201      	movs	r2, #1
 80054bc:	4013      	ands	r3, r2
 80054be:	d100      	bne.n	80054c2 <HAL_RCC_OscConfig+0x1e>
 80054c0:	e07c      	b.n	80055bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c2:	4bc3      	ldr	r3, [pc, #780]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2238      	movs	r2, #56	; 0x38
 80054c8:	4013      	ands	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054cc:	4bc0      	ldr	r3, [pc, #768]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2203      	movs	r2, #3
 80054d2:	4013      	ands	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d102      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3e>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d002      	beq.n	80054e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d10b      	bne.n	8005500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	4bb9      	ldr	r3, [pc, #740]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	029b      	lsls	r3, r3, #10
 80054f0:	4013      	ands	r3, r2
 80054f2:	d062      	beq.n	80055ba <HAL_RCC_OscConfig+0x116>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d15e      	bne.n	80055ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e2d9      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	025b      	lsls	r3, r3, #9
 8005508:	429a      	cmp	r2, r3
 800550a:	d107      	bne.n	800551c <HAL_RCC_OscConfig+0x78>
 800550c:	4bb0      	ldr	r3, [pc, #704]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4baf      	ldr	r3, [pc, #700]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	0249      	lsls	r1, r1, #9
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e020      	b.n	800555e <HAL_RCC_OscConfig+0xba>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	23a0      	movs	r3, #160	; 0xa0
 8005522:	02db      	lsls	r3, r3, #11
 8005524:	429a      	cmp	r2, r3
 8005526:	d10e      	bne.n	8005546 <HAL_RCC_OscConfig+0xa2>
 8005528:	4ba9      	ldr	r3, [pc, #676]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4ba8      	ldr	r3, [pc, #672]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800552e:	2180      	movs	r1, #128	; 0x80
 8005530:	02c9      	lsls	r1, r1, #11
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	4ba6      	ldr	r3, [pc, #664]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4ba5      	ldr	r3, [pc, #660]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	0249      	lsls	r1, r1, #9
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e00b      	b.n	800555e <HAL_RCC_OscConfig+0xba>
 8005546:	4ba2      	ldr	r3, [pc, #648]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4ba1      	ldr	r3, [pc, #644]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800554c:	49a1      	ldr	r1, [pc, #644]	; (80057d4 <HAL_RCC_OscConfig+0x330>)
 800554e:	400a      	ands	r2, r1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	4b9f      	ldr	r3, [pc, #636]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005558:	499f      	ldr	r1, [pc, #636]	; (80057d8 <HAL_RCC_OscConfig+0x334>)
 800555a:	400a      	ands	r2, r1
 800555c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d014      	beq.n	8005590 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7ff f8fd 	bl	8004764 <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005570:	f7ff f8f8 	bl	8004764 <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e298      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005582:	4b93      	ldr	r3, [pc, #588]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	029b      	lsls	r3, r3, #10
 800558a:	4013      	ands	r3, r2
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0xcc>
 800558e:	e015      	b.n	80055bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7ff f8e8 	bl	8004764 <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559a:	f7ff f8e3 	bl	8004764 <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b64      	cmp	r3, #100	; 0x64
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e283      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ac:	4b88      	ldr	r3, [pc, #544]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	4013      	ands	r3, r2
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0xf6>
 80055b8:	e000      	b.n	80055bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d100      	bne.n	80055c8 <HAL_RCC_OscConfig+0x124>
 80055c6:	e099      	b.n	80056fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c8:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2238      	movs	r2, #56	; 0x38
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d2:	4b7f      	ldr	r3, [pc, #508]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2203      	movs	r2, #3
 80055d8:	4013      	ands	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_OscConfig+0x144>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d002      	beq.n	80055ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d135      	bne.n	800565a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ee:	4b78      	ldr	r3, [pc, #480]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4013      	ands	r3, r2
 80055f8:	d005      	beq.n	8005606 <HAL_RCC_OscConfig+0x162>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e256      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005606:	4b72      	ldr	r3, [pc, #456]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4a74      	ldr	r2, [pc, #464]	; (80057dc <HAL_RCC_OscConfig+0x338>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	021a      	lsls	r2, r3, #8
 8005616:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d112      	bne.n	8005648 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005622:	4b6b      	ldr	r3, [pc, #428]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a6e      	ldr	r2, [pc, #440]	; (80057e0 <HAL_RCC_OscConfig+0x33c>)
 8005628:	4013      	ands	r3, r2
 800562a:	0019      	movs	r1, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	4b67      	ldr	r3, [pc, #412]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005636:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	0adb      	lsrs	r3, r3, #11
 800563c:	2207      	movs	r2, #7
 800563e:	4013      	ands	r3, r2
 8005640:	4a68      	ldr	r2, [pc, #416]	; (80057e4 <HAL_RCC_OscConfig+0x340>)
 8005642:	40da      	lsrs	r2, r3
 8005644:	4b68      	ldr	r3, [pc, #416]	; (80057e8 <HAL_RCC_OscConfig+0x344>)
 8005646:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005648:	4b68      	ldr	r3, [pc, #416]	; (80057ec <HAL_RCC_OscConfig+0x348>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0018      	movs	r0, r3
 800564e:	f7ff f82d 	bl	80046ac <HAL_InitTick>
 8005652:	1e03      	subs	r3, r0, #0
 8005654:	d051      	beq.n	80056fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e22c      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d030      	beq.n	80056c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005662:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5e      	ldr	r2, [pc, #376]	; (80057e0 <HAL_RCC_OscConfig+0x33c>)
 8005668:	4013      	ands	r3, r2
 800566a:	0019      	movs	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	4b57      	ldr	r3, [pc, #348]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005676:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b55      	ldr	r3, [pc, #340]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	0049      	lsls	r1, r1, #1
 8005680:	430a      	orrs	r2, r1
 8005682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7ff f86e 	bl	8004764 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800568e:	f7ff f869 	bl	8004764 <HAL_GetTick>
 8005692:	0002      	movs	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e209      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4013      	ands	r3, r2
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b48      	ldr	r3, [pc, #288]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a4a      	ldr	r2, [pc, #296]	; (80057dc <HAL_RCC_OscConfig+0x338>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	0019      	movs	r1, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	e01b      	b.n	80056fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80056ca:	4949      	ldr	r1, [pc, #292]	; (80057f0 <HAL_RCC_OscConfig+0x34c>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7ff f848 	bl	8004764 <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056da:	f7ff f843 	bl	8004764 <HAL_GetTick>
 80056de:	0002      	movs	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e1e3      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ec:	4b38      	ldr	r3, [pc, #224]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4013      	ands	r3, r2
 80056f6:	d1f0      	bne.n	80056da <HAL_RCC_OscConfig+0x236>
 80056f8:	e000      	b.n	80056fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	4013      	ands	r3, r2
 8005704:	d047      	beq.n	8005796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005706:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2238      	movs	r2, #56	; 0x38
 800570c:	4013      	ands	r3, r2
 800570e:	2b18      	cmp	r3, #24
 8005710:	d10a      	bne.n	8005728 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005712:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	2202      	movs	r2, #2
 8005718:	4013      	ands	r3, r2
 800571a:	d03c      	beq.n	8005796 <HAL_RCC_OscConfig+0x2f2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d138      	bne.n	8005796 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e1c5      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005730:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005732:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005734:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005736:	2101      	movs	r1, #1
 8005738:	430a      	orrs	r2, r1
 800573a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7ff f812 	bl	8004764 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005746:	f7ff f80d 	bl	8004764 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e1ad      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	2202      	movs	r2, #2
 800575e:	4013      	ands	r3, r2
 8005760:	d0f1      	beq.n	8005746 <HAL_RCC_OscConfig+0x2a2>
 8005762:	e018      	b.n	8005796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 8005766:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800576a:	2101      	movs	r1, #1
 800576c:	438a      	bics	r2, r1
 800576e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fe fff8 	bl	8004764 <HAL_GetTick>
 8005774:	0003      	movs	r3, r0
 8005776:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577a:	f7fe fff3 	bl	8004764 <HAL_GetTick>
 800577e:	0002      	movs	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e193      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	2202      	movs	r2, #2
 8005792:	4013      	ands	r3, r2
 8005794:	d1f1      	bne.n	800577a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2204      	movs	r2, #4
 800579c:	4013      	ands	r3, r2
 800579e:	d100      	bne.n	80057a2 <HAL_RCC_OscConfig+0x2fe>
 80057a0:	e0c6      	b.n	8005930 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a2:	231f      	movs	r3, #31
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2238      	movs	r2, #56	; 0x38
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d11e      	bne.n	80057f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_RCC_OscConfig+0x32c>)
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	2202      	movs	r2, #2
 80057bc:	4013      	ands	r3, r2
 80057be:	d100      	bne.n	80057c2 <HAL_RCC_OscConfig+0x31e>
 80057c0:	e0b6      	b.n	8005930 <HAL_RCC_OscConfig+0x48c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d000      	beq.n	80057cc <HAL_RCC_OscConfig+0x328>
 80057ca:	e0b1      	b.n	8005930 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e171      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
 80057d0:	40021000 	.word	0x40021000
 80057d4:	fffeffff 	.word	0xfffeffff
 80057d8:	fffbffff 	.word	0xfffbffff
 80057dc:	ffff80ff 	.word	0xffff80ff
 80057e0:	ffffc7ff 	.word	0xffffc7ff
 80057e4:	00f42400 	.word	0x00f42400
 80057e8:	20000654 	.word	0x20000654
 80057ec:	20000658 	.word	0x20000658
 80057f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057f4:	4bb1      	ldr	r3, [pc, #708]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80057f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	055b      	lsls	r3, r3, #21
 80057fc:	4013      	ands	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_OscConfig+0x360>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x362>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d011      	beq.n	800582e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800580a:	4bac      	ldr	r3, [pc, #688]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800580c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580e:	4bab      	ldr	r3, [pc, #684]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	0549      	lsls	r1, r1, #21
 8005814:	430a      	orrs	r2, r1
 8005816:	63da      	str	r2, [r3, #60]	; 0x3c
 8005818:	4ba8      	ldr	r3, [pc, #672]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800581a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	055b      	lsls	r3, r3, #21
 8005820:	4013      	ands	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005826:	231f      	movs	r3, #31
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582e:	4ba4      	ldr	r3, [pc, #656]	; (8005ac0 <HAL_RCC_OscConfig+0x61c>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4013      	ands	r3, r2
 8005838:	d11a      	bne.n	8005870 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800583a:	4ba1      	ldr	r3, [pc, #644]	; (8005ac0 <HAL_RCC_OscConfig+0x61c>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4ba0      	ldr	r3, [pc, #640]	; (8005ac0 <HAL_RCC_OscConfig+0x61c>)
 8005840:	2180      	movs	r1, #128	; 0x80
 8005842:	0049      	lsls	r1, r1, #1
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005848:	f7fe ff8c 	bl	8004764 <HAL_GetTick>
 800584c:	0003      	movs	r3, r0
 800584e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005852:	f7fe ff87 	bl	8004764 <HAL_GetTick>
 8005856:	0002      	movs	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e127      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005864:	4b96      	ldr	r3, [pc, #600]	; (8005ac0 <HAL_RCC_OscConfig+0x61c>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	4013      	ands	r3, r2
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x3e2>
 8005878:	4b90      	ldr	r3, [pc, #576]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800587a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800587c:	4b8f      	ldr	r3, [pc, #572]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800587e:	2101      	movs	r1, #1
 8005880:	430a      	orrs	r2, r1
 8005882:	65da      	str	r2, [r3, #92]	; 0x5c
 8005884:	e01c      	b.n	80058c0 <HAL_RCC_OscConfig+0x41c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b05      	cmp	r3, #5
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x404>
 800588e:	4b8b      	ldr	r3, [pc, #556]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005892:	4b8a      	ldr	r3, [pc, #552]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005894:	2104      	movs	r1, #4
 8005896:	430a      	orrs	r2, r1
 8005898:	65da      	str	r2, [r3, #92]	; 0x5c
 800589a:	4b88      	ldr	r3, [pc, #544]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800589c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800589e:	4b87      	ldr	r3, [pc, #540]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80058a0:	2101      	movs	r1, #1
 80058a2:	430a      	orrs	r2, r1
 80058a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0x41c>
 80058a8:	4b84      	ldr	r3, [pc, #528]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80058aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058ac:	4b83      	ldr	r3, [pc, #524]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80058ae:	2101      	movs	r1, #1
 80058b0:	438a      	bics	r2, r1
 80058b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80058b4:	4b81      	ldr	r3, [pc, #516]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80058b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058b8:	4b80      	ldr	r3, [pc, #512]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80058ba:	2104      	movs	r1, #4
 80058bc:	438a      	bics	r2, r1
 80058be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d014      	beq.n	80058f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe ff4c 	bl	8004764 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d0:	e009      	b.n	80058e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d2:	f7fe ff47 	bl	8004764 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	4a79      	ldr	r2, [pc, #484]	; (8005ac4 <HAL_RCC_OscConfig+0x620>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0e6      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e6:	4b75      	ldr	r3, [pc, #468]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	2202      	movs	r2, #2
 80058ec:	4013      	ands	r3, r2
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x42e>
 80058f0:	e013      	b.n	800591a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f2:	f7fe ff37 	bl	8004764 <HAL_GetTick>
 80058f6:	0003      	movs	r3, r0
 80058f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058fa:	e009      	b.n	8005910 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fe ff32 	bl	8004764 <HAL_GetTick>
 8005900:	0002      	movs	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	4a6f      	ldr	r2, [pc, #444]	; (8005ac4 <HAL_RCC_OscConfig+0x620>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0d1      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005910:	4b6a      	ldr	r3, [pc, #424]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005914:	2202      	movs	r2, #2
 8005916:	4013      	ands	r3, r2
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800591a:	231f      	movs	r3, #31
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d105      	bne.n	8005930 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005924:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005928:	4b64      	ldr	r3, [pc, #400]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800592a:	4967      	ldr	r1, [pc, #412]	; (8005ac8 <HAL_RCC_OscConfig+0x624>)
 800592c:	400a      	ands	r2, r1
 800592e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d100      	bne.n	800593a <HAL_RCC_OscConfig+0x496>
 8005938:	e0bb      	b.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800593a:	4b60      	ldr	r3, [pc, #384]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2238      	movs	r2, #56	; 0x38
 8005940:	4013      	ands	r3, r2
 8005942:	2b10      	cmp	r3, #16
 8005944:	d100      	bne.n	8005948 <HAL_RCC_OscConfig+0x4a4>
 8005946:	e07b      	b.n	8005a40 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d156      	bne.n	80059fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005950:	4b5a      	ldr	r3, [pc, #360]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005956:	495d      	ldr	r1, [pc, #372]	; (8005acc <HAL_RCC_OscConfig+0x628>)
 8005958:	400a      	ands	r2, r1
 800595a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fe ff02 	bl	8004764 <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005966:	f7fe fefd 	bl	8004764 <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e09d      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005978:	4b50      	ldr	r3, [pc, #320]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	049b      	lsls	r3, r3, #18
 8005980:	4013      	ands	r3, r2
 8005982:	d1f0      	bne.n	8005966 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005984:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a51      	ldr	r2, [pc, #324]	; (8005ad0 <HAL_RCC_OscConfig+0x62c>)
 800598a:	4013      	ands	r3, r2
 800598c:	0019      	movs	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	431a      	orrs	r2, r3
 80059b2:	4b42      	ldr	r3, [pc, #264]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b8:	4b40      	ldr	r3, [pc, #256]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b3f      	ldr	r3, [pc, #252]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	0449      	lsls	r1, r1, #17
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b3c      	ldr	r3, [pc, #240]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059cc:	2180      	movs	r1, #128	; 0x80
 80059ce:	0549      	lsls	r1, r1, #21
 80059d0:	430a      	orrs	r2, r1
 80059d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fec6 	bl	8004764 <HAL_GetTick>
 80059d8:	0003      	movs	r3, r0
 80059da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059de:	f7fe fec1 	bl	8004764 <HAL_GetTick>
 80059e2:	0002      	movs	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e061      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f0:	4b32      	ldr	r3, [pc, #200]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	049b      	lsls	r3, r3, #18
 80059f8:	4013      	ands	r3, r2
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x53a>
 80059fc:	e059      	b.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fe:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a04:	4931      	ldr	r1, [pc, #196]	; (8005acc <HAL_RCC_OscConfig+0x628>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fe feab 	bl	8004764 <HAL_GetTick>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fe fea6 	bl	8004764 <HAL_GetTick>
 8005a18:	0002      	movs	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e046      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a26:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	049b      	lsls	r3, r3, #18
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	4b21      	ldr	r3, [pc, #132]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a38:	4926      	ldr	r1, [pc, #152]	; (8005ad4 <HAL_RCC_OscConfig+0x630>)
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e038      	b.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e033      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x618>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2203      	movs	r2, #3
 8005a56:	401a      	ands	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d126      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2270      	movs	r2, #112	; 0x70
 8005a64:	401a      	ands	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d11f      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	23fe      	movs	r3, #254	; 0xfe
 8005a72:	01db      	lsls	r3, r3, #7
 8005a74:	401a      	ands	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d116      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	23f8      	movs	r3, #248	; 0xf8
 8005a84:	039b      	lsls	r3, r3, #14
 8005a86:	401a      	ands	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d10e      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	23e0      	movs	r3, #224	; 0xe0
 8005a94:	051b      	lsls	r3, r3, #20
 8005a96:	401a      	ands	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d106      	bne.n	8005aae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	0f5b      	lsrs	r3, r3, #29
 8005aa4:	075a      	lsls	r2, r3, #29
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b008      	add	sp, #32
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	00001388 	.word	0x00001388
 8005ac8:	efffffff 	.word	0xefffffff
 8005acc:	feffffff 	.word	0xfeffffff
 8005ad0:	11c1808c 	.word	0x11c1808c
 8005ad4:	eefefffc 	.word	0xeefefffc

08005ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0e9      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2207      	movs	r2, #7
 8005af2:	4013      	ands	r3, r2
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d91e      	bls.n	8005b38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b73      	ldr	r3, [pc, #460]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2207      	movs	r2, #7
 8005b00:	4393      	bics	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	4b70      	ldr	r3, [pc, #448]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b0c:	f7fe fe2a 	bl	8004764 <HAL_GetTick>
 8005b10:	0003      	movs	r3, r0
 8005b12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b14:	e009      	b.n	8005b2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b16:	f7fe fe25 	bl	8004764 <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	4a6a      	ldr	r2, [pc, #424]	; (8005ccc <HAL_RCC_ClockConfig+0x1f4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0ca      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b2a:	4b67      	ldr	r3, [pc, #412]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2207      	movs	r2, #7
 8005b30:	4013      	ands	r3, r2
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d015      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2204      	movs	r2, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d006      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b4c:	4b60      	ldr	r3, [pc, #384]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	4b5f      	ldr	r3, [pc, #380]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b52:	21e0      	movs	r1, #224	; 0xe0
 8005b54:	01c9      	lsls	r1, r1, #7
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b5a:	4b5d      	ldr	r3, [pc, #372]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4a5d      	ldr	r2, [pc, #372]	; (8005cd4 <HAL_RCC_ClockConfig+0x1fc>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	4013      	ands	r3, r2
 8005b76:	d057      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b80:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	029b      	lsls	r3, r3, #10
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d12b      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e097      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b98:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	049b      	lsls	r3, r3, #18
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d11f      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e08b      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb0:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d113      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e07f      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bc8:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bcc:	2202      	movs	r2, #2
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d108      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e074      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	2202      	movs	r2, #2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e06d      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005be4:	4b3a      	ldr	r3, [pc, #232]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2207      	movs	r2, #7
 8005bea:	4393      	bics	r3, r2
 8005bec:	0019      	movs	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	4b37      	ldr	r3, [pc, #220]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf8:	f7fe fdb4 	bl	8004764 <HAL_GetTick>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c00:	e009      	b.n	8005c16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c02:	f7fe fdaf 	bl	8004764 <HAL_GetTick>
 8005c06:	0002      	movs	r2, r0
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	4a2f      	ldr	r2, [pc, #188]	; (8005ccc <HAL_RCC_ClockConfig+0x1f4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e054      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2238      	movs	r2, #56	; 0x38
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d1ec      	bne.n	8005c02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c28:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	4013      	ands	r3, r2
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d21e      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2207      	movs	r2, #7
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	0019      	movs	r1, r3
 8005c40:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c48:	f7fe fd8c 	bl	8004764 <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c50:	e009      	b.n	8005c66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c52:	f7fe fd87 	bl	8004764 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_RCC_ClockConfig+0x1f4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e02c      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c66:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1ee      	bne.n	8005c52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <HAL_RCC_ClockConfig+0x200>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c92:	f000 f829 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005c96:	0001      	movs	r1, r0
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	220f      	movs	r2, #15
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <HAL_RCC_ClockConfig+0x204>)
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	58d3      	ldr	r3, [r2, r3]
 8005ca8:	221f      	movs	r2, #31
 8005caa:	4013      	ands	r3, r2
 8005cac:	000a      	movs	r2, r1
 8005cae:	40da      	lsrs	r2, r3
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_ClockConfig+0x208>)
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_ClockConfig+0x20c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7fe fcf7 	bl	80046ac <HAL_InitTick>
 8005cbe:	0003      	movs	r3, r0
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40022000 	.word	0x40022000
 8005ccc:	00001388 	.word	0x00001388
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	fffff0ff 	.word	0xfffff0ff
 8005cd8:	ffff8fff 	.word	0xffff8fff
 8005cdc:	08008628 	.word	0x08008628
 8005ce0:	20000654 	.word	0x20000654
 8005ce4:	20000658 	.word	0x20000658

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cee:	4b3c      	ldr	r3, [pc, #240]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2238      	movs	r2, #56	; 0x38
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d10f      	bne.n	8005d18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005cf8:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	0adb      	lsrs	r3, r3, #11
 8005cfe:	2207      	movs	r2, #7
 8005d00:	4013      	ands	r3, r2
 8005d02:	2201      	movs	r2, #1
 8005d04:	409a      	lsls	r2, r3
 8005d06:	0013      	movs	r3, r2
 8005d08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	4835      	ldr	r0, [pc, #212]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d0e:	f7fa f9f9 	bl	8000104 <__udivsi3>
 8005d12:	0003      	movs	r3, r0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	e05d      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d18:	4b31      	ldr	r3, [pc, #196]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2238      	movs	r2, #56	; 0x38
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d102      	bne.n	8005d2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d24:	4b30      	ldr	r3, [pc, #192]	; (8005de8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	e054      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2238      	movs	r2, #56	; 0x38
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d138      	bne.n	8005da8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d36:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d40:	4b27      	ldr	r3, [pc, #156]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	2207      	movs	r2, #7
 8005d48:	4013      	ands	r3, r2
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10d      	bne.n	8005d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4824      	ldr	r0, [pc, #144]	; (8005de8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d58:	f7fa f9d4 	bl	8000104 <__udivsi3>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	0019      	movs	r1, r3
 8005d60:	4b1f      	ldr	r3, [pc, #124]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	227f      	movs	r2, #127	; 0x7f
 8005d68:	4013      	ands	r3, r2
 8005d6a:	434b      	muls	r3, r1
 8005d6c:	617b      	str	r3, [r7, #20]
        break;
 8005d6e:	e00d      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	481c      	ldr	r0, [pc, #112]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d74:	f7fa f9c6 	bl	8000104 <__udivsi3>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	227f      	movs	r2, #127	; 0x7f
 8005d84:	4013      	ands	r3, r2
 8005d86:	434b      	muls	r3, r1
 8005d88:	617b      	str	r3, [r7, #20]
        break;
 8005d8a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d8c:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	0f5b      	lsrs	r3, r3, #29
 8005d92:	2207      	movs	r2, #7
 8005d94:	4013      	ands	r3, r2
 8005d96:	3301      	adds	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f7fa f9b1 	bl	8000104 <__udivsi3>
 8005da2:	0003      	movs	r3, r0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e015      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005da8:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2238      	movs	r2, #56	; 0x38
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d103      	bne.n	8005dbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2238      	movs	r2, #56	; 0x38
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b18      	cmp	r3, #24
 8005dc6:	d103      	bne.n	8005dd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005dc8:	23fa      	movs	r3, #250	; 0xfa
 8005dca:	01db      	lsls	r3, r3, #7
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	e001      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005dd4:	693b      	ldr	r3, [r7, #16]
}
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b006      	add	sp, #24
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	40021000 	.word	0x40021000
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	007a1200 	.word	0x007a1200

08005dec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005df0:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <HAL_RCC_GetHCLKFreq+0x10>)
 8005df2:	681b      	ldr	r3, [r3, #0]
}
 8005df4:	0018      	movs	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	20000654 	.word	0x20000654

08005e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e00:	b5b0      	push	{r4, r5, r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e04:	f7ff fff2 	bl	8005dec <HAL_RCC_GetHCLKFreq>
 8005e08:	0004      	movs	r4, r0
 8005e0a:	f7ff fb3f 	bl	800548c <LL_RCC_GetAPB1Prescaler>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	0b1a      	lsrs	r2, r3, #12
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e14:	0092      	lsls	r2, r2, #2
 8005e16:	58d3      	ldr	r3, [r2, r3]
 8005e18:	221f      	movs	r2, #31
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	40dc      	lsrs	r4, r3
 8005e1e:	0023      	movs	r3, r4
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bdb0      	pop	{r4, r5, r7, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	08008668 	.word	0x08008668

08005e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e34:	2313      	movs	r3, #19
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e3c:	2312      	movs	r3, #18
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	029b      	lsls	r3, r3, #10
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d100      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e50:	e0a3      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e52:	2011      	movs	r0, #17
 8005e54:	183b      	adds	r3, r7, r0
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e5a:	4bc3      	ldr	r3, [pc, #780]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	055b      	lsls	r3, r3, #21
 8005e62:	4013      	ands	r3, r2
 8005e64:	d110      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	4bc0      	ldr	r3, [pc, #768]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e6a:	4bbf      	ldr	r3, [pc, #764]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6c:	2180      	movs	r1, #128	; 0x80
 8005e6e:	0549      	lsls	r1, r1, #21
 8005e70:	430a      	orrs	r2, r1
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e74:	4bbc      	ldr	r3, [pc, #752]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	055b      	lsls	r3, r3, #21
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e82:	183b      	adds	r3, r7, r0
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e88:	4bb8      	ldr	r3, [pc, #736]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4bb7      	ldr	r3, [pc, #732]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005e8e:	2180      	movs	r1, #128	; 0x80
 8005e90:	0049      	lsls	r1, r1, #1
 8005e92:	430a      	orrs	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e96:	f7fe fc65 	bl	8004764 <HAL_GetTick>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e9e:	e00b      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea0:	f7fe fc60 	bl	8004764 <HAL_GetTick>
 8005ea4:	0002      	movs	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d904      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005eae:	2313      	movs	r3, #19
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	701a      	strb	r2, [r3, #0]
        break;
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eb8:	4bac      	ldr	r3, [pc, #688]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d0ed      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ec4:	2313      	movs	r3, #19
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d154      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ece:	4ba6      	ldr	r3, [pc, #664]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ed2:	23c0      	movs	r3, #192	; 0xc0
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d019      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d014      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005eea:	4b9f      	ldr	r3, [pc, #636]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	4aa0      	ldr	r2, [pc, #640]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ef4:	4b9c      	ldr	r3, [pc, #624]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ef8:	4b9b      	ldr	r3, [pc, #620]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	0249      	lsls	r1, r1, #9
 8005efe:	430a      	orrs	r2, r1
 8005f00:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f02:	4b99      	ldr	r3, [pc, #612]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f06:	4b98      	ldr	r3, [pc, #608]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f08:	499a      	ldr	r1, [pc, #616]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f0e:	4b96      	ldr	r3, [pc, #600]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2201      	movs	r2, #1
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d016      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fe fc22 	bl	8004764 <HAL_GetTick>
 8005f20:	0003      	movs	r3, r0
 8005f22:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f24:	e00c      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fe fc1d 	bl	8004764 <HAL_GetTick>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	4a91      	ldr	r2, [pc, #580]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d904      	bls.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f36:	2313      	movs	r3, #19
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	701a      	strb	r2, [r3, #0]
            break;
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f40:	4b89      	ldr	r3, [pc, #548]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f44:	2202      	movs	r2, #2
 8005f46:	4013      	ands	r3, r2
 8005f48:	d0ed      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f4a:	2313      	movs	r3, #19
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f54:	4b84      	ldr	r3, [pc, #528]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f58:	4a85      	ldr	r2, [pc, #532]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f62:	4b81      	ldr	r3, [pc, #516]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f64:	430a      	orrs	r2, r1
 8005f66:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f68:	e00c      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f6a:	2312      	movs	r3, #18
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2213      	movs	r2, #19
 8005f70:	18ba      	adds	r2, r7, r2
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e005      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f78:	2312      	movs	r3, #18
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	2213      	movs	r2, #19
 8005f7e:	18ba      	adds	r2, r7, r2
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f84:	2311      	movs	r3, #17
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d105      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f8e:	4b76      	ldr	r3, [pc, #472]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f92:	4b75      	ldr	r3, [pc, #468]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f94:	4979      	ldr	r1, [pc, #484]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005f96:	400a      	ands	r2, r1
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fa4:	4b70      	ldr	r3, [pc, #448]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	2203      	movs	r2, #3
 8005faa:	4393      	bics	r3, r2
 8005fac:	0019      	movs	r1, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	4b6d      	ldr	r3, [pc, #436]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fc2:	4b69      	ldr	r3, [pc, #420]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	220c      	movs	r2, #12
 8005fc8:	4393      	bics	r3, r2
 8005fca:	0019      	movs	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	4b65      	ldr	r3, [pc, #404]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2210      	movs	r2, #16
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fe0:	4b61      	ldr	r3, [pc, #388]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe4:	4a66      	ldr	r2, [pc, #408]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d009      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006000:	4b59      	ldr	r3, [pc, #356]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	4a5f      	ldr	r2, [pc, #380]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	4b56      	ldr	r3, [pc, #344]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006010:	430a      	orrs	r2, r1
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4013      	ands	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006020:	4b51      	ldr	r3, [pc, #324]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	4a58      	ldr	r2, [pc, #352]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006026:	4013      	ands	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	4b4e      	ldr	r3, [pc, #312]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006030:	430a      	orrs	r2, r1
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2220      	movs	r2, #32
 800603a:	4013      	ands	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800603e:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	4a52      	ldr	r2, [pc, #328]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006044:	4013      	ands	r3, r2
 8006046:	0019      	movs	r1, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	4b46      	ldr	r3, [pc, #280]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800604e:	430a      	orrs	r2, r1
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	01db      	lsls	r3, r3, #7
 800605a:	4013      	ands	r3, r2
 800605c:	d015      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	0899      	lsrs	r1, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	4b3f      	ldr	r3, [pc, #252]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800606c:	430a      	orrs	r2, r1
 800606e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	05db      	lsls	r3, r3, #23
 8006078:	429a      	cmp	r2, r3
 800607a:	d106      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800607c:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	4b39      	ldr	r3, [pc, #228]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	0249      	lsls	r1, r1, #9
 8006086:	430a      	orrs	r2, r1
 8006088:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	4013      	ands	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006096:	4b34      	ldr	r3, [pc, #208]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	2240      	movs	r2, #64	; 0x40
 800609c:	4393      	bics	r3, r2
 800609e:	0019      	movs	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a4:	4b30      	ldr	r3, [pc, #192]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060a6:	430a      	orrs	r2, r1
 80060a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	039b      	lsls	r3, r3, #14
 80060b2:	4013      	ands	r3, r2
 80060b4:	d016      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060b6:	4b2c      	ldr	r3, [pc, #176]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	4a35      	ldr	r2, [pc, #212]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060bc:	4013      	ands	r3, r2
 80060be:	0019      	movs	r1, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c4:	4b28      	ldr	r3, [pc, #160]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060c6:	430a      	orrs	r2, r1
 80060c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	2380      	movs	r3, #128	; 0x80
 80060d0:	03db      	lsls	r3, r3, #15
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d106      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80060d6:	4b24      	ldr	r3, [pc, #144]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	4b23      	ldr	r3, [pc, #140]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060dc:	2180      	movs	r1, #128	; 0x80
 80060de:	0449      	lsls	r1, r1, #17
 80060e0:	430a      	orrs	r2, r1
 80060e2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	03db      	lsls	r3, r3, #15
 80060ec:	4013      	ands	r3, r2
 80060ee:	d016      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80060f0:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	0019      	movs	r1, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fe:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006100:	430a      	orrs	r2, r1
 8006102:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	2380      	movs	r3, #128	; 0x80
 800610a:	045b      	lsls	r3, r3, #17
 800610c:	429a      	cmp	r2, r3
 800610e:	d106      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006110:	4b15      	ldr	r3, [pc, #84]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	0449      	lsls	r1, r1, #17
 800611a:	430a      	orrs	r2, r1
 800611c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	4013      	ands	r3, r2
 8006128:	d016      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006130:	4013      	ands	r3, r2
 8006132:	0019      	movs	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800613a:	430a      	orrs	r2, r1
 800613c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	01db      	lsls	r3, r3, #7
 8006146:	429a      	cmp	r2, r3
 8006148:	d106      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800614a:	4b07      	ldr	r3, [pc, #28]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006150:	2180      	movs	r1, #128	; 0x80
 8006152:	0249      	lsls	r1, r1, #9
 8006154:	430a      	orrs	r2, r1
 8006156:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006158:	2312      	movs	r3, #18
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b006      	add	sp, #24
 8006164:	bd80      	pop	{r7, pc}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	40021000 	.word	0x40021000
 800616c:	40007000 	.word	0x40007000
 8006170:	fffffcff 	.word	0xfffffcff
 8006174:	fffeffff 	.word	0xfffeffff
 8006178:	00001388 	.word	0x00001388
 800617c:	efffffff 	.word	0xefffffff
 8006180:	fffff3ff 	.word	0xfffff3ff
 8006184:	fff3ffff 	.word	0xfff3ffff
 8006188:	ffcfffff 	.word	0xffcfffff
 800618c:	ffffcfff 	.word	0xffffcfff
 8006190:	ffbfffff 	.word	0xffbfffff
 8006194:	feffffff 	.word	0xfeffffff
 8006198:	ffff3fff 	.word	0xffff3fff

0800619c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0a8      	b.n	8006300 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	2382      	movs	r3, #130	; 0x82
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	429a      	cmp	r2, r3
 80061c0:	d009      	beq.n	80061d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	61da      	str	r2, [r3, #28]
 80061c8:	e005      	b.n	80061d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	225d      	movs	r2, #93	; 0x5d
 80061e0:	5c9b      	ldrb	r3, [r3, r2]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	225c      	movs	r2, #92	; 0x5c
 80061ec:	2100      	movs	r1, #0
 80061ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f7fe f810 	bl	8004218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	225d      	movs	r2, #93	; 0x5d
 80061fc:	2102      	movs	r1, #2
 80061fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2140      	movs	r1, #64	; 0x40
 800620c:	438a      	bics	r2, r1
 800620e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	23e0      	movs	r3, #224	; 0xe0
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	429a      	cmp	r2, r3
 800621a:	d902      	bls.n	8006222 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e002      	b.n	8006228 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	015b      	lsls	r3, r3, #5
 8006226:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	23f0      	movs	r3, #240	; 0xf0
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	429a      	cmp	r2, r3
 8006232:	d008      	beq.n	8006246 <HAL_SPI_Init+0xaa>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	23e0      	movs	r3, #224	; 0xe0
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	2382      	movs	r3, #130	; 0x82
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	401a      	ands	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6899      	ldr	r1, [r3, #8]
 8006254:	2384      	movs	r3, #132	; 0x84
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	400b      	ands	r3, r1
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2102      	movs	r1, #2
 8006262:	400b      	ands	r3, r1
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2101      	movs	r1, #1
 800626c:	400b      	ands	r3, r1
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6999      	ldr	r1, [r3, #24]
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	400b      	ands	r3, r1
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2138      	movs	r1, #56	; 0x38
 8006282:	400b      	ands	r3, r1
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	400b      	ands	r3, r1
 800628e:	431a      	orrs	r2, r3
 8006290:	0011      	movs	r1, r2
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006296:	2380      	movs	r3, #128	; 0x80
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	401a      	ands	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	2204      	movs	r2, #4
 80062ac:	401a      	ands	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	2110      	movs	r1, #16
 80062b4:	400b      	ands	r3, r1
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	2108      	movs	r1, #8
 80062be:	400b      	ands	r3, r1
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68d9      	ldr	r1, [r3, #12]
 80062c6:	23f0      	movs	r3, #240	; 0xf0
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	400b      	ands	r3, r1
 80062cc:	431a      	orrs	r2, r3
 80062ce:	0011      	movs	r1, r2
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	015b      	lsls	r3, r3, #5
 80062d6:	401a      	ands	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4907      	ldr	r1, [pc, #28]	; (8006308 <HAL_SPI_Init+0x16c>)
 80062ec:	400a      	ands	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	225d      	movs	r2, #93	; 0x5d
 80062fa:	2101      	movs	r1, #1
 80062fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b004      	add	sp, #16
 8006306:	bd80      	pop	{r7, pc}
 8006308:	fffff7ff 	.word	0xfffff7ff

0800630c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	1dbb      	adds	r3, r7, #6
 800631a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800631c:	231f      	movs	r3, #31
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	225c      	movs	r2, #92	; 0x5c
 8006328:	5c9b      	ldrb	r3, [r3, r2]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_SPI_Transmit+0x26>
 800632e:	2302      	movs	r3, #2
 8006330:	e140      	b.n	80065b4 <HAL_SPI_Transmit+0x2a8>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	225c      	movs	r2, #92	; 0x5c
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800633a:	f7fe fa13 	bl	8004764 <HAL_GetTick>
 800633e:	0003      	movs	r3, r0
 8006340:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006342:	2316      	movs	r3, #22
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	1dba      	adds	r2, r7, #6
 8006348:	8812      	ldrh	r2, [r2, #0]
 800634a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	225d      	movs	r2, #93	; 0x5d
 8006350:	5c9b      	ldrb	r3, [r3, r2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d004      	beq.n	8006362 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006358:	231f      	movs	r3, #31
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	2202      	movs	r2, #2
 800635e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006360:	e11d      	b.n	800659e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_SPI_Transmit+0x64>
 8006368:	1dbb      	adds	r3, r7, #6
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006370:	231f      	movs	r3, #31
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
    goto error;
 8006378:	e111      	b.n	800659e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	225d      	movs	r2, #93	; 0x5d
 800637e:	2103      	movs	r1, #3
 8006380:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1dba      	adds	r2, r7, #6
 8006392:	8812      	ldrh	r2, [r2, #0]
 8006394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1dba      	adds	r2, r7, #6
 800639a:	8812      	ldrh	r2, [r2, #0]
 800639c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2244      	movs	r2, #68	; 0x44
 80063a8:	2100      	movs	r1, #0
 80063aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2246      	movs	r2, #70	; 0x46
 80063b0:	2100      	movs	r1, #0
 80063b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d110      	bne.n	80063ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2140      	movs	r1, #64	; 0x40
 80063d8:	438a      	bics	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2180      	movs	r1, #128	; 0x80
 80063e8:	01c9      	lsls	r1, r1, #7
 80063ea:	430a      	orrs	r2, r1
 80063ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2240      	movs	r2, #64	; 0x40
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b40      	cmp	r3, #64	; 0x40
 80063fa:	d007      	beq.n	800640c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2140      	movs	r1, #64	; 0x40
 8006408:	430a      	orrs	r2, r1
 800640a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	23e0      	movs	r3, #224	; 0xe0
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	429a      	cmp	r2, r3
 8006416:	d94e      	bls.n	80064b6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <HAL_SPI_Transmit+0x11e>
 8006420:	2316      	movs	r3, #22
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d13f      	bne.n	80064aa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	881a      	ldrh	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	1c9a      	adds	r2, r3, #2
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800644e:	e02c      	b.n	80064aa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2202      	movs	r2, #2
 8006458:	4013      	ands	r3, r2
 800645a:	2b02      	cmp	r3, #2
 800645c:	d112      	bne.n	8006484 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006482:	e012      	b.n	80064aa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006484:	f7fe f96e 	bl	8004764 <HAL_GetTick>
 8006488:	0002      	movs	r2, r0
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d802      	bhi.n	800649a <HAL_SPI_Transmit+0x18e>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	d102      	bne.n	80064a0 <HAL_SPI_Transmit+0x194>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80064a0:	231f      	movs	r3, #31
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	2203      	movs	r2, #3
 80064a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80064a8:	e079      	b.n	800659e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1cd      	bne.n	8006450 <HAL_SPI_Transmit+0x144>
 80064b4:	e04f      	b.n	8006556 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <HAL_SPI_Transmit+0x1bc>
 80064be:	2316      	movs	r3, #22
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d141      	bne.n	800654c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80064ee:	e02d      	b.n	800654c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2202      	movs	r2, #2
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d113      	bne.n	8006526 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006524:	e012      	b.n	800654c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006526:	f7fe f91d 	bl	8004764 <HAL_GetTick>
 800652a:	0002      	movs	r2, r0
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d802      	bhi.n	800653c <HAL_SPI_Transmit+0x230>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	d102      	bne.n	8006542 <HAL_SPI_Transmit+0x236>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006542:	231f      	movs	r3, #31
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	2203      	movs	r2, #3
 8006548:	701a      	strb	r2, [r3, #0]
          goto error;
 800654a:	e028      	b.n	800659e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1cc      	bne.n	80064f0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 fcd9 	bl	8006f14 <SPI_EndRxTxTransaction>
 8006562:	1e03      	subs	r3, r0, #0
 8006564:	d002      	beq.n	800656c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006574:	2300      	movs	r3, #0
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006592:	231f      	movs	r3, #31
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	2201      	movs	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e000      	b.n	800659e <HAL_SPI_Transmit+0x292>
  }

error:
 800659c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	225d      	movs	r2, #93	; 0x5d
 80065a2:	2101      	movs	r1, #1
 80065a4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	225c      	movs	r2, #92	; 0x5c
 80065aa:	2100      	movs	r1, #0
 80065ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065ae:	231f      	movs	r3, #31
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	781b      	ldrb	r3, [r3, #0]
}
 80065b4:	0018      	movs	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b008      	add	sp, #32
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b089      	sub	sp, #36	; 0x24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	1dbb      	adds	r3, r7, #6
 80065ca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065cc:	2317      	movs	r3, #23
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	2382      	movs	r3, #130	; 0x82
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	429a      	cmp	r2, r3
 80065de:	d113      	bne.n	8006608 <HAL_SPI_Receive+0x4c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	225d      	movs	r2, #93	; 0x5d
 80065ec:	2104      	movs	r1, #4
 80065ee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065f0:	1dbb      	adds	r3, r7, #6
 80065f2:	881c      	ldrh	r4, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	0023      	movs	r3, r4
 8006600:	f000 f928 	bl	8006854 <HAL_SPI_TransmitReceive>
 8006604:	0003      	movs	r3, r0
 8006606:	e11c      	b.n	8006842 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	225c      	movs	r2, #92	; 0x5c
 800660c:	5c9b      	ldrb	r3, [r3, r2]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_SPI_Receive+0x5a>
 8006612:	2302      	movs	r3, #2
 8006614:	e115      	b.n	8006842 <HAL_SPI_Receive+0x286>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	225c      	movs	r2, #92	; 0x5c
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800661e:	f7fe f8a1 	bl	8004764 <HAL_GetTick>
 8006622:	0003      	movs	r3, r0
 8006624:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	225d      	movs	r2, #93	; 0x5d
 800662a:	5c9b      	ldrb	r3, [r3, r2]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d004      	beq.n	800663c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006632:	2317      	movs	r3, #23
 8006634:	18fb      	adds	r3, r7, r3
 8006636:	2202      	movs	r2, #2
 8006638:	701a      	strb	r2, [r3, #0]
    goto error;
 800663a:	e0f7      	b.n	800682c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_SPI_Receive+0x8e>
 8006642:	1dbb      	adds	r3, r7, #6
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800664a:	2317      	movs	r3, #23
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
    goto error;
 8006652:	e0eb      	b.n	800682c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	225d      	movs	r2, #93	; 0x5d
 8006658:	2104      	movs	r1, #4
 800665a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1dba      	adds	r2, r7, #6
 800666c:	2144      	movs	r1, #68	; 0x44
 800666e:	8812      	ldrh	r2, [r2, #0]
 8006670:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1dba      	adds	r2, r7, #6
 8006676:	2146      	movs	r1, #70	; 0x46
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	23e0      	movs	r3, #224	; 0xe0
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d908      	bls.n	80066b8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4966      	ldr	r1, [pc, #408]	; (800684c <HAL_SPI_Receive+0x290>)
 80066b2:	400a      	ands	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e008      	b.n	80066ca <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	0149      	lsls	r1, r1, #5
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d10f      	bne.n	80066f6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2140      	movs	r1, #64	; 0x40
 80066e2:	438a      	bics	r2, r1
 80066e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4957      	ldr	r1, [pc, #348]	; (8006850 <HAL_SPI_Receive+0x294>)
 80066f2:	400a      	ands	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2240      	movs	r2, #64	; 0x40
 80066fe:	4013      	ands	r3, r2
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d007      	beq.n	8006714 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2140      	movs	r1, #64	; 0x40
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	23e0      	movs	r3, #224	; 0xe0
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	429a      	cmp	r2, r3
 800671e:	d900      	bls.n	8006722 <HAL_SPI_Receive+0x166>
 8006720:	e069      	b.n	80067f6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006722:	e031      	b.n	8006788 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2201      	movs	r2, #1
 800672c:	4013      	ands	r3, r2
 800672e:	2b01      	cmp	r3, #1
 8006730:	d117      	bne.n	8006762 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	001a      	movs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2246      	movs	r2, #70	; 0x46
 8006752:	5a9b      	ldrh	r3, [r3, r2]
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b299      	uxth	r1, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2246      	movs	r2, #70	; 0x46
 800675e:	5299      	strh	r1, [r3, r2]
 8006760:	e012      	b.n	8006788 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006762:	f7fd ffff 	bl	8004764 <HAL_GetTick>
 8006766:	0002      	movs	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d802      	bhi.n	8006778 <HAL_SPI_Receive+0x1bc>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	d102      	bne.n	800677e <HAL_SPI_Receive+0x1c2>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800677e:	2317      	movs	r3, #23
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	2203      	movs	r2, #3
 8006784:	701a      	strb	r2, [r3, #0]
          goto error;
 8006786:	e051      	b.n	800682c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2246      	movs	r2, #70	; 0x46
 800678c:	5a9b      	ldrh	r3, [r3, r2]
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1c7      	bne.n	8006724 <HAL_SPI_Receive+0x168>
 8006794:	e035      	b.n	8006802 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2201      	movs	r2, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d115      	bne.n	80067d0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	b292      	uxth	r2, r2
 80067b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2246      	movs	r2, #70	; 0x46
 80067c0:	5a9b      	ldrh	r3, [r3, r2]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b299      	uxth	r1, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2246      	movs	r2, #70	; 0x46
 80067cc:	5299      	strh	r1, [r3, r2]
 80067ce:	e012      	b.n	80067f6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d0:	f7fd ffc8 	bl	8004764 <HAL_GetTick>
 80067d4:	0002      	movs	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d802      	bhi.n	80067e6 <HAL_SPI_Receive+0x22a>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	d102      	bne.n	80067ec <HAL_SPI_Receive+0x230>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80067ec:	2317      	movs	r3, #23
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	2203      	movs	r2, #3
 80067f2:	701a      	strb	r2, [r3, #0]
          goto error;
 80067f4:	e01a      	b.n	800682c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2246      	movs	r2, #70	; 0x46
 80067fa:	5a9b      	ldrh	r3, [r3, r2]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1c9      	bne.n	8006796 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	0018      	movs	r0, r3
 800680a:	f000 fb25 	bl	8006e58 <SPI_EndRxTransaction>
 800680e:	1e03      	subs	r3, r0, #0
 8006810:	d002      	beq.n	8006818 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006820:	2317      	movs	r3, #23
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2201      	movs	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	e000      	b.n	800682c <HAL_SPI_Receive+0x270>
  }

error :
 800682a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	225d      	movs	r2, #93	; 0x5d
 8006830:	2101      	movs	r1, #1
 8006832:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	225c      	movs	r2, #92	; 0x5c
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800683c:	2317      	movs	r3, #23
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	781b      	ldrb	r3, [r3, #0]
}
 8006842:	0018      	movs	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	b007      	add	sp, #28
 8006848:	bd90      	pop	{r4, r7, pc}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	ffffefff 	.word	0xffffefff
 8006850:	ffffbfff 	.word	0xffffbfff

08006854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	001a      	movs	r2, r3
 8006862:	1cbb      	adds	r3, r7, #2
 8006864:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006866:	2301      	movs	r3, #1
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800686a:	2323      	movs	r3, #35	; 0x23
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	225c      	movs	r2, #92	; 0x5c
 8006876:	5c9b      	ldrb	r3, [r3, r2]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x2c>
 800687c:	2302      	movs	r3, #2
 800687e:	e1b5      	b.n	8006bec <HAL_SPI_TransmitReceive+0x398>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	225c      	movs	r2, #92	; 0x5c
 8006884:	2101      	movs	r1, #1
 8006886:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006888:	f7fd ff6c 	bl	8004764 <HAL_GetTick>
 800688c:	0003      	movs	r3, r0
 800688e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006890:	201b      	movs	r0, #27
 8006892:	183b      	adds	r3, r7, r0
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	215d      	movs	r1, #93	; 0x5d
 8006898:	5c52      	ldrb	r2, [r2, r1]
 800689a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068a2:	2312      	movs	r3, #18
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	1cba      	adds	r2, r7, #2
 80068a8:	8812      	ldrh	r2, [r2, #0]
 80068aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068ac:	183b      	adds	r3, r7, r0
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d011      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x84>
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	2382      	movs	r3, #130	; 0x82
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d107      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x7a>
 80068c6:	183b      	adds	r3, r7, r0
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d004      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80068ce:	2323      	movs	r3, #35	; 0x23
 80068d0:	18fb      	adds	r3, r7, r3
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80068d6:	e17e      	b.n	8006bd6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d006      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x98>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x98>
 80068e4:	1cbb      	adds	r3, r7, #2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80068ec:	2323      	movs	r3, #35	; 0x23
 80068ee:	18fb      	adds	r3, r7, r3
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80068f4:	e16f      	b.n	8006bd6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	225d      	movs	r2, #93	; 0x5d
 80068fa:	5c9b      	ldrb	r3, [r3, r2]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d003      	beq.n	800690a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	225d      	movs	r2, #93	; 0x5d
 8006906:	2105      	movs	r1, #5
 8006908:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1cba      	adds	r2, r7, #2
 800691a:	2146      	movs	r1, #70	; 0x46
 800691c:	8812      	ldrh	r2, [r2, #0]
 800691e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1cba      	adds	r2, r7, #2
 8006924:	2144      	movs	r1, #68	; 0x44
 8006926:	8812      	ldrh	r2, [r2, #0]
 8006928:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1cba      	adds	r2, r7, #2
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1cba      	adds	r2, r7, #2
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	23e0      	movs	r3, #224	; 0xe0
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	429a      	cmp	r2, r3
 8006956:	d908      	bls.n	800696a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	49a4      	ldr	r1, [pc, #656]	; (8006bf4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006964:	400a      	ands	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
 8006968:	e008      	b.n	800697c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2180      	movs	r1, #128	; 0x80
 8006976:	0149      	lsls	r1, r1, #5
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2240      	movs	r2, #64	; 0x40
 8006984:	4013      	ands	r3, r2
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d007      	beq.n	800699a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2140      	movs	r1, #64	; 0x40
 8006996:	430a      	orrs	r2, r1
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	23e0      	movs	r3, #224	; 0xe0
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d800      	bhi.n	80069a8 <HAL_SPI_TransmitReceive+0x154>
 80069a6:	e07f      	b.n	8006aa8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x168>
 80069b0:	2312      	movs	r3, #18
 80069b2:	18fb      	adds	r3, r7, r3
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d000      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x168>
 80069ba:	e069      	b.n	8006a90 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	881a      	ldrh	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	1c9a      	adds	r2, r3, #2
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e0:	e056      	b.n	8006a90 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2202      	movs	r2, #2
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d11b      	bne.n	8006a28 <HAL_SPI_TransmitReceive+0x1d4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x1d4>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d113      	bne.n	8006a28 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d11c      	bne.n	8006a70 <HAL_SPI_TransmitReceive+0x21c>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2246      	movs	r2, #70	; 0x46
 8006a3a:	5a9b      	ldrh	r3, [r3, r2]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d016      	beq.n	8006a70 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	b292      	uxth	r2, r2
 8006a4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	1c9a      	adds	r2, r3, #2
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2246      	movs	r2, #70	; 0x46
 8006a5e:	5a9b      	ldrh	r3, [r3, r2]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b299      	uxth	r1, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2246      	movs	r2, #70	; 0x46
 8006a6a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a70:	f7fd fe78 	bl	8004764 <HAL_GetTick>
 8006a74:	0002      	movs	r2, r0
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d807      	bhi.n	8006a90 <HAL_SPI_TransmitReceive+0x23c>
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	3301      	adds	r3, #1
 8006a84:	d004      	beq.n	8006a90 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006a86:	2323      	movs	r3, #35	; 0x23
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006a8e:	e0a2      	b.n	8006bd6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1a3      	bne.n	80069e2 <HAL_SPI_TransmitReceive+0x18e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2246      	movs	r2, #70	; 0x46
 8006a9e:	5a9b      	ldrh	r3, [r3, r2]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d19d      	bne.n	80069e2 <HAL_SPI_TransmitReceive+0x18e>
 8006aa6:	e085      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_SPI_TransmitReceive+0x268>
 8006ab0:	2312      	movs	r3, #18
 8006ab2:	18fb      	adds	r3, r7, r3
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d000      	beq.n	8006abc <HAL_SPI_TransmitReceive+0x268>
 8006aba:	e070      	b.n	8006b9e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae2:	e05c      	b.n	8006b9e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2202      	movs	r2, #2
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d11c      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x2d8>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d017      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x2d8>
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d114      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	7812      	ldrb	r2, [r2, #0]
 8006b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2201      	movs	r2, #1
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d11e      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x324>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2246      	movs	r2, #70	; 0x46
 8006b3e:	5a9b      	ldrh	r3, [r3, r2]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d018      	beq.n	8006b78 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	001a      	movs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2246      	movs	r2, #70	; 0x46
 8006b66:	5a9b      	ldrh	r3, [r3, r2]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b299      	uxth	r1, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2246      	movs	r2, #70	; 0x46
 8006b72:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b74:	2301      	movs	r3, #1
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b78:	f7fd fdf4 	bl	8004764 <HAL_GetTick>
 8006b7c:	0002      	movs	r2, r0
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d802      	bhi.n	8006b8e <HAL_SPI_TransmitReceive+0x33a>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	d102      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x340>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006b94:	2323      	movs	r3, #35	; 0x23
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	2203      	movs	r2, #3
 8006b9a:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b9c:	e01b      	b.n	8006bd6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d19d      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x290>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2246      	movs	r2, #70	; 0x46
 8006bac:	5a9b      	ldrh	r3, [r3, r2]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d197      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f000 f9aa 	bl	8006f14 <SPI_EndRxTxTransaction>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d007      	beq.n	8006bd4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006bc4:	2323      	movs	r3, #35	; 0x23
 8006bc6:	18fb      	adds	r3, r7, r3
 8006bc8:	2201      	movs	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	661a      	str	r2, [r3, #96]	; 0x60
 8006bd2:	e000      	b.n	8006bd6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006bd4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	225d      	movs	r2, #93	; 0x5d
 8006bda:	2101      	movs	r1, #1
 8006bdc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	225c      	movs	r2, #92	; 0x5c
 8006be2:	2100      	movs	r1, #0
 8006be4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006be6:	2323      	movs	r3, #35	; 0x23
 8006be8:	18fb      	adds	r3, r7, r3
 8006bea:	781b      	ldrb	r3, [r3, #0]
}
 8006bec:	0018      	movs	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b00a      	add	sp, #40	; 0x28
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	ffffefff 	.word	0xffffefff

08006bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	1dfb      	adds	r3, r7, #7
 8006c06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c08:	f7fd fdac 	bl	8004764 <HAL_GetTick>
 8006c0c:	0002      	movs	r2, r0
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	18d3      	adds	r3, r2, r3
 8006c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c18:	f7fd fda4 	bl	8004764 <HAL_GetTick>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c20:	4b3a      	ldr	r3, [pc, #232]	; (8006d0c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	015b      	lsls	r3, r3, #5
 8006c26:	0d1b      	lsrs	r3, r3, #20
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	4353      	muls	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c2e:	e058      	b.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	d055      	beq.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c36:	f7fd fd95 	bl	8004764 <HAL_GetTick>
 8006c3a:	0002      	movs	r2, r0
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d902      	bls.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d142      	bne.n	8006cd2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	21e0      	movs	r1, #224	; 0xe0
 8006c58:	438a      	bics	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	2382      	movs	r3, #130	; 0x82
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d113      	bne.n	8006c90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	2380      	movs	r3, #128	; 0x80
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d005      	beq.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d107      	bne.n	8006c90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2140      	movs	r1, #64	; 0x40
 8006c8c:	438a      	bics	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	019b      	lsls	r3, r3, #6
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d110      	bne.n	8006cbe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	491a      	ldr	r1, [pc, #104]	; (8006d10 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006ca8:	400a      	ands	r2, r1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	0189      	lsls	r1, r1, #6
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	225d      	movs	r2, #93	; 0x5d
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	225c      	movs	r2, #92	; 0x5c
 8006cca:	2100      	movs	r1, #0
 8006ccc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e017      	b.n	8006d02 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	4013      	ands	r3, r2
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	425a      	negs	r2, r3
 8006cf2:	4153      	adcs	r3, r2
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	1dfb      	adds	r3, r7, #7
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d197      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	0018      	movs	r0, r3
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b008      	add	sp, #32
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	20000654 	.word	0x20000654
 8006d10:	ffffdfff 	.word	0xffffdfff

08006d14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d22:	2317      	movs	r3, #23
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d2a:	f7fd fd1b 	bl	8004764 <HAL_GetTick>
 8006d2e:	0002      	movs	r2, r0
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	18d3      	adds	r3, r2, r3
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d3a:	f7fd fd13 	bl	8004764 <HAL_GetTick>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d4a:	4b41      	ldr	r3, [pc, #260]	; (8006e50 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	0013      	movs	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	00da      	lsls	r2, r3, #3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	0d1b      	lsrs	r3, r3, #20
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	4353      	muls	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d60:	e068      	b.n	8006e34 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	23c0      	movs	r3, #192	; 0xc0
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d10a      	bne.n	8006d82 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	2117      	movs	r1, #23
 8006d7a:	187b      	adds	r3, r7, r1
 8006d7c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d7e:	187b      	adds	r3, r7, r1
 8006d80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	d055      	beq.n	8006e34 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d88:	f7fd fcec 	bl	8004764 <HAL_GetTick>
 8006d8c:	0002      	movs	r2, r0
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d902      	bls.n	8006d9e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d142      	bne.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	21e0      	movs	r1, #224	; 0xe0
 8006daa:	438a      	bics	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	2382      	movs	r3, #130	; 0x82
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d113      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	2380      	movs	r3, #128	; 0x80
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d005      	beq.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d107      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	438a      	bics	r2, r1
 8006de0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	019b      	lsls	r3, r3, #6
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d110      	bne.n	8006e10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4916      	ldr	r1, [pc, #88]	; (8006e54 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006dfa:	400a      	ands	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2180      	movs	r1, #128	; 0x80
 8006e0a:	0189      	lsls	r1, r1, #6
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	225d      	movs	r2, #93	; 0x5d
 8006e14:	2101      	movs	r1, #1
 8006e16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	225c      	movs	r2, #92	; 0x5c
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e010      	b.n	8006e46 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d18e      	bne.n	8006d62 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	0018      	movs	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	b00a      	add	sp, #40	; 0x28
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	20000654 	.word	0x20000654
 8006e54:	ffffdfff 	.word	0xffffdfff

08006e58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	2382      	movs	r3, #130	; 0x82
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d113      	bne.n	8006e98 <SPI_EndRxTransaction+0x40>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	2380      	movs	r3, #128	; 0x80
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d005      	beq.n	8006e88 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d107      	bne.n	8006e98 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2140      	movs	r1, #64	; 0x40
 8006e94:	438a      	bics	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	0013      	movs	r3, r2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	f7ff fea7 	bl	8006bf8 <SPI_WaitFlagStateUntilTimeout>
 8006eaa:	1e03      	subs	r3, r0, #0
 8006eac:	d007      	beq.n	8006ebe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e026      	b.n	8006f0c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	2382      	movs	r3, #130	; 0x82
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d11f      	bne.n	8006f0a <SPI_EndRxTransaction+0xb2>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d005      	beq.n	8006ee2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d113      	bne.n	8006f0a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	23c0      	movs	r3, #192	; 0xc0
 8006ee6:	00d9      	lsls	r1, r3, #3
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	0013      	movs	r3, r2
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f7ff ff0f 	bl	8006d14 <SPI_WaitFifoStateUntilTimeout>
 8006ef6:	1e03      	subs	r3, r0, #0
 8006ef8:	d007      	beq.n	8006f0a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efe:	2220      	movs	r2, #32
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e000      	b.n	8006f0c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b004      	add	sp, #16
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	23c0      	movs	r3, #192	; 0xc0
 8006f24:	0159      	lsls	r1, r3, #5
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	0013      	movs	r3, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f7ff fef0 	bl	8006d14 <SPI_WaitFifoStateUntilTimeout>
 8006f34:	1e03      	subs	r3, r0, #0
 8006f36:	d007      	beq.n	8006f48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e027      	b.n	8006f98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	0013      	movs	r3, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	f7ff fe4f 	bl	8006bf8 <SPI_WaitFlagStateUntilTimeout>
 8006f5a:	1e03      	subs	r3, r0, #0
 8006f5c:	d007      	beq.n	8006f6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f62:	2220      	movs	r2, #32
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e014      	b.n	8006f98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	23c0      	movs	r3, #192	; 0xc0
 8006f72:	00d9      	lsls	r1, r3, #3
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	0013      	movs	r3, r2
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f7ff fec9 	bl	8006d14 <SPI_WaitFifoStateUntilTimeout>
 8006f82:	1e03      	subs	r3, r0, #0
 8006f84:	d007      	beq.n	8006f96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e000      	b.n	8006f98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e046      	b.n	8007040 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2288      	movs	r2, #136	; 0x88
 8006fb6:	589b      	ldr	r3, [r3, r2]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2284      	movs	r2, #132	; 0x84
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7fd f970 	bl	80042ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2288      	movs	r2, #136	; 0x88
 8006fd0:	2124      	movs	r1, #36	; 0x24
 8006fd2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2101      	movs	r1, #1
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f000 faa8 	bl	800753c <UART_SetConfig>
 8006fec:	0003      	movs	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e024      	b.n	8007040 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	0018      	movs	r0, r3
 8007002:	f000 fd59 	bl	8007ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	490d      	ldr	r1, [pc, #52]	; (8007048 <HAL_UART_Init+0xa8>)
 8007012:	400a      	ands	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	212a      	movs	r1, #42	; 0x2a
 8007022:	438a      	bics	r2, r1
 8007024:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2101      	movs	r1, #1
 8007032:	430a      	orrs	r2, r1
 8007034:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	0018      	movs	r0, r3
 800703a:	f000 fdf1 	bl	8007c20 <UART_CheckIdleState>
 800703e:	0003      	movs	r3, r0
}
 8007040:	0018      	movs	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	b002      	add	sp, #8
 8007046:	bd80      	pop	{r7, pc}
 8007048:	ffffb7ff 	.word	0xffffb7ff

0800704c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e04e      	b.n	80070fc <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2288      	movs	r2, #136	; 0x88
 8007062:	589b      	ldr	r3, [r3, r2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d107      	bne.n	8007078 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2284      	movs	r2, #132	; 0x84
 800706c:	2100      	movs	r1, #0
 800706e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	0018      	movs	r0, r3
 8007074:	f7fd f91a 	bl	80042ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2288      	movs	r2, #136	; 0x88
 800707c:	2124      	movs	r1, #36	; 0x24
 800707e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2101      	movs	r1, #1
 800708c:	438a      	bics	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	0018      	movs	r0, r3
 8007094:	f000 fa52 	bl	800753c <UART_SetConfig>
 8007098:	0003      	movs	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e02c      	b.n	80070fc <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 fd03 	bl	8007ab8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4911      	ldr	r1, [pc, #68]	; (8007104 <HAL_HalfDuplex_Init+0xb8>)
 80070be:	400a      	ands	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2122      	movs	r1, #34	; 0x22
 80070ce:	438a      	bics	r2, r1
 80070d0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2108      	movs	r1, #8
 80070de:	430a      	orrs	r2, r1
 80070e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2101      	movs	r1, #1
 80070ee:	430a      	orrs	r2, r1
 80070f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 fd93 	bl	8007c20 <UART_CheckIdleState>
 80070fa:	0003      	movs	r3, r0
}
 80070fc:	0018      	movs	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}
 8007104:	ffffb7ff 	.word	0xffffb7ff

08007108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	1dbb      	adds	r3, r7, #6
 8007116:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2288      	movs	r2, #136	; 0x88
 800711c:	589b      	ldr	r3, [r3, r2]
 800711e:	2b20      	cmp	r3, #32
 8007120:	d000      	beq.n	8007124 <HAL_UART_Transmit+0x1c>
 8007122:	e088      	b.n	8007236 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_UART_Transmit+0x2a>
 800712a:	1dbb      	adds	r3, r7, #6
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e080      	b.n	8007238 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	2380      	movs	r3, #128	; 0x80
 800713c:	015b      	lsls	r3, r3, #5
 800713e:	429a      	cmp	r2, r3
 8007140:	d109      	bne.n	8007156 <HAL_UART_Transmit+0x4e>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d105      	bne.n	8007156 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2201      	movs	r2, #1
 800714e:	4013      	ands	r3, r2
 8007150:	d001      	beq.n	8007156 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e070      	b.n	8007238 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2290      	movs	r2, #144	; 0x90
 800715a:	2100      	movs	r1, #0
 800715c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2288      	movs	r2, #136	; 0x88
 8007162:	2121      	movs	r1, #33	; 0x21
 8007164:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007166:	f7fd fafd 	bl	8004764 <HAL_GetTick>
 800716a:	0003      	movs	r3, r0
 800716c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1dba      	adds	r2, r7, #6
 8007172:	2154      	movs	r1, #84	; 0x54
 8007174:	8812      	ldrh	r2, [r2, #0]
 8007176:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1dba      	adds	r2, r7, #6
 800717c:	2156      	movs	r1, #86	; 0x56
 800717e:	8812      	ldrh	r2, [r2, #0]
 8007180:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	015b      	lsls	r3, r3, #5
 800718a:	429a      	cmp	r2, r3
 800718c:	d108      	bne.n	80071a0 <HAL_UART_Transmit+0x98>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e003      	b.n	80071a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071a8:	e02c      	b.n	8007204 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	0013      	movs	r3, r2
 80071b4:	2200      	movs	r2, #0
 80071b6:	2180      	movs	r1, #128	; 0x80
 80071b8:	f000 fd80 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 80071bc:	1e03      	subs	r3, r0, #0
 80071be:	d001      	beq.n	80071c4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e039      	b.n	8007238 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	001a      	movs	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	05d2      	lsls	r2, r2, #23
 80071d6:	0dd2      	lsrs	r2, r2, #23
 80071d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	3302      	adds	r3, #2
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	e007      	b.n	80071f2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2256      	movs	r2, #86	; 0x56
 80071f6:	5a9b      	ldrh	r3, [r3, r2]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b299      	uxth	r1, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2256      	movs	r2, #86	; 0x56
 8007202:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2256      	movs	r2, #86	; 0x56
 8007208:	5a9b      	ldrh	r3, [r3, r2]
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1cc      	bne.n	80071aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	0013      	movs	r3, r2
 800721a:	2200      	movs	r2, #0
 800721c:	2140      	movs	r1, #64	; 0x40
 800721e:	f000 fd4d 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8007222:	1e03      	subs	r3, r0, #0
 8007224:	d001      	beq.n	800722a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e006      	b.n	8007238 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2288      	movs	r2, #136	; 0x88
 800722e:	2120      	movs	r1, #32
 8007230:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	e000      	b.n	8007238 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007236:	2302      	movs	r3, #2
  }
}
 8007238:	0018      	movs	r0, r3
 800723a:	46bd      	mov	sp, r7
 800723c:	b008      	add	sp, #32
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	1dbb      	adds	r3, r7, #6
 800724c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	228c      	movs	r2, #140	; 0x8c
 8007252:	589b      	ldr	r3, [r3, r2]
 8007254:	2b20      	cmp	r3, #32
 8007256:	d14a      	bne.n	80072ee <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_Receive_DMA+0x26>
 800725e:	1dbb      	adds	r3, r7, #6
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e042      	b.n	80072f0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	015b      	lsls	r3, r3, #5
 8007272:	429a      	cmp	r2, r3
 8007274:	d109      	bne.n	800728a <HAL_UART_Receive_DMA+0x4a>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2201      	movs	r2, #1
 8007282:	4013      	ands	r3, r2
 8007284:	d001      	beq.n	800728a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e032      	b.n	80072f0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a18      	ldr	r2, [pc, #96]	; (80072f8 <HAL_UART_Receive_DMA+0xb8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d020      	beq.n	80072dc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	2380      	movs	r3, #128	; 0x80
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	4013      	ands	r3, r2
 80072a6:	d019      	beq.n	80072dc <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ac:	613b      	str	r3, [r7, #16]
  return(result);
 80072ae:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f383 8810 	msr	PRIMASK, r3
}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	04c9      	lsls	r1, r1, #19
 80072cc:	430a      	orrs	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f383 8810 	msr	PRIMASK, r3
}
 80072da:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80072dc:	1dbb      	adds	r3, r7, #6
 80072de:	881a      	ldrh	r2, [r3, #0]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 fdb1 	bl	8007e4c <UART_Start_Receive_DMA>
 80072ea:	0003      	movs	r3, r0
 80072ec:	e000      	b.n	80072f0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
  }
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b008      	add	sp, #32
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40008000 	.word	0x40008000

080072fc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b096      	sub	sp, #88	; 0x58
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007304:	f3ef 8310 	mrs	r3, PRIMASK
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800730c:	657b      	str	r3, [r7, #84]	; 0x54
 800730e:	2301      	movs	r3, #1
 8007310:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	f383 8810 	msr	PRIMASK, r3
}
 8007318:	46c0      	nop			; (mov r8, r8)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4979      	ldr	r1, [pc, #484]	; (800750c <HAL_UART_Abort+0x210>)
 8007326:	400a      	ands	r2, r1
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	f383 8810 	msr	PRIMASK, r3
}
 8007334:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007336:	f3ef 8310 	mrs	r3, PRIMASK
 800733a:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800733e:	653b      	str	r3, [r7, #80]	; 0x50
 8007340:	2301      	movs	r3, #1
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007346:	f383 8810 	msr	PRIMASK, r3
}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	496e      	ldr	r1, [pc, #440]	; (8007510 <HAL_UART_Abort+0x214>)
 8007358:	400a      	ands	r2, r1
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735e:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007362:	f383 8810 	msr	PRIMASK, r3
}
 8007366:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d118      	bne.n	80073a2 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007370:	f3ef 8310 	mrs	r3, PRIMASK
 8007374:	623b      	str	r3, [r7, #32]
  return(result);
 8007376:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800737a:	2301      	movs	r3, #1
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	f383 8810 	msr	PRIMASK, r3
}
 8007384:	46c0      	nop			; (mov r8, r8)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2110      	movs	r1, #16
 8007392:	438a      	bics	r2, r1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	f383 8810 	msr	PRIMASK, r3
}
 80073a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	2280      	movs	r2, #128	; 0x80
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b80      	cmp	r3, #128	; 0x80
 80073ae:	d135      	bne.n	800741c <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b0:	f3ef 8310 	mrs	r3, PRIMASK
 80073b4:	617b      	str	r3, [r7, #20]
  return(result);
 80073b6:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f383 8810 	msr	PRIMASK, r3
}
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	438a      	bics	r2, r1
 80073d4:	609a      	str	r2, [r3, #8]
 80073d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f383 8810 	msr	PRIMASK, r3
}
 80073e0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d018      	beq.n	800741c <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ee:	2200      	movs	r2, #0
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f6:	0018      	movs	r0, r3
 80073f8:	f7fd fca4 	bl	8004d44 <HAL_DMA_Abort>
 80073fc:	1e03      	subs	r3, r0, #0
 80073fe:	d00d      	beq.n	800741c <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007404:	0018      	movs	r0, r3
 8007406:	f7fd fdb1 	bl	8004f6c <HAL_DMA_GetError>
 800740a:	0003      	movs	r3, r0
 800740c:	2b20      	cmp	r3, #32
 800740e:	d105      	bne.n	800741c <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2290      	movs	r2, #144	; 0x90
 8007414:	2110      	movs	r1, #16
 8007416:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e072      	b.n	8007502 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2240      	movs	r2, #64	; 0x40
 8007424:	4013      	ands	r3, r2
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	d139      	bne.n	800749e <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742a:	f3ef 8310 	mrs	r3, PRIMASK
 800742e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007430:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	2301      	movs	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f383 8810 	msr	PRIMASK, r3
}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2140      	movs	r1, #64	; 0x40
 800744c:	438a      	bics	r2, r1
 800744e:	609a      	str	r2, [r3, #8]
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2280      	movs	r2, #128	; 0x80
 8007460:	589b      	ldr	r3, [r3, r2]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d01b      	beq.n	800749e <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	589b      	ldr	r3, [r3, r2]
 800746c:	2200      	movs	r2, #0
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2280      	movs	r2, #128	; 0x80
 8007474:	589b      	ldr	r3, [r3, r2]
 8007476:	0018      	movs	r0, r3
 8007478:	f7fd fc64 	bl	8004d44 <HAL_DMA_Abort>
 800747c:	1e03      	subs	r3, r0, #0
 800747e:	d00e      	beq.n	800749e <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	589b      	ldr	r3, [r3, r2]
 8007486:	0018      	movs	r0, r3
 8007488:	f7fd fd70 	bl	8004f6c <HAL_DMA_GetError>
 800748c:	0003      	movs	r3, r0
 800748e:	2b20      	cmp	r3, #32
 8007490:	d105      	bne.n	800749e <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2290      	movs	r2, #144	; 0x90
 8007496:	2110      	movs	r1, #16
 8007498:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e031      	b.n	8007502 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2256      	movs	r2, #86	; 0x56
 80074a2:	2100      	movs	r1, #0
 80074a4:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	225e      	movs	r2, #94	; 0x5e
 80074aa:	2100      	movs	r1, #0
 80074ac:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	220f      	movs	r2, #15
 80074b4:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074ba:	2380      	movs	r3, #128	; 0x80
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	429a      	cmp	r2, r3
 80074c0:	d107      	bne.n	80074d2 <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2110      	movs	r1, #16
 80074ce:	430a      	orrs	r2, r1
 80074d0:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2108      	movs	r1, #8
 80074de:	430a      	orrs	r2, r1
 80074e0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2288      	movs	r2, #136	; 0x88
 80074e6:	2120      	movs	r1, #32
 80074e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	228c      	movs	r2, #140	; 0x8c
 80074ee:	2120      	movs	r1, #32
 80074f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2290      	movs	r2, #144	; 0x90
 80074fc:	2100      	movs	r1, #0
 80074fe:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	0018      	movs	r0, r3
 8007504:	46bd      	mov	sp, r7
 8007506:	b016      	add	sp, #88	; 0x58
 8007508:	bd80      	pop	{r7, pc}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	fffffe1f 	.word	0xfffffe1f
 8007510:	ef7ffffe 	.word	0xef7ffffe

08007514 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800751c:	46c0      	nop			; (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	b002      	add	sp, #8
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	000a      	movs	r2, r1
 800752e:	1cbb      	adds	r3, r7, #2
 8007530:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b002      	add	sp, #8
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800753c:	b5b0      	push	{r4, r5, r7, lr}
 800753e:	b090      	sub	sp, #64	; 0x40
 8007540:	af00      	add	r7, sp, #0
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007544:	231a      	movs	r3, #26
 8007546:	2220      	movs	r2, #32
 8007548:	189b      	adds	r3, r3, r2
 800754a:	19db      	adds	r3, r3, r7
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	431a      	orrs	r2, r3
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	431a      	orrs	r2, r3
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	4313      	orrs	r3, r2
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4aaf      	ldr	r2, [pc, #700]	; (800782c <UART_SetConfig+0x2f0>)
 8007570:	4013      	ands	r3, r2
 8007572:	0019      	movs	r1, r3
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	430b      	orrs	r3, r1
 800757c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4aaa      	ldr	r2, [pc, #680]	; (8007830 <UART_SetConfig+0x2f4>)
 8007586:	4013      	ands	r3, r2
 8007588:	0018      	movs	r0, r3
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	0003      	movs	r3, r0
 8007594:	430b      	orrs	r3, r1
 8007596:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4aa4      	ldr	r2, [pc, #656]	; (8007834 <UART_SetConfig+0x2f8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075ae:	4313      	orrs	r3, r2
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4a9f      	ldr	r2, [pc, #636]	; (8007838 <UART_SetConfig+0x2fc>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	0019      	movs	r1, r3
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	220f      	movs	r2, #15
 80075d0:	4393      	bics	r3, r2
 80075d2:	0018      	movs	r0, r3
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	0003      	movs	r3, r0
 80075de:	430b      	orrs	r3, r1
 80075e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a95      	ldr	r2, [pc, #596]	; (800783c <UART_SetConfig+0x300>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d131      	bne.n	8007650 <UART_SetConfig+0x114>
 80075ec:	4b94      	ldr	r3, [pc, #592]	; (8007840 <UART_SetConfig+0x304>)
 80075ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f0:	2203      	movs	r2, #3
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d01d      	beq.n	8007634 <UART_SetConfig+0xf8>
 80075f8:	d823      	bhi.n	8007642 <UART_SetConfig+0x106>
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d00c      	beq.n	8007618 <UART_SetConfig+0xdc>
 80075fe:	d820      	bhi.n	8007642 <UART_SetConfig+0x106>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <UART_SetConfig+0xce>
 8007604:	2b01      	cmp	r3, #1
 8007606:	d00e      	beq.n	8007626 <UART_SetConfig+0xea>
 8007608:	e01b      	b.n	8007642 <UART_SetConfig+0x106>
 800760a:	231b      	movs	r3, #27
 800760c:	2220      	movs	r2, #32
 800760e:	189b      	adds	r3, r3, r2
 8007610:	19db      	adds	r3, r3, r7
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	e0b4      	b.n	8007782 <UART_SetConfig+0x246>
 8007618:	231b      	movs	r3, #27
 800761a:	2220      	movs	r2, #32
 800761c:	189b      	adds	r3, r3, r2
 800761e:	19db      	adds	r3, r3, r7
 8007620:	2202      	movs	r2, #2
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e0ad      	b.n	8007782 <UART_SetConfig+0x246>
 8007626:	231b      	movs	r3, #27
 8007628:	2220      	movs	r2, #32
 800762a:	189b      	adds	r3, r3, r2
 800762c:	19db      	adds	r3, r3, r7
 800762e:	2204      	movs	r2, #4
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	e0a6      	b.n	8007782 <UART_SetConfig+0x246>
 8007634:	231b      	movs	r3, #27
 8007636:	2220      	movs	r2, #32
 8007638:	189b      	adds	r3, r3, r2
 800763a:	19db      	adds	r3, r3, r7
 800763c:	2208      	movs	r2, #8
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e09f      	b.n	8007782 <UART_SetConfig+0x246>
 8007642:	231b      	movs	r3, #27
 8007644:	2220      	movs	r2, #32
 8007646:	189b      	adds	r3, r3, r2
 8007648:	19db      	adds	r3, r3, r7
 800764a:	2210      	movs	r2, #16
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e098      	b.n	8007782 <UART_SetConfig+0x246>
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a7b      	ldr	r2, [pc, #492]	; (8007844 <UART_SetConfig+0x308>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d131      	bne.n	80076be <UART_SetConfig+0x182>
 800765a:	4b79      	ldr	r3, [pc, #484]	; (8007840 <UART_SetConfig+0x304>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	220c      	movs	r2, #12
 8007660:	4013      	ands	r3, r2
 8007662:	2b0c      	cmp	r3, #12
 8007664:	d01d      	beq.n	80076a2 <UART_SetConfig+0x166>
 8007666:	d823      	bhi.n	80076b0 <UART_SetConfig+0x174>
 8007668:	2b08      	cmp	r3, #8
 800766a:	d00c      	beq.n	8007686 <UART_SetConfig+0x14a>
 800766c:	d820      	bhi.n	80076b0 <UART_SetConfig+0x174>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <UART_SetConfig+0x13c>
 8007672:	2b04      	cmp	r3, #4
 8007674:	d00e      	beq.n	8007694 <UART_SetConfig+0x158>
 8007676:	e01b      	b.n	80076b0 <UART_SetConfig+0x174>
 8007678:	231b      	movs	r3, #27
 800767a:	2220      	movs	r2, #32
 800767c:	189b      	adds	r3, r3, r2
 800767e:	19db      	adds	r3, r3, r7
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e07d      	b.n	8007782 <UART_SetConfig+0x246>
 8007686:	231b      	movs	r3, #27
 8007688:	2220      	movs	r2, #32
 800768a:	189b      	adds	r3, r3, r2
 800768c:	19db      	adds	r3, r3, r7
 800768e:	2202      	movs	r2, #2
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e076      	b.n	8007782 <UART_SetConfig+0x246>
 8007694:	231b      	movs	r3, #27
 8007696:	2220      	movs	r2, #32
 8007698:	189b      	adds	r3, r3, r2
 800769a:	19db      	adds	r3, r3, r7
 800769c:	2204      	movs	r2, #4
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e06f      	b.n	8007782 <UART_SetConfig+0x246>
 80076a2:	231b      	movs	r3, #27
 80076a4:	2220      	movs	r2, #32
 80076a6:	189b      	adds	r3, r3, r2
 80076a8:	19db      	adds	r3, r3, r7
 80076aa:	2208      	movs	r2, #8
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	e068      	b.n	8007782 <UART_SetConfig+0x246>
 80076b0:	231b      	movs	r3, #27
 80076b2:	2220      	movs	r2, #32
 80076b4:	189b      	adds	r3, r3, r2
 80076b6:	19db      	adds	r3, r3, r7
 80076b8:	2210      	movs	r2, #16
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e061      	b.n	8007782 <UART_SetConfig+0x246>
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a61      	ldr	r2, [pc, #388]	; (8007848 <UART_SetConfig+0x30c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d106      	bne.n	80076d6 <UART_SetConfig+0x19a>
 80076c8:	231b      	movs	r3, #27
 80076ca:	2220      	movs	r2, #32
 80076cc:	189b      	adds	r3, r3, r2
 80076ce:	19db      	adds	r3, r3, r7
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
 80076d4:	e055      	b.n	8007782 <UART_SetConfig+0x246>
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a5c      	ldr	r2, [pc, #368]	; (800784c <UART_SetConfig+0x310>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d106      	bne.n	80076ee <UART_SetConfig+0x1b2>
 80076e0:	231b      	movs	r3, #27
 80076e2:	2220      	movs	r2, #32
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	19db      	adds	r3, r3, r7
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	e049      	b.n	8007782 <UART_SetConfig+0x246>
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a50      	ldr	r2, [pc, #320]	; (8007834 <UART_SetConfig+0x2f8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d13e      	bne.n	8007776 <UART_SetConfig+0x23a>
 80076f8:	4b51      	ldr	r3, [pc, #324]	; (8007840 <UART_SetConfig+0x304>)
 80076fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076fc:	23c0      	movs	r3, #192	; 0xc0
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	4013      	ands	r3, r2
 8007702:	22c0      	movs	r2, #192	; 0xc0
 8007704:	0112      	lsls	r2, r2, #4
 8007706:	4293      	cmp	r3, r2
 8007708:	d027      	beq.n	800775a <UART_SetConfig+0x21e>
 800770a:	22c0      	movs	r2, #192	; 0xc0
 800770c:	0112      	lsls	r2, r2, #4
 800770e:	4293      	cmp	r3, r2
 8007710:	d82a      	bhi.n	8007768 <UART_SetConfig+0x22c>
 8007712:	2280      	movs	r2, #128	; 0x80
 8007714:	0112      	lsls	r2, r2, #4
 8007716:	4293      	cmp	r3, r2
 8007718:	d011      	beq.n	800773e <UART_SetConfig+0x202>
 800771a:	2280      	movs	r2, #128	; 0x80
 800771c:	0112      	lsls	r2, r2, #4
 800771e:	4293      	cmp	r3, r2
 8007720:	d822      	bhi.n	8007768 <UART_SetConfig+0x22c>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <UART_SetConfig+0x1f4>
 8007726:	2280      	movs	r2, #128	; 0x80
 8007728:	00d2      	lsls	r2, r2, #3
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <UART_SetConfig+0x210>
 800772e:	e01b      	b.n	8007768 <UART_SetConfig+0x22c>
 8007730:	231b      	movs	r3, #27
 8007732:	2220      	movs	r2, #32
 8007734:	189b      	adds	r3, r3, r2
 8007736:	19db      	adds	r3, r3, r7
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	e021      	b.n	8007782 <UART_SetConfig+0x246>
 800773e:	231b      	movs	r3, #27
 8007740:	2220      	movs	r2, #32
 8007742:	189b      	adds	r3, r3, r2
 8007744:	19db      	adds	r3, r3, r7
 8007746:	2202      	movs	r2, #2
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	e01a      	b.n	8007782 <UART_SetConfig+0x246>
 800774c:	231b      	movs	r3, #27
 800774e:	2220      	movs	r2, #32
 8007750:	189b      	adds	r3, r3, r2
 8007752:	19db      	adds	r3, r3, r7
 8007754:	2204      	movs	r2, #4
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e013      	b.n	8007782 <UART_SetConfig+0x246>
 800775a:	231b      	movs	r3, #27
 800775c:	2220      	movs	r2, #32
 800775e:	189b      	adds	r3, r3, r2
 8007760:	19db      	adds	r3, r3, r7
 8007762:	2208      	movs	r2, #8
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e00c      	b.n	8007782 <UART_SetConfig+0x246>
 8007768:	231b      	movs	r3, #27
 800776a:	2220      	movs	r2, #32
 800776c:	189b      	adds	r3, r3, r2
 800776e:	19db      	adds	r3, r3, r7
 8007770:	2210      	movs	r2, #16
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e005      	b.n	8007782 <UART_SetConfig+0x246>
 8007776:	231b      	movs	r3, #27
 8007778:	2220      	movs	r2, #32
 800777a:	189b      	adds	r3, r3, r2
 800777c:	19db      	adds	r3, r3, r7
 800777e:	2210      	movs	r2, #16
 8007780:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2b      	ldr	r2, [pc, #172]	; (8007834 <UART_SetConfig+0x2f8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d000      	beq.n	800778e <UART_SetConfig+0x252>
 800778c:	e0a9      	b.n	80078e2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800778e:	231b      	movs	r3, #27
 8007790:	2220      	movs	r2, #32
 8007792:	189b      	adds	r3, r3, r2
 8007794:	19db      	adds	r3, r3, r7
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d015      	beq.n	80077c8 <UART_SetConfig+0x28c>
 800779c:	dc18      	bgt.n	80077d0 <UART_SetConfig+0x294>
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d00d      	beq.n	80077be <UART_SetConfig+0x282>
 80077a2:	dc15      	bgt.n	80077d0 <UART_SetConfig+0x294>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <UART_SetConfig+0x272>
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d005      	beq.n	80077b8 <UART_SetConfig+0x27c>
 80077ac:	e010      	b.n	80077d0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ae:	f7fe fb27 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 80077b2:	0003      	movs	r3, r0
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077b6:	e014      	b.n	80077e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b8:	4b25      	ldr	r3, [pc, #148]	; (8007850 <UART_SetConfig+0x314>)
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077bc:	e011      	b.n	80077e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077be:	f7fe fa93 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 80077c2:	0003      	movs	r3, r0
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c6:	e00c      	b.n	80077e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ce:	e008      	b.n	80077e2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80077d4:	231a      	movs	r3, #26
 80077d6:	2220      	movs	r2, #32
 80077d8:	189b      	adds	r3, r3, r2
 80077da:	19db      	adds	r3, r3, r7
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
        break;
 80077e0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d100      	bne.n	80077ea <UART_SetConfig+0x2ae>
 80077e8:	e14b      	b.n	8007a82 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ee:	4b19      	ldr	r3, [pc, #100]	; (8007854 <UART_SetConfig+0x318>)
 80077f0:	0052      	lsls	r2, r2, #1
 80077f2:	5ad3      	ldrh	r3, [r2, r3]
 80077f4:	0019      	movs	r1, r3
 80077f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077f8:	f7f8 fc84 	bl	8000104 <__udivsi3>
 80077fc:	0003      	movs	r3, r0
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	0013      	movs	r3, r2
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	189b      	adds	r3, r3, r2
 800780a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780c:	429a      	cmp	r2, r3
 800780e:	d305      	bcc.n	800781c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007818:	429a      	cmp	r2, r3
 800781a:	d91d      	bls.n	8007858 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800781c:	231a      	movs	r3, #26
 800781e:	2220      	movs	r2, #32
 8007820:	189b      	adds	r3, r3, r2
 8007822:	19db      	adds	r3, r3, r7
 8007824:	2201      	movs	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e12b      	b.n	8007a82 <UART_SetConfig+0x546>
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	cfff69f3 	.word	0xcfff69f3
 8007830:	ffffcfff 	.word	0xffffcfff
 8007834:	40008000 	.word	0x40008000
 8007838:	11fff4ff 	.word	0x11fff4ff
 800783c:	40013800 	.word	0x40013800
 8007840:	40021000 	.word	0x40021000
 8007844:	40004400 	.word	0x40004400
 8007848:	40004800 	.word	0x40004800
 800784c:	40004c00 	.word	0x40004c00
 8007850:	00f42400 	.word	0x00f42400
 8007854:	08008688 	.word	0x08008688
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007864:	4b92      	ldr	r3, [pc, #584]	; (8007ab0 <UART_SetConfig+0x574>)
 8007866:	0052      	lsls	r2, r2, #1
 8007868:	5ad3      	ldrh	r3, [r2, r3]
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	69b8      	ldr	r0, [r7, #24]
 8007876:	69f9      	ldr	r1, [r7, #28]
 8007878:	f7f8 fdba 	bl	80003f0 <__aeabi_uldivmod>
 800787c:	0002      	movs	r2, r0
 800787e:	000b      	movs	r3, r1
 8007880:	0e11      	lsrs	r1, r2, #24
 8007882:	021d      	lsls	r5, r3, #8
 8007884:	430d      	orrs	r5, r1
 8007886:	0214      	lsls	r4, r2, #8
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	085b      	lsrs	r3, r3, #1
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68b8      	ldr	r0, [r7, #8]
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	1900      	adds	r0, r0, r4
 800789a:	4169      	adcs	r1, r5
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f7f8 fda1 	bl	80003f0 <__aeabi_uldivmod>
 80078ae:	0002      	movs	r2, r0
 80078b0:	000b      	movs	r3, r1
 80078b2:	0013      	movs	r3, r2
 80078b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b8:	23c0      	movs	r3, #192	; 0xc0
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	429a      	cmp	r2, r3
 80078be:	d309      	bcc.n	80078d4 <UART_SetConfig+0x398>
 80078c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c2:	2380      	movs	r3, #128	; 0x80
 80078c4:	035b      	lsls	r3, r3, #13
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d204      	bcs.n	80078d4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	e0d6      	b.n	8007a82 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80078d4:	231a      	movs	r3, #26
 80078d6:	2220      	movs	r2, #32
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	19db      	adds	r3, r3, r7
 80078dc:	2201      	movs	r2, #1
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e0cf      	b.n	8007a82 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	69da      	ldr	r2, [r3, #28]
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d000      	beq.n	80078f0 <UART_SetConfig+0x3b4>
 80078ee:	e070      	b.n	80079d2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80078f0:	231b      	movs	r3, #27
 80078f2:	2220      	movs	r2, #32
 80078f4:	189b      	adds	r3, r3, r2
 80078f6:	19db      	adds	r3, r3, r7
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d015      	beq.n	800792a <UART_SetConfig+0x3ee>
 80078fe:	dc18      	bgt.n	8007932 <UART_SetConfig+0x3f6>
 8007900:	2b04      	cmp	r3, #4
 8007902:	d00d      	beq.n	8007920 <UART_SetConfig+0x3e4>
 8007904:	dc15      	bgt.n	8007932 <UART_SetConfig+0x3f6>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <UART_SetConfig+0x3d4>
 800790a:	2b02      	cmp	r3, #2
 800790c:	d005      	beq.n	800791a <UART_SetConfig+0x3de>
 800790e:	e010      	b.n	8007932 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fe fa76 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 8007914:	0003      	movs	r3, r0
 8007916:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007918:	e014      	b.n	8007944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800791a:	4b66      	ldr	r3, [pc, #408]	; (8007ab4 <UART_SetConfig+0x578>)
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800791e:	e011      	b.n	8007944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007920:	f7fe f9e2 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8007924:	0003      	movs	r3, r0
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007928:	e00c      	b.n	8007944 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792a:	2380      	movs	r3, #128	; 0x80
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007930:	e008      	b.n	8007944 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007936:	231a      	movs	r3, #26
 8007938:	2220      	movs	r2, #32
 800793a:	189b      	adds	r3, r3, r2
 800793c:	19db      	adds	r3, r3, r7
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
        break;
 8007942:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007946:	2b00      	cmp	r3, #0
 8007948:	d100      	bne.n	800794c <UART_SetConfig+0x410>
 800794a:	e09a      	b.n	8007a82 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007950:	4b57      	ldr	r3, [pc, #348]	; (8007ab0 <UART_SetConfig+0x574>)
 8007952:	0052      	lsls	r2, r2, #1
 8007954:	5ad3      	ldrh	r3, [r2, r3]
 8007956:	0019      	movs	r1, r3
 8007958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800795a:	f7f8 fbd3 	bl	8000104 <__udivsi3>
 800795e:	0003      	movs	r3, r0
 8007960:	005a      	lsls	r2, r3, #1
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	085b      	lsrs	r3, r3, #1
 8007968:	18d2      	adds	r2, r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	0019      	movs	r1, r3
 8007970:	0010      	movs	r0, r2
 8007972:	f7f8 fbc7 	bl	8000104 <__udivsi3>
 8007976:	0003      	movs	r3, r0
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b0f      	cmp	r3, #15
 800797e:	d921      	bls.n	80079c4 <UART_SetConfig+0x488>
 8007980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007982:	2380      	movs	r3, #128	; 0x80
 8007984:	025b      	lsls	r3, r3, #9
 8007986:	429a      	cmp	r2, r3
 8007988:	d21c      	bcs.n	80079c4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	b29a      	uxth	r2, r3
 800798e:	200e      	movs	r0, #14
 8007990:	2420      	movs	r4, #32
 8007992:	1903      	adds	r3, r0, r4
 8007994:	19db      	adds	r3, r3, r7
 8007996:	210f      	movs	r1, #15
 8007998:	438a      	bics	r2, r1
 800799a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2207      	movs	r2, #7
 80079a4:	4013      	ands	r3, r2
 80079a6:	b299      	uxth	r1, r3
 80079a8:	1903      	adds	r3, r0, r4
 80079aa:	19db      	adds	r3, r3, r7
 80079ac:	1902      	adds	r2, r0, r4
 80079ae:	19d2      	adds	r2, r2, r7
 80079b0:	8812      	ldrh	r2, [r2, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	1902      	adds	r2, r0, r4
 80079bc:	19d2      	adds	r2, r2, r7
 80079be:	8812      	ldrh	r2, [r2, #0]
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	e05e      	b.n	8007a82 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80079c4:	231a      	movs	r3, #26
 80079c6:	2220      	movs	r2, #32
 80079c8:	189b      	adds	r3, r3, r2
 80079ca:	19db      	adds	r3, r3, r7
 80079cc:	2201      	movs	r2, #1
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	e057      	b.n	8007a82 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079d2:	231b      	movs	r3, #27
 80079d4:	2220      	movs	r2, #32
 80079d6:	189b      	adds	r3, r3, r2
 80079d8:	19db      	adds	r3, r3, r7
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d015      	beq.n	8007a0c <UART_SetConfig+0x4d0>
 80079e0:	dc18      	bgt.n	8007a14 <UART_SetConfig+0x4d8>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00d      	beq.n	8007a02 <UART_SetConfig+0x4c6>
 80079e6:	dc15      	bgt.n	8007a14 <UART_SetConfig+0x4d8>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <UART_SetConfig+0x4b6>
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d005      	beq.n	80079fc <UART_SetConfig+0x4c0>
 80079f0:	e010      	b.n	8007a14 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f2:	f7fe fa05 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 80079f6:	0003      	movs	r3, r0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079fa:	e014      	b.n	8007a26 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079fc:	4b2d      	ldr	r3, [pc, #180]	; (8007ab4 <UART_SetConfig+0x578>)
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a00:	e011      	b.n	8007a26 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a02:	f7fe f971 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8007a06:	0003      	movs	r3, r0
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0a:	e00c      	b.n	8007a26 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a12:	e008      	b.n	8007a26 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007a18:	231a      	movs	r3, #26
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	189b      	adds	r3, r3, r2
 8007a1e:	19db      	adds	r3, r3, r7
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]
        break;
 8007a24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d02a      	beq.n	8007a82 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a30:	4b1f      	ldr	r3, [pc, #124]	; (8007ab0 <UART_SetConfig+0x574>)
 8007a32:	0052      	lsls	r2, r2, #1
 8007a34:	5ad3      	ldrh	r3, [r2, r3]
 8007a36:	0019      	movs	r1, r3
 8007a38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a3a:	f7f8 fb63 	bl	8000104 <__udivsi3>
 8007a3e:	0003      	movs	r3, r0
 8007a40:	001a      	movs	r2, r3
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	18d2      	adds	r2, r2, r3
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	0019      	movs	r1, r3
 8007a50:	0010      	movs	r0, r2
 8007a52:	f7f8 fb57 	bl	8000104 <__udivsi3>
 8007a56:	0003      	movs	r3, r0
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d90a      	bls.n	8007a76 <UART_SetConfig+0x53a>
 8007a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a62:	2380      	movs	r3, #128	; 0x80
 8007a64:	025b      	lsls	r3, r3, #9
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d205      	bcs.n	8007a76 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60da      	str	r2, [r3, #12]
 8007a74:	e005      	b.n	8007a82 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007a76:	231a      	movs	r3, #26
 8007a78:	2220      	movs	r2, #32
 8007a7a:	189b      	adds	r3, r3, r2
 8007a7c:	19db      	adds	r3, r3, r7
 8007a7e:	2201      	movs	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	226a      	movs	r2, #106	; 0x6a
 8007a86:	2101      	movs	r1, #1
 8007a88:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	2268      	movs	r2, #104	; 0x68
 8007a8e:	2101      	movs	r1, #1
 8007a90:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	2200      	movs	r2, #0
 8007a96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a9e:	231a      	movs	r3, #26
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	189b      	adds	r3, r3, r2
 8007aa4:	19db      	adds	r3, r3, r7
 8007aa6:	781b      	ldrb	r3, [r3, #0]
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b010      	add	sp, #64	; 0x40
 8007aae:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab0:	08008688 	.word	0x08008688
 8007ab4:	00f42400 	.word	0x00f42400

08007ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	d00b      	beq.n	8007ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4a4a      	ldr	r2, [pc, #296]	; (8007bfc <UART_AdvFeatureConfig+0x144>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	0019      	movs	r1, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d00b      	beq.n	8007b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4a43      	ldr	r2, [pc, #268]	; (8007c00 <UART_AdvFeatureConfig+0x148>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	0019      	movs	r1, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b08:	2204      	movs	r2, #4
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d00b      	beq.n	8007b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	4a3b      	ldr	r2, [pc, #236]	; (8007c04 <UART_AdvFeatureConfig+0x14c>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	0019      	movs	r1, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d00b      	beq.n	8007b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	4a34      	ldr	r2, [pc, #208]	; (8007c08 <UART_AdvFeatureConfig+0x150>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	4013      	ands	r3, r2
 8007b50:	d00b      	beq.n	8007b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <UART_AdvFeatureConfig+0x154>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	2220      	movs	r2, #32
 8007b70:	4013      	ands	r3, r2
 8007b72:	d00b      	beq.n	8007b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	4a25      	ldr	r2, [pc, #148]	; (8007c10 <UART_AdvFeatureConfig+0x158>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	0019      	movs	r1, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	2240      	movs	r2, #64	; 0x40
 8007b92:	4013      	ands	r3, r2
 8007b94:	d01d      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <UART_AdvFeatureConfig+0x15c>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	0019      	movs	r1, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	035b      	lsls	r3, r3, #13
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d10b      	bne.n	8007bd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <UART_AdvFeatureConfig+0x160>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	0019      	movs	r1, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	2280      	movs	r2, #128	; 0x80
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4a0e      	ldr	r2, [pc, #56]	; (8007c1c <UART_AdvFeatureConfig+0x164>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	0019      	movs	r1, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	fffdffff 	.word	0xfffdffff
 8007c00:	fffeffff 	.word	0xfffeffff
 8007c04:	fffbffff 	.word	0xfffbffff
 8007c08:	ffff7fff 	.word	0xffff7fff
 8007c0c:	ffffefff 	.word	0xffffefff
 8007c10:	ffffdfff 	.word	0xffffdfff
 8007c14:	ffefffff 	.word	0xffefffff
 8007c18:	ff9fffff 	.word	0xff9fffff
 8007c1c:	fff7ffff 	.word	0xfff7ffff

08007c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2290      	movs	r2, #144	; 0x90
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c30:	f7fc fd98 	bl	8004764 <HAL_GetTick>
 8007c34:	0003      	movs	r3, r0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d10c      	bne.n	8007c60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	0391      	lsls	r1, r2, #14
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <UART_CheckIdleState+0x98>)
 8007c50:	9200      	str	r2, [sp, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f000 f832 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8007c58:	1e03      	subs	r3, r0, #0
 8007c5a:	d001      	beq.n	8007c60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e026      	b.n	8007cae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2204      	movs	r2, #4
 8007c68:	4013      	ands	r3, r2
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d10c      	bne.n	8007c88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2280      	movs	r2, #128	; 0x80
 8007c72:	03d1      	lsls	r1, r2, #15
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4a10      	ldr	r2, [pc, #64]	; (8007cb8 <UART_CheckIdleState+0x98>)
 8007c78:	9200      	str	r2, [sp, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f000 f81e 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 8007c80:	1e03      	subs	r3, r0, #0
 8007c82:	d001      	beq.n	8007c88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e012      	b.n	8007cae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2288      	movs	r2, #136	; 0x88
 8007c8c:	2120      	movs	r1, #32
 8007c8e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	228c      	movs	r2, #140	; 0x8c
 8007c94:	2120      	movs	r1, #32
 8007c96:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2284      	movs	r2, #132	; 0x84
 8007ca8:	2100      	movs	r1, #0
 8007caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	0018      	movs	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b004      	add	sp, #16
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	01ffffff 	.word	0x01ffffff

08007cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b094      	sub	sp, #80	; 0x50
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	1dfb      	adds	r3, r7, #7
 8007cca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ccc:	e0a7      	b.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	d100      	bne.n	8007cd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007cd4:	e0a3      	b.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd6:	f7fc fd45 	bl	8004764 <HAL_GetTick>
 8007cda:	0002      	movs	r2, r0
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d13f      	bne.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cec:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	f383 8810 	msr	PRIMASK, r3
}
 8007d00:	46c0      	nop			; (mov r8, r8)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	494e      	ldr	r1, [pc, #312]	; (8007e48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007d0e:	400a      	ands	r2, r1
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	f383 8810 	msr	PRIMASK, r3
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d26:	643b      	str	r3, [r7, #64]	; 0x40
 8007d28:	2301      	movs	r3, #1
 8007d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2101      	movs	r1, #1
 8007d40:	438a      	bics	r2, r1
 8007d42:	609a      	str	r2, [r3, #8]
 8007d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4a:	f383 8810 	msr	PRIMASK, r3
}
 8007d4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2288      	movs	r2, #136	; 0x88
 8007d54:	2120      	movs	r1, #32
 8007d56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	228c      	movs	r2, #140	; 0x8c
 8007d5c:	2120      	movs	r1, #32
 8007d5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2284      	movs	r2, #132	; 0x84
 8007d64:	2100      	movs	r1, #0
 8007d66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e069      	b.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2204      	movs	r2, #4
 8007d74:	4013      	ands	r3, r2
 8007d76:	d052      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	401a      	ands	r2, r3
 8007d84:	2380      	movs	r3, #128	; 0x80
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d148      	bne.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2280      	movs	r2, #128	; 0x80
 8007d92:	0112      	lsls	r2, r2, #4
 8007d94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d96:	f3ef 8310 	mrs	r3, PRIMASK
 8007d9a:	613b      	str	r3, [r7, #16]
  return(result);
 8007d9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da0:	2301      	movs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f383 8810 	msr	PRIMASK, r3
}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4924      	ldr	r1, [pc, #144]	; (8007e48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007db8:	400a      	ands	r2, r1
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f383 8810 	msr	PRIMASK, r3
}
 8007dc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f383 8810 	msr	PRIMASK, r3
}
 8007ddc:	46c0      	nop			; (mov r8, r8)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2101      	movs	r1, #1
 8007dea:	438a      	bics	r2, r1
 8007dec:	609a      	str	r2, [r3, #8]
 8007dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	f383 8810 	msr	PRIMASK, r3
}
 8007df8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2288      	movs	r2, #136	; 0x88
 8007dfe:	2120      	movs	r1, #32
 8007e00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	228c      	movs	r2, #140	; 0x8c
 8007e06:	2120      	movs	r1, #32
 8007e08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2290      	movs	r2, #144	; 0x90
 8007e0e:	2120      	movs	r1, #32
 8007e10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2284      	movs	r2, #132	; 0x84
 8007e16:	2100      	movs	r1, #0
 8007e18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e010      	b.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	4013      	ands	r3, r2
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	425a      	negs	r2, r3
 8007e2e:	4153      	adcs	r3, r2
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	001a      	movs	r2, r3
 8007e34:	1dfb      	adds	r3, r7, #7
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d100      	bne.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x182>
 8007e3c:	e747      	b.n	8007cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	0018      	movs	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b014      	add	sp, #80	; 0x50
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	fffffe5f 	.word	0xfffffe5f

08007e4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b090      	sub	sp, #64	; 0x40
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	1dbb      	adds	r3, r7, #6
 8007e58:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	1dba      	adds	r2, r7, #6
 8007e64:	215c      	movs	r1, #92	; 0x5c
 8007e66:	8812      	ldrh	r2, [r2, #0]
 8007e68:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2290      	movs	r2, #144	; 0x90
 8007e6e:	2100      	movs	r1, #0
 8007e70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	228c      	movs	r2, #140	; 0x8c
 8007e76:	2122      	movs	r1, #34	; 0x22
 8007e78:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	589b      	ldr	r3, [r3, r2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d02d      	beq.n	8007ee0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	589b      	ldr	r3, [r3, r2]
 8007e8a:	4a40      	ldr	r2, [pc, #256]	; (8007f8c <UART_Start_Receive_DMA+0x140>)
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2280      	movs	r2, #128	; 0x80
 8007e92:	589b      	ldr	r3, [r3, r2]
 8007e94:	4a3e      	ldr	r2, [pc, #248]	; (8007f90 <UART_Start_Receive_DMA+0x144>)
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	589b      	ldr	r3, [r3, r2]
 8007e9e:	4a3d      	ldr	r2, [pc, #244]	; (8007f94 <UART_Start_Receive_DMA+0x148>)
 8007ea0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2280      	movs	r2, #128	; 0x80
 8007ea6:	589b      	ldr	r3, [r3, r2]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	5898      	ldr	r0, [r3, r2]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3324      	adds	r3, #36	; 0x24
 8007eb8:	0019      	movs	r1, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	001a      	movs	r2, r3
 8007ec0:	1dbb      	adds	r3, r7, #6
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	f7fc feb8 	bl	8004c38 <HAL_DMA_Start_IT>
 8007ec8:	1e03      	subs	r3, r0, #0
 8007eca:	d009      	beq.n	8007ee0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2290      	movs	r2, #144	; 0x90
 8007ed0:	2110      	movs	r1, #16
 8007ed2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	228c      	movs	r2, #140	; 0x8c
 8007ed8:	2120      	movs	r1, #32
 8007eda:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e050      	b.n	8007f82 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d019      	beq.n	8007f1c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	f383 8810 	msr	PRIMASK, r3
}
 8007efc:	46c0      	nop			; (mov r8, r8)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2180      	movs	r1, #128	; 0x80
 8007f0a:	0049      	lsls	r1, r1, #1
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f383 8810 	msr	PRIMASK, r3
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f20:	613b      	str	r3, [r7, #16]
  return(result);
 8007f22:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f26:	2301      	movs	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f383 8810 	msr	PRIMASK, r3
}
 8007f30:	46c0      	nop			; (mov r8, r8)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	609a      	str	r2, [r3, #8]
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f383 8810 	msr	PRIMASK, r3
}
 8007f4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f52:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f54:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
 8007f58:	2301      	movs	r3, #1
 8007f5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	f383 8810 	msr	PRIMASK, r3
}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2140      	movs	r1, #64	; 0x40
 8007f70:	430a      	orrs	r2, r1
 8007f72:	609a      	str	r2, [r3, #8]
 8007f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f383 8810 	msr	PRIMASK, r3
}
 8007f7e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	0018      	movs	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b010      	add	sp, #64	; 0x40
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	080080e5 	.word	0x080080e5
 8007f90:	08008215 	.word	0x08008215
 8007f94:	08008257 	.word	0x08008257

08007f98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	; 0x28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8007faa:	2301      	movs	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f383 8810 	msr	PRIMASK, r3
}
 8007fb4:	46c0      	nop			; (mov r8, r8)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	21c0      	movs	r1, #192	; 0xc0
 8007fc2:	438a      	bics	r2, r1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f383 8810 	msr	PRIMASK, r3
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fd8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f383 8810 	msr	PRIMASK, r3
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4908      	ldr	r1, [pc, #32]	; (8008014 <UART_EndTxTransfer+0x7c>)
 8007ff4:	400a      	ands	r2, r1
 8007ff6:	609a      	str	r2, [r3, #8]
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f383 8810 	msr	PRIMASK, r3
}
 8008002:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2288      	movs	r2, #136	; 0x88
 8008008:	2120      	movs	r1, #32
 800800a:	5099      	str	r1, [r3, r2]
}
 800800c:	46c0      	nop			; (mov r8, r8)
 800800e:	46bd      	mov	sp, r7
 8008010:	b00a      	add	sp, #40	; 0x28
 8008012:	bd80      	pop	{r7, pc}
 8008014:	ff7fffff 	.word	0xff7fffff

08008018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08e      	sub	sp, #56	; 0x38
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008020:	f3ef 8310 	mrs	r3, PRIMASK
 8008024:	617b      	str	r3, [r7, #20]
  return(result);
 8008026:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
 800802a:	2301      	movs	r3, #1
 800802c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f383 8810 	msr	PRIMASK, r3
}
 8008034:	46c0      	nop			; (mov r8, r8)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4926      	ldr	r1, [pc, #152]	; (80080dc <UART_EndRxTransfer+0xc4>)
 8008042:	400a      	ands	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008052:	f3ef 8310 	mrs	r3, PRIMASK
 8008056:	623b      	str	r3, [r7, #32]
  return(result);
 8008058:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800805a:	633b      	str	r3, [r7, #48]	; 0x30
 800805c:	2301      	movs	r3, #1
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	f383 8810 	msr	PRIMASK, r3
}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	491b      	ldr	r1, [pc, #108]	; (80080e0 <UART_EndRxTransfer+0xc8>)
 8008074:	400a      	ands	r2, r1
 8008076:	609a      	str	r2, [r3, #8]
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	f383 8810 	msr	PRIMASK, r3
}
 8008082:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008088:	2b01      	cmp	r3, #1
 800808a:	d118      	bne.n	80080be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800808c:	f3ef 8310 	mrs	r3, PRIMASK
 8008090:	60bb      	str	r3, [r7, #8]
  return(result);
 8008092:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008096:	2301      	movs	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f383 8810 	msr	PRIMASK, r3
}
 80080a0:	46c0      	nop			; (mov r8, r8)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2110      	movs	r1, #16
 80080ae:	438a      	bics	r2, r1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f383 8810 	msr	PRIMASK, r3
}
 80080bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	228c      	movs	r2, #140	; 0x8c
 80080c2:	2120      	movs	r1, #32
 80080c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b00e      	add	sp, #56	; 0x38
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	fffffedf 	.word	0xfffffedf
 80080e0:	effffffe 	.word	0xeffffffe

080080e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b094      	sub	sp, #80	; 0x50
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2220      	movs	r2, #32
 80080fa:	4013      	ands	r3, r2
 80080fc:	d16f      	bne.n	80081de <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80080fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008100:	225e      	movs	r2, #94	; 0x5e
 8008102:	2100      	movs	r1, #0
 8008104:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008106:	f3ef 8310 	mrs	r3, PRIMASK
 800810a:	61bb      	str	r3, [r7, #24]
  return(result);
 800810c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800810e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008110:	2301      	movs	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f383 8810 	msr	PRIMASK, r3
}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	493a      	ldr	r1, [pc, #232]	; (8008210 <UART_DMAReceiveCplt+0x12c>)
 8008128:	400a      	ands	r2, r1
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	f383 8810 	msr	PRIMASK, r3
}
 8008136:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008138:	f3ef 8310 	mrs	r3, PRIMASK
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008140:	647b      	str	r3, [r7, #68]	; 0x44
 8008142:	2301      	movs	r3, #1
 8008144:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	f383 8810 	msr	PRIMASK, r3
}
 800814c:	46c0      	nop			; (mov r8, r8)
 800814e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2101      	movs	r1, #1
 800815a:	438a      	bics	r2, r1
 800815c:	609a      	str	r2, [r3, #8]
 800815e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	f383 8810 	msr	PRIMASK, r3
}
 8008168:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816a:	f3ef 8310 	mrs	r3, PRIMASK
 800816e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008172:	643b      	str	r3, [r7, #64]	; 0x40
 8008174:	2301      	movs	r3, #1
 8008176:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817a:	f383 8810 	msr	PRIMASK, r3
}
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2140      	movs	r1, #64	; 0x40
 800818c:	438a      	bics	r2, r1
 800818e:	609a      	str	r2, [r3, #8]
 8008190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008192:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	f383 8810 	msr	PRIMASK, r3
}
 800819a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800819c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819e:	228c      	movs	r2, #140	; 0x8c
 80081a0:	2120      	movs	r1, #32
 80081a2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d118      	bne.n	80081de <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ac:	f3ef 8310 	mrs	r3, PRIMASK
 80081b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80081b2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b6:	2301      	movs	r3, #1
 80081b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f383 8810 	msr	PRIMASK, r3
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2110      	movs	r1, #16
 80081ce:	438a      	bics	r2, r1
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f383 8810 	msr	PRIMASK, r3
}
 80081dc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e0:	2200      	movs	r2, #0
 80081e2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d108      	bne.n	80081fe <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ee:	225c      	movs	r2, #92	; 0x5c
 80081f0:	5a9a      	ldrh	r2, [r3, r2]
 80081f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f4:	0011      	movs	r1, r2
 80081f6:	0018      	movs	r0, r3
 80081f8:	f7ff f994 	bl	8007524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081fc:	e003      	b.n	8008206 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80081fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008200:	0018      	movs	r0, r3
 8008202:	f7fb fa59 	bl	80036b8 <HAL_UART_RxCpltCallback>
}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	46bd      	mov	sp, r7
 800820a:	b014      	add	sp, #80	; 0x50
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	fffffeff 	.word	0xfffffeff

08008214 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10a      	bne.n	8008246 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	225c      	movs	r2, #92	; 0x5c
 8008234:	5a9b      	ldrh	r3, [r3, r2]
 8008236:	085b      	lsrs	r3, r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	0011      	movs	r1, r2
 800823e:	0018      	movs	r0, r3
 8008240:	f7ff f970 	bl	8007524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008244:	e003      	b.n	800824e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	0018      	movs	r0, r3
 800824a:	f7ff f963 	bl	8007514 <HAL_UART_RxHalfCpltCallback>
}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	46bd      	mov	sp, r7
 8008252:	b004      	add	sp, #16
 8008254:	bd80      	pop	{r7, pc}

08008256 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2288      	movs	r2, #136	; 0x88
 8008268:	589b      	ldr	r3, [r3, r2]
 800826a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	228c      	movs	r2, #140	; 0x8c
 8008270:	589b      	ldr	r3, [r3, r2]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	4013      	ands	r3, r2
 800827e:	2b80      	cmp	r3, #128	; 0x80
 8008280:	d10a      	bne.n	8008298 <UART_DMAError+0x42>
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b21      	cmp	r3, #33	; 0x21
 8008286:	d107      	bne.n	8008298 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2256      	movs	r2, #86	; 0x56
 800828c:	2100      	movs	r1, #0
 800828e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	0018      	movs	r0, r3
 8008294:	f7ff fe80 	bl	8007f98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2240      	movs	r2, #64	; 0x40
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b40      	cmp	r3, #64	; 0x40
 80082a4:	d10a      	bne.n	80082bc <UART_DMAError+0x66>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b22      	cmp	r3, #34	; 0x22
 80082aa:	d107      	bne.n	80082bc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	225e      	movs	r2, #94	; 0x5e
 80082b0:	2100      	movs	r1, #0
 80082b2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	0018      	movs	r0, r3
 80082b8:	f7ff feae 	bl	8008018 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2290      	movs	r2, #144	; 0x90
 80082c0:	589b      	ldr	r3, [r3, r2]
 80082c2:	2210      	movs	r2, #16
 80082c4:	431a      	orrs	r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2190      	movs	r1, #144	; 0x90
 80082ca:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fb fa10 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d4:	46c0      	nop			; (mov r8, r8)
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b006      	add	sp, #24
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2284      	movs	r2, #132	; 0x84
 80082e8:	5c9b      	ldrb	r3, [r3, r2]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e027      	b.n	8008342 <HAL_UARTEx_DisableFifoMode+0x66>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2284      	movs	r2, #132	; 0x84
 80082f6:	2101      	movs	r1, #1
 80082f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2288      	movs	r2, #136	; 0x88
 80082fe:	2124      	movs	r1, #36	; 0x24
 8008300:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2101      	movs	r1, #1
 8008316:	438a      	bics	r2, r1
 8008318:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4a0b      	ldr	r2, [pc, #44]	; (800834c <HAL_UARTEx_DisableFifoMode+0x70>)
 800831e:	4013      	ands	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2288      	movs	r2, #136	; 0x88
 8008334:	2120      	movs	r1, #32
 8008336:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2284      	movs	r2, #132	; 0x84
 800833c:	2100      	movs	r1, #0
 800833e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	dfffffff 	.word	0xdfffffff

08008350 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2284      	movs	r2, #132	; 0x84
 800835e:	5c9b      	ldrb	r3, [r3, r2]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008364:	2302      	movs	r3, #2
 8008366:	e02e      	b.n	80083c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2284      	movs	r2, #132	; 0x84
 800836c:	2101      	movs	r1, #1
 800836e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2288      	movs	r2, #136	; 0x88
 8008374:	2124      	movs	r1, #36	; 0x24
 8008376:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2101      	movs	r1, #1
 800838c:	438a      	bics	r2, r1
 800838e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	08d9      	lsrs	r1, r3, #3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	0018      	movs	r0, r3
 80083a8:	f000 f854 	bl	8008454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2288      	movs	r2, #136	; 0x88
 80083b8:	2120      	movs	r1, #32
 80083ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2284      	movs	r2, #132	; 0x84
 80083c0:	2100      	movs	r1, #0
 80083c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	0018      	movs	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b004      	add	sp, #16
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2284      	movs	r2, #132	; 0x84
 80083de:	5c9b      	ldrb	r3, [r3, r2]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e02f      	b.n	8008448 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2284      	movs	r2, #132	; 0x84
 80083ec:	2101      	movs	r1, #1
 80083ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2288      	movs	r2, #136	; 0x88
 80083f4:	2124      	movs	r1, #36	; 0x24
 80083f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2101      	movs	r1, #1
 800840c:	438a      	bics	r2, r1
 800840e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	4a0e      	ldr	r2, [pc, #56]	; (8008450 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008418:	4013      	ands	r3, r2
 800841a:	0019      	movs	r1, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	0018      	movs	r0, r3
 800842a:	f000 f813 	bl	8008454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2288      	movs	r2, #136	; 0x88
 800843a:	2120      	movs	r1, #32
 800843c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2284      	movs	r2, #132	; 0x84
 8008442:	2100      	movs	r1, #0
 8008444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b004      	add	sp, #16
 800844e:	bd80      	pop	{r7, pc}
 8008450:	f1ffffff 	.word	0xf1ffffff

08008454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008460:	2b00      	cmp	r3, #0
 8008462:	d108      	bne.n	8008476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	226a      	movs	r2, #106	; 0x6a
 8008468:	2101      	movs	r1, #1
 800846a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2268      	movs	r2, #104	; 0x68
 8008470:	2101      	movs	r1, #1
 8008472:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008474:	e043      	b.n	80084fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008476:	260f      	movs	r6, #15
 8008478:	19bb      	adds	r3, r7, r6
 800847a:	2208      	movs	r2, #8
 800847c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800847e:	200e      	movs	r0, #14
 8008480:	183b      	adds	r3, r7, r0
 8008482:	2208      	movs	r2, #8
 8008484:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	0e5b      	lsrs	r3, r3, #25
 800848e:	b2da      	uxtb	r2, r3
 8008490:	240d      	movs	r4, #13
 8008492:	193b      	adds	r3, r7, r4
 8008494:	2107      	movs	r1, #7
 8008496:	400a      	ands	r2, r1
 8008498:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	0f5b      	lsrs	r3, r3, #29
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	250c      	movs	r5, #12
 80084a6:	197b      	adds	r3, r7, r5
 80084a8:	2107      	movs	r1, #7
 80084aa:	400a      	ands	r2, r1
 80084ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ae:	183b      	adds	r3, r7, r0
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	197a      	adds	r2, r7, r5
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	4914      	ldr	r1, [pc, #80]	; (8008508 <UARTEx_SetNbDataToProcess+0xb4>)
 80084b8:	5c8a      	ldrb	r2, [r1, r2]
 80084ba:	435a      	muls	r2, r3
 80084bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80084be:	197b      	adds	r3, r7, r5
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	4a12      	ldr	r2, [pc, #72]	; (800850c <UARTEx_SetNbDataToProcess+0xb8>)
 80084c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c6:	0019      	movs	r1, r3
 80084c8:	f7f7 fea6 	bl	8000218 <__divsi3>
 80084cc:	0003      	movs	r3, r0
 80084ce:	b299      	uxth	r1, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	226a      	movs	r2, #106	; 0x6a
 80084d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d6:	19bb      	adds	r3, r7, r6
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	193a      	adds	r2, r7, r4
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	490a      	ldr	r1, [pc, #40]	; (8008508 <UARTEx_SetNbDataToProcess+0xb4>)
 80084e0:	5c8a      	ldrb	r2, [r1, r2]
 80084e2:	435a      	muls	r2, r3
 80084e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e6:	193b      	adds	r3, r7, r4
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	4a08      	ldr	r2, [pc, #32]	; (800850c <UARTEx_SetNbDataToProcess+0xb8>)
 80084ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ee:	0019      	movs	r1, r3
 80084f0:	f7f7 fe92 	bl	8000218 <__divsi3>
 80084f4:	0003      	movs	r3, r0
 80084f6:	b299      	uxth	r1, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2268      	movs	r2, #104	; 0x68
 80084fc:	5299      	strh	r1, [r3, r2]
}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b005      	add	sp, #20
 8008504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	080086a0 	.word	0x080086a0
 800850c:	080086a8 	.word	0x080086a8

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	2600      	movs	r6, #0
 8008514:	4d0c      	ldr	r5, [pc, #48]	; (8008548 <__libc_init_array+0x38>)
 8008516:	4c0d      	ldr	r4, [pc, #52]	; (800854c <__libc_init_array+0x3c>)
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	42a6      	cmp	r6, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	2600      	movs	r6, #0
 8008522:	f000 f83d 	bl	80085a0 <_init>
 8008526:	4d0a      	ldr	r5, [pc, #40]	; (8008550 <__libc_init_array+0x40>)
 8008528:	4c0a      	ldr	r4, [pc, #40]	; (8008554 <__libc_init_array+0x44>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	42a6      	cmp	r6, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	00b3      	lsls	r3, r6, #2
 8008536:	58eb      	ldr	r3, [r5, r3]
 8008538:	4798      	blx	r3
 800853a:	3601      	adds	r6, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	00b3      	lsls	r3, r6, #2
 8008540:	58eb      	ldr	r3, [r5, r3]
 8008542:	4798      	blx	r3
 8008544:	3601      	adds	r6, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	080086b8 	.word	0x080086b8
 800854c:	080086b8 	.word	0x080086b8
 8008550:	080086b8 	.word	0x080086b8
 8008554:	080086bc 	.word	0x080086bc

08008558 <memcpy>:
 8008558:	2300      	movs	r3, #0
 800855a:	b510      	push	{r4, lr}
 800855c:	429a      	cmp	r2, r3
 800855e:	d100      	bne.n	8008562 <memcpy+0xa>
 8008560:	bd10      	pop	{r4, pc}
 8008562:	5ccc      	ldrb	r4, [r1, r3]
 8008564:	54c4      	strb	r4, [r0, r3]
 8008566:	3301      	adds	r3, #1
 8008568:	e7f8      	b.n	800855c <memcpy+0x4>

0800856a <memset>:
 800856a:	0003      	movs	r3, r0
 800856c:	1882      	adds	r2, r0, r2
 800856e:	4293      	cmp	r3, r2
 8008570:	d100      	bne.n	8008574 <memset+0xa>
 8008572:	4770      	bx	lr
 8008574:	7019      	strb	r1, [r3, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	e7f9      	b.n	800856e <memset+0x4>

0800857a <strncmp>:
 800857a:	b530      	push	{r4, r5, lr}
 800857c:	0005      	movs	r5, r0
 800857e:	1e10      	subs	r0, r2, #0
 8008580:	d008      	beq.n	8008594 <strncmp+0x1a>
 8008582:	2400      	movs	r4, #0
 8008584:	3a01      	subs	r2, #1
 8008586:	5d2b      	ldrb	r3, [r5, r4]
 8008588:	5d08      	ldrb	r0, [r1, r4]
 800858a:	4283      	cmp	r3, r0
 800858c:	d101      	bne.n	8008592 <strncmp+0x18>
 800858e:	4294      	cmp	r4, r2
 8008590:	d101      	bne.n	8008596 <strncmp+0x1c>
 8008592:	1a18      	subs	r0, r3, r0
 8008594:	bd30      	pop	{r4, r5, pc}
 8008596:	3401      	adds	r4, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f4      	bne.n	8008586 <strncmp+0xc>
 800859c:	e7f9      	b.n	8008592 <strncmp+0x18>
	...

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
