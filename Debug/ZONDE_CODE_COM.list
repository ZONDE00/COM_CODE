
ZONDE_CODE_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800b7b0  0800b7b0  0001b7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea4  0800bea4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beac  0800beac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb0  0800beb0  0001beb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800beb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  200001dc  0800c090  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  0800c090  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168a3  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  00036aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000398a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb59  00000000  00000000  0003bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177d1  00000000  00000000  00057ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af97a  00000000  00000000  0006f292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ec0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005afc  00000000  00000000  0011ec5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b794 	.word	0x0800b794

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	0800b794 	.word	0x0800b794

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fe13 	bl	8002064 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd63 	bl	8001f14 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe05 	bl	8002064 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdfb 	bl	8002064 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd8b 	bl	8001f98 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd81 	bl	8001f98 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 fd20 	bl	8002f48 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 fd1b 	bl	8002f48 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	46c6      	mov	lr, r8
 8000680:	0243      	lsls	r3, r0, #9
 8000682:	0a5b      	lsrs	r3, r3, #9
 8000684:	024e      	lsls	r6, r1, #9
 8000686:	0045      	lsls	r5, r0, #1
 8000688:	004f      	lsls	r7, r1, #1
 800068a:	00da      	lsls	r2, r3, #3
 800068c:	0fc4      	lsrs	r4, r0, #31
 800068e:	469c      	mov	ip, r3
 8000690:	0a70      	lsrs	r0, r6, #9
 8000692:	4690      	mov	r8, r2
 8000694:	b500      	push	{lr}
 8000696:	0e2d      	lsrs	r5, r5, #24
 8000698:	0e3f      	lsrs	r7, r7, #24
 800069a:	0fc9      	lsrs	r1, r1, #31
 800069c:	09b6      	lsrs	r6, r6, #6
 800069e:	428c      	cmp	r4, r1
 80006a0:	d04b      	beq.n	800073a <__aeabi_fadd+0xbe>
 80006a2:	1bea      	subs	r2, r5, r7
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	dd36      	ble.n	8000716 <__aeabi_fadd+0x9a>
 80006a8:	2f00      	cmp	r7, #0
 80006aa:	d061      	beq.n	8000770 <__aeabi_fadd+0xf4>
 80006ac:	2dff      	cmp	r5, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fadd+0x36>
 80006b0:	e0ad      	b.n	800080e <__aeabi_fadd+0x192>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	04db      	lsls	r3, r3, #19
 80006b6:	431e      	orrs	r6, r3
 80006b8:	2a1b      	cmp	r2, #27
 80006ba:	dc00      	bgt.n	80006be <__aeabi_fadd+0x42>
 80006bc:	e0d3      	b.n	8000866 <__aeabi_fadd+0x1ea>
 80006be:	2001      	movs	r0, #1
 80006c0:	4643      	mov	r3, r8
 80006c2:	1a18      	subs	r0, r3, r0
 80006c4:	0143      	lsls	r3, r0, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0x4e>
 80006c8:	e08c      	b.n	80007e4 <__aeabi_fadd+0x168>
 80006ca:	0180      	lsls	r0, r0, #6
 80006cc:	0987      	lsrs	r7, r0, #6
 80006ce:	0038      	movs	r0, r7
 80006d0:	f002 fc1c 	bl	8002f0c <__clzsi2>
 80006d4:	3805      	subs	r0, #5
 80006d6:	4087      	lsls	r7, r0
 80006d8:	4285      	cmp	r5, r0
 80006da:	dc00      	bgt.n	80006de <__aeabi_fadd+0x62>
 80006dc:	e0b6      	b.n	800084c <__aeabi_fadd+0x1d0>
 80006de:	1a2d      	subs	r5, r5, r0
 80006e0:	48b3      	ldr	r0, [pc, #716]	; (80009b0 <__aeabi_fadd+0x334>)
 80006e2:	4038      	ands	r0, r7
 80006e4:	0743      	lsls	r3, r0, #29
 80006e6:	d004      	beq.n	80006f2 <__aeabi_fadd+0x76>
 80006e8:	230f      	movs	r3, #15
 80006ea:	4003      	ands	r3, r0
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x76>
 80006f0:	3004      	adds	r0, #4
 80006f2:	0143      	lsls	r3, r0, #5
 80006f4:	d400      	bmi.n	80006f8 <__aeabi_fadd+0x7c>
 80006f6:	e078      	b.n	80007ea <__aeabi_fadd+0x16e>
 80006f8:	1c6a      	adds	r2, r5, #1
 80006fa:	2dfe      	cmp	r5, #254	; 0xfe
 80006fc:	d065      	beq.n	80007ca <__aeabi_fadd+0x14e>
 80006fe:	0180      	lsls	r0, r0, #6
 8000700:	0a43      	lsrs	r3, r0, #9
 8000702:	469c      	mov	ip, r3
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	4663      	mov	r3, ip
 8000708:	05d0      	lsls	r0, r2, #23
 800070a:	4318      	orrs	r0, r3
 800070c:	07e4      	lsls	r4, r4, #31
 800070e:	4320      	orrs	r0, r4
 8000710:	bc80      	pop	{r7}
 8000712:	46b8      	mov	r8, r7
 8000714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000716:	2a00      	cmp	r2, #0
 8000718:	d035      	beq.n	8000786 <__aeabi_fadd+0x10a>
 800071a:	1b7a      	subs	r2, r7, r5
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xa6>
 8000720:	e0af      	b.n	8000882 <__aeabi_fadd+0x206>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0xae>
 8000728:	e0a7      	b.n	800087a <__aeabi_fadd+0x1fe>
 800072a:	1e53      	subs	r3, r2, #1
 800072c:	2a01      	cmp	r2, #1
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0xb6>
 8000730:	e12f      	b.n	8000992 <__aeabi_fadd+0x316>
 8000732:	2aff      	cmp	r2, #255	; 0xff
 8000734:	d069      	beq.n	800080a <__aeabi_fadd+0x18e>
 8000736:	001a      	movs	r2, r3
 8000738:	e0aa      	b.n	8000890 <__aeabi_fadd+0x214>
 800073a:	1be9      	subs	r1, r5, r7
 800073c:	2900      	cmp	r1, #0
 800073e:	dd70      	ble.n	8000822 <__aeabi_fadd+0x1a6>
 8000740:	2f00      	cmp	r7, #0
 8000742:	d037      	beq.n	80007b4 <__aeabi_fadd+0x138>
 8000744:	2dff      	cmp	r5, #255	; 0xff
 8000746:	d062      	beq.n	800080e <__aeabi_fadd+0x192>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431e      	orrs	r6, r3
 800074e:	291b      	cmp	r1, #27
 8000750:	dc00      	bgt.n	8000754 <__aeabi_fadd+0xd8>
 8000752:	e0b0      	b.n	80008b6 <__aeabi_fadd+0x23a>
 8000754:	2001      	movs	r0, #1
 8000756:	4440      	add	r0, r8
 8000758:	0143      	lsls	r3, r0, #5
 800075a:	d543      	bpl.n	80007e4 <__aeabi_fadd+0x168>
 800075c:	3501      	adds	r5, #1
 800075e:	2dff      	cmp	r5, #255	; 0xff
 8000760:	d033      	beq.n	80007ca <__aeabi_fadd+0x14e>
 8000762:	2301      	movs	r3, #1
 8000764:	4a93      	ldr	r2, [pc, #588]	; (80009b4 <__aeabi_fadd+0x338>)
 8000766:	4003      	ands	r3, r0
 8000768:	0840      	lsrs	r0, r0, #1
 800076a:	4010      	ands	r0, r2
 800076c:	4318      	orrs	r0, r3
 800076e:	e7b9      	b.n	80006e4 <__aeabi_fadd+0x68>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0xfa>
 8000774:	e083      	b.n	800087e <__aeabi_fadd+0x202>
 8000776:	1e51      	subs	r1, r2, #1
 8000778:	2a01      	cmp	r2, #1
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x102>
 800077c:	e0d8      	b.n	8000930 <__aeabi_fadd+0x2b4>
 800077e:	2aff      	cmp	r2, #255	; 0xff
 8000780:	d045      	beq.n	800080e <__aeabi_fadd+0x192>
 8000782:	000a      	movs	r2, r1
 8000784:	e798      	b.n	80006b8 <__aeabi_fadd+0x3c>
 8000786:	27fe      	movs	r7, #254	; 0xfe
 8000788:	1c6a      	adds	r2, r5, #1
 800078a:	4217      	tst	r7, r2
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x114>
 800078e:	e086      	b.n	800089e <__aeabi_fadd+0x222>
 8000790:	2d00      	cmp	r5, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_fadd+0x11a>
 8000794:	e0b7      	b.n	8000906 <__aeabi_fadd+0x28a>
 8000796:	4643      	mov	r3, r8
 8000798:	2b00      	cmp	r3, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x122>
 800079c:	e0f3      	b.n	8000986 <__aeabi_fadd+0x30a>
 800079e:	2200      	movs	r2, #0
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d0b0      	beq.n	8000706 <__aeabi_fadd+0x8a>
 80007a4:	1b98      	subs	r0, r3, r6
 80007a6:	0143      	lsls	r3, r0, #5
 80007a8:	d400      	bmi.n	80007ac <__aeabi_fadd+0x130>
 80007aa:	e0fa      	b.n	80009a2 <__aeabi_fadd+0x326>
 80007ac:	4643      	mov	r3, r8
 80007ae:	000c      	movs	r4, r1
 80007b0:	1af0      	subs	r0, r6, r3
 80007b2:	e797      	b.n	80006e4 <__aeabi_fadd+0x68>
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x13e>
 80007b8:	e0c8      	b.n	800094c <__aeabi_fadd+0x2d0>
 80007ba:	1e4a      	subs	r2, r1, #1
 80007bc:	2901      	cmp	r1, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x146>
 80007c0:	e0ae      	b.n	8000920 <__aeabi_fadd+0x2a4>
 80007c2:	29ff      	cmp	r1, #255	; 0xff
 80007c4:	d023      	beq.n	800080e <__aeabi_fadd+0x192>
 80007c6:	0011      	movs	r1, r2
 80007c8:	e7c1      	b.n	800074e <__aeabi_fadd+0xd2>
 80007ca:	2300      	movs	r3, #0
 80007cc:	22ff      	movs	r2, #255	; 0xff
 80007ce:	469c      	mov	ip, r3
 80007d0:	e799      	b.n	8000706 <__aeabi_fadd+0x8a>
 80007d2:	21fe      	movs	r1, #254	; 0xfe
 80007d4:	1c6a      	adds	r2, r5, #1
 80007d6:	4211      	tst	r1, r2
 80007d8:	d077      	beq.n	80008ca <__aeabi_fadd+0x24e>
 80007da:	2aff      	cmp	r2, #255	; 0xff
 80007dc:	d0f5      	beq.n	80007ca <__aeabi_fadd+0x14e>
 80007de:	0015      	movs	r5, r2
 80007e0:	4446      	add	r6, r8
 80007e2:	0870      	lsrs	r0, r6, #1
 80007e4:	0743      	lsls	r3, r0, #29
 80007e6:	d000      	beq.n	80007ea <__aeabi_fadd+0x16e>
 80007e8:	e77e      	b.n	80006e8 <__aeabi_fadd+0x6c>
 80007ea:	08c3      	lsrs	r3, r0, #3
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d00e      	beq.n	800080e <__aeabi_fadd+0x192>
 80007f0:	025b      	lsls	r3, r3, #9
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	469c      	mov	ip, r3
 80007f6:	b2ea      	uxtb	r2, r5
 80007f8:	e785      	b.n	8000706 <__aeabi_fadd+0x8a>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d007      	beq.n	800080e <__aeabi_fadd+0x192>
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4213      	tst	r3, r2
 8000804:	d003      	beq.n	800080e <__aeabi_fadd+0x192>
 8000806:	4210      	tst	r0, r2
 8000808:	d101      	bne.n	800080e <__aeabi_fadd+0x192>
 800080a:	000c      	movs	r4, r1
 800080c:	0003      	movs	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0db      	beq.n	80007ca <__aeabi_fadd+0x14e>
 8000812:	2080      	movs	r0, #128	; 0x80
 8000814:	03c0      	lsls	r0, r0, #15
 8000816:	4318      	orrs	r0, r3
 8000818:	0240      	lsls	r0, r0, #9
 800081a:	0a43      	lsrs	r3, r0, #9
 800081c:	469c      	mov	ip, r3
 800081e:	22ff      	movs	r2, #255	; 0xff
 8000820:	e771      	b.n	8000706 <__aeabi_fadd+0x8a>
 8000822:	2900      	cmp	r1, #0
 8000824:	d0d5      	beq.n	80007d2 <__aeabi_fadd+0x156>
 8000826:	1b7a      	subs	r2, r7, r5
 8000828:	2d00      	cmp	r5, #0
 800082a:	d160      	bne.n	80008ee <__aeabi_fadd+0x272>
 800082c:	4643      	mov	r3, r8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d024      	beq.n	800087c <__aeabi_fadd+0x200>
 8000832:	1e53      	subs	r3, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d073      	beq.n	8000920 <__aeabi_fadd+0x2a4>
 8000838:	2aff      	cmp	r2, #255	; 0xff
 800083a:	d0e7      	beq.n	800080c <__aeabi_fadd+0x190>
 800083c:	001a      	movs	r2, r3
 800083e:	2a1b      	cmp	r2, #27
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fadd+0x1c8>
 8000842:	e085      	b.n	8000950 <__aeabi_fadd+0x2d4>
 8000844:	2001      	movs	r0, #1
 8000846:	003d      	movs	r5, r7
 8000848:	1980      	adds	r0, r0, r6
 800084a:	e785      	b.n	8000758 <__aeabi_fadd+0xdc>
 800084c:	2320      	movs	r3, #32
 800084e:	003a      	movs	r2, r7
 8000850:	1b45      	subs	r5, r0, r5
 8000852:	0038      	movs	r0, r7
 8000854:	3501      	adds	r5, #1
 8000856:	40ea      	lsrs	r2, r5
 8000858:	1b5d      	subs	r5, r3, r5
 800085a:	40a8      	lsls	r0, r5
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	2500      	movs	r5, #0
 8000862:	4310      	orrs	r0, r2
 8000864:	e73e      	b.n	80006e4 <__aeabi_fadd+0x68>
 8000866:	2320      	movs	r3, #32
 8000868:	0030      	movs	r0, r6
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	0031      	movs	r1, r6
 800086e:	4098      	lsls	r0, r3
 8000870:	40d1      	lsrs	r1, r2
 8000872:	1e43      	subs	r3, r0, #1
 8000874:	4198      	sbcs	r0, r3
 8000876:	4308      	orrs	r0, r1
 8000878:	e722      	b.n	80006c0 <__aeabi_fadd+0x44>
 800087a:	000c      	movs	r4, r1
 800087c:	0003      	movs	r3, r0
 800087e:	0015      	movs	r5, r2
 8000880:	e7b4      	b.n	80007ec <__aeabi_fadd+0x170>
 8000882:	2fff      	cmp	r7, #255	; 0xff
 8000884:	d0c1      	beq.n	800080a <__aeabi_fadd+0x18e>
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	4640      	mov	r0, r8
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	4318      	orrs	r0, r3
 800088e:	4680      	mov	r8, r0
 8000890:	2a1b      	cmp	r2, #27
 8000892:	dd51      	ble.n	8000938 <__aeabi_fadd+0x2bc>
 8000894:	2001      	movs	r0, #1
 8000896:	000c      	movs	r4, r1
 8000898:	003d      	movs	r5, r7
 800089a:	1a30      	subs	r0, r6, r0
 800089c:	e712      	b.n	80006c4 <__aeabi_fadd+0x48>
 800089e:	4643      	mov	r3, r8
 80008a0:	1b9f      	subs	r7, r3, r6
 80008a2:	017b      	lsls	r3, r7, #5
 80008a4:	d42b      	bmi.n	80008fe <__aeabi_fadd+0x282>
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fadd+0x230>
 80008aa:	e710      	b.n	80006ce <__aeabi_fadd+0x52>
 80008ac:	2300      	movs	r3, #0
 80008ae:	2400      	movs	r4, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	469c      	mov	ip, r3
 80008b4:	e727      	b.n	8000706 <__aeabi_fadd+0x8a>
 80008b6:	2320      	movs	r3, #32
 80008b8:	0032      	movs	r2, r6
 80008ba:	0030      	movs	r0, r6
 80008bc:	40ca      	lsrs	r2, r1
 80008be:	1a59      	subs	r1, r3, r1
 80008c0:	4088      	lsls	r0, r1
 80008c2:	1e43      	subs	r3, r0, #1
 80008c4:	4198      	sbcs	r0, r3
 80008c6:	4310      	orrs	r0, r2
 80008c8:	e745      	b.n	8000756 <__aeabi_fadd+0xda>
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	d14a      	bne.n	8000964 <__aeabi_fadd+0x2e8>
 80008ce:	4643      	mov	r3, r8
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d063      	beq.n	800099c <__aeabi_fadd+0x320>
 80008d4:	2200      	movs	r2, #0
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x260>
 80008da:	e714      	b.n	8000706 <__aeabi_fadd+0x8a>
 80008dc:	0030      	movs	r0, r6
 80008de:	4440      	add	r0, r8
 80008e0:	0143      	lsls	r3, r0, #5
 80008e2:	d400      	bmi.n	80008e6 <__aeabi_fadd+0x26a>
 80008e4:	e77e      	b.n	80007e4 <__aeabi_fadd+0x168>
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <__aeabi_fadd+0x334>)
 80008e8:	3501      	adds	r5, #1
 80008ea:	4018      	ands	r0, r3
 80008ec:	e77a      	b.n	80007e4 <__aeabi_fadd+0x168>
 80008ee:	2fff      	cmp	r7, #255	; 0xff
 80008f0:	d08c      	beq.n	800080c <__aeabi_fadd+0x190>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	4641      	mov	r1, r8
 80008f6:	04db      	lsls	r3, r3, #19
 80008f8:	4319      	orrs	r1, r3
 80008fa:	4688      	mov	r8, r1
 80008fc:	e79f      	b.n	800083e <__aeabi_fadd+0x1c2>
 80008fe:	4643      	mov	r3, r8
 8000900:	000c      	movs	r4, r1
 8000902:	1af7      	subs	r7, r6, r3
 8000904:	e6e3      	b.n	80006ce <__aeabi_fadd+0x52>
 8000906:	4642      	mov	r2, r8
 8000908:	2a00      	cmp	r2, #0
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x292>
 800090c:	e775      	b.n	80007fa <__aeabi_fadd+0x17e>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x298>
 8000912:	e77a      	b.n	800080a <__aeabi_fadd+0x18e>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	03db      	lsls	r3, r3, #15
 8000918:	2400      	movs	r4, #0
 800091a:	469c      	mov	ip, r3
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	e6f2      	b.n	8000706 <__aeabi_fadd+0x8a>
 8000920:	0030      	movs	r0, r6
 8000922:	4440      	add	r0, r8
 8000924:	2501      	movs	r5, #1
 8000926:	0143      	lsls	r3, r0, #5
 8000928:	d400      	bmi.n	800092c <__aeabi_fadd+0x2b0>
 800092a:	e75b      	b.n	80007e4 <__aeabi_fadd+0x168>
 800092c:	2502      	movs	r5, #2
 800092e:	e718      	b.n	8000762 <__aeabi_fadd+0xe6>
 8000930:	4643      	mov	r3, r8
 8000932:	2501      	movs	r5, #1
 8000934:	1b98      	subs	r0, r3, r6
 8000936:	e6c5      	b.n	80006c4 <__aeabi_fadd+0x48>
 8000938:	2320      	movs	r3, #32
 800093a:	4644      	mov	r4, r8
 800093c:	4640      	mov	r0, r8
 800093e:	40d4      	lsrs	r4, r2
 8000940:	1a9a      	subs	r2, r3, r2
 8000942:	4090      	lsls	r0, r2
 8000944:	1e43      	subs	r3, r0, #1
 8000946:	4198      	sbcs	r0, r3
 8000948:	4320      	orrs	r0, r4
 800094a:	e7a4      	b.n	8000896 <__aeabi_fadd+0x21a>
 800094c:	000d      	movs	r5, r1
 800094e:	e74d      	b.n	80007ec <__aeabi_fadd+0x170>
 8000950:	2320      	movs	r3, #32
 8000952:	4641      	mov	r1, r8
 8000954:	4640      	mov	r0, r8
 8000956:	40d1      	lsrs	r1, r2
 8000958:	1a9a      	subs	r2, r3, r2
 800095a:	4090      	lsls	r0, r2
 800095c:	1e43      	subs	r3, r0, #1
 800095e:	4198      	sbcs	r0, r3
 8000960:	4308      	orrs	r0, r1
 8000962:	e770      	b.n	8000846 <__aeabi_fadd+0x1ca>
 8000964:	4642      	mov	r2, r8
 8000966:	2a00      	cmp	r2, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x2f0>
 800096a:	e74f      	b.n	800080c <__aeabi_fadd+0x190>
 800096c:	2e00      	cmp	r6, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fadd+0x2f6>
 8000970:	e74d      	b.n	800080e <__aeabi_fadd+0x192>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	4213      	tst	r3, r2
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x300>
 800097a:	e748      	b.n	800080e <__aeabi_fadd+0x192>
 800097c:	4210      	tst	r0, r2
 800097e:	d000      	beq.n	8000982 <__aeabi_fadd+0x306>
 8000980:	e745      	b.n	800080e <__aeabi_fadd+0x192>
 8000982:	0003      	movs	r3, r0
 8000984:	e743      	b.n	800080e <__aeabi_fadd+0x192>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d090      	beq.n	80008ac <__aeabi_fadd+0x230>
 800098a:	000c      	movs	r4, r1
 800098c:	4684      	mov	ip, r0
 800098e:	2200      	movs	r2, #0
 8000990:	e6b9      	b.n	8000706 <__aeabi_fadd+0x8a>
 8000992:	4643      	mov	r3, r8
 8000994:	000c      	movs	r4, r1
 8000996:	1af0      	subs	r0, r6, r3
 8000998:	3501      	adds	r5, #1
 800099a:	e693      	b.n	80006c4 <__aeabi_fadd+0x48>
 800099c:	4684      	mov	ip, r0
 800099e:	2200      	movs	r2, #0
 80009a0:	e6b1      	b.n	8000706 <__aeabi_fadd+0x8a>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fadd+0x32c>
 80009a6:	e71d      	b.n	80007e4 <__aeabi_fadd+0x168>
 80009a8:	2300      	movs	r3, #0
 80009aa:	2400      	movs	r4, #0
 80009ac:	469c      	mov	ip, r3
 80009ae:	e6aa      	b.n	8000706 <__aeabi_fadd+0x8a>
 80009b0:	fbffffff 	.word	0xfbffffff
 80009b4:	7dffffff 	.word	0x7dffffff

080009b8 <__aeabi_fdiv>:
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	464f      	mov	r7, r9
 80009bc:	4646      	mov	r6, r8
 80009be:	46d6      	mov	lr, sl
 80009c0:	0245      	lsls	r5, r0, #9
 80009c2:	b5c0      	push	{r6, r7, lr}
 80009c4:	0047      	lsls	r7, r0, #1
 80009c6:	1c0c      	adds	r4, r1, #0
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	0e3f      	lsrs	r7, r7, #24
 80009cc:	0fc6      	lsrs	r6, r0, #31
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fdiv+0x1c>
 80009d2:	e070      	b.n	8000ab6 <__aeabi_fdiv+0xfe>
 80009d4:	2fff      	cmp	r7, #255	; 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fdiv+0x22>
 80009d8:	e075      	b.n	8000ac6 <__aeabi_fdiv+0x10e>
 80009da:	00eb      	lsls	r3, r5, #3
 80009dc:	2580      	movs	r5, #128	; 0x80
 80009de:	04ed      	lsls	r5, r5, #19
 80009e0:	431d      	orrs	r5, r3
 80009e2:	2300      	movs	r3, #0
 80009e4:	4699      	mov	r9, r3
 80009e6:	469a      	mov	sl, r3
 80009e8:	3f7f      	subs	r7, #127	; 0x7f
 80009ea:	0260      	lsls	r0, r4, #9
 80009ec:	0a43      	lsrs	r3, r0, #9
 80009ee:	4698      	mov	r8, r3
 80009f0:	0063      	lsls	r3, r4, #1
 80009f2:	0e1b      	lsrs	r3, r3, #24
 80009f4:	0fe4      	lsrs	r4, r4, #31
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d04e      	beq.n	8000a98 <__aeabi_fdiv+0xe0>
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d046      	beq.n	8000a8c <__aeabi_fdiv+0xd4>
 80009fe:	4642      	mov	r2, r8
 8000a00:	00d0      	lsls	r0, r2, #3
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	04d2      	lsls	r2, r2, #19
 8000a06:	4302      	orrs	r2, r0
 8000a08:	4690      	mov	r8, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	3b7f      	subs	r3, #127	; 0x7f
 8000a0e:	0031      	movs	r1, r6
 8000a10:	1aff      	subs	r7, r7, r3
 8000a12:	464b      	mov	r3, r9
 8000a14:	4061      	eors	r1, r4
 8000a16:	b2c9      	uxtb	r1, r1
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d900      	bls.n	8000a20 <__aeabi_fdiv+0x68>
 8000a1e:	e0b5      	b.n	8000b8c <__aeabi_fdiv+0x1d4>
 8000a20:	486e      	ldr	r0, [pc, #440]	; (8000bdc <__aeabi_fdiv+0x224>)
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	58c3      	ldr	r3, [r0, r3]
 8000a26:	469f      	mov	pc, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	0026      	movs	r6, r4
 8000a2e:	4645      	mov	r5, r8
 8000a30:	4692      	mov	sl, r2
 8000a32:	4653      	mov	r3, sl
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fdiv+0x82>
 8000a38:	e089      	b.n	8000b4e <__aeabi_fdiv+0x196>
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fdiv+0x88>
 8000a3e:	e09e      	b.n	8000b7e <__aeabi_fdiv+0x1c6>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d018      	beq.n	8000a76 <__aeabi_fdiv+0xbe>
 8000a44:	003b      	movs	r3, r7
 8000a46:	337f      	adds	r3, #127	; 0x7f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dd69      	ble.n	8000b20 <__aeabi_fdiv+0x168>
 8000a4c:	076a      	lsls	r2, r5, #29
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fdiv+0xa2>
 8000a50:	220f      	movs	r2, #15
 8000a52:	402a      	ands	r2, r5
 8000a54:	2a04      	cmp	r2, #4
 8000a56:	d000      	beq.n	8000a5a <__aeabi_fdiv+0xa2>
 8000a58:	3504      	adds	r5, #4
 8000a5a:	012a      	lsls	r2, r5, #4
 8000a5c:	d503      	bpl.n	8000a66 <__aeabi_fdiv+0xae>
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <__aeabi_fdiv+0x228>)
 8000a60:	401d      	ands	r5, r3
 8000a62:	003b      	movs	r3, r7
 8000a64:	3380      	adds	r3, #128	; 0x80
 8000a66:	2bfe      	cmp	r3, #254	; 0xfe
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_fdiv+0xb4>
 8000a6a:	e070      	b.n	8000b4e <__aeabi_fdiv+0x196>
 8000a6c:	01ad      	lsls	r5, r5, #6
 8000a6e:	0a6d      	lsrs	r5, r5, #9
 8000a70:	b2d8      	uxtb	r0, r3
 8000a72:	e002      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000a74:	000e      	movs	r6, r1
 8000a76:	2000      	movs	r0, #0
 8000a78:	2500      	movs	r5, #0
 8000a7a:	05c0      	lsls	r0, r0, #23
 8000a7c:	4328      	orrs	r0, r5
 8000a7e:	07f6      	lsls	r6, r6, #31
 8000a80:	4330      	orrs	r0, r6
 8000a82:	bce0      	pop	{r5, r6, r7}
 8000a84:	46ba      	mov	sl, r7
 8000a86:	46b1      	mov	r9, r6
 8000a88:	46a8      	mov	r8, r5
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	4643      	mov	r3, r8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d13f      	bne.n	8000b12 <__aeabi_fdiv+0x15a>
 8000a92:	2202      	movs	r2, #2
 8000a94:	3fff      	subs	r7, #255	; 0xff
 8000a96:	e003      	b.n	8000aa0 <__aeabi_fdiv+0xe8>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d12d      	bne.n	8000afa <__aeabi_fdiv+0x142>
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	0031      	movs	r1, r6
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4061      	eors	r1, r4
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d834      	bhi.n	8000b18 <__aeabi_fdiv+0x160>
 8000aae:	484d      	ldr	r0, [pc, #308]	; (8000be4 <__aeabi_fdiv+0x22c>)
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	58c3      	ldr	r3, [r0, r3]
 8000ab4:	469f      	mov	pc, r3
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d113      	bne.n	8000ae2 <__aeabi_fdiv+0x12a>
 8000aba:	2304      	movs	r3, #4
 8000abc:	4699      	mov	r9, r3
 8000abe:	3b03      	subs	r3, #3
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	e791      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d105      	bne.n	8000ad6 <__aeabi_fdiv+0x11e>
 8000aca:	2308      	movs	r3, #8
 8000acc:	4699      	mov	r9, r3
 8000ace:	3b06      	subs	r3, #6
 8000ad0:	27ff      	movs	r7, #255	; 0xff
 8000ad2:	469a      	mov	sl, r3
 8000ad4:	e789      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	4699      	mov	r9, r3
 8000ada:	3b09      	subs	r3, #9
 8000adc:	27ff      	movs	r7, #255	; 0xff
 8000ade:	469a      	mov	sl, r3
 8000ae0:	e783      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ae2:	0028      	movs	r0, r5
 8000ae4:	f002 fa12 	bl	8002f0c <__clzsi2>
 8000ae8:	2776      	movs	r7, #118	; 0x76
 8000aea:	1f43      	subs	r3, r0, #5
 8000aec:	409d      	lsls	r5, r3
 8000aee:	2300      	movs	r3, #0
 8000af0:	427f      	negs	r7, r7
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	1a3f      	subs	r7, r7, r0
 8000af8:	e777      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000afa:	4640      	mov	r0, r8
 8000afc:	f002 fa06 	bl	8002f0c <__clzsi2>
 8000b00:	4642      	mov	r2, r8
 8000b02:	1f43      	subs	r3, r0, #5
 8000b04:	409a      	lsls	r2, r3
 8000b06:	2376      	movs	r3, #118	; 0x76
 8000b08:	425b      	negs	r3, r3
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	e77d      	b.n	8000a0e <__aeabi_fdiv+0x56>
 8000b12:	23ff      	movs	r3, #255	; 0xff
 8000b14:	2203      	movs	r2, #3
 8000b16:	e77a      	b.n	8000a0e <__aeabi_fdiv+0x56>
 8000b18:	000e      	movs	r6, r1
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	2500      	movs	r5, #0
 8000b1e:	e7ac      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b20:	2001      	movs	r0, #1
 8000b22:	1ac0      	subs	r0, r0, r3
 8000b24:	281b      	cmp	r0, #27
 8000b26:	dca6      	bgt.n	8000a76 <__aeabi_fdiv+0xbe>
 8000b28:	379e      	adds	r7, #158	; 0x9e
 8000b2a:	002a      	movs	r2, r5
 8000b2c:	40bd      	lsls	r5, r7
 8000b2e:	40c2      	lsrs	r2, r0
 8000b30:	1e6b      	subs	r3, r5, #1
 8000b32:	419d      	sbcs	r5, r3
 8000b34:	4315      	orrs	r5, r2
 8000b36:	076b      	lsls	r3, r5, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fdiv+0x18c>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	402b      	ands	r3, r5
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fdiv+0x18c>
 8000b42:	3504      	adds	r5, #4
 8000b44:	016b      	lsls	r3, r5, #5
 8000b46:	d544      	bpl.n	8000bd2 <__aeabi_fdiv+0x21a>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	e795      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b4e:	20ff      	movs	r0, #255	; 0xff
 8000b50:	2500      	movs	r5, #0
 8000b52:	e792      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b54:	2580      	movs	r5, #128	; 0x80
 8000b56:	2600      	movs	r6, #0
 8000b58:	20ff      	movs	r0, #255	; 0xff
 8000b5a:	03ed      	lsls	r5, r5, #15
 8000b5c:	e78d      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	4698      	mov	r8, r3
 8000b62:	2080      	movs	r0, #128	; 0x80
 8000b64:	03c0      	lsls	r0, r0, #15
 8000b66:	4205      	tst	r5, r0
 8000b68:	d009      	beq.n	8000b7e <__aeabi_fdiv+0x1c6>
 8000b6a:	4643      	mov	r3, r8
 8000b6c:	4203      	tst	r3, r0
 8000b6e:	d106      	bne.n	8000b7e <__aeabi_fdiv+0x1c6>
 8000b70:	4645      	mov	r5, r8
 8000b72:	4305      	orrs	r5, r0
 8000b74:	026d      	lsls	r5, r5, #9
 8000b76:	0026      	movs	r6, r4
 8000b78:	20ff      	movs	r0, #255	; 0xff
 8000b7a:	0a6d      	lsrs	r5, r5, #9
 8000b7c:	e77d      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b7e:	2080      	movs	r0, #128	; 0x80
 8000b80:	03c0      	lsls	r0, r0, #15
 8000b82:	4305      	orrs	r5, r0
 8000b84:	026d      	lsls	r5, r5, #9
 8000b86:	20ff      	movs	r0, #255	; 0xff
 8000b88:	0a6d      	lsrs	r5, r5, #9
 8000b8a:	e776      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b8c:	4642      	mov	r2, r8
 8000b8e:	016b      	lsls	r3, r5, #5
 8000b90:	0150      	lsls	r0, r2, #5
 8000b92:	4283      	cmp	r3, r0
 8000b94:	d219      	bcs.n	8000bca <__aeabi_fdiv+0x212>
 8000b96:	221b      	movs	r2, #27
 8000b98:	2500      	movs	r5, #0
 8000b9a:	3f01      	subs	r7, #1
 8000b9c:	2601      	movs	r6, #1
 8000b9e:	001c      	movs	r4, r3
 8000ba0:	006d      	lsls	r5, r5, #1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	db01      	blt.n	8000bac <__aeabi_fdiv+0x1f4>
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d801      	bhi.n	8000bb0 <__aeabi_fdiv+0x1f8>
 8000bac:	1a1b      	subs	r3, r3, r0
 8000bae:	4335      	orrs	r5, r6
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d1f3      	bne.n	8000b9e <__aeabi_fdiv+0x1e6>
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	4193      	sbcs	r3, r2
 8000bba:	431d      	orrs	r5, r3
 8000bbc:	003b      	movs	r3, r7
 8000bbe:	337f      	adds	r3, #127	; 0x7f
 8000bc0:	000e      	movs	r6, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_fdiv+0x210>
 8000bc6:	e741      	b.n	8000a4c <__aeabi_fdiv+0x94>
 8000bc8:	e7aa      	b.n	8000b20 <__aeabi_fdiv+0x168>
 8000bca:	221a      	movs	r2, #26
 8000bcc:	2501      	movs	r5, #1
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	e7e4      	b.n	8000b9c <__aeabi_fdiv+0x1e4>
 8000bd2:	01ad      	lsls	r5, r5, #6
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0a6d      	lsrs	r5, r5, #9
 8000bd8:	e74f      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	0800b904 	.word	0x0800b904
 8000be0:	f7ffffff 	.word	0xf7ffffff
 8000be4:	0800b944 	.word	0x0800b944

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0244      	lsls	r4, r0, #9
 8000bf2:	0045      	lsls	r5, r0, #1
 8000bf4:	b5c0      	push	{r6, r7, lr}
 8000bf6:	0a64      	lsrs	r4, r4, #9
 8000bf8:	1c0f      	adds	r7, r1, #0
 8000bfa:	0e2d      	lsrs	r5, r5, #24
 8000bfc:	0fc6      	lsrs	r6, r0, #31
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e08d      	b.n	8000d20 <__aeabi_fmul+0x138>
 8000c04:	2dff      	cmp	r5, #255	; 0xff
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x22>
 8000c08:	e092      	b.n	8000d30 <__aeabi_fmul+0x148>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2080      	movs	r0, #128	; 0x80
 8000c0e:	4699      	mov	r9, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	04c0      	lsls	r0, r0, #19
 8000c16:	4304      	orrs	r4, r0
 8000c18:	3d7f      	subs	r5, #127	; 0x7f
 8000c1a:	0278      	lsls	r0, r7, #9
 8000c1c:	0a43      	lsrs	r3, r0, #9
 8000c1e:	4698      	mov	r8, r3
 8000c20:	007b      	lsls	r3, r7, #1
 8000c22:	0e1b      	lsrs	r3, r3, #24
 8000c24:	0fff      	lsrs	r7, r7, #31
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x44>
 8000c2a:	e070      	b.n	8000d0e <__aeabi_fmul+0x126>
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fmul+0x4a>
 8000c30:	e086      	b.n	8000d40 <__aeabi_fmul+0x158>
 8000c32:	4642      	mov	r2, r8
 8000c34:	00d0      	lsls	r0, r2, #3
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	3b7f      	subs	r3, #127	; 0x7f
 8000c3a:	18ed      	adds	r5, r5, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	04d2      	lsls	r2, r2, #19
 8000c40:	4302      	orrs	r2, r0
 8000c42:	4690      	mov	r8, r2
 8000c44:	469c      	mov	ip, r3
 8000c46:	0031      	movs	r1, r6
 8000c48:	464b      	mov	r3, r9
 8000c4a:	4079      	eors	r1, r7
 8000c4c:	1c68      	adds	r0, r5, #1
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d81c      	bhi.n	8000c8c <__aeabi_fmul+0xa4>
 8000c52:	4a76      	ldr	r2, [pc, #472]	; (8000e2c <__aeabi_fmul+0x244>)
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	58d3      	ldr	r3, [r2, r3]
 8000c58:	469f      	mov	pc, r3
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	4644      	mov	r4, r8
 8000c5e:	46e2      	mov	sl, ip
 8000c60:	4653      	mov	r3, sl
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d00f      	beq.n	8000c86 <__aeabi_fmul+0x9e>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fmul+0x84>
 8000c6a:	e0d7      	b.n	8000e1c <__aeabi_fmul+0x234>
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d137      	bne.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c70:	2000      	movs	r0, #0
 8000c72:	2400      	movs	r4, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4320      	orrs	r0, r4
 8000c78:	07c9      	lsls	r1, r1, #31
 8000c7a:	4308      	orrs	r0, r1
 8000c7c:	bce0      	pop	{r5, r6, r7}
 8000c7e:	46ba      	mov	sl, r7
 8000c80:	46b1      	mov	r9, r6
 8000c82:	46a8      	mov	r8, r5
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	2400      	movs	r4, #0
 8000c8a:	e7f3      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000c8c:	0c26      	lsrs	r6, r4, #16
 8000c8e:	0424      	lsls	r4, r4, #16
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	4644      	mov	r4, r8
 8000c94:	0424      	lsls	r4, r4, #16
 8000c96:	0c24      	lsrs	r4, r4, #16
 8000c98:	4643      	mov	r3, r8
 8000c9a:	0027      	movs	r7, r4
 8000c9c:	0c1b      	lsrs	r3, r3, #16
 8000c9e:	4357      	muls	r7, r2
 8000ca0:	4374      	muls	r4, r6
 8000ca2:	435a      	muls	r2, r3
 8000ca4:	435e      	muls	r6, r3
 8000ca6:	1912      	adds	r2, r2, r4
 8000ca8:	0c3b      	lsrs	r3, r7, #16
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	429c      	cmp	r4, r3
 8000cae:	d903      	bls.n	8000cb8 <__aeabi_fmul+0xd0>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0252      	lsls	r2, r2, #9
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	4466      	add	r6, ip
 8000cb8:	043f      	lsls	r7, r7, #16
 8000cba:	041a      	lsls	r2, r3, #16
 8000cbc:	0c3f      	lsrs	r7, r7, #16
 8000cbe:	19d2      	adds	r2, r2, r7
 8000cc0:	0194      	lsls	r4, r2, #6
 8000cc2:	1e67      	subs	r7, r4, #1
 8000cc4:	41bc      	sbcs	r4, r7
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	0e92      	lsrs	r2, r2, #26
 8000cca:	199b      	adds	r3, r3, r6
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	019b      	lsls	r3, r3, #6
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fmul+0xf0>
 8000cd6:	e09b      	b.n	8000e10 <__aeabi_fmul+0x228>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	0862      	lsrs	r2, r4, #1
 8000cdc:	401c      	ands	r4, r3
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	327f      	adds	r2, #127	; 0x7f
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	dd64      	ble.n	8000db2 <__aeabi_fmul+0x1ca>
 8000ce8:	0763      	lsls	r3, r4, #29
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cec:	230f      	movs	r3, #15
 8000cee:	4023      	ands	r3, r4
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cf4:	3404      	adds	r4, #4
 8000cf6:	0123      	lsls	r3, r4, #4
 8000cf8:	d503      	bpl.n	8000d02 <__aeabi_fmul+0x11a>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <__aeabi_fmul+0x248>)
 8000cfe:	3280      	adds	r2, #128	; 0x80
 8000d00:	401c      	ands	r4, r3
 8000d02:	2afe      	cmp	r2, #254	; 0xfe
 8000d04:	dcbf      	bgt.n	8000c86 <__aeabi_fmul+0x9e>
 8000d06:	01a4      	lsls	r4, r4, #6
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	b2d0      	uxtb	r0, r2
 8000d0c:	e7b2      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13d      	bne.n	8000d90 <__aeabi_fmul+0x1a8>
 8000d14:	464a      	mov	r2, r9
 8000d16:	3301      	adds	r3, #1
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	e792      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d20:	2c00      	cmp	r4, #0
 8000d22:	d129      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d24:	2304      	movs	r3, #4
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	e774      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d11b      	bne.n	8000d6c <__aeabi_fmul+0x184>
 8000d34:	2308      	movs	r3, #8
 8000d36:	4699      	mov	r9, r3
 8000d38:	3b06      	subs	r3, #6
 8000d3a:	25ff      	movs	r5, #255	; 0xff
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	e76c      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d40:	4643      	mov	r3, r8
 8000d42:	35ff      	adds	r5, #255	; 0xff
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10b      	bne.n	8000d60 <__aeabi_fmul+0x178>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	469c      	mov	ip, r3
 8000d52:	e778      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d54:	4653      	mov	r3, sl
 8000d56:	0031      	movs	r1, r6
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x176>
 8000d5c:	e783      	b.n	8000c66 <__aeabi_fmul+0x7e>
 8000d5e:	e792      	b.n	8000c86 <__aeabi_fmul+0x9e>
 8000d60:	2303      	movs	r3, #3
 8000d62:	464a      	mov	r2, r9
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	469c      	mov	ip, r3
 8000d6a:	e76c      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	4699      	mov	r9, r3
 8000d70:	3b09      	subs	r3, #9
 8000d72:	25ff      	movs	r5, #255	; 0xff
 8000d74:	469a      	mov	sl, r3
 8000d76:	e750      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f002 f8c7 	bl	8002f0c <__clzsi2>
 8000d7e:	2576      	movs	r5, #118	; 0x76
 8000d80:	1f43      	subs	r3, r0, #5
 8000d82:	409c      	lsls	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	426d      	negs	r5, r5
 8000d88:	4699      	mov	r9, r3
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	e744      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d90:	4640      	mov	r0, r8
 8000d92:	f002 f8bb 	bl	8002f0c <__clzsi2>
 8000d96:	4642      	mov	r2, r8
 8000d98:	1f43      	subs	r3, r0, #5
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4690      	mov	r8, r2
 8000da2:	469c      	mov	ip, r3
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e74e      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	2100      	movs	r1, #0
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	03e4      	lsls	r4, r4, #15
 8000db0:	e760      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000db2:	2301      	movs	r3, #1
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	2b1b      	cmp	r3, #27
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_fmul+0x1d4>
 8000dba:	e759      	b.n	8000c70 <__aeabi_fmul+0x88>
 8000dbc:	0022      	movs	r2, r4
 8000dbe:	309e      	adds	r0, #158	; 0x9e
 8000dc0:	40da      	lsrs	r2, r3
 8000dc2:	4084      	lsls	r4, r0
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	1e62      	subs	r2, r4, #1
 8000dc8:	4194      	sbcs	r4, r2
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	0763      	lsls	r3, r4, #29
 8000dce:	d004      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d000      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd8:	3404      	adds	r4, #4
 8000dda:	0163      	lsls	r3, r4, #5
 8000ddc:	d51a      	bpl.n	8000e14 <__aeabi_fmul+0x22c>
 8000dde:	2001      	movs	r0, #1
 8000de0:	2400      	movs	r4, #0
 8000de2:	e747      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000de4:	2080      	movs	r0, #128	; 0x80
 8000de6:	03c0      	lsls	r0, r0, #15
 8000de8:	4204      	tst	r4, r0
 8000dea:	d009      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000dec:	4643      	mov	r3, r8
 8000dee:	4203      	tst	r3, r0
 8000df0:	d106      	bne.n	8000e00 <__aeabi_fmul+0x218>
 8000df2:	4644      	mov	r4, r8
 8000df4:	4304      	orrs	r4, r0
 8000df6:	0264      	lsls	r4, r4, #9
 8000df8:	0039      	movs	r1, r7
 8000dfa:	20ff      	movs	r0, #255	; 0xff
 8000dfc:	0a64      	lsrs	r4, r4, #9
 8000dfe:	e739      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4304      	orrs	r4, r0
 8000e06:	0264      	lsls	r4, r4, #9
 8000e08:	0031      	movs	r1, r6
 8000e0a:	20ff      	movs	r0, #255	; 0xff
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	e731      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e10:	0028      	movs	r0, r5
 8000e12:	e765      	b.n	8000ce0 <__aeabi_fmul+0xf8>
 8000e14:	01a4      	lsls	r4, r4, #6
 8000e16:	2000      	movs	r0, #0
 8000e18:	0a64      	lsrs	r4, r4, #9
 8000e1a:	e72b      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	03c0      	lsls	r0, r0, #15
 8000e20:	4304      	orrs	r4, r0
 8000e22:	0264      	lsls	r4, r4, #9
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	0a64      	lsrs	r4, r4, #9
 8000e28:	e724      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	0800b984 	.word	0x0800b984
 8000e30:	f7ffffff 	.word	0xf7ffffff

08000e34 <__aeabi_fsub>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	46ce      	mov	lr, r9
 8000e38:	4647      	mov	r7, r8
 8000e3a:	0243      	lsls	r3, r0, #9
 8000e3c:	0a5b      	lsrs	r3, r3, #9
 8000e3e:	024e      	lsls	r6, r1, #9
 8000e40:	00da      	lsls	r2, r3, #3
 8000e42:	4694      	mov	ip, r2
 8000e44:	0a72      	lsrs	r2, r6, #9
 8000e46:	4691      	mov	r9, r2
 8000e48:	0045      	lsls	r5, r0, #1
 8000e4a:	004a      	lsls	r2, r1, #1
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	0e2d      	lsrs	r5, r5, #24
 8000e50:	001f      	movs	r7, r3
 8000e52:	0fc4      	lsrs	r4, r0, #31
 8000e54:	0e12      	lsrs	r2, r2, #24
 8000e56:	0fc9      	lsrs	r1, r1, #31
 8000e58:	09b6      	lsrs	r6, r6, #6
 8000e5a:	2aff      	cmp	r2, #255	; 0xff
 8000e5c:	d05b      	beq.n	8000f16 <__aeabi_fsub+0xe2>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4041      	eors	r1, r0
 8000e62:	428c      	cmp	r4, r1
 8000e64:	d039      	beq.n	8000eda <__aeabi_fsub+0xa6>
 8000e66:	1aa8      	subs	r0, r5, r2
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	dd5a      	ble.n	8000f22 <__aeabi_fsub+0xee>
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d06a      	beq.n	8000f46 <__aeabi_fsub+0x112>
 8000e70:	2dff      	cmp	r5, #255	; 0xff
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x42>
 8000e74:	e0d9      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	04d2      	lsls	r2, r2, #19
 8000e7a:	4316      	orrs	r6, r2
 8000e7c:	281b      	cmp	r0, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0x4e>
 8000e80:	e0e9      	b.n	8001056 <__aeabi_fsub+0x222>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4663      	mov	r3, ip
 8000e86:	1a18      	subs	r0, r3, r0
 8000e88:	0143      	lsls	r3, r0, #5
 8000e8a:	d400      	bmi.n	8000e8e <__aeabi_fsub+0x5a>
 8000e8c:	e0b4      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000e8e:	0180      	lsls	r0, r0, #6
 8000e90:	0987      	lsrs	r7, r0, #6
 8000e92:	0038      	movs	r0, r7
 8000e94:	f002 f83a 	bl	8002f0c <__clzsi2>
 8000e98:	3805      	subs	r0, #5
 8000e9a:	4087      	lsls	r7, r0
 8000e9c:	4285      	cmp	r5, r0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0x6e>
 8000ea0:	e0cc      	b.n	800103c <__aeabi_fsub+0x208>
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	48b5      	ldr	r0, [pc, #724]	; (800117c <__aeabi_fsub+0x348>)
 8000ea6:	4038      	ands	r0, r7
 8000ea8:	0743      	lsls	r3, r0, #29
 8000eaa:	d004      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eac:	230f      	movs	r3, #15
 8000eae:	4003      	ands	r3, r0
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eb4:	3004      	adds	r0, #4
 8000eb6:	0143      	lsls	r3, r0, #5
 8000eb8:	d400      	bmi.n	8000ebc <__aeabi_fsub+0x88>
 8000eba:	e0a0      	b.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ebc:	1c6a      	adds	r2, r5, #1
 8000ebe:	2dfe      	cmp	r5, #254	; 0xfe
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x90>
 8000ec2:	e08d      	b.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ec4:	0180      	lsls	r0, r0, #6
 8000ec6:	0a47      	lsrs	r7, r0, #9
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	05d0      	lsls	r0, r2, #23
 8000ecc:	4338      	orrs	r0, r7
 8000ece:	07e4      	lsls	r4, r4, #31
 8000ed0:	4320      	orrs	r0, r4
 8000ed2:	bcc0      	pop	{r6, r7}
 8000ed4:	46b9      	mov	r9, r7
 8000ed6:	46b0      	mov	r8, r6
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eda:	1aa8      	subs	r0, r5, r2
 8000edc:	4680      	mov	r8, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dd45      	ble.n	8000f6e <__aeabi_fsub+0x13a>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d070      	beq.n	8000fc8 <__aeabi_fsub+0x194>
 8000ee6:	2dff      	cmp	r5, #255	; 0xff
 8000ee8:	d100      	bne.n	8000eec <__aeabi_fsub+0xb8>
 8000eea:	e09e      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	04db      	lsls	r3, r3, #19
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	2b1b      	cmp	r3, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0xc6>
 8000ef8:	e0d2      	b.n	80010a0 <__aeabi_fsub+0x26c>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4460      	add	r0, ip
 8000efe:	0143      	lsls	r3, r0, #5
 8000f00:	d57a      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d06b      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4a9d      	ldr	r2, [pc, #628]	; (8001180 <__aeabi_fsub+0x34c>)
 8000f0c:	4003      	ands	r3, r0
 8000f0e:	0840      	lsrs	r0, r0, #1
 8000f10:	4010      	ands	r0, r2
 8000f12:	4318      	orrs	r0, r3
 8000f14:	e7c8      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d020      	beq.n	8000f5c <__aeabi_fsub+0x128>
 8000f1a:	428c      	cmp	r4, r1
 8000f1c:	d023      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f1e:	0028      	movs	r0, r5
 8000f20:	38ff      	subs	r0, #255	; 0xff
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d039      	beq.n	8000f9a <__aeabi_fsub+0x166>
 8000f26:	1b57      	subs	r7, r2, r5
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xfa>
 8000f2c:	e09d      	b.n	800106a <__aeabi_fsub+0x236>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x102>
 8000f34:	e0db      	b.n	80010ee <__aeabi_fsub+0x2ba>
 8000f36:	1e7b      	subs	r3, r7, #1
 8000f38:	2f01      	cmp	r7, #1
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x10a>
 8000f3c:	e10d      	b.n	800115a <__aeabi_fsub+0x326>
 8000f3e:	2fff      	cmp	r7, #255	; 0xff
 8000f40:	d071      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 8000f42:	001f      	movs	r7, r3
 8000f44:	e098      	b.n	8001078 <__aeabi_fsub+0x244>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x118>
 8000f4a:	e0a7      	b.n	800109c <__aeabi_fsub+0x268>
 8000f4c:	1e42      	subs	r2, r0, #1
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x120>
 8000f52:	e0e6      	b.n	8001122 <__aeabi_fsub+0x2ee>
 8000f54:	28ff      	cmp	r0, #255	; 0xff
 8000f56:	d068      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000f58:	0010      	movs	r0, r2
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fsub+0x48>
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4041      	eors	r1, r0
 8000f60:	42a1      	cmp	r1, r4
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f64:	e77f      	b.n	8000e66 <__aeabi_fsub+0x32>
 8000f66:	20ff      	movs	r0, #255	; 0xff
 8000f68:	4240      	negs	r0, r0
 8000f6a:	4680      	mov	r8, r0
 8000f6c:	44a8      	add	r8, r5
 8000f6e:	4640      	mov	r0, r8
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d038      	beq.n	8000fe6 <__aeabi_fsub+0x1b2>
 8000f74:	1b51      	subs	r1, r2, r5
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x148>
 8000f7a:	e0ae      	b.n	80010da <__aeabi_fsub+0x2a6>
 8000f7c:	2aff      	cmp	r2, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x14e>
 8000f80:	e0df      	b.n	8001142 <__aeabi_fsub+0x30e>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4660      	mov	r0, ip
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	4318      	orrs	r0, r3
 8000f8a:	4684      	mov	ip, r0
 8000f8c:	291b      	cmp	r1, #27
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fsub+0x15e>
 8000f90:	e0d9      	b.n	8001146 <__aeabi_fsub+0x312>
 8000f92:	2001      	movs	r0, #1
 8000f94:	0015      	movs	r5, r2
 8000f96:	1980      	adds	r0, r0, r6
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fsub+0xca>
 8000f9a:	20fe      	movs	r0, #254	; 0xfe
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d171      	bne.n	8001086 <__aeabi_fsub+0x252>
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x174>
 8000fa6:	e0a6      	b.n	80010f6 <__aeabi_fsub+0x2c2>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x17c>
 8000fae:	e0d9      	b.n	8001164 <__aeabi_fsub+0x330>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x184>
 8000fb6:	e788      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fb8:	1b98      	subs	r0, r3, r6
 8000fba:	0143      	lsls	r3, r0, #5
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_fsub+0x18c>
 8000fbe:	e0e1      	b.n	8001184 <__aeabi_fsub+0x350>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	1af0      	subs	r0, r6, r3
 8000fc6:	e76f      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x19a>
 8000fcc:	e0b7      	b.n	800113e <__aeabi_fsub+0x30a>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	2801      	cmp	r0, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_fsub+0x1a4>
 8000fd6:	e09c      	b.n	8001112 <__aeabi_fsub+0x2de>
 8000fd8:	28ff      	cmp	r0, #255	; 0xff
 8000fda:	d026      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000fdc:	4690      	mov	r8, r2
 8000fde:	e788      	b.n	8000ef2 <__aeabi_fsub+0xbe>
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	2700      	movs	r7, #0
 8000fe4:	e771      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fe6:	20fe      	movs	r0, #254	; 0xfe
 8000fe8:	1c6a      	adds	r2, r5, #1
 8000fea:	4210      	tst	r0, r2
 8000fec:	d064      	beq.n	80010b8 <__aeabi_fsub+0x284>
 8000fee:	2aff      	cmp	r2, #255	; 0xff
 8000ff0:	d0f6      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ff2:	0015      	movs	r5, r2
 8000ff4:	4466      	add	r6, ip
 8000ff6:	0870      	lsrs	r0, r6, #1
 8000ff8:	0743      	lsls	r3, r0, #29
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ffc:	e756      	b.n	8000eac <__aeabi_fsub+0x78>
 8000ffe:	08c3      	lsrs	r3, r0, #3
 8001000:	2dff      	cmp	r5, #255	; 0xff
 8001002:	d012      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	0a5f      	lsrs	r7, r3, #9
 8001008:	b2ea      	uxtb	r2, r5
 800100a:	e75e      	b.n	8000eca <__aeabi_fsub+0x96>
 800100c:	4662      	mov	r2, ip
 800100e:	2a00      	cmp	r2, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 8001012:	e096      	b.n	8001142 <__aeabi_fsub+0x30e>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d008      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	03d2      	lsls	r2, r2, #15
 800101c:	4213      	tst	r3, r2
 800101e:	d004      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001020:	4648      	mov	r0, r9
 8001022:	4210      	tst	r0, r2
 8001024:	d101      	bne.n	800102a <__aeabi_fsub+0x1f6>
 8001026:	000c      	movs	r4, r1
 8001028:	464b      	mov	r3, r9
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0d8      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 800102e:	2780      	movs	r7, #128	; 0x80
 8001030:	03ff      	lsls	r7, r7, #15
 8001032:	431f      	orrs	r7, r3
 8001034:	027f      	lsls	r7, r7, #9
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	0a7f      	lsrs	r7, r7, #9
 800103a:	e746      	b.n	8000eca <__aeabi_fsub+0x96>
 800103c:	2320      	movs	r3, #32
 800103e:	003a      	movs	r2, r7
 8001040:	1b45      	subs	r5, r0, r5
 8001042:	0038      	movs	r0, r7
 8001044:	3501      	adds	r5, #1
 8001046:	40ea      	lsrs	r2, r5
 8001048:	1b5d      	subs	r5, r3, r5
 800104a:	40a8      	lsls	r0, r5
 800104c:	1e43      	subs	r3, r0, #1
 800104e:	4198      	sbcs	r0, r3
 8001050:	2500      	movs	r5, #0
 8001052:	4310      	orrs	r0, r2
 8001054:	e728      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8001056:	2320      	movs	r3, #32
 8001058:	1a1b      	subs	r3, r3, r0
 800105a:	0032      	movs	r2, r6
 800105c:	409e      	lsls	r6, r3
 800105e:	40c2      	lsrs	r2, r0
 8001060:	0030      	movs	r0, r6
 8001062:	1e43      	subs	r3, r0, #1
 8001064:	4198      	sbcs	r0, r3
 8001066:	4310      	orrs	r0, r2
 8001068:	e70c      	b.n	8000e84 <__aeabi_fsub+0x50>
 800106a:	2aff      	cmp	r2, #255	; 0xff
 800106c:	d0db      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	4660      	mov	r0, ip
 8001072:	04db      	lsls	r3, r3, #19
 8001074:	4318      	orrs	r0, r3
 8001076:	4684      	mov	ip, r0
 8001078:	2f1b      	cmp	r7, #27
 800107a:	dd56      	ble.n	800112a <__aeabi_fsub+0x2f6>
 800107c:	2001      	movs	r0, #1
 800107e:	000c      	movs	r4, r1
 8001080:	0015      	movs	r5, r2
 8001082:	1a30      	subs	r0, r6, r0
 8001084:	e700      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001086:	4663      	mov	r3, ip
 8001088:	1b9f      	subs	r7, r3, r6
 800108a:	017b      	lsls	r3, r7, #5
 800108c:	d43d      	bmi.n	800110a <__aeabi_fsub+0x2d6>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001092:	e6fe      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001094:	2400      	movs	r4, #0
 8001096:	2200      	movs	r2, #0
 8001098:	2700      	movs	r7, #0
 800109a:	e716      	b.n	8000eca <__aeabi_fsub+0x96>
 800109c:	0005      	movs	r5, r0
 800109e:	e7af      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010a0:	0032      	movs	r2, r6
 80010a2:	4643      	mov	r3, r8
 80010a4:	4641      	mov	r1, r8
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	2320      	movs	r3, #32
 80010aa:	1a5b      	subs	r3, r3, r1
 80010ac:	409e      	lsls	r6, r3
 80010ae:	0030      	movs	r0, r6
 80010b0:	1e43      	subs	r3, r0, #1
 80010b2:	4198      	sbcs	r0, r3
 80010b4:	4310      	orrs	r0, r2
 80010b6:	e721      	b.n	8000efc <__aeabi_fsub+0xc8>
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	d1a7      	bne.n	800100c <__aeabi_fsub+0x1d8>
 80010bc:	4663      	mov	r3, ip
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d059      	beq.n	8001176 <__aeabi_fsub+0x342>
 80010c2:	2200      	movs	r2, #0
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x296>
 80010c8:	e6ff      	b.n	8000eca <__aeabi_fsub+0x96>
 80010ca:	0030      	movs	r0, r6
 80010cc:	4460      	add	r0, ip
 80010ce:	0143      	lsls	r3, r0, #5
 80010d0:	d592      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <__aeabi_fsub+0x348>)
 80010d4:	3501      	adds	r5, #1
 80010d6:	4018      	ands	r0, r3
 80010d8:	e78e      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010da:	4663      	mov	r3, ip
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d047      	beq.n	8001170 <__aeabi_fsub+0x33c>
 80010e0:	1e4b      	subs	r3, r1, #1
 80010e2:	2901      	cmp	r1, #1
 80010e4:	d015      	beq.n	8001112 <__aeabi_fsub+0x2de>
 80010e6:	29ff      	cmp	r1, #255	; 0xff
 80010e8:	d02b      	beq.n	8001142 <__aeabi_fsub+0x30e>
 80010ea:	0019      	movs	r1, r3
 80010ec:	e74e      	b.n	8000f8c <__aeabi_fsub+0x158>
 80010ee:	000c      	movs	r4, r1
 80010f0:	464b      	mov	r3, r9
 80010f2:	003d      	movs	r5, r7
 80010f4:	e784      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010f6:	4662      	mov	r2, ip
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d18b      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d192      	bne.n	8001026 <__aeabi_fsub+0x1f2>
 8001100:	2780      	movs	r7, #128	; 0x80
 8001102:	2400      	movs	r4, #0
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	03ff      	lsls	r7, r7, #15
 8001108:	e6df      	b.n	8000eca <__aeabi_fsub+0x96>
 800110a:	4663      	mov	r3, ip
 800110c:	000c      	movs	r4, r1
 800110e:	1af7      	subs	r7, r6, r3
 8001110:	e6bf      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001112:	0030      	movs	r0, r6
 8001114:	4460      	add	r0, ip
 8001116:	2501      	movs	r5, #1
 8001118:	0143      	lsls	r3, r0, #5
 800111a:	d400      	bmi.n	800111e <__aeabi_fsub+0x2ea>
 800111c:	e76c      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800111e:	2502      	movs	r5, #2
 8001120:	e6f2      	b.n	8000f08 <__aeabi_fsub+0xd4>
 8001122:	4663      	mov	r3, ip
 8001124:	2501      	movs	r5, #1
 8001126:	1b98      	subs	r0, r3, r6
 8001128:	e6ae      	b.n	8000e88 <__aeabi_fsub+0x54>
 800112a:	2320      	movs	r3, #32
 800112c:	4664      	mov	r4, ip
 800112e:	4660      	mov	r0, ip
 8001130:	40fc      	lsrs	r4, r7
 8001132:	1bdf      	subs	r7, r3, r7
 8001134:	40b8      	lsls	r0, r7
 8001136:	1e43      	subs	r3, r0, #1
 8001138:	4198      	sbcs	r0, r3
 800113a:	4320      	orrs	r0, r4
 800113c:	e79f      	b.n	800107e <__aeabi_fsub+0x24a>
 800113e:	0005      	movs	r5, r0
 8001140:	e75e      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001142:	464b      	mov	r3, r9
 8001144:	e771      	b.n	800102a <__aeabi_fsub+0x1f6>
 8001146:	2320      	movs	r3, #32
 8001148:	4665      	mov	r5, ip
 800114a:	4660      	mov	r0, ip
 800114c:	40cd      	lsrs	r5, r1
 800114e:	1a59      	subs	r1, r3, r1
 8001150:	4088      	lsls	r0, r1
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	4328      	orrs	r0, r5
 8001158:	e71c      	b.n	8000f94 <__aeabi_fsub+0x160>
 800115a:	4663      	mov	r3, ip
 800115c:	000c      	movs	r4, r1
 800115e:	2501      	movs	r5, #1
 8001160:	1af0      	subs	r0, r6, r3
 8001162:	e691      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d095      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001168:	000c      	movs	r4, r1
 800116a:	464f      	mov	r7, r9
 800116c:	2200      	movs	r2, #0
 800116e:	e6ac      	b.n	8000eca <__aeabi_fsub+0x96>
 8001170:	464b      	mov	r3, r9
 8001172:	000d      	movs	r5, r1
 8001174:	e744      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001176:	464f      	mov	r7, r9
 8001178:	2200      	movs	r2, #0
 800117a:	e6a6      	b.n	8000eca <__aeabi_fsub+0x96>
 800117c:	fbffffff 	.word	0xfbffffff
 8001180:	7dffffff 	.word	0x7dffffff
 8001184:	2800      	cmp	r0, #0
 8001186:	d000      	beq.n	800118a <__aeabi_fsub+0x356>
 8001188:	e736      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800118a:	2400      	movs	r4, #0
 800118c:	2700      	movs	r7, #0
 800118e:	e69c      	b.n	8000eca <__aeabi_fsub+0x96>

08001190 <__aeabi_i2f>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	2800      	cmp	r0, #0
 8001194:	d013      	beq.n	80011be <__aeabi_i2f+0x2e>
 8001196:	17c3      	asrs	r3, r0, #31
 8001198:	18c6      	adds	r6, r0, r3
 800119a:	405e      	eors	r6, r3
 800119c:	0fc4      	lsrs	r4, r0, #31
 800119e:	0030      	movs	r0, r6
 80011a0:	f001 feb4 	bl	8002f0c <__clzsi2>
 80011a4:	239e      	movs	r3, #158	; 0x9e
 80011a6:	0005      	movs	r5, r0
 80011a8:	1a1b      	subs	r3, r3, r0
 80011aa:	2b96      	cmp	r3, #150	; 0x96
 80011ac:	dc0f      	bgt.n	80011ce <__aeabi_i2f+0x3e>
 80011ae:	2808      	cmp	r0, #8
 80011b0:	dd01      	ble.n	80011b6 <__aeabi_i2f+0x26>
 80011b2:	3d08      	subs	r5, #8
 80011b4:	40ae      	lsls	r6, r5
 80011b6:	0276      	lsls	r6, r6, #9
 80011b8:	0a76      	lsrs	r6, r6, #9
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	e002      	b.n	80011c4 <__aeabi_i2f+0x34>
 80011be:	2400      	movs	r4, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	05c0      	lsls	r0, r0, #23
 80011c6:	4330      	orrs	r0, r6
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4320      	orrs	r0, r4
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ce:	2b99      	cmp	r3, #153	; 0x99
 80011d0:	dd0c      	ble.n	80011ec <__aeabi_i2f+0x5c>
 80011d2:	2205      	movs	r2, #5
 80011d4:	0031      	movs	r1, r6
 80011d6:	1a12      	subs	r2, r2, r0
 80011d8:	40d1      	lsrs	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	0001      	movs	r1, r0
 80011de:	0030      	movs	r0, r6
 80011e0:	311b      	adds	r1, #27
 80011e2:	4088      	lsls	r0, r1
 80011e4:	1e41      	subs	r1, r0, #1
 80011e6:	4188      	sbcs	r0, r1
 80011e8:	4302      	orrs	r2, r0
 80011ea:	0016      	movs	r6, r2
 80011ec:	2d05      	cmp	r5, #5
 80011ee:	dc12      	bgt.n	8001216 <__aeabi_i2f+0x86>
 80011f0:	0031      	movs	r1, r6
 80011f2:	4f0d      	ldr	r7, [pc, #52]	; (8001228 <__aeabi_i2f+0x98>)
 80011f4:	4039      	ands	r1, r7
 80011f6:	0772      	lsls	r2, r6, #29
 80011f8:	d009      	beq.n	800120e <__aeabi_i2f+0x7e>
 80011fa:	200f      	movs	r0, #15
 80011fc:	4030      	ands	r0, r6
 80011fe:	2804      	cmp	r0, #4
 8001200:	d005      	beq.n	800120e <__aeabi_i2f+0x7e>
 8001202:	3104      	adds	r1, #4
 8001204:	014a      	lsls	r2, r1, #5
 8001206:	d502      	bpl.n	800120e <__aeabi_i2f+0x7e>
 8001208:	239f      	movs	r3, #159	; 0x9f
 800120a:	4039      	ands	r1, r7
 800120c:	1b5b      	subs	r3, r3, r5
 800120e:	0189      	lsls	r1, r1, #6
 8001210:	0a4e      	lsrs	r6, r1, #9
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	e7d6      	b.n	80011c4 <__aeabi_i2f+0x34>
 8001216:	1f6a      	subs	r2, r5, #5
 8001218:	4096      	lsls	r6, r2
 800121a:	0031      	movs	r1, r6
 800121c:	4f02      	ldr	r7, [pc, #8]	; (8001228 <__aeabi_i2f+0x98>)
 800121e:	4039      	ands	r1, r7
 8001220:	0772      	lsls	r2, r6, #29
 8001222:	d0f4      	beq.n	800120e <__aeabi_i2f+0x7e>
 8001224:	e7e9      	b.n	80011fa <__aeabi_i2f+0x6a>
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	fbffffff 	.word	0xfbffffff

0800122c <__aeabi_ui2f>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	1e05      	subs	r5, r0, #0
 8001230:	d00e      	beq.n	8001250 <__aeabi_ui2f+0x24>
 8001232:	f001 fe6b 	bl	8002f0c <__clzsi2>
 8001236:	239e      	movs	r3, #158	; 0x9e
 8001238:	0004      	movs	r4, r0
 800123a:	1a1b      	subs	r3, r3, r0
 800123c:	2b96      	cmp	r3, #150	; 0x96
 800123e:	dc0c      	bgt.n	800125a <__aeabi_ui2f+0x2e>
 8001240:	2808      	cmp	r0, #8
 8001242:	dd01      	ble.n	8001248 <__aeabi_ui2f+0x1c>
 8001244:	3c08      	subs	r4, #8
 8001246:	40a5      	lsls	r5, r4
 8001248:	026d      	lsls	r5, r5, #9
 800124a:	0a6d      	lsrs	r5, r5, #9
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	e001      	b.n	8001254 <__aeabi_ui2f+0x28>
 8001250:	2000      	movs	r0, #0
 8001252:	2500      	movs	r5, #0
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	4328      	orrs	r0, r5
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	2b99      	cmp	r3, #153	; 0x99
 800125c:	dd09      	ble.n	8001272 <__aeabi_ui2f+0x46>
 800125e:	0002      	movs	r2, r0
 8001260:	0029      	movs	r1, r5
 8001262:	321b      	adds	r2, #27
 8001264:	4091      	lsls	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	2205      	movs	r2, #5
 800126c:	1a12      	subs	r2, r2, r0
 800126e:	40d5      	lsrs	r5, r2
 8001270:	430d      	orrs	r5, r1
 8001272:	2c05      	cmp	r4, #5
 8001274:	dc12      	bgt.n	800129c <__aeabi_ui2f+0x70>
 8001276:	0029      	movs	r1, r5
 8001278:	4e0c      	ldr	r6, [pc, #48]	; (80012ac <__aeabi_ui2f+0x80>)
 800127a:	4031      	ands	r1, r6
 800127c:	076a      	lsls	r2, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_ui2f+0x68>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_ui2f+0x68>
 8001288:	3104      	adds	r1, #4
 800128a:	014a      	lsls	r2, r1, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_ui2f+0x68>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4031      	ands	r1, r6
 8001292:	1b1b      	subs	r3, r3, r4
 8001294:	0189      	lsls	r1, r1, #6
 8001296:	0a4d      	lsrs	r5, r1, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7db      	b.n	8001254 <__aeabi_ui2f+0x28>
 800129c:	1f62      	subs	r2, r4, #5
 800129e:	4095      	lsls	r5, r2
 80012a0:	0029      	movs	r1, r5
 80012a2:	4e02      	ldr	r6, [pc, #8]	; (80012ac <__aeabi_ui2f+0x80>)
 80012a4:	4031      	ands	r1, r6
 80012a6:	076a      	lsls	r2, r5, #29
 80012a8:	d0f4      	beq.n	8001294 <__aeabi_ui2f+0x68>
 80012aa:	e7e9      	b.n	8001280 <__aeabi_ui2f+0x54>
 80012ac:	fbffffff 	.word	0xfbffffff

080012b0 <__aeabi_dadd>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	464f      	mov	r7, r9
 80012b4:	4646      	mov	r6, r8
 80012b6:	46d6      	mov	lr, sl
 80012b8:	000d      	movs	r5, r1
 80012ba:	0004      	movs	r4, r0
 80012bc:	b5c0      	push	{r6, r7, lr}
 80012be:	001f      	movs	r7, r3
 80012c0:	0011      	movs	r1, r2
 80012c2:	0328      	lsls	r0, r5, #12
 80012c4:	0f62      	lsrs	r2, r4, #29
 80012c6:	0a40      	lsrs	r0, r0, #9
 80012c8:	4310      	orrs	r0, r2
 80012ca:	007a      	lsls	r2, r7, #1
 80012cc:	0d52      	lsrs	r2, r2, #21
 80012ce:	00e3      	lsls	r3, r4, #3
 80012d0:	033c      	lsls	r4, r7, #12
 80012d2:	4691      	mov	r9, r2
 80012d4:	0a64      	lsrs	r4, r4, #9
 80012d6:	0ffa      	lsrs	r2, r7, #31
 80012d8:	0f4f      	lsrs	r7, r1, #29
 80012da:	006e      	lsls	r6, r5, #1
 80012dc:	4327      	orrs	r7, r4
 80012de:	4692      	mov	sl, r2
 80012e0:	46b8      	mov	r8, r7
 80012e2:	0d76      	lsrs	r6, r6, #21
 80012e4:	0fed      	lsrs	r5, r5, #31
 80012e6:	00c9      	lsls	r1, r1, #3
 80012e8:	4295      	cmp	r5, r2
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x3e>
 80012ec:	e099      	b.n	8001422 <__aeabi_dadd+0x172>
 80012ee:	464c      	mov	r4, r9
 80012f0:	1b34      	subs	r4, r6, r4
 80012f2:	46a4      	mov	ip, r4
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dadd+0x4a>
 80012f8:	e07c      	b.n	80013f4 <__aeabi_dadd+0x144>
 80012fa:	464a      	mov	r2, r9
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x52>
 8001300:	e0b8      	b.n	8001474 <__aeabi_dadd+0x1c4>
 8001302:	4ac5      	ldr	r2, [pc, #788]	; (8001618 <__aeabi_dadd+0x368>)
 8001304:	4296      	cmp	r6, r2
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x5a>
 8001308:	e11c      	b.n	8001544 <__aeabi_dadd+0x294>
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	003c      	movs	r4, r7
 800130e:	0412      	lsls	r2, r2, #16
 8001310:	4314      	orrs	r4, r2
 8001312:	46a0      	mov	r8, r4
 8001314:	4662      	mov	r2, ip
 8001316:	2a38      	cmp	r2, #56	; 0x38
 8001318:	dd00      	ble.n	800131c <__aeabi_dadd+0x6c>
 800131a:	e161      	b.n	80015e0 <__aeabi_dadd+0x330>
 800131c:	2a1f      	cmp	r2, #31
 800131e:	dd00      	ble.n	8001322 <__aeabi_dadd+0x72>
 8001320:	e1cc      	b.n	80016bc <__aeabi_dadd+0x40c>
 8001322:	4664      	mov	r4, ip
 8001324:	2220      	movs	r2, #32
 8001326:	1b12      	subs	r2, r2, r4
 8001328:	4644      	mov	r4, r8
 800132a:	4094      	lsls	r4, r2
 800132c:	000f      	movs	r7, r1
 800132e:	46a1      	mov	r9, r4
 8001330:	4664      	mov	r4, ip
 8001332:	4091      	lsls	r1, r2
 8001334:	40e7      	lsrs	r7, r4
 8001336:	464c      	mov	r4, r9
 8001338:	1e4a      	subs	r2, r1, #1
 800133a:	4191      	sbcs	r1, r2
 800133c:	433c      	orrs	r4, r7
 800133e:	4642      	mov	r2, r8
 8001340:	4321      	orrs	r1, r4
 8001342:	4664      	mov	r4, ip
 8001344:	40e2      	lsrs	r2, r4
 8001346:	1a80      	subs	r0, r0, r2
 8001348:	1a5c      	subs	r4, r3, r1
 800134a:	42a3      	cmp	r3, r4
 800134c:	419b      	sbcs	r3, r3
 800134e:	425f      	negs	r7, r3
 8001350:	1bc7      	subs	r7, r0, r7
 8001352:	023b      	lsls	r3, r7, #8
 8001354:	d400      	bmi.n	8001358 <__aeabi_dadd+0xa8>
 8001356:	e0d0      	b.n	80014fa <__aeabi_dadd+0x24a>
 8001358:	027f      	lsls	r7, r7, #9
 800135a:	0a7f      	lsrs	r7, r7, #9
 800135c:	2f00      	cmp	r7, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0xb2>
 8001360:	e0ff      	b.n	8001562 <__aeabi_dadd+0x2b2>
 8001362:	0038      	movs	r0, r7
 8001364:	f001 fdd2 	bl	8002f0c <__clzsi2>
 8001368:	0001      	movs	r1, r0
 800136a:	3908      	subs	r1, #8
 800136c:	2320      	movs	r3, #32
 800136e:	0022      	movs	r2, r4
 8001370:	1a5b      	subs	r3, r3, r1
 8001372:	408f      	lsls	r7, r1
 8001374:	40da      	lsrs	r2, r3
 8001376:	408c      	lsls	r4, r1
 8001378:	4317      	orrs	r7, r2
 800137a:	42b1      	cmp	r1, r6
 800137c:	da00      	bge.n	8001380 <__aeabi_dadd+0xd0>
 800137e:	e0ff      	b.n	8001580 <__aeabi_dadd+0x2d0>
 8001380:	1b89      	subs	r1, r1, r6
 8001382:	1c4b      	adds	r3, r1, #1
 8001384:	2b1f      	cmp	r3, #31
 8001386:	dd00      	ble.n	800138a <__aeabi_dadd+0xda>
 8001388:	e0a8      	b.n	80014dc <__aeabi_dadd+0x22c>
 800138a:	2220      	movs	r2, #32
 800138c:	0039      	movs	r1, r7
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	0020      	movs	r0, r4
 8001392:	4094      	lsls	r4, r2
 8001394:	4091      	lsls	r1, r2
 8001396:	40d8      	lsrs	r0, r3
 8001398:	1e62      	subs	r2, r4, #1
 800139a:	4194      	sbcs	r4, r2
 800139c:	40df      	lsrs	r7, r3
 800139e:	2600      	movs	r6, #0
 80013a0:	4301      	orrs	r1, r0
 80013a2:	430c      	orrs	r4, r1
 80013a4:	0763      	lsls	r3, r4, #29
 80013a6:	d009      	beq.n	80013bc <__aeabi_dadd+0x10c>
 80013a8:	230f      	movs	r3, #15
 80013aa:	4023      	ands	r3, r4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d005      	beq.n	80013bc <__aeabi_dadd+0x10c>
 80013b0:	1d23      	adds	r3, r4, #4
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	41a4      	sbcs	r4, r4
 80013b6:	4264      	negs	r4, r4
 80013b8:	193f      	adds	r7, r7, r4
 80013ba:	001c      	movs	r4, r3
 80013bc:	023b      	lsls	r3, r7, #8
 80013be:	d400      	bmi.n	80013c2 <__aeabi_dadd+0x112>
 80013c0:	e09e      	b.n	8001500 <__aeabi_dadd+0x250>
 80013c2:	4b95      	ldr	r3, [pc, #596]	; (8001618 <__aeabi_dadd+0x368>)
 80013c4:	3601      	adds	r6, #1
 80013c6:	429e      	cmp	r6, r3
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x11c>
 80013ca:	e0b7      	b.n	800153c <__aeabi_dadd+0x28c>
 80013cc:	4a93      	ldr	r2, [pc, #588]	; (800161c <__aeabi_dadd+0x36c>)
 80013ce:	08e4      	lsrs	r4, r4, #3
 80013d0:	4017      	ands	r7, r2
 80013d2:	077b      	lsls	r3, r7, #29
 80013d4:	0571      	lsls	r1, r6, #21
 80013d6:	027f      	lsls	r7, r7, #9
 80013d8:	4323      	orrs	r3, r4
 80013da:	0b3f      	lsrs	r7, r7, #12
 80013dc:	0d4a      	lsrs	r2, r1, #21
 80013de:	0512      	lsls	r2, r2, #20
 80013e0:	433a      	orrs	r2, r7
 80013e2:	07ed      	lsls	r5, r5, #31
 80013e4:	432a      	orrs	r2, r5
 80013e6:	0018      	movs	r0, r3
 80013e8:	0011      	movs	r1, r2
 80013ea:	bce0      	pop	{r5, r6, r7}
 80013ec:	46ba      	mov	sl, r7
 80013ee:	46b1      	mov	r9, r6
 80013f0:	46a8      	mov	r8, r5
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d04b      	beq.n	8001490 <__aeabi_dadd+0x1e0>
 80013f8:	464c      	mov	r4, r9
 80013fa:	1ba4      	subs	r4, r4, r6
 80013fc:	46a4      	mov	ip, r4
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_dadd+0x154>
 8001402:	e123      	b.n	800164c <__aeabi_dadd+0x39c>
 8001404:	0004      	movs	r4, r0
 8001406:	431c      	orrs	r4, r3
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x15c>
 800140a:	e1af      	b.n	800176c <__aeabi_dadd+0x4bc>
 800140c:	4662      	mov	r2, ip
 800140e:	1e54      	subs	r4, r2, #1
 8001410:	2a01      	cmp	r2, #1
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x166>
 8001414:	e215      	b.n	8001842 <__aeabi_dadd+0x592>
 8001416:	4d80      	ldr	r5, [pc, #512]	; (8001618 <__aeabi_dadd+0x368>)
 8001418:	45ac      	cmp	ip, r5
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x16e>
 800141c:	e1c8      	b.n	80017b0 <__aeabi_dadd+0x500>
 800141e:	46a4      	mov	ip, r4
 8001420:	e11b      	b.n	800165a <__aeabi_dadd+0x3aa>
 8001422:	464a      	mov	r2, r9
 8001424:	1ab2      	subs	r2, r6, r2
 8001426:	4694      	mov	ip, r2
 8001428:	2a00      	cmp	r2, #0
 800142a:	dc00      	bgt.n	800142e <__aeabi_dadd+0x17e>
 800142c:	e0ac      	b.n	8001588 <__aeabi_dadd+0x2d8>
 800142e:	464a      	mov	r2, r9
 8001430:	2a00      	cmp	r2, #0
 8001432:	d043      	beq.n	80014bc <__aeabi_dadd+0x20c>
 8001434:	4a78      	ldr	r2, [pc, #480]	; (8001618 <__aeabi_dadd+0x368>)
 8001436:	4296      	cmp	r6, r2
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x18c>
 800143a:	e1af      	b.n	800179c <__aeabi_dadd+0x4ec>
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	003c      	movs	r4, r7
 8001440:	0412      	lsls	r2, r2, #16
 8001442:	4314      	orrs	r4, r2
 8001444:	46a0      	mov	r8, r4
 8001446:	4662      	mov	r2, ip
 8001448:	2a38      	cmp	r2, #56	; 0x38
 800144a:	dc67      	bgt.n	800151c <__aeabi_dadd+0x26c>
 800144c:	2a1f      	cmp	r2, #31
 800144e:	dc00      	bgt.n	8001452 <__aeabi_dadd+0x1a2>
 8001450:	e15f      	b.n	8001712 <__aeabi_dadd+0x462>
 8001452:	4647      	mov	r7, r8
 8001454:	3a20      	subs	r2, #32
 8001456:	40d7      	lsrs	r7, r2
 8001458:	4662      	mov	r2, ip
 800145a:	2a20      	cmp	r2, #32
 800145c:	d005      	beq.n	800146a <__aeabi_dadd+0x1ba>
 800145e:	4664      	mov	r4, ip
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	1b12      	subs	r2, r2, r4
 8001464:	4644      	mov	r4, r8
 8001466:	4094      	lsls	r4, r2
 8001468:	4321      	orrs	r1, r4
 800146a:	1e4a      	subs	r2, r1, #1
 800146c:	4191      	sbcs	r1, r2
 800146e:	000c      	movs	r4, r1
 8001470:	433c      	orrs	r4, r7
 8001472:	e057      	b.n	8001524 <__aeabi_dadd+0x274>
 8001474:	003a      	movs	r2, r7
 8001476:	430a      	orrs	r2, r1
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x1cc>
 800147a:	e105      	b.n	8001688 <__aeabi_dadd+0x3d8>
 800147c:	0022      	movs	r2, r4
 800147e:	3a01      	subs	r2, #1
 8001480:	2c01      	cmp	r4, #1
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x1d6>
 8001484:	e182      	b.n	800178c <__aeabi_dadd+0x4dc>
 8001486:	4c64      	ldr	r4, [pc, #400]	; (8001618 <__aeabi_dadd+0x368>)
 8001488:	45a4      	cmp	ip, r4
 800148a:	d05b      	beq.n	8001544 <__aeabi_dadd+0x294>
 800148c:	4694      	mov	ip, r2
 800148e:	e741      	b.n	8001314 <__aeabi_dadd+0x64>
 8001490:	4c63      	ldr	r4, [pc, #396]	; (8001620 <__aeabi_dadd+0x370>)
 8001492:	1c77      	adds	r7, r6, #1
 8001494:	4227      	tst	r7, r4
 8001496:	d000      	beq.n	800149a <__aeabi_dadd+0x1ea>
 8001498:	e0c4      	b.n	8001624 <__aeabi_dadd+0x374>
 800149a:	0004      	movs	r4, r0
 800149c:	431c      	orrs	r4, r3
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d000      	beq.n	80014a4 <__aeabi_dadd+0x1f4>
 80014a2:	e169      	b.n	8001778 <__aeabi_dadd+0x4c8>
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x1fa>
 80014a8:	e1bf      	b.n	800182a <__aeabi_dadd+0x57a>
 80014aa:	4644      	mov	r4, r8
 80014ac:	430c      	orrs	r4, r1
 80014ae:	d000      	beq.n	80014b2 <__aeabi_dadd+0x202>
 80014b0:	e1d0      	b.n	8001854 <__aeabi_dadd+0x5a4>
 80014b2:	0742      	lsls	r2, r0, #29
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	08c0      	lsrs	r0, r0, #3
 80014ba:	e029      	b.n	8001510 <__aeabi_dadd+0x260>
 80014bc:	003a      	movs	r2, r7
 80014be:	430a      	orrs	r2, r1
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x214>
 80014c2:	e170      	b.n	80017a6 <__aeabi_dadd+0x4f6>
 80014c4:	4662      	mov	r2, ip
 80014c6:	4664      	mov	r4, ip
 80014c8:	3a01      	subs	r2, #1
 80014ca:	2c01      	cmp	r4, #1
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x220>
 80014ce:	e0e0      	b.n	8001692 <__aeabi_dadd+0x3e2>
 80014d0:	4c51      	ldr	r4, [pc, #324]	; (8001618 <__aeabi_dadd+0x368>)
 80014d2:	45a4      	cmp	ip, r4
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x228>
 80014d6:	e161      	b.n	800179c <__aeabi_dadd+0x4ec>
 80014d8:	4694      	mov	ip, r2
 80014da:	e7b4      	b.n	8001446 <__aeabi_dadd+0x196>
 80014dc:	003a      	movs	r2, r7
 80014de:	391f      	subs	r1, #31
 80014e0:	40ca      	lsrs	r2, r1
 80014e2:	0011      	movs	r1, r2
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <__aeabi_dadd+0x240>
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	409f      	lsls	r7, r3
 80014ee:	433c      	orrs	r4, r7
 80014f0:	1e63      	subs	r3, r4, #1
 80014f2:	419c      	sbcs	r4, r3
 80014f4:	2700      	movs	r7, #0
 80014f6:	2600      	movs	r6, #0
 80014f8:	430c      	orrs	r4, r1
 80014fa:	0763      	lsls	r3, r4, #29
 80014fc:	d000      	beq.n	8001500 <__aeabi_dadd+0x250>
 80014fe:	e753      	b.n	80013a8 <__aeabi_dadd+0xf8>
 8001500:	46b4      	mov	ip, r6
 8001502:	08e4      	lsrs	r4, r4, #3
 8001504:	077b      	lsls	r3, r7, #29
 8001506:	4323      	orrs	r3, r4
 8001508:	08f8      	lsrs	r0, r7, #3
 800150a:	4a43      	ldr	r2, [pc, #268]	; (8001618 <__aeabi_dadd+0x368>)
 800150c:	4594      	cmp	ip, r2
 800150e:	d01d      	beq.n	800154c <__aeabi_dadd+0x29c>
 8001510:	4662      	mov	r2, ip
 8001512:	0307      	lsls	r7, r0, #12
 8001514:	0552      	lsls	r2, r2, #21
 8001516:	0b3f      	lsrs	r7, r7, #12
 8001518:	0d52      	lsrs	r2, r2, #21
 800151a:	e760      	b.n	80013de <__aeabi_dadd+0x12e>
 800151c:	4644      	mov	r4, r8
 800151e:	430c      	orrs	r4, r1
 8001520:	1e62      	subs	r2, r4, #1
 8001522:	4194      	sbcs	r4, r2
 8001524:	18e4      	adds	r4, r4, r3
 8001526:	429c      	cmp	r4, r3
 8001528:	419b      	sbcs	r3, r3
 800152a:	425f      	negs	r7, r3
 800152c:	183f      	adds	r7, r7, r0
 800152e:	023b      	lsls	r3, r7, #8
 8001530:	d5e3      	bpl.n	80014fa <__aeabi_dadd+0x24a>
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <__aeabi_dadd+0x368>)
 8001534:	3601      	adds	r6, #1
 8001536:	429e      	cmp	r6, r3
 8001538:	d000      	beq.n	800153c <__aeabi_dadd+0x28c>
 800153a:	e0b5      	b.n	80016a8 <__aeabi_dadd+0x3f8>
 800153c:	0032      	movs	r2, r6
 800153e:	2700      	movs	r7, #0
 8001540:	2300      	movs	r3, #0
 8001542:	e74c      	b.n	80013de <__aeabi_dadd+0x12e>
 8001544:	0742      	lsls	r2, r0, #29
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	4313      	orrs	r3, r2
 800154a:	08c0      	lsrs	r0, r0, #3
 800154c:	001a      	movs	r2, r3
 800154e:	4302      	orrs	r2, r0
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x2a4>
 8001552:	e1e1      	b.n	8001918 <__aeabi_dadd+0x668>
 8001554:	2780      	movs	r7, #128	; 0x80
 8001556:	033f      	lsls	r7, r7, #12
 8001558:	4307      	orrs	r7, r0
 800155a:	033f      	lsls	r7, r7, #12
 800155c:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <__aeabi_dadd+0x368>)
 800155e:	0b3f      	lsrs	r7, r7, #12
 8001560:	e73d      	b.n	80013de <__aeabi_dadd+0x12e>
 8001562:	0020      	movs	r0, r4
 8001564:	f001 fcd2 	bl	8002f0c <__clzsi2>
 8001568:	0001      	movs	r1, r0
 800156a:	3118      	adds	r1, #24
 800156c:	291f      	cmp	r1, #31
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dadd+0x2c2>
 8001570:	e6fc      	b.n	800136c <__aeabi_dadd+0xbc>
 8001572:	3808      	subs	r0, #8
 8001574:	4084      	lsls	r4, r0
 8001576:	0027      	movs	r7, r4
 8001578:	2400      	movs	r4, #0
 800157a:	42b1      	cmp	r1, r6
 800157c:	db00      	blt.n	8001580 <__aeabi_dadd+0x2d0>
 800157e:	e6ff      	b.n	8001380 <__aeabi_dadd+0xd0>
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <__aeabi_dadd+0x36c>)
 8001582:	1a76      	subs	r6, r6, r1
 8001584:	4017      	ands	r7, r2
 8001586:	e70d      	b.n	80013a4 <__aeabi_dadd+0xf4>
 8001588:	2a00      	cmp	r2, #0
 800158a:	d02f      	beq.n	80015ec <__aeabi_dadd+0x33c>
 800158c:	464a      	mov	r2, r9
 800158e:	1b92      	subs	r2, r2, r6
 8001590:	4694      	mov	ip, r2
 8001592:	2e00      	cmp	r6, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x2e8>
 8001596:	e0ad      	b.n	80016f4 <__aeabi_dadd+0x444>
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <__aeabi_dadd+0x368>)
 800159a:	4591      	cmp	r9, r2
 800159c:	d100      	bne.n	80015a0 <__aeabi_dadd+0x2f0>
 800159e:	e10f      	b.n	80017c0 <__aeabi_dadd+0x510>
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	0412      	lsls	r2, r2, #16
 80015a4:	4310      	orrs	r0, r2
 80015a6:	4662      	mov	r2, ip
 80015a8:	2a38      	cmp	r2, #56	; 0x38
 80015aa:	dd00      	ble.n	80015ae <__aeabi_dadd+0x2fe>
 80015ac:	e10f      	b.n	80017ce <__aeabi_dadd+0x51e>
 80015ae:	2a1f      	cmp	r2, #31
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dadd+0x304>
 80015b2:	e180      	b.n	80018b6 <__aeabi_dadd+0x606>
 80015b4:	4664      	mov	r4, ip
 80015b6:	2220      	movs	r2, #32
 80015b8:	001e      	movs	r6, r3
 80015ba:	1b12      	subs	r2, r2, r4
 80015bc:	4667      	mov	r7, ip
 80015be:	0004      	movs	r4, r0
 80015c0:	4093      	lsls	r3, r2
 80015c2:	4094      	lsls	r4, r2
 80015c4:	40fe      	lsrs	r6, r7
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	4193      	sbcs	r3, r2
 80015ca:	40f8      	lsrs	r0, r7
 80015cc:	4334      	orrs	r4, r6
 80015ce:	431c      	orrs	r4, r3
 80015d0:	4480      	add	r8, r0
 80015d2:	1864      	adds	r4, r4, r1
 80015d4:	428c      	cmp	r4, r1
 80015d6:	41bf      	sbcs	r7, r7
 80015d8:	427f      	negs	r7, r7
 80015da:	464e      	mov	r6, r9
 80015dc:	4447      	add	r7, r8
 80015de:	e7a6      	b.n	800152e <__aeabi_dadd+0x27e>
 80015e0:	4642      	mov	r2, r8
 80015e2:	430a      	orrs	r2, r1
 80015e4:	0011      	movs	r1, r2
 80015e6:	1e4a      	subs	r2, r1, #1
 80015e8:	4191      	sbcs	r1, r2
 80015ea:	e6ad      	b.n	8001348 <__aeabi_dadd+0x98>
 80015ec:	4c0c      	ldr	r4, [pc, #48]	; (8001620 <__aeabi_dadd+0x370>)
 80015ee:	1c72      	adds	r2, r6, #1
 80015f0:	4222      	tst	r2, r4
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x346>
 80015f4:	e0a1      	b.n	800173a <__aeabi_dadd+0x48a>
 80015f6:	0002      	movs	r2, r0
 80015f8:	431a      	orrs	r2, r3
 80015fa:	2e00      	cmp	r6, #0
 80015fc:	d000      	beq.n	8001600 <__aeabi_dadd+0x350>
 80015fe:	e0fa      	b.n	80017f6 <__aeabi_dadd+0x546>
 8001600:	2a00      	cmp	r2, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x356>
 8001604:	e145      	b.n	8001892 <__aeabi_dadd+0x5e2>
 8001606:	003a      	movs	r2, r7
 8001608:	430a      	orrs	r2, r1
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x35e>
 800160c:	e146      	b.n	800189c <__aeabi_dadd+0x5ec>
 800160e:	0742      	lsls	r2, r0, #29
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	4313      	orrs	r3, r2
 8001614:	08c0      	lsrs	r0, r0, #3
 8001616:	e77b      	b.n	8001510 <__aeabi_dadd+0x260>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	000007fe 	.word	0x000007fe
 8001624:	4647      	mov	r7, r8
 8001626:	1a5c      	subs	r4, r3, r1
 8001628:	1bc2      	subs	r2, r0, r7
 800162a:	42a3      	cmp	r3, r4
 800162c:	41bf      	sbcs	r7, r7
 800162e:	427f      	negs	r7, r7
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	464a      	mov	r2, r9
 8001636:	1abf      	subs	r7, r7, r2
 8001638:	023a      	lsls	r2, r7, #8
 800163a:	d500      	bpl.n	800163e <__aeabi_dadd+0x38e>
 800163c:	e08d      	b.n	800175a <__aeabi_dadd+0x4aa>
 800163e:	0023      	movs	r3, r4
 8001640:	433b      	orrs	r3, r7
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x396>
 8001644:	e68a      	b.n	800135c <__aeabi_dadd+0xac>
 8001646:	2000      	movs	r0, #0
 8001648:	2500      	movs	r5, #0
 800164a:	e761      	b.n	8001510 <__aeabi_dadd+0x260>
 800164c:	4cb4      	ldr	r4, [pc, #720]	; (8001920 <__aeabi_dadd+0x670>)
 800164e:	45a1      	cmp	r9, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x3a4>
 8001652:	e0ad      	b.n	80017b0 <__aeabi_dadd+0x500>
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4320      	orrs	r0, r4
 800165a:	4664      	mov	r4, ip
 800165c:	2c38      	cmp	r4, #56	; 0x38
 800165e:	dc3d      	bgt.n	80016dc <__aeabi_dadd+0x42c>
 8001660:	4662      	mov	r2, ip
 8001662:	2c1f      	cmp	r4, #31
 8001664:	dd00      	ble.n	8001668 <__aeabi_dadd+0x3b8>
 8001666:	e0b7      	b.n	80017d8 <__aeabi_dadd+0x528>
 8001668:	2520      	movs	r5, #32
 800166a:	001e      	movs	r6, r3
 800166c:	1b2d      	subs	r5, r5, r4
 800166e:	0004      	movs	r4, r0
 8001670:	40ab      	lsls	r3, r5
 8001672:	40ac      	lsls	r4, r5
 8001674:	40d6      	lsrs	r6, r2
 8001676:	40d0      	lsrs	r0, r2
 8001678:	4642      	mov	r2, r8
 800167a:	1e5d      	subs	r5, r3, #1
 800167c:	41ab      	sbcs	r3, r5
 800167e:	4334      	orrs	r4, r6
 8001680:	1a12      	subs	r2, r2, r0
 8001682:	4690      	mov	r8, r2
 8001684:	4323      	orrs	r3, r4
 8001686:	e02c      	b.n	80016e2 <__aeabi_dadd+0x432>
 8001688:	0742      	lsls	r2, r0, #29
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	4313      	orrs	r3, r2
 800168e:	08c0      	lsrs	r0, r0, #3
 8001690:	e73b      	b.n	800150a <__aeabi_dadd+0x25a>
 8001692:	185c      	adds	r4, r3, r1
 8001694:	429c      	cmp	r4, r3
 8001696:	419b      	sbcs	r3, r3
 8001698:	4440      	add	r0, r8
 800169a:	425b      	negs	r3, r3
 800169c:	18c7      	adds	r7, r0, r3
 800169e:	2601      	movs	r6, #1
 80016a0:	023b      	lsls	r3, r7, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0x3f6>
 80016a4:	e729      	b.n	80014fa <__aeabi_dadd+0x24a>
 80016a6:	2602      	movs	r6, #2
 80016a8:	4a9e      	ldr	r2, [pc, #632]	; (8001924 <__aeabi_dadd+0x674>)
 80016aa:	0863      	lsrs	r3, r4, #1
 80016ac:	4017      	ands	r7, r2
 80016ae:	2201      	movs	r2, #1
 80016b0:	4014      	ands	r4, r2
 80016b2:	431c      	orrs	r4, r3
 80016b4:	07fb      	lsls	r3, r7, #31
 80016b6:	431c      	orrs	r4, r3
 80016b8:	087f      	lsrs	r7, r7, #1
 80016ba:	e673      	b.n	80013a4 <__aeabi_dadd+0xf4>
 80016bc:	4644      	mov	r4, r8
 80016be:	3a20      	subs	r2, #32
 80016c0:	40d4      	lsrs	r4, r2
 80016c2:	4662      	mov	r2, ip
 80016c4:	2a20      	cmp	r2, #32
 80016c6:	d005      	beq.n	80016d4 <__aeabi_dadd+0x424>
 80016c8:	4667      	mov	r7, ip
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	1bd2      	subs	r2, r2, r7
 80016ce:	4647      	mov	r7, r8
 80016d0:	4097      	lsls	r7, r2
 80016d2:	4339      	orrs	r1, r7
 80016d4:	1e4a      	subs	r2, r1, #1
 80016d6:	4191      	sbcs	r1, r2
 80016d8:	4321      	orrs	r1, r4
 80016da:	e635      	b.n	8001348 <__aeabi_dadd+0x98>
 80016dc:	4303      	orrs	r3, r0
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	4183      	sbcs	r3, r0
 80016e2:	1acc      	subs	r4, r1, r3
 80016e4:	42a1      	cmp	r1, r4
 80016e6:	41bf      	sbcs	r7, r7
 80016e8:	4643      	mov	r3, r8
 80016ea:	427f      	negs	r7, r7
 80016ec:	4655      	mov	r5, sl
 80016ee:	464e      	mov	r6, r9
 80016f0:	1bdf      	subs	r7, r3, r7
 80016f2:	e62e      	b.n	8001352 <__aeabi_dadd+0xa2>
 80016f4:	0002      	movs	r2, r0
 80016f6:	431a      	orrs	r2, r3
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x44c>
 80016fa:	e0bd      	b.n	8001878 <__aeabi_dadd+0x5c8>
 80016fc:	4662      	mov	r2, ip
 80016fe:	4664      	mov	r4, ip
 8001700:	3a01      	subs	r2, #1
 8001702:	2c01      	cmp	r4, #1
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x458>
 8001706:	e0e5      	b.n	80018d4 <__aeabi_dadd+0x624>
 8001708:	4c85      	ldr	r4, [pc, #532]	; (8001920 <__aeabi_dadd+0x670>)
 800170a:	45a4      	cmp	ip, r4
 800170c:	d058      	beq.n	80017c0 <__aeabi_dadd+0x510>
 800170e:	4694      	mov	ip, r2
 8001710:	e749      	b.n	80015a6 <__aeabi_dadd+0x2f6>
 8001712:	4664      	mov	r4, ip
 8001714:	2220      	movs	r2, #32
 8001716:	1b12      	subs	r2, r2, r4
 8001718:	4644      	mov	r4, r8
 800171a:	4094      	lsls	r4, r2
 800171c:	000f      	movs	r7, r1
 800171e:	46a1      	mov	r9, r4
 8001720:	4664      	mov	r4, ip
 8001722:	4091      	lsls	r1, r2
 8001724:	40e7      	lsrs	r7, r4
 8001726:	464c      	mov	r4, r9
 8001728:	1e4a      	subs	r2, r1, #1
 800172a:	4191      	sbcs	r1, r2
 800172c:	433c      	orrs	r4, r7
 800172e:	4642      	mov	r2, r8
 8001730:	430c      	orrs	r4, r1
 8001732:	4661      	mov	r1, ip
 8001734:	40ca      	lsrs	r2, r1
 8001736:	1880      	adds	r0, r0, r2
 8001738:	e6f4      	b.n	8001524 <__aeabi_dadd+0x274>
 800173a:	4c79      	ldr	r4, [pc, #484]	; (8001920 <__aeabi_dadd+0x670>)
 800173c:	42a2      	cmp	r2, r4
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x492>
 8001740:	e6fd      	b.n	800153e <__aeabi_dadd+0x28e>
 8001742:	1859      	adds	r1, r3, r1
 8001744:	4299      	cmp	r1, r3
 8001746:	419b      	sbcs	r3, r3
 8001748:	4440      	add	r0, r8
 800174a:	425f      	negs	r7, r3
 800174c:	19c7      	adds	r7, r0, r7
 800174e:	07fc      	lsls	r4, r7, #31
 8001750:	0849      	lsrs	r1, r1, #1
 8001752:	0016      	movs	r6, r2
 8001754:	430c      	orrs	r4, r1
 8001756:	087f      	lsrs	r7, r7, #1
 8001758:	e6cf      	b.n	80014fa <__aeabi_dadd+0x24a>
 800175a:	1acc      	subs	r4, r1, r3
 800175c:	42a1      	cmp	r1, r4
 800175e:	41bf      	sbcs	r7, r7
 8001760:	4643      	mov	r3, r8
 8001762:	427f      	negs	r7, r7
 8001764:	1a18      	subs	r0, r3, r0
 8001766:	4655      	mov	r5, sl
 8001768:	1bc7      	subs	r7, r0, r7
 800176a:	e5f7      	b.n	800135c <__aeabi_dadd+0xac>
 800176c:	08c9      	lsrs	r1, r1, #3
 800176e:	077b      	lsls	r3, r7, #29
 8001770:	4655      	mov	r5, sl
 8001772:	430b      	orrs	r3, r1
 8001774:	08f8      	lsrs	r0, r7, #3
 8001776:	e6c8      	b.n	800150a <__aeabi_dadd+0x25a>
 8001778:	2c00      	cmp	r4, #0
 800177a:	d000      	beq.n	800177e <__aeabi_dadd+0x4ce>
 800177c:	e081      	b.n	8001882 <__aeabi_dadd+0x5d2>
 800177e:	4643      	mov	r3, r8
 8001780:	430b      	orrs	r3, r1
 8001782:	d115      	bne.n	80017b0 <__aeabi_dadd+0x500>
 8001784:	2080      	movs	r0, #128	; 0x80
 8001786:	2500      	movs	r5, #0
 8001788:	0300      	lsls	r0, r0, #12
 800178a:	e6e3      	b.n	8001554 <__aeabi_dadd+0x2a4>
 800178c:	1a5c      	subs	r4, r3, r1
 800178e:	42a3      	cmp	r3, r4
 8001790:	419b      	sbcs	r3, r3
 8001792:	1bc7      	subs	r7, r0, r7
 8001794:	425b      	negs	r3, r3
 8001796:	2601      	movs	r6, #1
 8001798:	1aff      	subs	r7, r7, r3
 800179a:	e5da      	b.n	8001352 <__aeabi_dadd+0xa2>
 800179c:	0742      	lsls	r2, r0, #29
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	08c0      	lsrs	r0, r0, #3
 80017a4:	e6d2      	b.n	800154c <__aeabi_dadd+0x29c>
 80017a6:	0742      	lsls	r2, r0, #29
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	08c0      	lsrs	r0, r0, #3
 80017ae:	e6ac      	b.n	800150a <__aeabi_dadd+0x25a>
 80017b0:	4643      	mov	r3, r8
 80017b2:	4642      	mov	r2, r8
 80017b4:	08c9      	lsrs	r1, r1, #3
 80017b6:	075b      	lsls	r3, r3, #29
 80017b8:	4655      	mov	r5, sl
 80017ba:	430b      	orrs	r3, r1
 80017bc:	08d0      	lsrs	r0, r2, #3
 80017be:	e6c5      	b.n	800154c <__aeabi_dadd+0x29c>
 80017c0:	4643      	mov	r3, r8
 80017c2:	4642      	mov	r2, r8
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	430b      	orrs	r3, r1
 80017ca:	08d0      	lsrs	r0, r2, #3
 80017cc:	e6be      	b.n	800154c <__aeabi_dadd+0x29c>
 80017ce:	4303      	orrs	r3, r0
 80017d0:	001c      	movs	r4, r3
 80017d2:	1e63      	subs	r3, r4, #1
 80017d4:	419c      	sbcs	r4, r3
 80017d6:	e6fc      	b.n	80015d2 <__aeabi_dadd+0x322>
 80017d8:	0002      	movs	r2, r0
 80017da:	3c20      	subs	r4, #32
 80017dc:	40e2      	lsrs	r2, r4
 80017de:	0014      	movs	r4, r2
 80017e0:	4662      	mov	r2, ip
 80017e2:	2a20      	cmp	r2, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dadd+0x53e>
 80017e6:	2540      	movs	r5, #64	; 0x40
 80017e8:	1aad      	subs	r5, r5, r2
 80017ea:	40a8      	lsls	r0, r5
 80017ec:	4303      	orrs	r3, r0
 80017ee:	1e58      	subs	r0, r3, #1
 80017f0:	4183      	sbcs	r3, r0
 80017f2:	4323      	orrs	r3, r4
 80017f4:	e775      	b.n	80016e2 <__aeabi_dadd+0x432>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d0e2      	beq.n	80017c0 <__aeabi_dadd+0x510>
 80017fa:	003a      	movs	r2, r7
 80017fc:	430a      	orrs	r2, r1
 80017fe:	d0cd      	beq.n	800179c <__aeabi_dadd+0x4ec>
 8001800:	0742      	lsls	r2, r0, #29
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	4313      	orrs	r3, r2
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	08c0      	lsrs	r0, r0, #3
 800180a:	0312      	lsls	r2, r2, #12
 800180c:	4210      	tst	r0, r2
 800180e:	d006      	beq.n	800181e <__aeabi_dadd+0x56e>
 8001810:	08fc      	lsrs	r4, r7, #3
 8001812:	4214      	tst	r4, r2
 8001814:	d103      	bne.n	800181e <__aeabi_dadd+0x56e>
 8001816:	0020      	movs	r0, r4
 8001818:	08cb      	lsrs	r3, r1, #3
 800181a:	077a      	lsls	r2, r7, #29
 800181c:	4313      	orrs	r3, r2
 800181e:	0f5a      	lsrs	r2, r3, #29
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	0752      	lsls	r2, r2, #29
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	4313      	orrs	r3, r2
 8001828:	e690      	b.n	800154c <__aeabi_dadd+0x29c>
 800182a:	4643      	mov	r3, r8
 800182c:	430b      	orrs	r3, r1
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x582>
 8001830:	e709      	b.n	8001646 <__aeabi_dadd+0x396>
 8001832:	4643      	mov	r3, r8
 8001834:	4642      	mov	r2, r8
 8001836:	08c9      	lsrs	r1, r1, #3
 8001838:	075b      	lsls	r3, r3, #29
 800183a:	4655      	mov	r5, sl
 800183c:	430b      	orrs	r3, r1
 800183e:	08d0      	lsrs	r0, r2, #3
 8001840:	e666      	b.n	8001510 <__aeabi_dadd+0x260>
 8001842:	1acc      	subs	r4, r1, r3
 8001844:	42a1      	cmp	r1, r4
 8001846:	4189      	sbcs	r1, r1
 8001848:	1a3f      	subs	r7, r7, r0
 800184a:	4249      	negs	r1, r1
 800184c:	4655      	mov	r5, sl
 800184e:	2601      	movs	r6, #1
 8001850:	1a7f      	subs	r7, r7, r1
 8001852:	e57e      	b.n	8001352 <__aeabi_dadd+0xa2>
 8001854:	4642      	mov	r2, r8
 8001856:	1a5c      	subs	r4, r3, r1
 8001858:	1a87      	subs	r7, r0, r2
 800185a:	42a3      	cmp	r3, r4
 800185c:	4192      	sbcs	r2, r2
 800185e:	4252      	negs	r2, r2
 8001860:	1abf      	subs	r7, r7, r2
 8001862:	023a      	lsls	r2, r7, #8
 8001864:	d53d      	bpl.n	80018e2 <__aeabi_dadd+0x632>
 8001866:	1acc      	subs	r4, r1, r3
 8001868:	42a1      	cmp	r1, r4
 800186a:	4189      	sbcs	r1, r1
 800186c:	4643      	mov	r3, r8
 800186e:	4249      	negs	r1, r1
 8001870:	1a1f      	subs	r7, r3, r0
 8001872:	4655      	mov	r5, sl
 8001874:	1a7f      	subs	r7, r7, r1
 8001876:	e595      	b.n	80013a4 <__aeabi_dadd+0xf4>
 8001878:	077b      	lsls	r3, r7, #29
 800187a:	08c9      	lsrs	r1, r1, #3
 800187c:	430b      	orrs	r3, r1
 800187e:	08f8      	lsrs	r0, r7, #3
 8001880:	e643      	b.n	800150a <__aeabi_dadd+0x25a>
 8001882:	4644      	mov	r4, r8
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	430c      	orrs	r4, r1
 8001888:	d130      	bne.n	80018ec <__aeabi_dadd+0x63c>
 800188a:	0742      	lsls	r2, r0, #29
 800188c:	4313      	orrs	r3, r2
 800188e:	08c0      	lsrs	r0, r0, #3
 8001890:	e65c      	b.n	800154c <__aeabi_dadd+0x29c>
 8001892:	077b      	lsls	r3, r7, #29
 8001894:	08c9      	lsrs	r1, r1, #3
 8001896:	430b      	orrs	r3, r1
 8001898:	08f8      	lsrs	r0, r7, #3
 800189a:	e639      	b.n	8001510 <__aeabi_dadd+0x260>
 800189c:	185c      	adds	r4, r3, r1
 800189e:	429c      	cmp	r4, r3
 80018a0:	419b      	sbcs	r3, r3
 80018a2:	4440      	add	r0, r8
 80018a4:	425b      	negs	r3, r3
 80018a6:	18c7      	adds	r7, r0, r3
 80018a8:	023b      	lsls	r3, r7, #8
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dadd+0x5fe>
 80018ac:	e625      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <__aeabi_dadd+0x674>)
 80018b0:	2601      	movs	r6, #1
 80018b2:	401f      	ands	r7, r3
 80018b4:	e621      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018b6:	0004      	movs	r4, r0
 80018b8:	3a20      	subs	r2, #32
 80018ba:	40d4      	lsrs	r4, r2
 80018bc:	4662      	mov	r2, ip
 80018be:	2a20      	cmp	r2, #32
 80018c0:	d004      	beq.n	80018cc <__aeabi_dadd+0x61c>
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	4666      	mov	r6, ip
 80018c6:	1b92      	subs	r2, r2, r6
 80018c8:	4090      	lsls	r0, r2
 80018ca:	4303      	orrs	r3, r0
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	4193      	sbcs	r3, r2
 80018d0:	431c      	orrs	r4, r3
 80018d2:	e67e      	b.n	80015d2 <__aeabi_dadd+0x322>
 80018d4:	185c      	adds	r4, r3, r1
 80018d6:	428c      	cmp	r4, r1
 80018d8:	4189      	sbcs	r1, r1
 80018da:	4440      	add	r0, r8
 80018dc:	4249      	negs	r1, r1
 80018de:	1847      	adds	r7, r0, r1
 80018e0:	e6dd      	b.n	800169e <__aeabi_dadd+0x3ee>
 80018e2:	0023      	movs	r3, r4
 80018e4:	433b      	orrs	r3, r7
 80018e6:	d100      	bne.n	80018ea <__aeabi_dadd+0x63a>
 80018e8:	e6ad      	b.n	8001646 <__aeabi_dadd+0x396>
 80018ea:	e606      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018ec:	0744      	lsls	r4, r0, #29
 80018ee:	4323      	orrs	r3, r4
 80018f0:	2480      	movs	r4, #128	; 0x80
 80018f2:	08c0      	lsrs	r0, r0, #3
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	4220      	tst	r0, r4
 80018f8:	d008      	beq.n	800190c <__aeabi_dadd+0x65c>
 80018fa:	4642      	mov	r2, r8
 80018fc:	08d6      	lsrs	r6, r2, #3
 80018fe:	4226      	tst	r6, r4
 8001900:	d104      	bne.n	800190c <__aeabi_dadd+0x65c>
 8001902:	4655      	mov	r5, sl
 8001904:	0030      	movs	r0, r6
 8001906:	08cb      	lsrs	r3, r1, #3
 8001908:	0751      	lsls	r1, r2, #29
 800190a:	430b      	orrs	r3, r1
 800190c:	0f5a      	lsrs	r2, r3, #29
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	0752      	lsls	r2, r2, #29
 8001914:	4313      	orrs	r3, r2
 8001916:	e619      	b.n	800154c <__aeabi_dadd+0x29c>
 8001918:	2300      	movs	r3, #0
 800191a:	4a01      	ldr	r2, [pc, #4]	; (8001920 <__aeabi_dadd+0x670>)
 800191c:	001f      	movs	r7, r3
 800191e:	e55e      	b.n	80013de <__aeabi_dadd+0x12e>
 8001920:	000007ff 	.word	0x000007ff
 8001924:	ff7fffff 	.word	0xff7fffff

08001928 <__aeabi_ddiv>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	4657      	mov	r7, sl
 800192c:	464e      	mov	r6, r9
 800192e:	4645      	mov	r5, r8
 8001930:	46de      	mov	lr, fp
 8001932:	b5e0      	push	{r5, r6, r7, lr}
 8001934:	4681      	mov	r9, r0
 8001936:	0005      	movs	r5, r0
 8001938:	030c      	lsls	r4, r1, #12
 800193a:	0048      	lsls	r0, r1, #1
 800193c:	4692      	mov	sl, r2
 800193e:	001f      	movs	r7, r3
 8001940:	b085      	sub	sp, #20
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	0d40      	lsrs	r0, r0, #21
 8001946:	0fce      	lsrs	r6, r1, #31
 8001948:	2800      	cmp	r0, #0
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x26>
 800194c:	e156      	b.n	8001bfc <__aeabi_ddiv+0x2d4>
 800194e:	4bd4      	ldr	r3, [pc, #848]	; (8001ca0 <__aeabi_ddiv+0x378>)
 8001950:	4298      	cmp	r0, r3
 8001952:	d100      	bne.n	8001956 <__aeabi_ddiv+0x2e>
 8001954:	e172      	b.n	8001c3c <__aeabi_ddiv+0x314>
 8001956:	0f6b      	lsrs	r3, r5, #29
 8001958:	00e4      	lsls	r4, r4, #3
 800195a:	431c      	orrs	r4, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	4323      	orrs	r3, r4
 8001962:	4698      	mov	r8, r3
 8001964:	4bcf      	ldr	r3, [pc, #828]	; (8001ca4 <__aeabi_ddiv+0x37c>)
 8001966:	00ed      	lsls	r5, r5, #3
 8001968:	469b      	mov	fp, r3
 800196a:	2300      	movs	r3, #0
 800196c:	4699      	mov	r9, r3
 800196e:	4483      	add	fp, r0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	033c      	lsls	r4, r7, #12
 8001974:	007b      	lsls	r3, r7, #1
 8001976:	4650      	mov	r0, sl
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	0fff      	lsrs	r7, r7, #31
 800197e:	2b00      	cmp	r3, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x5c>
 8001982:	e11f      	b.n	8001bc4 <__aeabi_ddiv+0x29c>
 8001984:	4ac6      	ldr	r2, [pc, #792]	; (8001ca0 <__aeabi_ddiv+0x378>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d100      	bne.n	800198c <__aeabi_ddiv+0x64>
 800198a:	e162      	b.n	8001c52 <__aeabi_ddiv+0x32a>
 800198c:	49c5      	ldr	r1, [pc, #788]	; (8001ca4 <__aeabi_ddiv+0x37c>)
 800198e:	0f42      	lsrs	r2, r0, #29
 8001990:	468c      	mov	ip, r1
 8001992:	00e4      	lsls	r4, r4, #3
 8001994:	4659      	mov	r1, fp
 8001996:	4314      	orrs	r4, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	4463      	add	r3, ip
 800199c:	0412      	lsls	r2, r2, #16
 800199e:	1acb      	subs	r3, r1, r3
 80019a0:	4314      	orrs	r4, r2
 80019a2:	469b      	mov	fp, r3
 80019a4:	00c2      	lsls	r2, r0, #3
 80019a6:	2000      	movs	r0, #0
 80019a8:	0033      	movs	r3, r6
 80019aa:	407b      	eors	r3, r7
 80019ac:	469a      	mov	sl, r3
 80019ae:	464b      	mov	r3, r9
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d827      	bhi.n	8001a04 <__aeabi_ddiv+0xdc>
 80019b4:	49bc      	ldr	r1, [pc, #752]	; (8001ca8 <__aeabi_ddiv+0x380>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	58cb      	ldr	r3, [r1, r3]
 80019ba:	469f      	mov	pc, r3
 80019bc:	46b2      	mov	sl, r6
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d016      	beq.n	80019f2 <__aeabi_ddiv+0xca>
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d100      	bne.n	80019ca <__aeabi_ddiv+0xa2>
 80019c8:	e28e      	b.n	8001ee8 <__aeabi_ddiv+0x5c0>
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d000      	beq.n	80019d0 <__aeabi_ddiv+0xa8>
 80019ce:	e0d9      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	4652      	mov	r2, sl
 80019d8:	051b      	lsls	r3, r3, #20
 80019da:	4323      	orrs	r3, r4
 80019dc:	07d2      	lsls	r2, r2, #31
 80019de:	4313      	orrs	r3, r2
 80019e0:	0028      	movs	r0, r5
 80019e2:	0019      	movs	r1, r3
 80019e4:	b005      	add	sp, #20
 80019e6:	bcf0      	pop	{r4, r5, r6, r7}
 80019e8:	46bb      	mov	fp, r7
 80019ea:	46b2      	mov	sl, r6
 80019ec:	46a9      	mov	r9, r5
 80019ee:	46a0      	mov	r8, r4
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	4baa      	ldr	r3, [pc, #680]	; (8001ca0 <__aeabi_ddiv+0x378>)
 80019f8:	e7ed      	b.n	80019d6 <__aeabi_ddiv+0xae>
 80019fa:	46ba      	mov	sl, r7
 80019fc:	46a0      	mov	r8, r4
 80019fe:	0015      	movs	r5, r2
 8001a00:	9000      	str	r0, [sp, #0]
 8001a02:	e7dc      	b.n	80019be <__aeabi_ddiv+0x96>
 8001a04:	4544      	cmp	r4, r8
 8001a06:	d200      	bcs.n	8001a0a <__aeabi_ddiv+0xe2>
 8001a08:	e1c7      	b.n	8001d9a <__aeabi_ddiv+0x472>
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0xe6>
 8001a0c:	e1c2      	b.n	8001d94 <__aeabi_ddiv+0x46c>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	425b      	negs	r3, r3
 8001a12:	469c      	mov	ip, r3
 8001a14:	002e      	movs	r6, r5
 8001a16:	4640      	mov	r0, r8
 8001a18:	2500      	movs	r5, #0
 8001a1a:	44e3      	add	fp, ip
 8001a1c:	0223      	lsls	r3, r4, #8
 8001a1e:	0e14      	lsrs	r4, r2, #24
 8001a20:	431c      	orrs	r4, r3
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	4699      	mov	r9, r3
 8001a26:	0423      	lsls	r3, r4, #16
 8001a28:	0c1f      	lsrs	r7, r3, #16
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	9701      	str	r7, [sp, #4]
 8001a32:	f7fe fc09 	bl	8000248 <__aeabi_uidivmod>
 8001a36:	0002      	movs	r2, r0
 8001a38:	437a      	muls	r2, r7
 8001a3a:	040b      	lsls	r3, r1, #16
 8001a3c:	0c31      	lsrs	r1, r6, #16
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4319      	orrs	r1, r3
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d907      	bls.n	8001a56 <__aeabi_ddiv+0x12e>
 8001a46:	2301      	movs	r3, #1
 8001a48:	425b      	negs	r3, r3
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	1909      	adds	r1, r1, r4
 8001a4e:	44e0      	add	r8, ip
 8001a50:	428c      	cmp	r4, r1
 8001a52:	d800      	bhi.n	8001a56 <__aeabi_ddiv+0x12e>
 8001a54:	e207      	b.n	8001e66 <__aeabi_ddiv+0x53e>
 8001a56:	1a88      	subs	r0, r1, r2
 8001a58:	4649      	mov	r1, r9
 8001a5a:	f7fe fbf5 	bl	8000248 <__aeabi_uidivmod>
 8001a5e:	0409      	lsls	r1, r1, #16
 8001a60:	468c      	mov	ip, r1
 8001a62:	0431      	lsls	r1, r6, #16
 8001a64:	4666      	mov	r6, ip
 8001a66:	9a01      	ldr	r2, [sp, #4]
 8001a68:	0c09      	lsrs	r1, r1, #16
 8001a6a:	4342      	muls	r2, r0
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	4331      	orrs	r1, r6
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d904      	bls.n	8001a7e <__aeabi_ddiv+0x156>
 8001a74:	1909      	adds	r1, r1, r4
 8001a76:	3b01      	subs	r3, #1
 8001a78:	428c      	cmp	r4, r1
 8001a7a:	d800      	bhi.n	8001a7e <__aeabi_ddiv+0x156>
 8001a7c:	e1ed      	b.n	8001e5a <__aeabi_ddiv+0x532>
 8001a7e:	1a88      	subs	r0, r1, r2
 8001a80:	4642      	mov	r2, r8
 8001a82:	0412      	lsls	r2, r2, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4641      	mov	r1, r8
 8001a8a:	9b00      	ldr	r3, [sp, #0]
 8001a8c:	040e      	lsls	r6, r1, #16
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	001f      	movs	r7, r3
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	0c36      	lsrs	r6, r6, #16
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	0c19      	lsrs	r1, r3, #16
 8001a9c:	000b      	movs	r3, r1
 8001a9e:	4373      	muls	r3, r6
 8001aa0:	0c12      	lsrs	r2, r2, #16
 8001aa2:	437e      	muls	r6, r7
 8001aa4:	9103      	str	r1, [sp, #12]
 8001aa6:	4351      	muls	r1, r2
 8001aa8:	437a      	muls	r2, r7
 8001aaa:	0c1f      	lsrs	r7, r3, #16
 8001aac:	46bc      	mov	ip, r7
 8001aae:	1876      	adds	r6, r6, r1
 8001ab0:	4466      	add	r6, ip
 8001ab2:	42b1      	cmp	r1, r6
 8001ab4:	d903      	bls.n	8001abe <__aeabi_ddiv+0x196>
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	468c      	mov	ip, r1
 8001abc:	4462      	add	r2, ip
 8001abe:	0c31      	lsrs	r1, r6, #16
 8001ac0:	188a      	adds	r2, r1, r2
 8001ac2:	0431      	lsls	r1, r6, #16
 8001ac4:	041e      	lsls	r6, r3, #16
 8001ac6:	0c36      	lsrs	r6, r6, #16
 8001ac8:	198e      	adds	r6, r1, r6
 8001aca:	4290      	cmp	r0, r2
 8001acc:	d302      	bcc.n	8001ad4 <__aeabi_ddiv+0x1ac>
 8001ace:	d112      	bne.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001ad0:	42b5      	cmp	r5, r6
 8001ad2:	d210      	bcs.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	1e59      	subs	r1, r3, #1
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	469c      	mov	ip, r3
 8001adc:	4465      	add	r5, ip
 8001ade:	001f      	movs	r7, r3
 8001ae0:	429d      	cmp	r5, r3
 8001ae2:	419b      	sbcs	r3, r3
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	191b      	adds	r3, r3, r4
 8001ae8:	18c0      	adds	r0, r0, r3
 8001aea:	4284      	cmp	r4, r0
 8001aec:	d200      	bcs.n	8001af0 <__aeabi_ddiv+0x1c8>
 8001aee:	e1a0      	b.n	8001e32 <__aeabi_ddiv+0x50a>
 8001af0:	d100      	bne.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001af2:	e19b      	b.n	8001e2c <__aeabi_ddiv+0x504>
 8001af4:	4688      	mov	r8, r1
 8001af6:	1bae      	subs	r6, r5, r6
 8001af8:	42b5      	cmp	r5, r6
 8001afa:	41ad      	sbcs	r5, r5
 8001afc:	1a80      	subs	r0, r0, r2
 8001afe:	426d      	negs	r5, r5
 8001b00:	1b40      	subs	r0, r0, r5
 8001b02:	4284      	cmp	r4, r0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_ddiv+0x1e0>
 8001b06:	e1d5      	b.n	8001eb4 <__aeabi_ddiv+0x58c>
 8001b08:	4649      	mov	r1, r9
 8001b0a:	f7fe fb9d 	bl	8000248 <__aeabi_uidivmod>
 8001b0e:	9a01      	ldr	r2, [sp, #4]
 8001b10:	040b      	lsls	r3, r1, #16
 8001b12:	4342      	muls	r2, r0
 8001b14:	0c31      	lsrs	r1, r6, #16
 8001b16:	0005      	movs	r5, r0
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d900      	bls.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001b1e:	e16c      	b.n	8001dfa <__aeabi_ddiv+0x4d2>
 8001b20:	1a88      	subs	r0, r1, r2
 8001b22:	4649      	mov	r1, r9
 8001b24:	f7fe fb90 	bl	8000248 <__aeabi_uidivmod>
 8001b28:	9a01      	ldr	r2, [sp, #4]
 8001b2a:	0436      	lsls	r6, r6, #16
 8001b2c:	4342      	muls	r2, r0
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	0c36      	lsrs	r6, r6, #16
 8001b32:	0003      	movs	r3, r0
 8001b34:	430e      	orrs	r6, r1
 8001b36:	42b2      	cmp	r2, r6
 8001b38:	d900      	bls.n	8001b3c <__aeabi_ddiv+0x214>
 8001b3a:	e153      	b.n	8001de4 <__aeabi_ddiv+0x4bc>
 8001b3c:	9803      	ldr	r0, [sp, #12]
 8001b3e:	1ab6      	subs	r6, r6, r2
 8001b40:	0002      	movs	r2, r0
 8001b42:	042d      	lsls	r5, r5, #16
 8001b44:	431d      	orrs	r5, r3
 8001b46:	9f02      	ldr	r7, [sp, #8]
 8001b48:	042b      	lsls	r3, r5, #16
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	435a      	muls	r2, r3
 8001b4e:	437b      	muls	r3, r7
 8001b50:	469c      	mov	ip, r3
 8001b52:	0c29      	lsrs	r1, r5, #16
 8001b54:	4348      	muls	r0, r1
 8001b56:	0c13      	lsrs	r3, r2, #16
 8001b58:	4484      	add	ip, r0
 8001b5a:	4463      	add	r3, ip
 8001b5c:	4379      	muls	r1, r7
 8001b5e:	4298      	cmp	r0, r3
 8001b60:	d903      	bls.n	8001b6a <__aeabi_ddiv+0x242>
 8001b62:	2080      	movs	r0, #128	; 0x80
 8001b64:	0240      	lsls	r0, r0, #9
 8001b66:	4684      	mov	ip, r0
 8001b68:	4461      	add	r1, ip
 8001b6a:	0c18      	lsrs	r0, r3, #16
 8001b6c:	0412      	lsls	r2, r2, #16
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	0c12      	lsrs	r2, r2, #16
 8001b72:	1841      	adds	r1, r0, r1
 8001b74:	189b      	adds	r3, r3, r2
 8001b76:	428e      	cmp	r6, r1
 8001b78:	d200      	bcs.n	8001b7c <__aeabi_ddiv+0x254>
 8001b7a:	e0ff      	b.n	8001d7c <__aeabi_ddiv+0x454>
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_ddiv+0x258>
 8001b7e:	e0fa      	b.n	8001d76 <__aeabi_ddiv+0x44e>
 8001b80:	2301      	movs	r3, #1
 8001b82:	431d      	orrs	r5, r3
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <__aeabi_ddiv+0x384>)
 8001b86:	445a      	add	r2, fp
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	dc00      	bgt.n	8001b8e <__aeabi_ddiv+0x266>
 8001b8c:	e0aa      	b.n	8001ce4 <__aeabi_ddiv+0x3bc>
 8001b8e:	076b      	lsls	r3, r5, #29
 8001b90:	d000      	beq.n	8001b94 <__aeabi_ddiv+0x26c>
 8001b92:	e13d      	b.n	8001e10 <__aeabi_ddiv+0x4e8>
 8001b94:	08ed      	lsrs	r5, r5, #3
 8001b96:	4643      	mov	r3, r8
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	d506      	bpl.n	8001baa <__aeabi_ddiv+0x282>
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <__aeabi_ddiv+0x388>)
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	445a      	add	r2, fp
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <__aeabi_ddiv+0x38c>)
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dd00      	ble.n	8001bb2 <__aeabi_ddiv+0x28a>
 8001bb0:	e71f      	b.n	80019f2 <__aeabi_ddiv+0xca>
 8001bb2:	4643      	mov	r3, r8
 8001bb4:	075b      	lsls	r3, r3, #29
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	0552      	lsls	r2, r2, #21
 8001bbc:	025c      	lsls	r4, r3, #9
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	0d53      	lsrs	r3, r2, #21
 8001bc2:	e708      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	4322      	orrs	r2, r4
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x2a4>
 8001bca:	e07b      	b.n	8001cc4 <__aeabi_ddiv+0x39c>
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x2aa>
 8001bd0:	e0fa      	b.n	8001dc8 <__aeabi_ddiv+0x4a0>
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f001 f99a 	bl	8002f0c <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	3a0b      	subs	r2, #11
 8001bdc:	231d      	movs	r3, #29
 8001bde:	0001      	movs	r1, r0
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	4652      	mov	r2, sl
 8001be4:	3908      	subs	r1, #8
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	408c      	lsls	r4, r1
 8001bea:	4314      	orrs	r4, r2
 8001bec:	4652      	mov	r2, sl
 8001bee:	408a      	lsls	r2, r1
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <__aeabi_ddiv+0x390>)
 8001bf2:	4458      	add	r0, fp
 8001bf4:	469b      	mov	fp, r3
 8001bf6:	4483      	add	fp, r0
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e6d5      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	4698      	mov	r8, r3
 8001c02:	d044      	beq.n	8001c8e <__aeabi_ddiv+0x366>
 8001c04:	2c00      	cmp	r4, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_ddiv+0x2e2>
 8001c08:	e0ce      	b.n	8001da8 <__aeabi_ddiv+0x480>
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f001 f97e 	bl	8002f0c <__clzsi2>
 8001c10:	0001      	movs	r1, r0
 8001c12:	0002      	movs	r2, r0
 8001c14:	390b      	subs	r1, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	1a5b      	subs	r3, r3, r1
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	40d9      	lsrs	r1, r3
 8001c20:	3808      	subs	r0, #8
 8001c22:	4084      	lsls	r4, r0
 8001c24:	000b      	movs	r3, r1
 8001c26:	464d      	mov	r5, r9
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	4085      	lsls	r5, r0
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <__aeabi_ddiv+0x394>)
 8001c30:	1a83      	subs	r3, r0, r2
 8001c32:	469b      	mov	fp, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	4699      	mov	r9, r3
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	e69a      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	4698      	mov	r8, r3
 8001c42:	d11d      	bne.n	8001c80 <__aeabi_ddiv+0x358>
 8001c44:	2308      	movs	r3, #8
 8001c46:	4699      	mov	r9, r3
 8001c48:	3b06      	subs	r3, #6
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	4683      	mov	fp, r0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	e68f      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c52:	4652      	mov	r2, sl
 8001c54:	4322      	orrs	r2, r4
 8001c56:	d109      	bne.n	8001c6c <__aeabi_ddiv+0x344>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	4319      	orrs	r1, r3
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <__aeabi_ddiv+0x398>)
 8001c60:	4689      	mov	r9, r1
 8001c62:	469c      	mov	ip, r3
 8001c64:	2400      	movs	r4, #0
 8001c66:	2002      	movs	r0, #2
 8001c68:	44e3      	add	fp, ip
 8001c6a:	e69d      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	464a      	mov	r2, r9
 8001c70:	431a      	orrs	r2, r3
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <__aeabi_ddiv+0x398>)
 8001c74:	4691      	mov	r9, r2
 8001c76:	469c      	mov	ip, r3
 8001c78:	4652      	mov	r2, sl
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	44e3      	add	fp, ip
 8001c7e:	e693      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001c80:	230c      	movs	r3, #12
 8001c82:	4699      	mov	r9, r3
 8001c84:	3b09      	subs	r3, #9
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4683      	mov	fp, r0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	e671      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	4699      	mov	r9, r3
 8001c92:	2300      	movs	r3, #0
 8001c94:	469b      	mov	fp, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	2500      	movs	r5, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	e669      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	000007ff 	.word	0x000007ff
 8001ca4:	fffffc01 	.word	0xfffffc01
 8001ca8:	0800b9c4 	.word	0x0800b9c4
 8001cac:	000003ff 	.word	0x000003ff
 8001cb0:	feffffff 	.word	0xfeffffff
 8001cb4:	000007fe 	.word	0x000007fe
 8001cb8:	000003f3 	.word	0x000003f3
 8001cbc:	fffffc0d 	.word	0xfffffc0d
 8001cc0:	fffff801 	.word	0xfffff801
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	4689      	mov	r9, r1
 8001ccc:	2400      	movs	r4, #0
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e66a      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2480      	movs	r4, #128	; 0x80
 8001cd6:	469a      	mov	sl, r3
 8001cd8:	2500      	movs	r5, #0
 8001cda:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001cdc:	0324      	lsls	r4, r4, #12
 8001cde:	e67a      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ce0:	2501      	movs	r5, #1
 8001ce2:	426d      	negs	r5, r5
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	2b38      	cmp	r3, #56	; 0x38
 8001cea:	dd00      	ble.n	8001cee <__aeabi_ddiv+0x3c6>
 8001cec:	e670      	b.n	80019d0 <__aeabi_ddiv+0xa8>
 8001cee:	2b1f      	cmp	r3, #31
 8001cf0:	dc00      	bgt.n	8001cf4 <__aeabi_ddiv+0x3cc>
 8001cf2:	e0bf      	b.n	8001e74 <__aeabi_ddiv+0x54c>
 8001cf4:	211f      	movs	r1, #31
 8001cf6:	4249      	negs	r1, r1
 8001cf8:	1a8a      	subs	r2, r1, r2
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	40d1      	lsrs	r1, r2
 8001cfe:	000a      	movs	r2, r1
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d004      	beq.n	8001d0e <__aeabi_ddiv+0x3e6>
 8001d04:	4641      	mov	r1, r8
 8001d06:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <__aeabi_ddiv+0x5e0>)
 8001d08:	445b      	add	r3, fp
 8001d0a:	4099      	lsls	r1, r3
 8001d0c:	430d      	orrs	r5, r1
 8001d0e:	1e6b      	subs	r3, r5, #1
 8001d10:	419d      	sbcs	r5, r3
 8001d12:	2307      	movs	r3, #7
 8001d14:	432a      	orrs	r2, r5
 8001d16:	001d      	movs	r5, r3
 8001d18:	2400      	movs	r4, #0
 8001d1a:	4015      	ands	r5, r2
 8001d1c:	4213      	tst	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_ddiv+0x3fa>
 8001d20:	e0d4      	b.n	8001ecc <__aeabi_ddiv+0x5a4>
 8001d22:	210f      	movs	r1, #15
 8001d24:	2300      	movs	r3, #0
 8001d26:	4011      	ands	r1, r2
 8001d28:	2904      	cmp	r1, #4
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_ddiv+0x406>
 8001d2c:	e0cb      	b.n	8001ec6 <__aeabi_ddiv+0x59e>
 8001d2e:	1d11      	adds	r1, r2, #4
 8001d30:	4291      	cmp	r1, r2
 8001d32:	4192      	sbcs	r2, r2
 8001d34:	4252      	negs	r2, r2
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	000a      	movs	r2, r1
 8001d3a:	0219      	lsls	r1, r3, #8
 8001d3c:	d400      	bmi.n	8001d40 <__aeabi_ddiv+0x418>
 8001d3e:	e0c2      	b.n	8001ec6 <__aeabi_ddiv+0x59e>
 8001d40:	2301      	movs	r3, #1
 8001d42:	2400      	movs	r4, #0
 8001d44:	2500      	movs	r5, #0
 8001d46:	e646      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	4219      	tst	r1, r3
 8001d50:	d008      	beq.n	8001d64 <__aeabi_ddiv+0x43c>
 8001d52:	421c      	tst	r4, r3
 8001d54:	d106      	bne.n	8001d64 <__aeabi_ddiv+0x43c>
 8001d56:	431c      	orrs	r4, r3
 8001d58:	0324      	lsls	r4, r4, #12
 8001d5a:	46ba      	mov	sl, r7
 8001d5c:	0015      	movs	r5, r2
 8001d5e:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001d60:	0b24      	lsrs	r4, r4, #12
 8001d62:	e638      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d64:	2480      	movs	r4, #128	; 0x80
 8001d66:	4643      	mov	r3, r8
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	431c      	orrs	r4, r3
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	46b2      	mov	sl, r6
 8001d70:	4b64      	ldr	r3, [pc, #400]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001d72:	0b24      	lsrs	r4, r4, #12
 8001d74:	e62f      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_ddiv+0x454>
 8001d7a:	e703      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 8001d7c:	19a6      	adds	r6, r4, r6
 8001d7e:	1e68      	subs	r0, r5, #1
 8001d80:	42a6      	cmp	r6, r4
 8001d82:	d200      	bcs.n	8001d86 <__aeabi_ddiv+0x45e>
 8001d84:	e08d      	b.n	8001ea2 <__aeabi_ddiv+0x57a>
 8001d86:	428e      	cmp	r6, r1
 8001d88:	d200      	bcs.n	8001d8c <__aeabi_ddiv+0x464>
 8001d8a:	e0a3      	b.n	8001ed4 <__aeabi_ddiv+0x5ac>
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x468>
 8001d8e:	e0b3      	b.n	8001ef8 <__aeabi_ddiv+0x5d0>
 8001d90:	0005      	movs	r5, r0
 8001d92:	e6f5      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001d94:	42aa      	cmp	r2, r5
 8001d96:	d900      	bls.n	8001d9a <__aeabi_ddiv+0x472>
 8001d98:	e639      	b.n	8001a0e <__aeabi_ddiv+0xe6>
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	07de      	lsls	r6, r3, #31
 8001d9e:	0858      	lsrs	r0, r3, #1
 8001da0:	086b      	lsrs	r3, r5, #1
 8001da2:	431e      	orrs	r6, r3
 8001da4:	07ed      	lsls	r5, r5, #31
 8001da6:	e639      	b.n	8001a1c <__aeabi_ddiv+0xf4>
 8001da8:	4648      	mov	r0, r9
 8001daa:	f001 f8af 	bl	8002f0c <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0002      	movs	r2, r0
 8001db2:	3115      	adds	r1, #21
 8001db4:	3220      	adds	r2, #32
 8001db6:	291c      	cmp	r1, #28
 8001db8:	dc00      	bgt.n	8001dbc <__aeabi_ddiv+0x494>
 8001dba:	e72c      	b.n	8001c16 <__aeabi_ddiv+0x2ee>
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	3808      	subs	r0, #8
 8001dc0:	4083      	lsls	r3, r0
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e732      	b.n	8001c2e <__aeabi_ddiv+0x306>
 8001dc8:	f001 f8a0 	bl	8002f0c <__clzsi2>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	3215      	adds	r2, #21
 8001dd2:	3020      	adds	r0, #32
 8001dd4:	2a1c      	cmp	r2, #28
 8001dd6:	dc00      	bgt.n	8001dda <__aeabi_ddiv+0x4b2>
 8001dd8:	e700      	b.n	8001bdc <__aeabi_ddiv+0x2b4>
 8001dda:	4654      	mov	r4, sl
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	409c      	lsls	r4, r3
 8001de2:	e705      	b.n	8001bf0 <__aeabi_ddiv+0x2c8>
 8001de4:	1936      	adds	r6, r6, r4
 8001de6:	3b01      	subs	r3, #1
 8001de8:	42b4      	cmp	r4, r6
 8001dea:	d900      	bls.n	8001dee <__aeabi_ddiv+0x4c6>
 8001dec:	e6a6      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001dee:	42b2      	cmp	r2, r6
 8001df0:	d800      	bhi.n	8001df4 <__aeabi_ddiv+0x4cc>
 8001df2:	e6a3      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001df4:	1e83      	subs	r3, r0, #2
 8001df6:	1936      	adds	r6, r6, r4
 8001df8:	e6a0      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001dfa:	1909      	adds	r1, r1, r4
 8001dfc:	3d01      	subs	r5, #1
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d900      	bls.n	8001e04 <__aeabi_ddiv+0x4dc>
 8001e02:	e68d      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e04:	428a      	cmp	r2, r1
 8001e06:	d800      	bhi.n	8001e0a <__aeabi_ddiv+0x4e2>
 8001e08:	e68a      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e0a:	1e85      	subs	r5, r0, #2
 8001e0c:	1909      	adds	r1, r1, r4
 8001e0e:	e687      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e10:	230f      	movs	r3, #15
 8001e12:	402b      	ands	r3, r5
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d100      	bne.n	8001e1a <__aeabi_ddiv+0x4f2>
 8001e18:	e6bc      	b.n	8001b94 <__aeabi_ddiv+0x26c>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	42ab      	cmp	r3, r5
 8001e20:	419b      	sbcs	r3, r3
 8001e22:	3504      	adds	r5, #4
 8001e24:	425b      	negs	r3, r3
 8001e26:	08ed      	lsrs	r5, r5, #3
 8001e28:	4498      	add	r8, r3
 8001e2a:	e6b4      	b.n	8001b96 <__aeabi_ddiv+0x26e>
 8001e2c:	42af      	cmp	r7, r5
 8001e2e:	d900      	bls.n	8001e32 <__aeabi_ddiv+0x50a>
 8001e30:	e660      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e32:	4282      	cmp	r2, r0
 8001e34:	d804      	bhi.n	8001e40 <__aeabi_ddiv+0x518>
 8001e36:	d000      	beq.n	8001e3a <__aeabi_ddiv+0x512>
 8001e38:	e65c      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e3a:	42ae      	cmp	r6, r5
 8001e3c:	d800      	bhi.n	8001e40 <__aeabi_ddiv+0x518>
 8001e3e:	e659      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e40:	2302      	movs	r3, #2
 8001e42:	425b      	negs	r3, r3
 8001e44:	469c      	mov	ip, r3
 8001e46:	9b00      	ldr	r3, [sp, #0]
 8001e48:	44e0      	add	r8, ip
 8001e4a:	469c      	mov	ip, r3
 8001e4c:	4465      	add	r5, ip
 8001e4e:	429d      	cmp	r5, r3
 8001e50:	419b      	sbcs	r3, r3
 8001e52:	425b      	negs	r3, r3
 8001e54:	191b      	adds	r3, r3, r4
 8001e56:	18c0      	adds	r0, r0, r3
 8001e58:	e64d      	b.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001e5a:	428a      	cmp	r2, r1
 8001e5c:	d800      	bhi.n	8001e60 <__aeabi_ddiv+0x538>
 8001e5e:	e60e      	b.n	8001a7e <__aeabi_ddiv+0x156>
 8001e60:	1e83      	subs	r3, r0, #2
 8001e62:	1909      	adds	r1, r1, r4
 8001e64:	e60b      	b.n	8001a7e <__aeabi_ddiv+0x156>
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x544>
 8001e6a:	e5f4      	b.n	8001a56 <__aeabi_ddiv+0x12e>
 8001e6c:	1e83      	subs	r3, r0, #2
 8001e6e:	4698      	mov	r8, r3
 8001e70:	1909      	adds	r1, r1, r4
 8001e72:	e5f0      	b.n	8001a56 <__aeabi_ddiv+0x12e>
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <__aeabi_ddiv+0x5e4>)
 8001e76:	0028      	movs	r0, r5
 8001e78:	4459      	add	r1, fp
 8001e7a:	408d      	lsls	r5, r1
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	408a      	lsls	r2, r1
 8001e80:	1e69      	subs	r1, r5, #1
 8001e82:	418d      	sbcs	r5, r1
 8001e84:	4641      	mov	r1, r8
 8001e86:	40d8      	lsrs	r0, r3
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	4302      	orrs	r2, r0
 8001e8c:	432a      	orrs	r2, r5
 8001e8e:	000b      	movs	r3, r1
 8001e90:	0751      	lsls	r1, r2, #29
 8001e92:	d100      	bne.n	8001e96 <__aeabi_ddiv+0x56e>
 8001e94:	e751      	b.n	8001d3a <__aeabi_ddiv+0x412>
 8001e96:	210f      	movs	r1, #15
 8001e98:	4011      	ands	r1, r2
 8001e9a:	2904      	cmp	r1, #4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_ddiv+0x578>
 8001e9e:	e746      	b.n	8001d2e <__aeabi_ddiv+0x406>
 8001ea0:	e74b      	b.n	8001d3a <__aeabi_ddiv+0x412>
 8001ea2:	0005      	movs	r5, r0
 8001ea4:	428e      	cmp	r6, r1
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_ddiv+0x582>
 8001ea8:	e66a      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001eaa:	9a00      	ldr	r2, [sp, #0]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_ddiv+0x58a>
 8001eb0:	e666      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001eb2:	e667      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <__aeabi_ddiv+0x5e8>)
 8001eb6:	445a      	add	r2, fp
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_ddiv+0x596>
 8001ebc:	e710      	b.n	8001ce0 <__aeabi_ddiv+0x3b8>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	4498      	add	r8, r3
 8001ec4:	e667      	b.n	8001b96 <__aeabi_ddiv+0x26e>
 8001ec6:	075d      	lsls	r5, r3, #29
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	0b1c      	lsrs	r4, r3, #12
 8001ecc:	08d2      	lsrs	r2, r2, #3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	4315      	orrs	r5, r2
 8001ed2:	e580      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ed4:	9800      	ldr	r0, [sp, #0]
 8001ed6:	3d02      	subs	r5, #2
 8001ed8:	0042      	lsls	r2, r0, #1
 8001eda:	4282      	cmp	r2, r0
 8001edc:	41bf      	sbcs	r7, r7
 8001ede:	427f      	negs	r7, r7
 8001ee0:	193c      	adds	r4, r7, r4
 8001ee2:	1936      	adds	r6, r6, r4
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	e7dd      	b.n	8001ea4 <__aeabi_ddiv+0x57c>
 8001ee8:	2480      	movs	r4, #128	; 0x80
 8001eea:	4643      	mov	r3, r8
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	431c      	orrs	r4, r3
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001ef4:	0b24      	lsrs	r4, r4, #12
 8001ef6:	e56e      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ef8:	9a00      	ldr	r2, [sp, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3ea      	bcc.n	8001ed4 <__aeabi_ddiv+0x5ac>
 8001efe:	0005      	movs	r5, r0
 8001f00:	e7d3      	b.n	8001eaa <__aeabi_ddiv+0x582>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	0000043e 	.word	0x0000043e
 8001f0c:	0000041e 	.word	0x0000041e
 8001f10:	000003ff 	.word	0x000003ff

08001f14 <__eqdf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	464e      	mov	r6, r9
 8001f18:	4645      	mov	r5, r8
 8001f1a:	46de      	mov	lr, fp
 8001f1c:	4657      	mov	r7, sl
 8001f1e:	4690      	mov	r8, r2
 8001f20:	b5e0      	push	{r5, r6, r7, lr}
 8001f22:	0017      	movs	r7, r2
 8001f24:	031a      	lsls	r2, r3, #12
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	0005      	movs	r5, r0
 8001f2a:	4684      	mov	ip, r0
 8001f2c:	4819      	ldr	r0, [pc, #100]	; (8001f94 <__eqdf2+0x80>)
 8001f2e:	030e      	lsls	r6, r1, #12
 8001f30:	004c      	lsls	r4, r1, #1
 8001f32:	4691      	mov	r9, r2
 8001f34:	005a      	lsls	r2, r3, #1
 8001f36:	0fdb      	lsrs	r3, r3, #31
 8001f38:	469b      	mov	fp, r3
 8001f3a:	0b36      	lsrs	r6, r6, #12
 8001f3c:	0d64      	lsrs	r4, r4, #21
 8001f3e:	0fc9      	lsrs	r1, r1, #31
 8001f40:	0d52      	lsrs	r2, r2, #21
 8001f42:	4284      	cmp	r4, r0
 8001f44:	d019      	beq.n	8001f7a <__eqdf2+0x66>
 8001f46:	4282      	cmp	r2, r0
 8001f48:	d010      	beq.n	8001f6c <__eqdf2+0x58>
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	4294      	cmp	r4, r2
 8001f4e:	d10e      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f50:	454e      	cmp	r6, r9
 8001f52:	d10c      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f54:	2001      	movs	r0, #1
 8001f56:	45c4      	cmp	ip, r8
 8001f58:	d109      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f5a:	4559      	cmp	r1, fp
 8001f5c:	d017      	beq.n	8001f8e <__eqdf2+0x7a>
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d105      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f62:	0030      	movs	r0, r6
 8001f64:	4328      	orrs	r0, r5
 8001f66:	1e43      	subs	r3, r0, #1
 8001f68:	4198      	sbcs	r0, r3
 8001f6a:	e000      	b.n	8001f6e <__eqdf2+0x5a>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f70:	46bb      	mov	fp, r7
 8001f72:	46b2      	mov	sl, r6
 8001f74:	46a9      	mov	r9, r5
 8001f76:	46a0      	mov	r8, r4
 8001f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7a:	0033      	movs	r3, r6
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	432b      	orrs	r3, r5
 8001f80:	d1f5      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f82:	42a2      	cmp	r2, r4
 8001f84:	d1f3      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f86:	464b      	mov	r3, r9
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	d1f0      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f8c:	e7e2      	b.n	8001f54 <__eqdf2+0x40>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e7ed      	b.n	8001f6e <__eqdf2+0x5a>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__gedf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	4647      	mov	r7, r8
 8001f9c:	46ce      	mov	lr, r9
 8001f9e:	0004      	movs	r4, r0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	031b      	lsls	r3, r3, #12
 8001fa6:	0b1b      	lsrs	r3, r3, #12
 8001fa8:	4d2d      	ldr	r5, [pc, #180]	; (8002060 <__gedf2+0xc8>)
 8001faa:	004a      	lsls	r2, r1, #1
 8001fac:	4699      	mov	r9, r3
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	0043      	lsls	r3, r0, #1
 8001fb2:	030f      	lsls	r7, r1, #12
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	46b0      	mov	r8, r6
 8001fb8:	0b3f      	lsrs	r7, r7, #12
 8001fba:	0d52      	lsrs	r2, r2, #21
 8001fbc:	0fc9      	lsrs	r1, r1, #31
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	0fc0      	lsrs	r0, r0, #31
 8001fc2:	42aa      	cmp	r2, r5
 8001fc4:	d021      	beq.n	800200a <__gedf2+0x72>
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d013      	beq.n	8001ff2 <__gedf2+0x5a>
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d122      	bne.n	8002014 <__gedf2+0x7c>
 8001fce:	433c      	orrs	r4, r7
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <__gedf2+0x42>
 8001fd4:	464d      	mov	r5, r9
 8001fd6:	432e      	orrs	r6, r5
 8001fd8:	d022      	beq.n	8002020 <__gedf2+0x88>
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d010      	beq.n	8002000 <__gedf2+0x68>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d022      	beq.n	8002028 <__gedf2+0x90>
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	3901      	subs	r1, #1
 8001fe6:	4008      	ands	r0, r1
 8001fe8:	3801      	subs	r0, #1
 8001fea:	bcc0      	pop	{r6, r7}
 8001fec:	46b9      	mov	r9, r7
 8001fee:	46b0      	mov	r8, r6
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	464d      	mov	r5, r9
 8001ff4:	432e      	orrs	r6, r5
 8001ff6:	d129      	bne.n	800204c <__gedf2+0xb4>
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d1f0      	bne.n	8001fde <__gedf2+0x46>
 8001ffc:	433c      	orrs	r4, r7
 8001ffe:	d1ee      	bne.n	8001fde <__gedf2+0x46>
 8002000:	2800      	cmp	r0, #0
 8002002:	d1f2      	bne.n	8001fea <__gedf2+0x52>
 8002004:	2001      	movs	r0, #1
 8002006:	4240      	negs	r0, r0
 8002008:	e7ef      	b.n	8001fea <__gedf2+0x52>
 800200a:	003d      	movs	r5, r7
 800200c:	4325      	orrs	r5, r4
 800200e:	d11d      	bne.n	800204c <__gedf2+0xb4>
 8002010:	4293      	cmp	r3, r2
 8002012:	d0ee      	beq.n	8001ff2 <__gedf2+0x5a>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e2      	bne.n	8001fde <__gedf2+0x46>
 8002018:	464c      	mov	r4, r9
 800201a:	4326      	orrs	r6, r4
 800201c:	d1df      	bne.n	8001fde <__gedf2+0x46>
 800201e:	e7e0      	b.n	8001fe2 <__gedf2+0x4a>
 8002020:	2000      	movs	r0, #0
 8002022:	2c00      	cmp	r4, #0
 8002024:	d0e1      	beq.n	8001fea <__gedf2+0x52>
 8002026:	e7dc      	b.n	8001fe2 <__gedf2+0x4a>
 8002028:	429a      	cmp	r2, r3
 800202a:	dc0a      	bgt.n	8002042 <__gedf2+0xaa>
 800202c:	dbe8      	blt.n	8002000 <__gedf2+0x68>
 800202e:	454f      	cmp	r7, r9
 8002030:	d8d7      	bhi.n	8001fe2 <__gedf2+0x4a>
 8002032:	d00e      	beq.n	8002052 <__gedf2+0xba>
 8002034:	2000      	movs	r0, #0
 8002036:	454f      	cmp	r7, r9
 8002038:	d2d7      	bcs.n	8001fea <__gedf2+0x52>
 800203a:	2900      	cmp	r1, #0
 800203c:	d0e2      	beq.n	8002004 <__gedf2+0x6c>
 800203e:	0008      	movs	r0, r1
 8002040:	e7d3      	b.n	8001fea <__gedf2+0x52>
 8002042:	4243      	negs	r3, r0
 8002044:	4158      	adcs	r0, r3
 8002046:	0040      	lsls	r0, r0, #1
 8002048:	3801      	subs	r0, #1
 800204a:	e7ce      	b.n	8001fea <__gedf2+0x52>
 800204c:	2002      	movs	r0, #2
 800204e:	4240      	negs	r0, r0
 8002050:	e7cb      	b.n	8001fea <__gedf2+0x52>
 8002052:	45c4      	cmp	ip, r8
 8002054:	d8c5      	bhi.n	8001fe2 <__gedf2+0x4a>
 8002056:	2000      	movs	r0, #0
 8002058:	45c4      	cmp	ip, r8
 800205a:	d2c6      	bcs.n	8001fea <__gedf2+0x52>
 800205c:	e7ed      	b.n	800203a <__gedf2+0xa2>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__ledf2>:
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	4647      	mov	r7, r8
 8002068:	46ce      	mov	lr, r9
 800206a:	0004      	movs	r4, r0
 800206c:	0018      	movs	r0, r3
 800206e:	0016      	movs	r6, r2
 8002070:	031b      	lsls	r3, r3, #12
 8002072:	0b1b      	lsrs	r3, r3, #12
 8002074:	4d2c      	ldr	r5, [pc, #176]	; (8002128 <__ledf2+0xc4>)
 8002076:	004a      	lsls	r2, r1, #1
 8002078:	4699      	mov	r9, r3
 800207a:	b580      	push	{r7, lr}
 800207c:	0043      	lsls	r3, r0, #1
 800207e:	030f      	lsls	r7, r1, #12
 8002080:	46a4      	mov	ip, r4
 8002082:	46b0      	mov	r8, r6
 8002084:	0b3f      	lsrs	r7, r7, #12
 8002086:	0d52      	lsrs	r2, r2, #21
 8002088:	0fc9      	lsrs	r1, r1, #31
 800208a:	0d5b      	lsrs	r3, r3, #21
 800208c:	0fc0      	lsrs	r0, r0, #31
 800208e:	42aa      	cmp	r2, r5
 8002090:	d00d      	beq.n	80020ae <__ledf2+0x4a>
 8002092:	42ab      	cmp	r3, r5
 8002094:	d010      	beq.n	80020b8 <__ledf2+0x54>
 8002096:	2a00      	cmp	r2, #0
 8002098:	d127      	bne.n	80020ea <__ledf2+0x86>
 800209a:	433c      	orrs	r4, r7
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <__ledf2+0x60>
 80020a0:	464d      	mov	r5, r9
 80020a2:	432e      	orrs	r6, r5
 80020a4:	d10e      	bne.n	80020c4 <__ledf2+0x60>
 80020a6:	2000      	movs	r0, #0
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d015      	beq.n	80020d8 <__ledf2+0x74>
 80020ac:	e00e      	b.n	80020cc <__ledf2+0x68>
 80020ae:	003d      	movs	r5, r7
 80020b0:	4325      	orrs	r5, r4
 80020b2:	d110      	bne.n	80020d6 <__ledf2+0x72>
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d118      	bne.n	80020ea <__ledf2+0x86>
 80020b8:	464d      	mov	r5, r9
 80020ba:	432e      	orrs	r6, r5
 80020bc:	d10b      	bne.n	80020d6 <__ledf2+0x72>
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d102      	bne.n	80020c8 <__ledf2+0x64>
 80020c2:	433c      	orrs	r4, r7
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d00b      	beq.n	80020e0 <__ledf2+0x7c>
 80020c8:	4281      	cmp	r1, r0
 80020ca:	d014      	beq.n	80020f6 <__ledf2+0x92>
 80020cc:	2002      	movs	r0, #2
 80020ce:	3901      	subs	r1, #1
 80020d0:	4008      	ands	r0, r1
 80020d2:	3801      	subs	r0, #1
 80020d4:	e000      	b.n	80020d8 <__ledf2+0x74>
 80020d6:	2002      	movs	r0, #2
 80020d8:	bcc0      	pop	{r6, r7}
 80020da:	46b9      	mov	r9, r7
 80020dc:	46b0      	mov	r8, r6
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1f9      	bne.n	80020d8 <__ledf2+0x74>
 80020e4:	2001      	movs	r0, #1
 80020e6:	4240      	negs	r0, r0
 80020e8:	e7f6      	b.n	80020d8 <__ledf2+0x74>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ec      	bne.n	80020c8 <__ledf2+0x64>
 80020ee:	464c      	mov	r4, r9
 80020f0:	4326      	orrs	r6, r4
 80020f2:	d1e9      	bne.n	80020c8 <__ledf2+0x64>
 80020f4:	e7ea      	b.n	80020cc <__ledf2+0x68>
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dd04      	ble.n	8002104 <__ledf2+0xa0>
 80020fa:	4243      	negs	r3, r0
 80020fc:	4158      	adcs	r0, r3
 80020fe:	0040      	lsls	r0, r0, #1
 8002100:	3801      	subs	r0, #1
 8002102:	e7e9      	b.n	80020d8 <__ledf2+0x74>
 8002104:	429a      	cmp	r2, r3
 8002106:	dbeb      	blt.n	80020e0 <__ledf2+0x7c>
 8002108:	454f      	cmp	r7, r9
 800210a:	d8df      	bhi.n	80020cc <__ledf2+0x68>
 800210c:	d006      	beq.n	800211c <__ledf2+0xb8>
 800210e:	2000      	movs	r0, #0
 8002110:	454f      	cmp	r7, r9
 8002112:	d2e1      	bcs.n	80020d8 <__ledf2+0x74>
 8002114:	2900      	cmp	r1, #0
 8002116:	d0e5      	beq.n	80020e4 <__ledf2+0x80>
 8002118:	0008      	movs	r0, r1
 800211a:	e7dd      	b.n	80020d8 <__ledf2+0x74>
 800211c:	45c4      	cmp	ip, r8
 800211e:	d8d5      	bhi.n	80020cc <__ledf2+0x68>
 8002120:	2000      	movs	r0, #0
 8002122:	45c4      	cmp	ip, r8
 8002124:	d2d8      	bcs.n	80020d8 <__ledf2+0x74>
 8002126:	e7f5      	b.n	8002114 <__ledf2+0xb0>
 8002128:	000007ff 	.word	0x000007ff

0800212c <__aeabi_dmul>:
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	4657      	mov	r7, sl
 8002130:	464e      	mov	r6, r9
 8002132:	4645      	mov	r5, r8
 8002134:	46de      	mov	lr, fp
 8002136:	b5e0      	push	{r5, r6, r7, lr}
 8002138:	4698      	mov	r8, r3
 800213a:	030c      	lsls	r4, r1, #12
 800213c:	004b      	lsls	r3, r1, #1
 800213e:	0006      	movs	r6, r0
 8002140:	4692      	mov	sl, r2
 8002142:	b087      	sub	sp, #28
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	0fcf      	lsrs	r7, r1, #31
 800214a:	2b00      	cmp	r3, #0
 800214c:	d100      	bne.n	8002150 <__aeabi_dmul+0x24>
 800214e:	e15c      	b.n	800240a <__aeabi_dmul+0x2de>
 8002150:	4ad9      	ldr	r2, [pc, #868]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d100      	bne.n	8002158 <__aeabi_dmul+0x2c>
 8002156:	e175      	b.n	8002444 <__aeabi_dmul+0x318>
 8002158:	0f42      	lsrs	r2, r0, #29
 800215a:	00e4      	lsls	r4, r4, #3
 800215c:	4314      	orrs	r4, r2
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	0412      	lsls	r2, r2, #16
 8002162:	4314      	orrs	r4, r2
 8002164:	4ad5      	ldr	r2, [pc, #852]	; (80024bc <__aeabi_dmul+0x390>)
 8002166:	00c5      	lsls	r5, r0, #3
 8002168:	4694      	mov	ip, r2
 800216a:	4463      	add	r3, ip
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4699      	mov	r9, r3
 8002172:	469b      	mov	fp, r3
 8002174:	4643      	mov	r3, r8
 8002176:	4642      	mov	r2, r8
 8002178:	031e      	lsls	r6, r3, #12
 800217a:	0fd2      	lsrs	r2, r2, #31
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4650      	mov	r0, sl
 8002180:	4690      	mov	r8, r2
 8002182:	0b36      	lsrs	r6, r6, #12
 8002184:	0d5b      	lsrs	r3, r3, #21
 8002186:	d100      	bne.n	800218a <__aeabi_dmul+0x5e>
 8002188:	e120      	b.n	80023cc <__aeabi_dmul+0x2a0>
 800218a:	4acb      	ldr	r2, [pc, #812]	; (80024b8 <__aeabi_dmul+0x38c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d100      	bne.n	8002192 <__aeabi_dmul+0x66>
 8002190:	e162      	b.n	8002458 <__aeabi_dmul+0x32c>
 8002192:	49ca      	ldr	r1, [pc, #808]	; (80024bc <__aeabi_dmul+0x390>)
 8002194:	0f42      	lsrs	r2, r0, #29
 8002196:	468c      	mov	ip, r1
 8002198:	9900      	ldr	r1, [sp, #0]
 800219a:	4463      	add	r3, ip
 800219c:	00f6      	lsls	r6, r6, #3
 800219e:	468c      	mov	ip, r1
 80021a0:	4316      	orrs	r6, r2
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	449c      	add	ip, r3
 80021a6:	0412      	lsls	r2, r2, #16
 80021a8:	4663      	mov	r3, ip
 80021aa:	4316      	orrs	r6, r2
 80021ac:	00c2      	lsls	r2, r0, #3
 80021ae:	2000      	movs	r0, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	9900      	ldr	r1, [sp, #0]
 80021b4:	4643      	mov	r3, r8
 80021b6:	3101      	adds	r1, #1
 80021b8:	468c      	mov	ip, r1
 80021ba:	4649      	mov	r1, r9
 80021bc:	407b      	eors	r3, r7
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	290f      	cmp	r1, #15
 80021c2:	d826      	bhi.n	8002212 <__aeabi_dmul+0xe6>
 80021c4:	4bbe      	ldr	r3, [pc, #760]	; (80024c0 <__aeabi_dmul+0x394>)
 80021c6:	0089      	lsls	r1, r1, #2
 80021c8:	5859      	ldr	r1, [r3, r1]
 80021ca:	468f      	mov	pc, r1
 80021cc:	4643      	mov	r3, r8
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	0034      	movs	r4, r6
 80021d2:	0015      	movs	r5, r2
 80021d4:	4683      	mov	fp, r0
 80021d6:	465b      	mov	r3, fp
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d016      	beq.n	800220a <__aeabi_dmul+0xde>
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d100      	bne.n	80021e2 <__aeabi_dmul+0xb6>
 80021e0:	e203      	b.n	80025ea <__aeabi_dmul+0x4be>
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dmul+0xbc>
 80021e6:	e0cd      	b.n	8002384 <__aeabi_dmul+0x258>
 80021e8:	2200      	movs	r2, #0
 80021ea:	2400      	movs	r4, #0
 80021ec:	2500      	movs	r5, #0
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	0512      	lsls	r2, r2, #20
 80021f2:	4322      	orrs	r2, r4
 80021f4:	07db      	lsls	r3, r3, #31
 80021f6:	431a      	orrs	r2, r3
 80021f8:	0028      	movs	r0, r5
 80021fa:	0011      	movs	r1, r2
 80021fc:	b007      	add	sp, #28
 80021fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002200:	46bb      	mov	fp, r7
 8002202:	46b2      	mov	sl, r6
 8002204:	46a9      	mov	r9, r5
 8002206:	46a0      	mov	r8, r4
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220a:	2400      	movs	r4, #0
 800220c:	2500      	movs	r5, #0
 800220e:	4aaa      	ldr	r2, [pc, #680]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002210:	e7ed      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002212:	0c28      	lsrs	r0, r5, #16
 8002214:	042d      	lsls	r5, r5, #16
 8002216:	0c2d      	lsrs	r5, r5, #16
 8002218:	002b      	movs	r3, r5
 800221a:	0c11      	lsrs	r1, r2, #16
 800221c:	0412      	lsls	r2, r2, #16
 800221e:	0c12      	lsrs	r2, r2, #16
 8002220:	4353      	muls	r3, r2
 8002222:	4698      	mov	r8, r3
 8002224:	0013      	movs	r3, r2
 8002226:	002f      	movs	r7, r5
 8002228:	4343      	muls	r3, r0
 800222a:	4699      	mov	r9, r3
 800222c:	434f      	muls	r7, r1
 800222e:	444f      	add	r7, r9
 8002230:	46bb      	mov	fp, r7
 8002232:	4647      	mov	r7, r8
 8002234:	000b      	movs	r3, r1
 8002236:	0c3f      	lsrs	r7, r7, #16
 8002238:	46ba      	mov	sl, r7
 800223a:	4343      	muls	r3, r0
 800223c:	44da      	add	sl, fp
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	45d1      	cmp	r9, sl
 8002242:	d904      	bls.n	800224e <__aeabi_dmul+0x122>
 8002244:	2780      	movs	r7, #128	; 0x80
 8002246:	027f      	lsls	r7, r7, #9
 8002248:	46b9      	mov	r9, r7
 800224a:	444b      	add	r3, r9
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	4653      	mov	r3, sl
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	469b      	mov	fp, r3
 8002254:	4653      	mov	r3, sl
 8002256:	041f      	lsls	r7, r3, #16
 8002258:	4643      	mov	r3, r8
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	4698      	mov	r8, r3
 8002260:	003b      	movs	r3, r7
 8002262:	4443      	add	r3, r8
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	0c33      	lsrs	r3, r6, #16
 8002268:	0436      	lsls	r6, r6, #16
 800226a:	0c36      	lsrs	r6, r6, #16
 800226c:	4698      	mov	r8, r3
 800226e:	0033      	movs	r3, r6
 8002270:	4343      	muls	r3, r0
 8002272:	4699      	mov	r9, r3
 8002274:	4643      	mov	r3, r8
 8002276:	4343      	muls	r3, r0
 8002278:	002f      	movs	r7, r5
 800227a:	469a      	mov	sl, r3
 800227c:	4643      	mov	r3, r8
 800227e:	4377      	muls	r7, r6
 8002280:	435d      	muls	r5, r3
 8002282:	0c38      	lsrs	r0, r7, #16
 8002284:	444d      	add	r5, r9
 8002286:	1945      	adds	r5, r0, r5
 8002288:	45a9      	cmp	r9, r5
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x168>
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	4699      	mov	r9, r3
 8002292:	44ca      	add	sl, r9
 8002294:	043f      	lsls	r7, r7, #16
 8002296:	0c28      	lsrs	r0, r5, #16
 8002298:	0c3f      	lsrs	r7, r7, #16
 800229a:	042d      	lsls	r5, r5, #16
 800229c:	19ed      	adds	r5, r5, r7
 800229e:	0c27      	lsrs	r7, r4, #16
 80022a0:	0424      	lsls	r4, r4, #16
 80022a2:	0c24      	lsrs	r4, r4, #16
 80022a4:	0003      	movs	r3, r0
 80022a6:	0020      	movs	r0, r4
 80022a8:	4350      	muls	r0, r2
 80022aa:	437a      	muls	r2, r7
 80022ac:	4691      	mov	r9, r2
 80022ae:	003a      	movs	r2, r7
 80022b0:	4453      	add	r3, sl
 80022b2:	9305      	str	r3, [sp, #20]
 80022b4:	0c03      	lsrs	r3, r0, #16
 80022b6:	469a      	mov	sl, r3
 80022b8:	434a      	muls	r2, r1
 80022ba:	4361      	muls	r1, r4
 80022bc:	4449      	add	r1, r9
 80022be:	4451      	add	r1, sl
 80022c0:	44ab      	add	fp, r5
 80022c2:	4589      	cmp	r9, r1
 80022c4:	d903      	bls.n	80022ce <__aeabi_dmul+0x1a2>
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	4699      	mov	r9, r3
 80022cc:	444a      	add	r2, r9
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c0b      	lsrs	r3, r1, #16
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	0409      	lsls	r1, r1, #16
 80022d6:	1809      	adds	r1, r1, r0
 80022d8:	0020      	movs	r0, r4
 80022da:	4699      	mov	r9, r3
 80022dc:	4643      	mov	r3, r8
 80022de:	4370      	muls	r0, r6
 80022e0:	435c      	muls	r4, r3
 80022e2:	437e      	muls	r6, r7
 80022e4:	435f      	muls	r7, r3
 80022e6:	0c03      	lsrs	r3, r0, #16
 80022e8:	4698      	mov	r8, r3
 80022ea:	19a4      	adds	r4, r4, r6
 80022ec:	4444      	add	r4, r8
 80022ee:	444a      	add	r2, r9
 80022f0:	9703      	str	r7, [sp, #12]
 80022f2:	42a6      	cmp	r6, r4
 80022f4:	d904      	bls.n	8002300 <__aeabi_dmul+0x1d4>
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	4698      	mov	r8, r3
 80022fc:	4447      	add	r7, r8
 80022fe:	9703      	str	r7, [sp, #12]
 8002300:	0423      	lsls	r3, r4, #16
 8002302:	9e02      	ldr	r6, [sp, #8]
 8002304:	469a      	mov	sl, r3
 8002306:	9b05      	ldr	r3, [sp, #20]
 8002308:	445e      	add	r6, fp
 800230a:	4698      	mov	r8, r3
 800230c:	42ae      	cmp	r6, r5
 800230e:	41ad      	sbcs	r5, r5
 8002310:	1876      	adds	r6, r6, r1
 8002312:	428e      	cmp	r6, r1
 8002314:	4189      	sbcs	r1, r1
 8002316:	0400      	lsls	r0, r0, #16
 8002318:	0c00      	lsrs	r0, r0, #16
 800231a:	4450      	add	r0, sl
 800231c:	4440      	add	r0, r8
 800231e:	426d      	negs	r5, r5
 8002320:	1947      	adds	r7, r0, r5
 8002322:	46b8      	mov	r8, r7
 8002324:	4693      	mov	fp, r2
 8002326:	4249      	negs	r1, r1
 8002328:	4689      	mov	r9, r1
 800232a:	44c3      	add	fp, r8
 800232c:	44d9      	add	r9, fp
 800232e:	4298      	cmp	r0, r3
 8002330:	4180      	sbcs	r0, r0
 8002332:	45a8      	cmp	r8, r5
 8002334:	41ad      	sbcs	r5, r5
 8002336:	4593      	cmp	fp, r2
 8002338:	4192      	sbcs	r2, r2
 800233a:	4589      	cmp	r9, r1
 800233c:	4189      	sbcs	r1, r1
 800233e:	426d      	negs	r5, r5
 8002340:	4240      	negs	r0, r0
 8002342:	4328      	orrs	r0, r5
 8002344:	0c24      	lsrs	r4, r4, #16
 8002346:	4252      	negs	r2, r2
 8002348:	4249      	negs	r1, r1
 800234a:	430a      	orrs	r2, r1
 800234c:	9b03      	ldr	r3, [sp, #12]
 800234e:	1900      	adds	r0, r0, r4
 8002350:	1880      	adds	r0, r0, r2
 8002352:	18c7      	adds	r7, r0, r3
 8002354:	464b      	mov	r3, r9
 8002356:	0ddc      	lsrs	r4, r3, #23
 8002358:	9b04      	ldr	r3, [sp, #16]
 800235a:	0275      	lsls	r5, r6, #9
 800235c:	431d      	orrs	r5, r3
 800235e:	1e6a      	subs	r2, r5, #1
 8002360:	4195      	sbcs	r5, r2
 8002362:	464b      	mov	r3, r9
 8002364:	0df6      	lsrs	r6, r6, #23
 8002366:	027f      	lsls	r7, r7, #9
 8002368:	4335      	orrs	r5, r6
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	433c      	orrs	r4, r7
 800236e:	4315      	orrs	r5, r2
 8002370:	01fb      	lsls	r3, r7, #7
 8002372:	d400      	bmi.n	8002376 <__aeabi_dmul+0x24a>
 8002374:	e11c      	b.n	80025b0 <__aeabi_dmul+0x484>
 8002376:	2101      	movs	r1, #1
 8002378:	086a      	lsrs	r2, r5, #1
 800237a:	400d      	ands	r5, r1
 800237c:	4315      	orrs	r5, r2
 800237e:	07e2      	lsls	r2, r4, #31
 8002380:	4315      	orrs	r5, r2
 8002382:	0864      	lsrs	r4, r4, #1
 8002384:	494f      	ldr	r1, [pc, #316]	; (80024c4 <__aeabi_dmul+0x398>)
 8002386:	4461      	add	r1, ip
 8002388:	2900      	cmp	r1, #0
 800238a:	dc00      	bgt.n	800238e <__aeabi_dmul+0x262>
 800238c:	e0b0      	b.n	80024f0 <__aeabi_dmul+0x3c4>
 800238e:	076b      	lsls	r3, r5, #29
 8002390:	d009      	beq.n	80023a6 <__aeabi_dmul+0x27a>
 8002392:	220f      	movs	r2, #15
 8002394:	402a      	ands	r2, r5
 8002396:	2a04      	cmp	r2, #4
 8002398:	d005      	beq.n	80023a6 <__aeabi_dmul+0x27a>
 800239a:	1d2a      	adds	r2, r5, #4
 800239c:	42aa      	cmp	r2, r5
 800239e:	41ad      	sbcs	r5, r5
 80023a0:	426d      	negs	r5, r5
 80023a2:	1964      	adds	r4, r4, r5
 80023a4:	0015      	movs	r5, r2
 80023a6:	01e3      	lsls	r3, r4, #7
 80023a8:	d504      	bpl.n	80023b4 <__aeabi_dmul+0x288>
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <__aeabi_dmul+0x39c>)
 80023ae:	00c9      	lsls	r1, r1, #3
 80023b0:	4014      	ands	r4, r2
 80023b2:	4461      	add	r1, ip
 80023b4:	4a45      	ldr	r2, [pc, #276]	; (80024cc <__aeabi_dmul+0x3a0>)
 80023b6:	4291      	cmp	r1, r2
 80023b8:	dd00      	ble.n	80023bc <__aeabi_dmul+0x290>
 80023ba:	e726      	b.n	800220a <__aeabi_dmul+0xde>
 80023bc:	0762      	lsls	r2, r4, #29
 80023be:	08ed      	lsrs	r5, r5, #3
 80023c0:	0264      	lsls	r4, r4, #9
 80023c2:	0549      	lsls	r1, r1, #21
 80023c4:	4315      	orrs	r5, r2
 80023c6:	0b24      	lsrs	r4, r4, #12
 80023c8:	0d4a      	lsrs	r2, r1, #21
 80023ca:	e710      	b.n	80021ee <__aeabi_dmul+0xc2>
 80023cc:	4652      	mov	r2, sl
 80023ce:	4332      	orrs	r2, r6
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dmul+0x2a8>
 80023d2:	e07f      	b.n	80024d4 <__aeabi_dmul+0x3a8>
 80023d4:	2e00      	cmp	r6, #0
 80023d6:	d100      	bne.n	80023da <__aeabi_dmul+0x2ae>
 80023d8:	e0dc      	b.n	8002594 <__aeabi_dmul+0x468>
 80023da:	0030      	movs	r0, r6
 80023dc:	f000 fd96 	bl	8002f0c <__clzsi2>
 80023e0:	0002      	movs	r2, r0
 80023e2:	3a0b      	subs	r2, #11
 80023e4:	231d      	movs	r3, #29
 80023e6:	0001      	movs	r1, r0
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	4652      	mov	r2, sl
 80023ec:	3908      	subs	r1, #8
 80023ee:	40da      	lsrs	r2, r3
 80023f0:	408e      	lsls	r6, r1
 80023f2:	4316      	orrs	r6, r2
 80023f4:	4652      	mov	r2, sl
 80023f6:	408a      	lsls	r2, r1
 80023f8:	9b00      	ldr	r3, [sp, #0]
 80023fa:	4935      	ldr	r1, [pc, #212]	; (80024d0 <__aeabi_dmul+0x3a4>)
 80023fc:	1a18      	subs	r0, r3, r0
 80023fe:	0003      	movs	r3, r0
 8002400:	468c      	mov	ip, r1
 8002402:	4463      	add	r3, ip
 8002404:	2000      	movs	r0, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	e6d3      	b.n	80021b2 <__aeabi_dmul+0x86>
 800240a:	0025      	movs	r5, r4
 800240c:	4305      	orrs	r5, r0
 800240e:	d04a      	beq.n	80024a6 <__aeabi_dmul+0x37a>
 8002410:	2c00      	cmp	r4, #0
 8002412:	d100      	bne.n	8002416 <__aeabi_dmul+0x2ea>
 8002414:	e0b0      	b.n	8002578 <__aeabi_dmul+0x44c>
 8002416:	0020      	movs	r0, r4
 8002418:	f000 fd78 	bl	8002f0c <__clzsi2>
 800241c:	0001      	movs	r1, r0
 800241e:	0002      	movs	r2, r0
 8002420:	390b      	subs	r1, #11
 8002422:	231d      	movs	r3, #29
 8002424:	0010      	movs	r0, r2
 8002426:	1a5b      	subs	r3, r3, r1
 8002428:	0031      	movs	r1, r6
 800242a:	0035      	movs	r5, r6
 800242c:	3808      	subs	r0, #8
 800242e:	4084      	lsls	r4, r0
 8002430:	40d9      	lsrs	r1, r3
 8002432:	4085      	lsls	r5, r0
 8002434:	430c      	orrs	r4, r1
 8002436:	4826      	ldr	r0, [pc, #152]	; (80024d0 <__aeabi_dmul+0x3a4>)
 8002438:	1a83      	subs	r3, r0, r2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	4699      	mov	r9, r3
 8002440:	469b      	mov	fp, r3
 8002442:	e697      	b.n	8002174 <__aeabi_dmul+0x48>
 8002444:	0005      	movs	r5, r0
 8002446:	4325      	orrs	r5, r4
 8002448:	d126      	bne.n	8002498 <__aeabi_dmul+0x36c>
 800244a:	2208      	movs	r2, #8
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2302      	movs	r3, #2
 8002450:	2400      	movs	r4, #0
 8002452:	4691      	mov	r9, r2
 8002454:	469b      	mov	fp, r3
 8002456:	e68d      	b.n	8002174 <__aeabi_dmul+0x48>
 8002458:	4652      	mov	r2, sl
 800245a:	9b00      	ldr	r3, [sp, #0]
 800245c:	4332      	orrs	r2, r6
 800245e:	d110      	bne.n	8002482 <__aeabi_dmul+0x356>
 8002460:	4915      	ldr	r1, [pc, #84]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002462:	2600      	movs	r6, #0
 8002464:	468c      	mov	ip, r1
 8002466:	4463      	add	r3, ip
 8002468:	4649      	mov	r1, r9
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2302      	movs	r3, #2
 800246e:	4319      	orrs	r1, r3
 8002470:	4689      	mov	r9, r1
 8002472:	2002      	movs	r0, #2
 8002474:	e69d      	b.n	80021b2 <__aeabi_dmul+0x86>
 8002476:	465b      	mov	r3, fp
 8002478:	9701      	str	r7, [sp, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d000      	beq.n	8002480 <__aeabi_dmul+0x354>
 800247e:	e6ad      	b.n	80021dc <__aeabi_dmul+0xb0>
 8002480:	e6c3      	b.n	800220a <__aeabi_dmul+0xde>
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002484:	2003      	movs	r0, #3
 8002486:	4694      	mov	ip, r2
 8002488:	4463      	add	r3, ip
 800248a:	464a      	mov	r2, r9
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2303      	movs	r3, #3
 8002490:	431a      	orrs	r2, r3
 8002492:	4691      	mov	r9, r2
 8002494:	4652      	mov	r2, sl
 8002496:	e68c      	b.n	80021b2 <__aeabi_dmul+0x86>
 8002498:	220c      	movs	r2, #12
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2303      	movs	r3, #3
 800249e:	0005      	movs	r5, r0
 80024a0:	4691      	mov	r9, r2
 80024a2:	469b      	mov	fp, r3
 80024a4:	e666      	b.n	8002174 <__aeabi_dmul+0x48>
 80024a6:	2304      	movs	r3, #4
 80024a8:	4699      	mov	r9, r3
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	2400      	movs	r4, #0
 80024b2:	469b      	mov	fp, r3
 80024b4:	e65e      	b.n	8002174 <__aeabi_dmul+0x48>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007ff 	.word	0x000007ff
 80024bc:	fffffc01 	.word	0xfffffc01
 80024c0:	0800ba04 	.word	0x0800ba04
 80024c4:	000003ff 	.word	0x000003ff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	fffffc0d 	.word	0xfffffc0d
 80024d4:	4649      	mov	r1, r9
 80024d6:	2301      	movs	r3, #1
 80024d8:	4319      	orrs	r1, r3
 80024da:	4689      	mov	r9, r1
 80024dc:	2600      	movs	r6, #0
 80024de:	2001      	movs	r0, #1
 80024e0:	e667      	b.n	80021b2 <__aeabi_dmul+0x86>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2480      	movs	r4, #128	; 0x80
 80024e6:	2500      	movs	r5, #0
 80024e8:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <__aeabi_dmul+0x4cc>)
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	0324      	lsls	r4, r4, #12
 80024ee:	e67e      	b.n	80021ee <__aeabi_dmul+0xc2>
 80024f0:	2001      	movs	r0, #1
 80024f2:	1a40      	subs	r0, r0, r1
 80024f4:	2838      	cmp	r0, #56	; 0x38
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dmul+0x3ce>
 80024f8:	e676      	b.n	80021e8 <__aeabi_dmul+0xbc>
 80024fa:	281f      	cmp	r0, #31
 80024fc:	dd5b      	ble.n	80025b6 <__aeabi_dmul+0x48a>
 80024fe:	221f      	movs	r2, #31
 8002500:	0023      	movs	r3, r4
 8002502:	4252      	negs	r2, r2
 8002504:	1a51      	subs	r1, r2, r1
 8002506:	40cb      	lsrs	r3, r1
 8002508:	0019      	movs	r1, r3
 800250a:	2820      	cmp	r0, #32
 800250c:	d003      	beq.n	8002516 <__aeabi_dmul+0x3ea>
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <__aeabi_dmul+0x4d0>)
 8002510:	4462      	add	r2, ip
 8002512:	4094      	lsls	r4, r2
 8002514:	4325      	orrs	r5, r4
 8002516:	1e6a      	subs	r2, r5, #1
 8002518:	4195      	sbcs	r5, r2
 800251a:	002a      	movs	r2, r5
 800251c:	430a      	orrs	r2, r1
 800251e:	2107      	movs	r1, #7
 8002520:	000d      	movs	r5, r1
 8002522:	2400      	movs	r4, #0
 8002524:	4015      	ands	r5, r2
 8002526:	4211      	tst	r1, r2
 8002528:	d05b      	beq.n	80025e2 <__aeabi_dmul+0x4b6>
 800252a:	210f      	movs	r1, #15
 800252c:	2400      	movs	r4, #0
 800252e:	4011      	ands	r1, r2
 8002530:	2904      	cmp	r1, #4
 8002532:	d053      	beq.n	80025dc <__aeabi_dmul+0x4b0>
 8002534:	1d11      	adds	r1, r2, #4
 8002536:	4291      	cmp	r1, r2
 8002538:	4192      	sbcs	r2, r2
 800253a:	4252      	negs	r2, r2
 800253c:	18a4      	adds	r4, r4, r2
 800253e:	000a      	movs	r2, r1
 8002540:	0223      	lsls	r3, r4, #8
 8002542:	d54b      	bpl.n	80025dc <__aeabi_dmul+0x4b0>
 8002544:	2201      	movs	r2, #1
 8002546:	2400      	movs	r4, #0
 8002548:	2500      	movs	r5, #0
 800254a:	e650      	b.n	80021ee <__aeabi_dmul+0xc2>
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	031b      	lsls	r3, r3, #12
 8002550:	421c      	tst	r4, r3
 8002552:	d009      	beq.n	8002568 <__aeabi_dmul+0x43c>
 8002554:	421e      	tst	r6, r3
 8002556:	d107      	bne.n	8002568 <__aeabi_dmul+0x43c>
 8002558:	4333      	orrs	r3, r6
 800255a:	031c      	lsls	r4, r3, #12
 800255c:	4643      	mov	r3, r8
 800255e:	0015      	movs	r5, r2
 8002560:	0b24      	lsrs	r4, r4, #12
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <__aeabi_dmul+0x4cc>)
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	e642      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	0312      	lsls	r2, r2, #12
 800256c:	4314      	orrs	r4, r2
 800256e:	0324      	lsls	r4, r4, #12
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <__aeabi_dmul+0x4cc>)
 8002572:	0b24      	lsrs	r4, r4, #12
 8002574:	9701      	str	r7, [sp, #4]
 8002576:	e63a      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002578:	f000 fcc8 	bl	8002f0c <__clzsi2>
 800257c:	0001      	movs	r1, r0
 800257e:	0002      	movs	r2, r0
 8002580:	3115      	adds	r1, #21
 8002582:	3220      	adds	r2, #32
 8002584:	291c      	cmp	r1, #28
 8002586:	dc00      	bgt.n	800258a <__aeabi_dmul+0x45e>
 8002588:	e74b      	b.n	8002422 <__aeabi_dmul+0x2f6>
 800258a:	0034      	movs	r4, r6
 800258c:	3808      	subs	r0, #8
 800258e:	2500      	movs	r5, #0
 8002590:	4084      	lsls	r4, r0
 8002592:	e750      	b.n	8002436 <__aeabi_dmul+0x30a>
 8002594:	f000 fcba 	bl	8002f0c <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	001a      	movs	r2, r3
 800259c:	3215      	adds	r2, #21
 800259e:	3020      	adds	r0, #32
 80025a0:	2a1c      	cmp	r2, #28
 80025a2:	dc00      	bgt.n	80025a6 <__aeabi_dmul+0x47a>
 80025a4:	e71e      	b.n	80023e4 <__aeabi_dmul+0x2b8>
 80025a6:	4656      	mov	r6, sl
 80025a8:	3b08      	subs	r3, #8
 80025aa:	2200      	movs	r2, #0
 80025ac:	409e      	lsls	r6, r3
 80025ae:	e723      	b.n	80023f8 <__aeabi_dmul+0x2cc>
 80025b0:	9b00      	ldr	r3, [sp, #0]
 80025b2:	469c      	mov	ip, r3
 80025b4:	e6e6      	b.n	8002384 <__aeabi_dmul+0x258>
 80025b6:	4912      	ldr	r1, [pc, #72]	; (8002600 <__aeabi_dmul+0x4d4>)
 80025b8:	0022      	movs	r2, r4
 80025ba:	4461      	add	r1, ip
 80025bc:	002e      	movs	r6, r5
 80025be:	408d      	lsls	r5, r1
 80025c0:	408a      	lsls	r2, r1
 80025c2:	40c6      	lsrs	r6, r0
 80025c4:	1e69      	subs	r1, r5, #1
 80025c6:	418d      	sbcs	r5, r1
 80025c8:	4332      	orrs	r2, r6
 80025ca:	432a      	orrs	r2, r5
 80025cc:	40c4      	lsrs	r4, r0
 80025ce:	0753      	lsls	r3, r2, #29
 80025d0:	d0b6      	beq.n	8002540 <__aeabi_dmul+0x414>
 80025d2:	210f      	movs	r1, #15
 80025d4:	4011      	ands	r1, r2
 80025d6:	2904      	cmp	r1, #4
 80025d8:	d1ac      	bne.n	8002534 <__aeabi_dmul+0x408>
 80025da:	e7b1      	b.n	8002540 <__aeabi_dmul+0x414>
 80025dc:	0765      	lsls	r5, r4, #29
 80025de:	0264      	lsls	r4, r4, #9
 80025e0:	0b24      	lsrs	r4, r4, #12
 80025e2:	08d2      	lsrs	r2, r2, #3
 80025e4:	4315      	orrs	r5, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	e601      	b.n	80021ee <__aeabi_dmul+0xc2>
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0312      	lsls	r2, r2, #12
 80025ee:	4314      	orrs	r4, r2
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	4a01      	ldr	r2, [pc, #4]	; (80025f8 <__aeabi_dmul+0x4cc>)
 80025f4:	0b24      	lsrs	r4, r4, #12
 80025f6:	e5fa      	b.n	80021ee <__aeabi_dmul+0xc2>
 80025f8:	000007ff 	.word	0x000007ff
 80025fc:	0000043e 	.word	0x0000043e
 8002600:	0000041e 	.word	0x0000041e

08002604 <__aeabi_dsub>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	4657      	mov	r7, sl
 8002608:	464e      	mov	r6, r9
 800260a:	4645      	mov	r5, r8
 800260c:	46de      	mov	lr, fp
 800260e:	b5e0      	push	{r5, r6, r7, lr}
 8002610:	001e      	movs	r6, r3
 8002612:	0017      	movs	r7, r2
 8002614:	004a      	lsls	r2, r1, #1
 8002616:	030b      	lsls	r3, r1, #12
 8002618:	0d52      	lsrs	r2, r2, #21
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	4690      	mov	r8, r2
 800261e:	0f42      	lsrs	r2, r0, #29
 8002620:	431a      	orrs	r2, r3
 8002622:	0fcd      	lsrs	r5, r1, #31
 8002624:	4ccd      	ldr	r4, [pc, #820]	; (800295c <__aeabi_dsub+0x358>)
 8002626:	0331      	lsls	r1, r6, #12
 8002628:	00c3      	lsls	r3, r0, #3
 800262a:	4694      	mov	ip, r2
 800262c:	0070      	lsls	r0, r6, #1
 800262e:	0f7a      	lsrs	r2, r7, #29
 8002630:	0a49      	lsrs	r1, r1, #9
 8002632:	00ff      	lsls	r7, r7, #3
 8002634:	469a      	mov	sl, r3
 8002636:	46b9      	mov	r9, r7
 8002638:	0d40      	lsrs	r0, r0, #21
 800263a:	0ff6      	lsrs	r6, r6, #31
 800263c:	4311      	orrs	r1, r2
 800263e:	42a0      	cmp	r0, r4
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x40>
 8002642:	e0b1      	b.n	80027a8 <__aeabi_dsub+0x1a4>
 8002644:	2201      	movs	r2, #1
 8002646:	4056      	eors	r6, r2
 8002648:	46b3      	mov	fp, r6
 800264a:	42b5      	cmp	r5, r6
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x4c>
 800264e:	e088      	b.n	8002762 <__aeabi_dsub+0x15e>
 8002650:	4642      	mov	r2, r8
 8002652:	1a12      	subs	r2, r2, r0
 8002654:	2a00      	cmp	r2, #0
 8002656:	dc00      	bgt.n	800265a <__aeabi_dsub+0x56>
 8002658:	e0ae      	b.n	80027b8 <__aeabi_dsub+0x1b4>
 800265a:	2800      	cmp	r0, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x5c>
 800265e:	e0c1      	b.n	80027e4 <__aeabi_dsub+0x1e0>
 8002660:	48be      	ldr	r0, [pc, #760]	; (800295c <__aeabi_dsub+0x358>)
 8002662:	4580      	cmp	r8, r0
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x64>
 8002666:	e151      	b.n	800290c <__aeabi_dsub+0x308>
 8002668:	2080      	movs	r0, #128	; 0x80
 800266a:	0400      	lsls	r0, r0, #16
 800266c:	4301      	orrs	r1, r0
 800266e:	2a38      	cmp	r2, #56	; 0x38
 8002670:	dd00      	ble.n	8002674 <__aeabi_dsub+0x70>
 8002672:	e17b      	b.n	800296c <__aeabi_dsub+0x368>
 8002674:	2a1f      	cmp	r2, #31
 8002676:	dd00      	ble.n	800267a <__aeabi_dsub+0x76>
 8002678:	e1ee      	b.n	8002a58 <__aeabi_dsub+0x454>
 800267a:	2020      	movs	r0, #32
 800267c:	003e      	movs	r6, r7
 800267e:	1a80      	subs	r0, r0, r2
 8002680:	000c      	movs	r4, r1
 8002682:	40d6      	lsrs	r6, r2
 8002684:	40d1      	lsrs	r1, r2
 8002686:	4087      	lsls	r7, r0
 8002688:	4662      	mov	r2, ip
 800268a:	4084      	lsls	r4, r0
 800268c:	1a52      	subs	r2, r2, r1
 800268e:	1e78      	subs	r0, r7, #1
 8002690:	4187      	sbcs	r7, r0
 8002692:	4694      	mov	ip, r2
 8002694:	4334      	orrs	r4, r6
 8002696:	4327      	orrs	r7, r4
 8002698:	1bdc      	subs	r4, r3, r7
 800269a:	42a3      	cmp	r3, r4
 800269c:	419b      	sbcs	r3, r3
 800269e:	4662      	mov	r2, ip
 80026a0:	425b      	negs	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4699      	mov	r9, r3
 80026a6:	464b      	mov	r3, r9
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	d400      	bmi.n	80026ae <__aeabi_dsub+0xaa>
 80026ac:	e118      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 80026ae:	464b      	mov	r3, r9
 80026b0:	0258      	lsls	r0, r3, #9
 80026b2:	0a43      	lsrs	r3, r0, #9
 80026b4:	4699      	mov	r9, r3
 80026b6:	464b      	mov	r3, r9
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0xba>
 80026bc:	e137      	b.n	800292e <__aeabi_dsub+0x32a>
 80026be:	4648      	mov	r0, r9
 80026c0:	f000 fc24 	bl	8002f0c <__clzsi2>
 80026c4:	0001      	movs	r1, r0
 80026c6:	3908      	subs	r1, #8
 80026c8:	2320      	movs	r3, #32
 80026ca:	0022      	movs	r2, r4
 80026cc:	4648      	mov	r0, r9
 80026ce:	1a5b      	subs	r3, r3, r1
 80026d0:	40da      	lsrs	r2, r3
 80026d2:	4088      	lsls	r0, r1
 80026d4:	408c      	lsls	r4, r1
 80026d6:	4643      	mov	r3, r8
 80026d8:	4310      	orrs	r0, r2
 80026da:	4588      	cmp	r8, r1
 80026dc:	dd00      	ble.n	80026e0 <__aeabi_dsub+0xdc>
 80026de:	e136      	b.n	800294e <__aeabi_dsub+0x34a>
 80026e0:	1ac9      	subs	r1, r1, r3
 80026e2:	1c4b      	adds	r3, r1, #1
 80026e4:	2b1f      	cmp	r3, #31
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0xe6>
 80026e8:	e0ea      	b.n	80028c0 <__aeabi_dsub+0x2bc>
 80026ea:	2220      	movs	r2, #32
 80026ec:	0026      	movs	r6, r4
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	0001      	movs	r1, r0
 80026f2:	4094      	lsls	r4, r2
 80026f4:	40de      	lsrs	r6, r3
 80026f6:	40d8      	lsrs	r0, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	4091      	lsls	r1, r2
 80026fc:	1e62      	subs	r2, r4, #1
 80026fe:	4194      	sbcs	r4, r2
 8002700:	4681      	mov	r9, r0
 8002702:	4698      	mov	r8, r3
 8002704:	4331      	orrs	r1, r6
 8002706:	430c      	orrs	r4, r1
 8002708:	0763      	lsls	r3, r4, #29
 800270a:	d009      	beq.n	8002720 <__aeabi_dsub+0x11c>
 800270c:	230f      	movs	r3, #15
 800270e:	4023      	ands	r3, r4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d005      	beq.n	8002720 <__aeabi_dsub+0x11c>
 8002714:	1d23      	adds	r3, r4, #4
 8002716:	42a3      	cmp	r3, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	4264      	negs	r4, r4
 800271c:	44a1      	add	r9, r4
 800271e:	001c      	movs	r4, r3
 8002720:	464b      	mov	r3, r9
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	d400      	bmi.n	8002728 <__aeabi_dsub+0x124>
 8002726:	e0de      	b.n	80028e6 <__aeabi_dsub+0x2e2>
 8002728:	4641      	mov	r1, r8
 800272a:	4b8c      	ldr	r3, [pc, #560]	; (800295c <__aeabi_dsub+0x358>)
 800272c:	3101      	adds	r1, #1
 800272e:	4299      	cmp	r1, r3
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x130>
 8002732:	e0e7      	b.n	8002904 <__aeabi_dsub+0x300>
 8002734:	464b      	mov	r3, r9
 8002736:	488a      	ldr	r0, [pc, #552]	; (8002960 <__aeabi_dsub+0x35c>)
 8002738:	08e4      	lsrs	r4, r4, #3
 800273a:	4003      	ands	r3, r0
 800273c:	0018      	movs	r0, r3
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	075b      	lsls	r3, r3, #29
 8002742:	0240      	lsls	r0, r0, #9
 8002744:	4323      	orrs	r3, r4
 8002746:	0d4a      	lsrs	r2, r1, #21
 8002748:	0b04      	lsrs	r4, r0, #12
 800274a:	0512      	lsls	r2, r2, #20
 800274c:	07ed      	lsls	r5, r5, #31
 800274e:	4322      	orrs	r2, r4
 8002750:	432a      	orrs	r2, r5
 8002752:	0018      	movs	r0, r3
 8002754:	0011      	movs	r1, r2
 8002756:	bcf0      	pop	{r4, r5, r6, r7}
 8002758:	46bb      	mov	fp, r7
 800275a:	46b2      	mov	sl, r6
 800275c:	46a9      	mov	r9, r5
 800275e:	46a0      	mov	r8, r4
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002762:	4642      	mov	r2, r8
 8002764:	1a12      	subs	r2, r2, r0
 8002766:	2a00      	cmp	r2, #0
 8002768:	dd52      	ble.n	8002810 <__aeabi_dsub+0x20c>
 800276a:	2800      	cmp	r0, #0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x16c>
 800276e:	e09c      	b.n	80028aa <__aeabi_dsub+0x2a6>
 8002770:	45a0      	cmp	r8, r4
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x172>
 8002774:	e0ca      	b.n	800290c <__aeabi_dsub+0x308>
 8002776:	2080      	movs	r0, #128	; 0x80
 8002778:	0400      	lsls	r0, r0, #16
 800277a:	4301      	orrs	r1, r0
 800277c:	2a38      	cmp	r2, #56	; 0x38
 800277e:	dd00      	ble.n	8002782 <__aeabi_dsub+0x17e>
 8002780:	e149      	b.n	8002a16 <__aeabi_dsub+0x412>
 8002782:	2a1f      	cmp	r2, #31
 8002784:	dc00      	bgt.n	8002788 <__aeabi_dsub+0x184>
 8002786:	e197      	b.n	8002ab8 <__aeabi_dsub+0x4b4>
 8002788:	0010      	movs	r0, r2
 800278a:	000e      	movs	r6, r1
 800278c:	3820      	subs	r0, #32
 800278e:	40c6      	lsrs	r6, r0
 8002790:	2a20      	cmp	r2, #32
 8002792:	d004      	beq.n	800279e <__aeabi_dsub+0x19a>
 8002794:	2040      	movs	r0, #64	; 0x40
 8002796:	1a82      	subs	r2, r0, r2
 8002798:	4091      	lsls	r1, r2
 800279a:	430f      	orrs	r7, r1
 800279c:	46b9      	mov	r9, r7
 800279e:	464c      	mov	r4, r9
 80027a0:	1e62      	subs	r2, r4, #1
 80027a2:	4194      	sbcs	r4, r2
 80027a4:	4334      	orrs	r4, r6
 80027a6:	e13a      	b.n	8002a1e <__aeabi_dsub+0x41a>
 80027a8:	000a      	movs	r2, r1
 80027aa:	433a      	orrs	r2, r7
 80027ac:	d028      	beq.n	8002800 <__aeabi_dsub+0x1fc>
 80027ae:	46b3      	mov	fp, r6
 80027b0:	42b5      	cmp	r5, r6
 80027b2:	d02b      	beq.n	800280c <__aeabi_dsub+0x208>
 80027b4:	4a6b      	ldr	r2, [pc, #428]	; (8002964 <__aeabi_dsub+0x360>)
 80027b6:	4442      	add	r2, r8
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d05d      	beq.n	8002878 <__aeabi_dsub+0x274>
 80027bc:	4642      	mov	r2, r8
 80027be:	4644      	mov	r4, r8
 80027c0:	1a82      	subs	r2, r0, r2
 80027c2:	2c00      	cmp	r4, #0
 80027c4:	d000      	beq.n	80027c8 <__aeabi_dsub+0x1c4>
 80027c6:	e0f5      	b.n	80029b4 <__aeabi_dsub+0x3b0>
 80027c8:	4665      	mov	r5, ip
 80027ca:	431d      	orrs	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x1cc>
 80027ce:	e19c      	b.n	8002b0a <__aeabi_dsub+0x506>
 80027d0:	1e55      	subs	r5, r2, #1
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x1d4>
 80027d6:	e1fb      	b.n	8002bd0 <__aeabi_dsub+0x5cc>
 80027d8:	4c60      	ldr	r4, [pc, #384]	; (800295c <__aeabi_dsub+0x358>)
 80027da:	42a2      	cmp	r2, r4
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x1dc>
 80027de:	e1bd      	b.n	8002b5c <__aeabi_dsub+0x558>
 80027e0:	002a      	movs	r2, r5
 80027e2:	e0f0      	b.n	80029c6 <__aeabi_dsub+0x3c2>
 80027e4:	0008      	movs	r0, r1
 80027e6:	4338      	orrs	r0, r7
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x1e8>
 80027ea:	e0c3      	b.n	8002974 <__aeabi_dsub+0x370>
 80027ec:	1e50      	subs	r0, r2, #1
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x1f0>
 80027f2:	e1a8      	b.n	8002b46 <__aeabi_dsub+0x542>
 80027f4:	4c59      	ldr	r4, [pc, #356]	; (800295c <__aeabi_dsub+0x358>)
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x1f8>
 80027fa:	e087      	b.n	800290c <__aeabi_dsub+0x308>
 80027fc:	0002      	movs	r2, r0
 80027fe:	e736      	b.n	800266e <__aeabi_dsub+0x6a>
 8002800:	2201      	movs	r2, #1
 8002802:	4056      	eors	r6, r2
 8002804:	46b3      	mov	fp, r6
 8002806:	42b5      	cmp	r5, r6
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x208>
 800280a:	e721      	b.n	8002650 <__aeabi_dsub+0x4c>
 800280c:	4a55      	ldr	r2, [pc, #340]	; (8002964 <__aeabi_dsub+0x360>)
 800280e:	4442      	add	r2, r8
 8002810:	2a00      	cmp	r2, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x212>
 8002814:	e0b5      	b.n	8002982 <__aeabi_dsub+0x37e>
 8002816:	4642      	mov	r2, r8
 8002818:	4644      	mov	r4, r8
 800281a:	1a82      	subs	r2, r0, r2
 800281c:	2c00      	cmp	r4, #0
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x21e>
 8002820:	e138      	b.n	8002a94 <__aeabi_dsub+0x490>
 8002822:	4e4e      	ldr	r6, [pc, #312]	; (800295c <__aeabi_dsub+0x358>)
 8002824:	42b0      	cmp	r0, r6
 8002826:	d100      	bne.n	800282a <__aeabi_dsub+0x226>
 8002828:	e1de      	b.n	8002be8 <__aeabi_dsub+0x5e4>
 800282a:	2680      	movs	r6, #128	; 0x80
 800282c:	4664      	mov	r4, ip
 800282e:	0436      	lsls	r6, r6, #16
 8002830:	4334      	orrs	r4, r6
 8002832:	46a4      	mov	ip, r4
 8002834:	2a38      	cmp	r2, #56	; 0x38
 8002836:	dd00      	ble.n	800283a <__aeabi_dsub+0x236>
 8002838:	e196      	b.n	8002b68 <__aeabi_dsub+0x564>
 800283a:	2a1f      	cmp	r2, #31
 800283c:	dd00      	ble.n	8002840 <__aeabi_dsub+0x23c>
 800283e:	e224      	b.n	8002c8a <__aeabi_dsub+0x686>
 8002840:	2620      	movs	r6, #32
 8002842:	1ab4      	subs	r4, r6, r2
 8002844:	46a2      	mov	sl, r4
 8002846:	4664      	mov	r4, ip
 8002848:	4656      	mov	r6, sl
 800284a:	40b4      	lsls	r4, r6
 800284c:	46a1      	mov	r9, r4
 800284e:	001c      	movs	r4, r3
 8002850:	464e      	mov	r6, r9
 8002852:	40d4      	lsrs	r4, r2
 8002854:	4326      	orrs	r6, r4
 8002856:	0034      	movs	r4, r6
 8002858:	4656      	mov	r6, sl
 800285a:	40b3      	lsls	r3, r6
 800285c:	1e5e      	subs	r6, r3, #1
 800285e:	41b3      	sbcs	r3, r6
 8002860:	431c      	orrs	r4, r3
 8002862:	4663      	mov	r3, ip
 8002864:	40d3      	lsrs	r3, r2
 8002866:	18c9      	adds	r1, r1, r3
 8002868:	19e4      	adds	r4, r4, r7
 800286a:	42bc      	cmp	r4, r7
 800286c:	41bf      	sbcs	r7, r7
 800286e:	427f      	negs	r7, r7
 8002870:	46b9      	mov	r9, r7
 8002872:	4680      	mov	r8, r0
 8002874:	4489      	add	r9, r1
 8002876:	e0d8      	b.n	8002a2a <__aeabi_dsub+0x426>
 8002878:	4640      	mov	r0, r8
 800287a:	4c3b      	ldr	r4, [pc, #236]	; (8002968 <__aeabi_dsub+0x364>)
 800287c:	3001      	adds	r0, #1
 800287e:	4220      	tst	r0, r4
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x280>
 8002882:	e0b4      	b.n	80029ee <__aeabi_dsub+0x3ea>
 8002884:	4640      	mov	r0, r8
 8002886:	2800      	cmp	r0, #0
 8002888:	d000      	beq.n	800288c <__aeabi_dsub+0x288>
 800288a:	e144      	b.n	8002b16 <__aeabi_dsub+0x512>
 800288c:	4660      	mov	r0, ip
 800288e:	4318      	orrs	r0, r3
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x290>
 8002892:	e190      	b.n	8002bb6 <__aeabi_dsub+0x5b2>
 8002894:	0008      	movs	r0, r1
 8002896:	4338      	orrs	r0, r7
 8002898:	d000      	beq.n	800289c <__aeabi_dsub+0x298>
 800289a:	e1aa      	b.n	8002bf2 <__aeabi_dsub+0x5ee>
 800289c:	4661      	mov	r1, ip
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	0749      	lsls	r1, r1, #29
 80028a2:	430b      	orrs	r3, r1
 80028a4:	4661      	mov	r1, ip
 80028a6:	08cc      	lsrs	r4, r1, #3
 80028a8:	e027      	b.n	80028fa <__aeabi_dsub+0x2f6>
 80028aa:	0008      	movs	r0, r1
 80028ac:	4338      	orrs	r0, r7
 80028ae:	d061      	beq.n	8002974 <__aeabi_dsub+0x370>
 80028b0:	1e50      	subs	r0, r2, #1
 80028b2:	2a01      	cmp	r2, #1
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x2b4>
 80028b6:	e139      	b.n	8002b2c <__aeabi_dsub+0x528>
 80028b8:	42a2      	cmp	r2, r4
 80028ba:	d027      	beq.n	800290c <__aeabi_dsub+0x308>
 80028bc:	0002      	movs	r2, r0
 80028be:	e75d      	b.n	800277c <__aeabi_dsub+0x178>
 80028c0:	0002      	movs	r2, r0
 80028c2:	391f      	subs	r1, #31
 80028c4:	40ca      	lsrs	r2, r1
 80028c6:	0011      	movs	r1, r2
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d003      	beq.n	80028d4 <__aeabi_dsub+0x2d0>
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4098      	lsls	r0, r3
 80028d2:	4304      	orrs	r4, r0
 80028d4:	1e63      	subs	r3, r4, #1
 80028d6:	419c      	sbcs	r4, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	4699      	mov	r9, r3
 80028dc:	4698      	mov	r8, r3
 80028de:	430c      	orrs	r4, r1
 80028e0:	0763      	lsls	r3, r4, #29
 80028e2:	d000      	beq.n	80028e6 <__aeabi_dsub+0x2e2>
 80028e4:	e712      	b.n	800270c <__aeabi_dsub+0x108>
 80028e6:	464b      	mov	r3, r9
 80028e8:	464a      	mov	r2, r9
 80028ea:	08e4      	lsrs	r4, r4, #3
 80028ec:	075b      	lsls	r3, r3, #29
 80028ee:	4323      	orrs	r3, r4
 80028f0:	08d4      	lsrs	r4, r2, #3
 80028f2:	4642      	mov	r2, r8
 80028f4:	4919      	ldr	r1, [pc, #100]	; (800295c <__aeabi_dsub+0x358>)
 80028f6:	428a      	cmp	r2, r1
 80028f8:	d00e      	beq.n	8002918 <__aeabi_dsub+0x314>
 80028fa:	0324      	lsls	r4, r4, #12
 80028fc:	0552      	lsls	r2, r2, #21
 80028fe:	0b24      	lsrs	r4, r4, #12
 8002900:	0d52      	lsrs	r2, r2, #21
 8002902:	e722      	b.n	800274a <__aeabi_dsub+0x146>
 8002904:	000a      	movs	r2, r1
 8002906:	2400      	movs	r4, #0
 8002908:	2300      	movs	r3, #0
 800290a:	e71e      	b.n	800274a <__aeabi_dsub+0x146>
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	4662      	mov	r2, ip
 8002910:	0752      	lsls	r2, r2, #29
 8002912:	4313      	orrs	r3, r2
 8002914:	4662      	mov	r2, ip
 8002916:	08d4      	lsrs	r4, r2, #3
 8002918:	001a      	movs	r2, r3
 800291a:	4322      	orrs	r2, r4
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x31c>
 800291e:	e1fc      	b.n	8002d1a <__aeabi_dsub+0x716>
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	0312      	lsls	r2, r2, #12
 8002924:	4314      	orrs	r4, r2
 8002926:	0324      	lsls	r4, r4, #12
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <__aeabi_dsub+0x358>)
 800292a:	0b24      	lsrs	r4, r4, #12
 800292c:	e70d      	b.n	800274a <__aeabi_dsub+0x146>
 800292e:	0020      	movs	r0, r4
 8002930:	f000 faec 	bl	8002f0c <__clzsi2>
 8002934:	0001      	movs	r1, r0
 8002936:	3118      	adds	r1, #24
 8002938:	291f      	cmp	r1, #31
 800293a:	dc00      	bgt.n	800293e <__aeabi_dsub+0x33a>
 800293c:	e6c4      	b.n	80026c8 <__aeabi_dsub+0xc4>
 800293e:	3808      	subs	r0, #8
 8002940:	4084      	lsls	r4, r0
 8002942:	4643      	mov	r3, r8
 8002944:	0020      	movs	r0, r4
 8002946:	2400      	movs	r4, #0
 8002948:	4588      	cmp	r8, r1
 800294a:	dc00      	bgt.n	800294e <__aeabi_dsub+0x34a>
 800294c:	e6c8      	b.n	80026e0 <__aeabi_dsub+0xdc>
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__aeabi_dsub+0x35c>)
 8002950:	1a5b      	subs	r3, r3, r1
 8002952:	4010      	ands	r0, r2
 8002954:	4698      	mov	r8, r3
 8002956:	4681      	mov	r9, r0
 8002958:	e6d6      	b.n	8002708 <__aeabi_dsub+0x104>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	000007ff 	.word	0x000007ff
 8002960:	ff7fffff 	.word	0xff7fffff
 8002964:	fffff801 	.word	0xfffff801
 8002968:	000007fe 	.word	0x000007fe
 800296c:	430f      	orrs	r7, r1
 800296e:	1e7a      	subs	r2, r7, #1
 8002970:	4197      	sbcs	r7, r2
 8002972:	e691      	b.n	8002698 <__aeabi_dsub+0x94>
 8002974:	4661      	mov	r1, ip
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	0749      	lsls	r1, r1, #29
 800297a:	430b      	orrs	r3, r1
 800297c:	4661      	mov	r1, ip
 800297e:	08cc      	lsrs	r4, r1, #3
 8002980:	e7b8      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002982:	4640      	mov	r0, r8
 8002984:	4cd3      	ldr	r4, [pc, #844]	; (8002cd4 <__aeabi_dsub+0x6d0>)
 8002986:	3001      	adds	r0, #1
 8002988:	4220      	tst	r0, r4
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x38a>
 800298c:	e0a2      	b.n	8002ad4 <__aeabi_dsub+0x4d0>
 800298e:	4640      	mov	r0, r8
 8002990:	2800      	cmp	r0, #0
 8002992:	d000      	beq.n	8002996 <__aeabi_dsub+0x392>
 8002994:	e101      	b.n	8002b9a <__aeabi_dsub+0x596>
 8002996:	4660      	mov	r0, ip
 8002998:	4318      	orrs	r0, r3
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x39a>
 800299c:	e15e      	b.n	8002c5c <__aeabi_dsub+0x658>
 800299e:	0008      	movs	r0, r1
 80029a0:	4338      	orrs	r0, r7
 80029a2:	d000      	beq.n	80029a6 <__aeabi_dsub+0x3a2>
 80029a4:	e15f      	b.n	8002c66 <__aeabi_dsub+0x662>
 80029a6:	4661      	mov	r1, ip
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	0749      	lsls	r1, r1, #29
 80029ac:	430b      	orrs	r3, r1
 80029ae:	4661      	mov	r1, ip
 80029b0:	08cc      	lsrs	r4, r1, #3
 80029b2:	e7a2      	b.n	80028fa <__aeabi_dsub+0x2f6>
 80029b4:	4dc8      	ldr	r5, [pc, #800]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 80029b6:	42a8      	cmp	r0, r5
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x3b8>
 80029ba:	e0cf      	b.n	8002b5c <__aeabi_dsub+0x558>
 80029bc:	2580      	movs	r5, #128	; 0x80
 80029be:	4664      	mov	r4, ip
 80029c0:	042d      	lsls	r5, r5, #16
 80029c2:	432c      	orrs	r4, r5
 80029c4:	46a4      	mov	ip, r4
 80029c6:	2a38      	cmp	r2, #56	; 0x38
 80029c8:	dc56      	bgt.n	8002a78 <__aeabi_dsub+0x474>
 80029ca:	2a1f      	cmp	r2, #31
 80029cc:	dd00      	ble.n	80029d0 <__aeabi_dsub+0x3cc>
 80029ce:	e0d1      	b.n	8002b74 <__aeabi_dsub+0x570>
 80029d0:	2520      	movs	r5, #32
 80029d2:	001e      	movs	r6, r3
 80029d4:	1aad      	subs	r5, r5, r2
 80029d6:	4664      	mov	r4, ip
 80029d8:	40ab      	lsls	r3, r5
 80029da:	40ac      	lsls	r4, r5
 80029dc:	40d6      	lsrs	r6, r2
 80029de:	1e5d      	subs	r5, r3, #1
 80029e0:	41ab      	sbcs	r3, r5
 80029e2:	4334      	orrs	r4, r6
 80029e4:	4323      	orrs	r3, r4
 80029e6:	4664      	mov	r4, ip
 80029e8:	40d4      	lsrs	r4, r2
 80029ea:	1b09      	subs	r1, r1, r4
 80029ec:	e049      	b.n	8002a82 <__aeabi_dsub+0x47e>
 80029ee:	4660      	mov	r0, ip
 80029f0:	1bdc      	subs	r4, r3, r7
 80029f2:	1a46      	subs	r6, r0, r1
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	4180      	sbcs	r0, r0
 80029f8:	4240      	negs	r0, r0
 80029fa:	4681      	mov	r9, r0
 80029fc:	0030      	movs	r0, r6
 80029fe:	464e      	mov	r6, r9
 8002a00:	1b80      	subs	r0, r0, r6
 8002a02:	4681      	mov	r9, r0
 8002a04:	0200      	lsls	r0, r0, #8
 8002a06:	d476      	bmi.n	8002af6 <__aeabi_dsub+0x4f2>
 8002a08:	464b      	mov	r3, r9
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	d000      	beq.n	8002a10 <__aeabi_dsub+0x40c>
 8002a0e:	e652      	b.n	80026b6 <__aeabi_dsub+0xb2>
 8002a10:	2400      	movs	r4, #0
 8002a12:	2500      	movs	r5, #0
 8002a14:	e771      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002a16:	4339      	orrs	r1, r7
 8002a18:	000c      	movs	r4, r1
 8002a1a:	1e62      	subs	r2, r4, #1
 8002a1c:	4194      	sbcs	r4, r2
 8002a1e:	18e4      	adds	r4, r4, r3
 8002a20:	429c      	cmp	r4, r3
 8002a22:	419b      	sbcs	r3, r3
 8002a24:	425b      	negs	r3, r3
 8002a26:	4463      	add	r3, ip
 8002a28:	4699      	mov	r9, r3
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	d400      	bmi.n	8002a32 <__aeabi_dsub+0x42e>
 8002a30:	e756      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002a32:	2301      	movs	r3, #1
 8002a34:	469c      	mov	ip, r3
 8002a36:	4ba8      	ldr	r3, [pc, #672]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002a38:	44e0      	add	r8, ip
 8002a3a:	4598      	cmp	r8, r3
 8002a3c:	d038      	beq.n	8002ab0 <__aeabi_dsub+0x4ac>
 8002a3e:	464b      	mov	r3, r9
 8002a40:	48a6      	ldr	r0, [pc, #664]	; (8002cdc <__aeabi_dsub+0x6d8>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	4003      	ands	r3, r0
 8002a46:	0018      	movs	r0, r3
 8002a48:	0863      	lsrs	r3, r4, #1
 8002a4a:	4014      	ands	r4, r2
 8002a4c:	431c      	orrs	r4, r3
 8002a4e:	07c3      	lsls	r3, r0, #31
 8002a50:	431c      	orrs	r4, r3
 8002a52:	0843      	lsrs	r3, r0, #1
 8002a54:	4699      	mov	r9, r3
 8002a56:	e657      	b.n	8002708 <__aeabi_dsub+0x104>
 8002a58:	0010      	movs	r0, r2
 8002a5a:	000e      	movs	r6, r1
 8002a5c:	3820      	subs	r0, #32
 8002a5e:	40c6      	lsrs	r6, r0
 8002a60:	2a20      	cmp	r2, #32
 8002a62:	d004      	beq.n	8002a6e <__aeabi_dsub+0x46a>
 8002a64:	2040      	movs	r0, #64	; 0x40
 8002a66:	1a82      	subs	r2, r0, r2
 8002a68:	4091      	lsls	r1, r2
 8002a6a:	430f      	orrs	r7, r1
 8002a6c:	46b9      	mov	r9, r7
 8002a6e:	464f      	mov	r7, r9
 8002a70:	1e7a      	subs	r2, r7, #1
 8002a72:	4197      	sbcs	r7, r2
 8002a74:	4337      	orrs	r7, r6
 8002a76:	e60f      	b.n	8002698 <__aeabi_dsub+0x94>
 8002a78:	4662      	mov	r2, ip
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	4193      	sbcs	r3, r2
 8002a82:	1afc      	subs	r4, r7, r3
 8002a84:	42a7      	cmp	r7, r4
 8002a86:	41bf      	sbcs	r7, r7
 8002a88:	427f      	negs	r7, r7
 8002a8a:	1bcb      	subs	r3, r1, r7
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	465d      	mov	r5, fp
 8002a90:	4680      	mov	r8, r0
 8002a92:	e608      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002a94:	4666      	mov	r6, ip
 8002a96:	431e      	orrs	r6, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x498>
 8002a9a:	e0be      	b.n	8002c1a <__aeabi_dsub+0x616>
 8002a9c:	1e56      	subs	r6, r2, #1
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x4a0>
 8002aa2:	e109      	b.n	8002cb8 <__aeabi_dsub+0x6b4>
 8002aa4:	4c8c      	ldr	r4, [pc, #560]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	d100      	bne.n	8002aac <__aeabi_dsub+0x4a8>
 8002aaa:	e119      	b.n	8002ce0 <__aeabi_dsub+0x6dc>
 8002aac:	0032      	movs	r2, r6
 8002aae:	e6c1      	b.n	8002834 <__aeabi_dsub+0x230>
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e648      	b.n	800274a <__aeabi_dsub+0x146>
 8002ab8:	2020      	movs	r0, #32
 8002aba:	000c      	movs	r4, r1
 8002abc:	1a80      	subs	r0, r0, r2
 8002abe:	003e      	movs	r6, r7
 8002ac0:	4087      	lsls	r7, r0
 8002ac2:	4084      	lsls	r4, r0
 8002ac4:	40d6      	lsrs	r6, r2
 8002ac6:	1e78      	subs	r0, r7, #1
 8002ac8:	4187      	sbcs	r7, r0
 8002aca:	40d1      	lsrs	r1, r2
 8002acc:	4334      	orrs	r4, r6
 8002ace:	433c      	orrs	r4, r7
 8002ad0:	448c      	add	ip, r1
 8002ad2:	e7a4      	b.n	8002a1e <__aeabi_dsub+0x41a>
 8002ad4:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002ad6:	4290      	cmp	r0, r2
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x4d8>
 8002ada:	e0e9      	b.n	8002cb0 <__aeabi_dsub+0x6ac>
 8002adc:	19df      	adds	r7, r3, r7
 8002ade:	429f      	cmp	r7, r3
 8002ae0:	419b      	sbcs	r3, r3
 8002ae2:	4461      	add	r1, ip
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	18c9      	adds	r1, r1, r3
 8002ae8:	07cc      	lsls	r4, r1, #31
 8002aea:	087f      	lsrs	r7, r7, #1
 8002aec:	084b      	lsrs	r3, r1, #1
 8002aee:	4699      	mov	r9, r3
 8002af0:	4680      	mov	r8, r0
 8002af2:	433c      	orrs	r4, r7
 8002af4:	e6f4      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002af6:	1afc      	subs	r4, r7, r3
 8002af8:	42a7      	cmp	r7, r4
 8002afa:	41bf      	sbcs	r7, r7
 8002afc:	4663      	mov	r3, ip
 8002afe:	427f      	negs	r7, r7
 8002b00:	1ac9      	subs	r1, r1, r3
 8002b02:	1bcb      	subs	r3, r1, r7
 8002b04:	4699      	mov	r9, r3
 8002b06:	465d      	mov	r5, fp
 8002b08:	e5d5      	b.n	80026b6 <__aeabi_dsub+0xb2>
 8002b0a:	08ff      	lsrs	r7, r7, #3
 8002b0c:	074b      	lsls	r3, r1, #29
 8002b0e:	465d      	mov	r5, fp
 8002b10:	433b      	orrs	r3, r7
 8002b12:	08cc      	lsrs	r4, r1, #3
 8002b14:	e6ee      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002b16:	4662      	mov	r2, ip
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x51a>
 8002b1c:	e082      	b.n	8002c24 <__aeabi_dsub+0x620>
 8002b1e:	000b      	movs	r3, r1
 8002b20:	433b      	orrs	r3, r7
 8002b22:	d11b      	bne.n	8002b5c <__aeabi_dsub+0x558>
 8002b24:	2480      	movs	r4, #128	; 0x80
 8002b26:	2500      	movs	r5, #0
 8002b28:	0324      	lsls	r4, r4, #12
 8002b2a:	e6f9      	b.n	8002920 <__aeabi_dsub+0x31c>
 8002b2c:	19dc      	adds	r4, r3, r7
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	419b      	sbcs	r3, r3
 8002b32:	4461      	add	r1, ip
 8002b34:	4689      	mov	r9, r1
 8002b36:	425b      	negs	r3, r3
 8002b38:	4499      	add	r9, r3
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	d444      	bmi.n	8002bca <__aeabi_dsub+0x5c6>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4698      	mov	r8, r3
 8002b44:	e6cc      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002b46:	1bdc      	subs	r4, r3, r7
 8002b48:	4662      	mov	r2, ip
 8002b4a:	42a3      	cmp	r3, r4
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	1a51      	subs	r1, r2, r1
 8002b50:	425b      	negs	r3, r3
 8002b52:	1acb      	subs	r3, r1, r3
 8002b54:	4699      	mov	r9, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	4698      	mov	r8, r3
 8002b5a:	e5a4      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002b5c:	08ff      	lsrs	r7, r7, #3
 8002b5e:	074b      	lsls	r3, r1, #29
 8002b60:	465d      	mov	r5, fp
 8002b62:	433b      	orrs	r3, r7
 8002b64:	08cc      	lsrs	r4, r1, #3
 8002b66:	e6d7      	b.n	8002918 <__aeabi_dsub+0x314>
 8002b68:	4662      	mov	r2, ip
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	0014      	movs	r4, r2
 8002b6e:	1e63      	subs	r3, r4, #1
 8002b70:	419c      	sbcs	r4, r3
 8002b72:	e679      	b.n	8002868 <__aeabi_dsub+0x264>
 8002b74:	0015      	movs	r5, r2
 8002b76:	4664      	mov	r4, ip
 8002b78:	3d20      	subs	r5, #32
 8002b7a:	40ec      	lsrs	r4, r5
 8002b7c:	46a0      	mov	r8, r4
 8002b7e:	2a20      	cmp	r2, #32
 8002b80:	d005      	beq.n	8002b8e <__aeabi_dsub+0x58a>
 8002b82:	2540      	movs	r5, #64	; 0x40
 8002b84:	4664      	mov	r4, ip
 8002b86:	1aaa      	subs	r2, r5, r2
 8002b88:	4094      	lsls	r4, r2
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	469a      	mov	sl, r3
 8002b8e:	4654      	mov	r4, sl
 8002b90:	1e63      	subs	r3, r4, #1
 8002b92:	419c      	sbcs	r4, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	4323      	orrs	r3, r4
 8002b98:	e773      	b.n	8002a82 <__aeabi_dsub+0x47e>
 8002b9a:	4662      	mov	r2, ip
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	d023      	beq.n	8002be8 <__aeabi_dsub+0x5e4>
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	433a      	orrs	r2, r7
 8002ba4:	d000      	beq.n	8002ba8 <__aeabi_dsub+0x5a4>
 8002ba6:	e0a0      	b.n	8002cea <__aeabi_dsub+0x6e6>
 8002ba8:	4662      	mov	r2, ip
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	0752      	lsls	r2, r2, #29
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	4662      	mov	r2, ip
 8002bb2:	08d4      	lsrs	r4, r2, #3
 8002bb4:	e6b0      	b.n	8002918 <__aeabi_dsub+0x314>
 8002bb6:	000b      	movs	r3, r1
 8002bb8:	433b      	orrs	r3, r7
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x5ba>
 8002bbc:	e728      	b.n	8002a10 <__aeabi_dsub+0x40c>
 8002bbe:	08ff      	lsrs	r7, r7, #3
 8002bc0:	074b      	lsls	r3, r1, #29
 8002bc2:	465d      	mov	r5, fp
 8002bc4:	433b      	orrs	r3, r7
 8002bc6:	08cc      	lsrs	r4, r1, #3
 8002bc8:	e697      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	4698      	mov	r8, r3
 8002bce:	e736      	b.n	8002a3e <__aeabi_dsub+0x43a>
 8002bd0:	1afc      	subs	r4, r7, r3
 8002bd2:	42a7      	cmp	r7, r4
 8002bd4:	41bf      	sbcs	r7, r7
 8002bd6:	4663      	mov	r3, ip
 8002bd8:	427f      	negs	r7, r7
 8002bda:	1ac9      	subs	r1, r1, r3
 8002bdc:	1bcb      	subs	r3, r1, r7
 8002bde:	4699      	mov	r9, r3
 8002be0:	2301      	movs	r3, #1
 8002be2:	465d      	mov	r5, fp
 8002be4:	4698      	mov	r8, r3
 8002be6:	e55e      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002be8:	074b      	lsls	r3, r1, #29
 8002bea:	08ff      	lsrs	r7, r7, #3
 8002bec:	433b      	orrs	r3, r7
 8002bee:	08cc      	lsrs	r4, r1, #3
 8002bf0:	e692      	b.n	8002918 <__aeabi_dsub+0x314>
 8002bf2:	1bdc      	subs	r4, r3, r7
 8002bf4:	4660      	mov	r0, ip
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	41b6      	sbcs	r6, r6
 8002bfa:	1a40      	subs	r0, r0, r1
 8002bfc:	4276      	negs	r6, r6
 8002bfe:	1b80      	subs	r0, r0, r6
 8002c00:	4681      	mov	r9, r0
 8002c02:	0200      	lsls	r0, r0, #8
 8002c04:	d560      	bpl.n	8002cc8 <__aeabi_dsub+0x6c4>
 8002c06:	1afc      	subs	r4, r7, r3
 8002c08:	42a7      	cmp	r7, r4
 8002c0a:	41bf      	sbcs	r7, r7
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	427f      	negs	r7, r7
 8002c10:	1ac9      	subs	r1, r1, r3
 8002c12:	1bcb      	subs	r3, r1, r7
 8002c14:	4699      	mov	r9, r3
 8002c16:	465d      	mov	r5, fp
 8002c18:	e576      	b.n	8002708 <__aeabi_dsub+0x104>
 8002c1a:	08ff      	lsrs	r7, r7, #3
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	433b      	orrs	r3, r7
 8002c20:	08cc      	lsrs	r4, r1, #3
 8002c22:	e667      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002c24:	000a      	movs	r2, r1
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	433a      	orrs	r2, r7
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dsub+0x62a>
 8002c2c:	e66f      	b.n	800290e <__aeabi_dsub+0x30a>
 8002c2e:	4662      	mov	r2, ip
 8002c30:	0752      	lsls	r2, r2, #29
 8002c32:	4313      	orrs	r3, r2
 8002c34:	4662      	mov	r2, ip
 8002c36:	08d4      	lsrs	r4, r2, #3
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0312      	lsls	r2, r2, #12
 8002c3c:	4214      	tst	r4, r2
 8002c3e:	d007      	beq.n	8002c50 <__aeabi_dsub+0x64c>
 8002c40:	08c8      	lsrs	r0, r1, #3
 8002c42:	4210      	tst	r0, r2
 8002c44:	d104      	bne.n	8002c50 <__aeabi_dsub+0x64c>
 8002c46:	465d      	mov	r5, fp
 8002c48:	0004      	movs	r4, r0
 8002c4a:	08fb      	lsrs	r3, r7, #3
 8002c4c:	0749      	lsls	r1, r1, #29
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	0f5a      	lsrs	r2, r3, #29
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	0752      	lsls	r2, r2, #29
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	e65d      	b.n	8002918 <__aeabi_dsub+0x314>
 8002c5c:	074b      	lsls	r3, r1, #29
 8002c5e:	08ff      	lsrs	r7, r7, #3
 8002c60:	433b      	orrs	r3, r7
 8002c62:	08cc      	lsrs	r4, r1, #3
 8002c64:	e649      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002c66:	19dc      	adds	r4, r3, r7
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	419b      	sbcs	r3, r3
 8002c6c:	4461      	add	r1, ip
 8002c6e:	4689      	mov	r9, r1
 8002c70:	425b      	negs	r3, r3
 8002c72:	4499      	add	r9, r3
 8002c74:	464b      	mov	r3, r9
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x678>
 8002c7a:	e631      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <__aeabi_dsub+0x6d8>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	2301      	movs	r3, #1
 8002c84:	4691      	mov	r9, r2
 8002c86:	4698      	mov	r8, r3
 8002c88:	e62a      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002c8a:	0016      	movs	r6, r2
 8002c8c:	4664      	mov	r4, ip
 8002c8e:	3e20      	subs	r6, #32
 8002c90:	40f4      	lsrs	r4, r6
 8002c92:	46a0      	mov	r8, r4
 8002c94:	2a20      	cmp	r2, #32
 8002c96:	d005      	beq.n	8002ca4 <__aeabi_dsub+0x6a0>
 8002c98:	2640      	movs	r6, #64	; 0x40
 8002c9a:	4664      	mov	r4, ip
 8002c9c:	1ab2      	subs	r2, r6, r2
 8002c9e:	4094      	lsls	r4, r2
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	4654      	mov	r4, sl
 8002ca6:	1e63      	subs	r3, r4, #1
 8002ca8:	419c      	sbcs	r4, r3
 8002caa:	4643      	mov	r3, r8
 8002cac:	431c      	orrs	r4, r3
 8002cae:	e5db      	b.n	8002868 <__aeabi_dsub+0x264>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	2400      	movs	r4, #0
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e548      	b.n	800274a <__aeabi_dsub+0x146>
 8002cb8:	19dc      	adds	r4, r3, r7
 8002cba:	42bc      	cmp	r4, r7
 8002cbc:	41bf      	sbcs	r7, r7
 8002cbe:	4461      	add	r1, ip
 8002cc0:	4689      	mov	r9, r1
 8002cc2:	427f      	negs	r7, r7
 8002cc4:	44b9      	add	r9, r7
 8002cc6:	e738      	b.n	8002b3a <__aeabi_dsub+0x536>
 8002cc8:	464b      	mov	r3, r9
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x6cc>
 8002cce:	e69f      	b.n	8002a10 <__aeabi_dsub+0x40c>
 8002cd0:	e606      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	000007fe 	.word	0x000007fe
 8002cd8:	000007ff 	.word	0x000007ff
 8002cdc:	ff7fffff 	.word	0xff7fffff
 8002ce0:	08ff      	lsrs	r7, r7, #3
 8002ce2:	074b      	lsls	r3, r1, #29
 8002ce4:	433b      	orrs	r3, r7
 8002ce6:	08cc      	lsrs	r4, r1, #3
 8002ce8:	e616      	b.n	8002918 <__aeabi_dsub+0x314>
 8002cea:	4662      	mov	r2, ip
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	0752      	lsls	r2, r2, #29
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4662      	mov	r2, ip
 8002cf4:	08d4      	lsrs	r4, r2, #3
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0312      	lsls	r2, r2, #12
 8002cfa:	4214      	tst	r4, r2
 8002cfc:	d007      	beq.n	8002d0e <__aeabi_dsub+0x70a>
 8002cfe:	08c8      	lsrs	r0, r1, #3
 8002d00:	4210      	tst	r0, r2
 8002d02:	d104      	bne.n	8002d0e <__aeabi_dsub+0x70a>
 8002d04:	465d      	mov	r5, fp
 8002d06:	0004      	movs	r4, r0
 8002d08:	08fb      	lsrs	r3, r7, #3
 8002d0a:	0749      	lsls	r1, r1, #29
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	0f5a      	lsrs	r2, r3, #29
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	0752      	lsls	r2, r2, #29
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	e5fe      	b.n	8002918 <__aeabi_dsub+0x314>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	4a01      	ldr	r2, [pc, #4]	; (8002d24 <__aeabi_dsub+0x720>)
 8002d1e:	001c      	movs	r4, r3
 8002d20:	e513      	b.n	800274a <__aeabi_dsub+0x146>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	000007ff 	.word	0x000007ff

08002d28 <__aeabi_dcmpun>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	0005      	movs	r5, r0
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <__aeabi_dcmpun+0x38>)
 8002d2e:	031c      	lsls	r4, r3, #12
 8002d30:	0016      	movs	r6, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	030a      	lsls	r2, r1, #12
 8002d36:	0049      	lsls	r1, r1, #1
 8002d38:	0b12      	lsrs	r2, r2, #12
 8002d3a:	0d49      	lsrs	r1, r1, #21
 8002d3c:	0b24      	lsrs	r4, r4, #12
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	4281      	cmp	r1, r0
 8002d42:	d008      	beq.n	8002d56 <__aeabi_dcmpun+0x2e>
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <__aeabi_dcmpun+0x38>)
 8002d46:	2000      	movs	r0, #0
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <__aeabi_dcmpun+0x2c>
 8002d4c:	0020      	movs	r0, r4
 8002d4e:	4330      	orrs	r0, r6
 8002d50:	1e43      	subs	r3, r0, #1
 8002d52:	4198      	sbcs	r0, r3
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	2001      	movs	r0, #1
 8002d58:	432a      	orrs	r2, r5
 8002d5a:	d1fb      	bne.n	8002d54 <__aeabi_dcmpun+0x2c>
 8002d5c:	e7f2      	b.n	8002d44 <__aeabi_dcmpun+0x1c>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	000007ff 	.word	0x000007ff

08002d64 <__aeabi_d2iz>:
 8002d64:	000a      	movs	r2, r1
 8002d66:	b530      	push	{r4, r5, lr}
 8002d68:	4c13      	ldr	r4, [pc, #76]	; (8002db8 <__aeabi_d2iz+0x54>)
 8002d6a:	0053      	lsls	r3, r2, #1
 8002d6c:	0309      	lsls	r1, r1, #12
 8002d6e:	0005      	movs	r5, r0
 8002d70:	0b09      	lsrs	r1, r1, #12
 8002d72:	2000      	movs	r0, #0
 8002d74:	0d5b      	lsrs	r3, r3, #21
 8002d76:	0fd2      	lsrs	r2, r2, #31
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	dd04      	ble.n	8002d86 <__aeabi_d2iz+0x22>
 8002d7c:	480f      	ldr	r0, [pc, #60]	; (8002dbc <__aeabi_d2iz+0x58>)
 8002d7e:	4283      	cmp	r3, r0
 8002d80:	dd02      	ble.n	8002d88 <__aeabi_d2iz+0x24>
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <__aeabi_d2iz+0x5c>)
 8002d84:	18d0      	adds	r0, r2, r3
 8002d86:	bd30      	pop	{r4, r5, pc}
 8002d88:	2080      	movs	r0, #128	; 0x80
 8002d8a:	0340      	lsls	r0, r0, #13
 8002d8c:	4301      	orrs	r1, r0
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <__aeabi_d2iz+0x60>)
 8002d90:	1ac0      	subs	r0, r0, r3
 8002d92:	281f      	cmp	r0, #31
 8002d94:	dd08      	ble.n	8002da8 <__aeabi_d2iz+0x44>
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <__aeabi_d2iz+0x64>)
 8002d98:	1ac3      	subs	r3, r0, r3
 8002d9a:	40d9      	lsrs	r1, r3
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	4258      	negs	r0, r3
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d1f0      	bne.n	8002d86 <__aeabi_d2iz+0x22>
 8002da4:	0018      	movs	r0, r3
 8002da6:	e7ee      	b.n	8002d86 <__aeabi_d2iz+0x22>
 8002da8:	4c08      	ldr	r4, [pc, #32]	; (8002dcc <__aeabi_d2iz+0x68>)
 8002daa:	40c5      	lsrs	r5, r0
 8002dac:	46a4      	mov	ip, r4
 8002dae:	4463      	add	r3, ip
 8002db0:	4099      	lsls	r1, r3
 8002db2:	000b      	movs	r3, r1
 8002db4:	432b      	orrs	r3, r5
 8002db6:	e7f2      	b.n	8002d9e <__aeabi_d2iz+0x3a>
 8002db8:	000003fe 	.word	0x000003fe
 8002dbc:	0000041d 	.word	0x0000041d
 8002dc0:	7fffffff 	.word	0x7fffffff
 8002dc4:	00000433 	.word	0x00000433
 8002dc8:	00000413 	.word	0x00000413
 8002dcc:	fffffbed 	.word	0xfffffbed

08002dd0 <__aeabi_i2d>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d016      	beq.n	8002e04 <__aeabi_i2d+0x34>
 8002dd6:	17c3      	asrs	r3, r0, #31
 8002dd8:	18c5      	adds	r5, r0, r3
 8002dda:	405d      	eors	r5, r3
 8002ddc:	0fc4      	lsrs	r4, r0, #31
 8002dde:	0028      	movs	r0, r5
 8002de0:	f000 f894 	bl	8002f0c <__clzsi2>
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <__aeabi_i2d+0x5c>)
 8002de6:	1a12      	subs	r2, r2, r0
 8002de8:	280a      	cmp	r0, #10
 8002dea:	dc16      	bgt.n	8002e1a <__aeabi_i2d+0x4a>
 8002dec:	0003      	movs	r3, r0
 8002dee:	002e      	movs	r6, r5
 8002df0:	3315      	adds	r3, #21
 8002df2:	409e      	lsls	r6, r3
 8002df4:	230b      	movs	r3, #11
 8002df6:	1a18      	subs	r0, r3, r0
 8002df8:	40c5      	lsrs	r5, r0
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	0b2d      	lsrs	r5, r5, #12
 8002e00:	0d53      	lsrs	r3, r2, #21
 8002e02:	e003      	b.n	8002e0c <__aeabi_i2d+0x3c>
 8002e04:	2400      	movs	r4, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	432b      	orrs	r3, r5
 8002e10:	07e4      	lsls	r4, r4, #31
 8002e12:	4323      	orrs	r3, r4
 8002e14:	0030      	movs	r0, r6
 8002e16:	0019      	movs	r1, r3
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	380b      	subs	r0, #11
 8002e1c:	4085      	lsls	r5, r0
 8002e1e:	0552      	lsls	r2, r2, #21
 8002e20:	032d      	lsls	r5, r5, #12
 8002e22:	2600      	movs	r6, #0
 8002e24:	0b2d      	lsrs	r5, r5, #12
 8002e26:	0d53      	lsrs	r3, r2, #21
 8002e28:	e7f0      	b.n	8002e0c <__aeabi_i2d+0x3c>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	0000041e 	.word	0x0000041e

08002e30 <__aeabi_ui2d>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	1e04      	subs	r4, r0, #0
 8002e34:	d010      	beq.n	8002e58 <__aeabi_ui2d+0x28>
 8002e36:	f000 f869 	bl	8002f0c <__clzsi2>
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <__aeabi_ui2d+0x48>)
 8002e3c:	1a1b      	subs	r3, r3, r0
 8002e3e:	280a      	cmp	r0, #10
 8002e40:	dc11      	bgt.n	8002e66 <__aeabi_ui2d+0x36>
 8002e42:	220b      	movs	r2, #11
 8002e44:	0021      	movs	r1, r4
 8002e46:	1a12      	subs	r2, r2, r0
 8002e48:	40d1      	lsrs	r1, r2
 8002e4a:	3015      	adds	r0, #21
 8002e4c:	030a      	lsls	r2, r1, #12
 8002e4e:	055b      	lsls	r3, r3, #21
 8002e50:	4084      	lsls	r4, r0
 8002e52:	0b12      	lsrs	r2, r2, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e001      	b.n	8002e5c <__aeabi_ui2d+0x2c>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	0020      	movs	r0, r4
 8002e62:	0019      	movs	r1, r3
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	0022      	movs	r2, r4
 8002e68:	380b      	subs	r0, #11
 8002e6a:	4082      	lsls	r2, r0
 8002e6c:	055b      	lsls	r3, r3, #21
 8002e6e:	0312      	lsls	r2, r2, #12
 8002e70:	2400      	movs	r4, #0
 8002e72:	0b12      	lsrs	r2, r2, #12
 8002e74:	0d5b      	lsrs	r3, r3, #21
 8002e76:	e7f1      	b.n	8002e5c <__aeabi_ui2d+0x2c>
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_f2d>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0043      	lsls	r3, r0, #1
 8002e80:	0246      	lsls	r6, r0, #9
 8002e82:	0fc4      	lsrs	r4, r0, #31
 8002e84:	20fe      	movs	r0, #254	; 0xfe
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	0a75      	lsrs	r5, r6, #9
 8002e8c:	4208      	tst	r0, r1
 8002e8e:	d00c      	beq.n	8002eaa <__aeabi_f2d+0x2e>
 8002e90:	22e0      	movs	r2, #224	; 0xe0
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4694      	mov	ip, r2
 8002e96:	076d      	lsls	r5, r5, #29
 8002e98:	0b36      	lsrs	r6, r6, #12
 8002e9a:	4463      	add	r3, ip
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	4333      	orrs	r3, r6
 8002ea0:	07e4      	lsls	r4, r4, #31
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	0028      	movs	r0, r5
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <__aeabi_f2d+0x5c>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d01b      	beq.n	8002eea <__aeabi_f2d+0x6e>
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f82a 	bl	8002f0c <__clzsi2>
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	dc1c      	bgt.n	8002ef6 <__aeabi_f2d+0x7a>
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	002e      	movs	r6, r5
 8002ec0:	1a1b      	subs	r3, r3, r0
 8002ec2:	40de      	lsrs	r6, r3
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	3315      	adds	r3, #21
 8002ec8:	409d      	lsls	r5, r3
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <__aeabi_f2d+0x88>)
 8002ecc:	0336      	lsls	r6, r6, #12
 8002ece:	1a12      	subs	r2, r2, r0
 8002ed0:	0552      	lsls	r2, r2, #21
 8002ed2:	0b36      	lsrs	r6, r6, #12
 8002ed4:	0d53      	lsrs	r3, r2, #21
 8002ed6:	e7e1      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	d009      	beq.n	8002ef0 <__aeabi_f2d+0x74>
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	0b36      	lsrs	r6, r6, #12
 8002ee0:	0312      	lsls	r2, r2, #12
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <__aeabi_f2d+0x8c>)
 8002ee4:	076d      	lsls	r5, r5, #29
 8002ee6:	4316      	orrs	r6, r2
 8002ee8:	e7d8      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2600      	movs	r6, #0
 8002eee:	e7d5      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <__aeabi_f2d+0x8c>)
 8002ef4:	e7d2      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	3b0b      	subs	r3, #11
 8002efa:	409d      	lsls	r5, r3
 8002efc:	002e      	movs	r6, r5
 8002efe:	2500      	movs	r5, #0
 8002f00:	e7e3      	b.n	8002eca <__aeabi_f2d+0x4e>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	00000389 	.word	0x00000389
 8002f08:	000007ff 	.word	0x000007ff

08002f0c <__clzsi2>:
 8002f0c:	211c      	movs	r1, #28
 8002f0e:	2301      	movs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d301      	bcc.n	8002f1a <__clzsi2+0xe>
 8002f16:	0c00      	lsrs	r0, r0, #16
 8002f18:	3910      	subs	r1, #16
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d301      	bcc.n	8002f24 <__clzsi2+0x18>
 8002f20:	0a00      	lsrs	r0, r0, #8
 8002f22:	3908      	subs	r1, #8
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	4298      	cmp	r0, r3
 8002f28:	d301      	bcc.n	8002f2e <__clzsi2+0x22>
 8002f2a:	0900      	lsrs	r0, r0, #4
 8002f2c:	3904      	subs	r1, #4
 8002f2e:	a202      	add	r2, pc, #8	; (adr r2, 8002f38 <__clzsi2+0x2c>)
 8002f30:	5c10      	ldrb	r0, [r2, r0]
 8002f32:	1840      	adds	r0, r0, r1
 8002f34:	4770      	bx	lr
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	02020304 	.word	0x02020304
 8002f3c:	01010101 	.word	0x01010101
	...

08002f48 <__clzdi2>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	d103      	bne.n	8002f56 <__clzdi2+0xe>
 8002f4e:	f7ff ffdd 	bl	8002f0c <__clzsi2>
 8002f52:	3020      	adds	r0, #32
 8002f54:	e002      	b.n	8002f5c <__clzdi2+0x14>
 8002f56:	0008      	movs	r0, r1
 8002f58:	f7ff ffd8 	bl	8002f0c <__clzsi2>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)

08002f60 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <__io_putchar+0x20>)
 8002f6a:	1d39      	adds	r1, r7, #4
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <__io_putchar+0x24>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f004 fb3a 	bl	80075e8 <HAL_UART_Transmit>
	return ch;
 8002f74:	687b      	ldr	r3, [r7, #4]

}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	0000ffff 	.word	0x0000ffff
 8002f84:	20000404 	.word	0x20000404

08002f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8a:	b08d      	sub	sp, #52	; 0x34
 8002f8c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f8e:	f001 f909 	bl	80041a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f92:	f000 f8d5 	bl	8003140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f96:	f000 fb93 	bl	80036c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f9a:	f000 fb73 	bl	8003684 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002f9e:	f000 f9d3 	bl	8003348 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002fa2:	f000 fa21 	bl	80033e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002fa6:	f000 fa6d 	bl	8003484 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8002faa:	f000 fa9f 	bl	80034ec <MX_USART4_UART_Init>
  MX_SPI1_Init();
 8002fae:	f000 fad1 	bl	8003554 <MX_SPI1_Init>
  MX_ADC1_Init();
 8002fb2:	f000 f923 	bl	80031fc <MX_ADC1_Init>
  MX_CRC_Init();
 8002fb6:	f000 f9a3 	bl	8003300 <MX_CRC_Init>
  MX_TIM15_Init();
 8002fba:	f000 fb09 	bl	80035d0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\nStarting\n");
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <main+0x15c>)
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f006 fa7f 	bl	80094c4 <puts>
  printf("VREFINT_CAL = %d (0x%04x)\n", (uint16_t)*VREFINT_CAL_ADDR, (uint16_t)*VREFINT_CAL_ADDR);
 8002fc6:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <main+0x160>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	0019      	movs	r1, r3
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <main+0x160>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	4b46      	ldr	r3, [pc, #280]	; (80030ec <main+0x164>)
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f006 f9e9 	bl	80093ac <iprintf>
  printf("TEMPSENSOR_CAL1 = %d (0x%04x)\n", (uint16_t)*TEMPSENSOR_CAL1_ADDR, (uint16_t)*TEMPSENSOR_CAL1_ADDR);
 8002fda:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <main+0x168>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <main+0x168>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <main+0x16c>)
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f006 f9df 	bl	80093ac <iprintf>
  printf("TEMPSENSOR_CAL2 = %d (0x%04x)\n", (uint16_t)*TEMPSENSOR_CAL2_ADDR, (uint16_t)*TEMPSENSOR_CAL2_ADDR);
 8002fee:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <main+0x170>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <main+0x170>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	4b40      	ldr	r3, [pc, #256]	; (80030fc <main+0x174>)
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f006 f9d5 	bl	80093ac <iprintf>

  // Calculate transfer function values - a and b in simple linear equation y = ax + b
  calculate_calibration();
 8003002:	f000 fc97 	bl	8003934 <calculate_calibration>
  //ta = (float)((uint16_t)TEMPSENSOR_CAL2_TEMP - (uint16_t)TEMPSENSOR_CAL1_TEMP) / ((uint16_t)*TEMPSENSOR_CAL2_ADDR - (uint16_t)*TEMPSENSOR_CAL1_ADDR);
  //tb = (uint16_t)TEMPSENSOR_CAL1_TEMP - ta * (uint16_t)*TEMPSENSOR_CAL1_ADDR;

  printf("Temp calibration: t = %0.3f * tmeasured + %0.3f\n", ta, tb);
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <main+0x178>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c18      	adds	r0, r3, #0
 800300c:	f7ff ff36 	bl	8002e7c <__aeabi_f2d>
 8003010:	0004      	movs	r4, r0
 8003012:	000d      	movs	r5, r1
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <main+0x17c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c18      	adds	r0, r3, #0
 800301a:	f7ff ff2f 	bl	8002e7c <__aeabi_f2d>
 800301e:	0002      	movs	r2, r0
 8003020:	000b      	movs	r3, r1
 8003022:	4939      	ldr	r1, [pc, #228]	; (8003108 <main+0x180>)
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	0022      	movs	r2, r4
 800302a:	002b      	movs	r3, r5
 800302c:	0008      	movs	r0, r1
 800302e:	f006 f9bd 	bl	80093ac <iprintf>

  HAL_TIM_Base_Start_IT(&htim15); // First get the timer running
 8003032:	4b36      	ldr	r3, [pc, #216]	; (800310c <main+0x184>)
 8003034:	0018      	movs	r0, r3
 8003036:	f003 ff67 	bl	8006f08 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 800303a:	23c8      	movs	r3, #200	; 0xc8
 800303c:	005a      	lsls	r2, r3, #1
 800303e:	4934      	ldr	r1, [pc, #208]	; (8003110 <main+0x188>)
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <main+0x18c>)
 8003042:	0018      	movs	r0, r3
 8003044:	f001 fc24 	bl	8004890 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t now = 0, then = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]

	 for (;;) { // Just to fuel the debate if this is better than while(1)

		 now = HAL_GetTick();
 8003050:	f001 f924 	bl	800429c <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60bb      	str	r3, [r7, #8]

		 if (now - then >= 1000) {
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	23fa      	movs	r3, #250	; 0xfa
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	429a      	cmp	r2, r3
 8003064:	d3f4      	bcc.n	8003050 <main+0xc8>

			 printf("VDDA = %5.3f V Vref = %5.3f V (raw = %d) Temp = %4.2f °C (raw = %d)\r\n", vdda, vref, vref_avg, temp, temp_avg);
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <main+0x190>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1c18      	adds	r0, r3, #0
 800306c:	f7ff ff06 	bl	8002e7c <__aeabi_f2d>
 8003070:	6038      	str	r0, [r7, #0]
 8003072:	6079      	str	r1, [r7, #4]
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <main+0x194>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1c18      	adds	r0, r3, #0
 800307a:	f7ff feff 	bl	8002e7c <__aeabi_f2d>
 800307e:	0004      	movs	r4, r0
 8003080:	000d      	movs	r5, r1
 8003082:	4b27      	ldr	r3, [pc, #156]	; (8003120 <main+0x198>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	001e      	movs	r6, r3
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <main+0x19c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c18      	adds	r0, r3, #0
 800308e:	f7ff fef5 	bl	8002e7c <__aeabi_f2d>
 8003092:	0002      	movs	r2, r0
 8003094:	000b      	movs	r3, r1
 8003096:	4924      	ldr	r1, [pc, #144]	; (8003128 <main+0x1a0>)
 8003098:	8809      	ldrh	r1, [r1, #0]
 800309a:	0008      	movs	r0, r1
 800309c:	4923      	ldr	r1, [pc, #140]	; (800312c <main+0x1a4>)
 800309e:	9006      	str	r0, [sp, #24]
 80030a0:	9204      	str	r2, [sp, #16]
 80030a2:	9305      	str	r3, [sp, #20]
 80030a4:	9602      	str	r6, [sp, #8]
 80030a6:	9400      	str	r4, [sp, #0]
 80030a8:	9501      	str	r5, [sp, #4]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0008      	movs	r0, r1
 80030b0:	f006 f97c 	bl	80093ac <iprintf>
			 crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)CRC_TEST_STRING, strlen(CRC_TEST_STRING));
 80030b4:	491e      	ldr	r1, [pc, #120]	; (8003130 <main+0x1a8>)
 80030b6:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <main+0x1ac>)
 80030b8:	2218      	movs	r2, #24
 80030ba:	0018      	movs	r0, r3
 80030bc:	f002 f8ae 	bl	800521c <HAL_CRC_Calculate>
 80030c0:	0002      	movs	r2, r0
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <main+0x1b0>)
 80030c4:	601a      	str	r2, [r3, #0]
			 printf("String '%s' - (MPEG-2 CRC) => 0x%08lu!!!\r\nString '%s' - (BZIP2 CRC) => 0x%08lu!!!\r\n", CRC_TEST_STRING, crc, CRC_TEST_STRING, ~crc);
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <main+0x1b0>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <main+0x1b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	4c17      	ldr	r4, [pc, #92]	; (8003130 <main+0x1a8>)
 80030d2:	4917      	ldr	r1, [pc, #92]	; (8003130 <main+0x1a8>)
 80030d4:	4819      	ldr	r0, [pc, #100]	; (800313c <main+0x1b4>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	0023      	movs	r3, r4
 80030da:	f006 f967 	bl	80093ac <iprintf>
			 then = now;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	60fb      	str	r3, [r7, #12]
		 now = HAL_GetTick();
 80030e2:	e7b5      	b.n	8003050 <main+0xc8>
 80030e4:	0800b7b0 	.word	0x0800b7b0
 80030e8:	1fff75aa 	.word	0x1fff75aa
 80030ec:	0800b7bc 	.word	0x0800b7bc
 80030f0:	1fff75a8 	.word	0x1fff75a8
 80030f4:	0800b7d8 	.word	0x0800b7d8
 80030f8:	1fff75ca 	.word	0x1fff75ca
 80030fc:	0800b7f8 	.word	0x0800b7f8
 8003100:	200005dc 	.word	0x200005dc
 8003104:	200005e0 	.word	0x200005e0
 8003108:	0800b818 	.word	0x0800b818
 800310c:	20000590 	.word	0x20000590
 8003110:	200005e4 	.word	0x200005e4
 8003114:	200001f8 	.word	0x200001f8
 8003118:	20000908 	.word	0x20000908
 800311c:	2000090c 	.word	0x2000090c
 8003120:	20000904 	.word	0x20000904
 8003124:	20000910 	.word	0x20000910
 8003128:	20000906 	.word	0x20000906
 800312c:	0800b84c 	.word	0x0800b84c
 8003130:	0800b894 	.word	0x0800b894
 8003134:	200002b8 	.word	0x200002b8
 8003138:	20000914 	.word	0x20000914
 800313c:	0800b8b0 	.word	0x0800b8b0

08003140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b093      	sub	sp, #76	; 0x4c
 8003144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003146:	2410      	movs	r4, #16
 8003148:	193b      	adds	r3, r7, r4
 800314a:	0018      	movs	r0, r3
 800314c:	2338      	movs	r3, #56	; 0x38
 800314e:	001a      	movs	r2, r3
 8003150:	2100      	movs	r1, #0
 8003152:	f005 fcb5 	bl	8008ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003156:	003b      	movs	r3, r7
 8003158:	0018      	movs	r0, r3
 800315a:	2310      	movs	r3, #16
 800315c:	001a      	movs	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f005 fcae 	bl	8008ac0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	0018      	movs	r0, r3
 800316a:	f002 fef5 	bl	8005f58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800316e:	193b      	adds	r3, r7, r4
 8003170:	2202      	movs	r2, #2
 8003172:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003174:	193b      	adds	r3, r7, r4
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	0052      	lsls	r2, r2, #1
 800317a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800317c:	0021      	movs	r1, r4
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2202      	movs	r2, #2
 800318e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2202      	movs	r2, #2
 8003194:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2200      	movs	r2, #0
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2208      	movs	r2, #8
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0292      	lsls	r2, r2, #10
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0492      	lsls	r2, r2, #18
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0592      	lsls	r2, r2, #22
 80031b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	0018      	movs	r0, r3
 80031be:	f002 ff17 	bl	8005ff0 <HAL_RCC_OscConfig>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80031c6:	f000 fc27 	bl	8003a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ca:	003b      	movs	r3, r7
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d0:	003b      	movs	r3, r7
 80031d2:	2202      	movs	r2, #2
 80031d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031d6:	003b      	movs	r3, r7
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031dc:	003b      	movs	r3, r7
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031e2:	003b      	movs	r3, r7
 80031e4:	2102      	movs	r1, #2
 80031e6:	0018      	movs	r0, r3
 80031e8:	f003 fa1c 	bl	8006624 <HAL_RCC_ClockConfig>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d001      	beq.n	80031f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80031f0:	f000 fc12 	bl	8003a18 <Error_Handler>
  }
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b013      	add	sp, #76	; 0x4c
 80031fa:	bd90      	pop	{r4, r7, pc}

080031fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	0018      	movs	r0, r3
 8003206:	230c      	movs	r3, #12
 8003208:	001a      	movs	r2, r3
 800320a:	2100      	movs	r1, #0
 800320c:	f005 fc58 	bl	8008ac0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003210:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003212:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <MX_ADC1_Init+0xf8>)
 8003214:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	05d2      	lsls	r2, r2, #23
 800321c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	0392      	lsls	r2, r2, #14
 8003230:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003232:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003234:	2208      	movs	r2, #8
 8003236:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800323a:	2200      	movs	r2, #0
 800323c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003240:	2200      	movs	r2, #0
 8003242:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003246:	2200      	movs	r2, #0
 8003248:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800324c:	2202      	movs	r2, #2
 800324e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003252:	2220      	movs	r2, #32
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800325a:	22a0      	movs	r2, #160	; 0xa0
 800325c:	00d2      	lsls	r2, r2, #3
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800326a:	222c      	movs	r2, #44	; 0x2c
 800326c:	2101      	movs	r1, #1
 800326e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003270:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003278:	2206      	movs	r2, #6
 800327a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800327e:	2200      	movs	r2, #0
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003284:	223c      	movs	r2, #60	; 0x3c
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800328c:	2200      	movs	r2, #0
 800328e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003292:	0018      	movs	r0, r3
 8003294:	f001 f954 	bl	8004540 <HAL_ADC_Init>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800329c:	f000 fbbc 	bl	8003a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <MX_ADC1_Init+0xfc>)
 80032a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b2:	1d3a      	adds	r2, r7, #4
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_ADC1_Init+0xf4>)
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f001 fb7f 	bl	80049bc <HAL_ADC_ConfigChannel>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d001      	beq.n	80032c6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80032c2:	f000 fba9 	bl	8003a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <MX_ADC1_Init+0x100>)
 80032ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	2204      	movs	r2, #4
 80032d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d2:	1d3a      	adds	r2, r7, #4
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_ADC1_Init+0xf4>)
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 fb6f 	bl	80049bc <HAL_ADC_ConfigChannel>
 80032de:	1e03      	subs	r3, r0, #0
 80032e0:	d001      	beq.n	80032e6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80032e2:	f000 fb99 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	200001f8 	.word	0x200001f8
 80032f4:	40012400 	.word	0x40012400
 80032f8:	b0001000 	.word	0xb0001000
 80032fc:	b4002000 	.word	0xb4002000

08003300 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_CRC_Init+0x40>)
 8003306:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <MX_CRC_Init+0x44>)
 8003308:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <MX_CRC_Init+0x40>)
 800330c:	2200      	movs	r2, #0
 800330e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <MX_CRC_Init+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <MX_CRC_Init+0x40>)
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <MX_CRC_Init+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <MX_CRC_Init+0x40>)
 8003324:	2201      	movs	r2, #1
 8003326:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <MX_CRC_Init+0x40>)
 800332a:	0018      	movs	r0, r3
 800332c:	f001 ff10 	bl	8005150 <HAL_CRC_Init>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d001      	beq.n	8003338 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003334:	f000 fb70 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	200002b8 	.word	0x200002b8
 8003344:	40023000 	.word	0x40023000

08003348 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800334c:	4b23      	ldr	r3, [pc, #140]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 800334e:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <MX_LPUART1_UART_Init+0x98>)
 8003350:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <MX_LPUART1_UART_Init+0x9c>)
 8003356:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	0552      	lsls	r2, r2, #21
 800335e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 800336e:	220c      	movs	r2, #12
 8003370:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003372:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003378:	4b18      	ldr	r3, [pc, #96]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003380:	2200      	movs	r2, #0
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003386:	2200      	movs	r2, #0
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 800338c:	2200      	movs	r2, #0
 800338e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 8003392:	0018      	movs	r0, r3
 8003394:	f004 f874 	bl	8007480 <HAL_UART_Init>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800339c:	f000 fb3c 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 80033a2:	2100      	movs	r1, #0
 80033a4:	0018      	movs	r0, r3
 80033a6:	f005 fa81 	bl	80088ac <HAL_UARTEx_SetTxFifoThreshold>
 80033aa:	1e03      	subs	r3, r0, #0
 80033ac:	d001      	beq.n	80033b2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80033ae:	f000 fb33 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 80033b4:	2100      	movs	r1, #0
 80033b6:	0018      	movs	r0, r3
 80033b8:	f005 fab8 	bl	800892c <HAL_UARTEx_SetRxFifoThreshold>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d001      	beq.n	80033c4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80033c0:	f000 fb2a 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <MX_LPUART1_UART_Init+0x94>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f005 fa36 	bl	8008838 <HAL_UARTEx_DisableFifoMode>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80033d0:	f000 fb22 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	200002dc 	.word	0x200002dc
 80033e0:	40008000 	.word	0x40008000
 80033e4:	00033324 	.word	0x00033324

080033e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <MX_USART1_UART_Init+0x94>)
 80033ee:	4a24      	ldr	r2, [pc, #144]	; (8003480 <MX_USART1_UART_Init+0x98>)
 80033f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <MX_USART1_UART_Init+0x94>)
 80033f4:	22e1      	movs	r2, #225	; 0xe1
 80033f6:	0252      	lsls	r2, r2, #9
 80033f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <MX_USART1_UART_Init+0x94>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003402:	2200      	movs	r2, #0
 8003404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <MX_USART1_UART_Init+0x94>)
 800340e:	220c      	movs	r2, #12
 8003410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003414:	2200      	movs	r2, #0
 8003416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <MX_USART1_UART_Init+0x94>)
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003420:	2200      	movs	r2, #0
 8003422:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003426:	2200      	movs	r2, #0
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <MX_USART1_UART_Init+0x94>)
 800342c:	2200      	movs	r2, #0
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003432:	0018      	movs	r0, r3
 8003434:	f004 f824 	bl	8007480 <HAL_UART_Init>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d001      	beq.n	8003440 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800343c:	f000 faec 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003442:	2100      	movs	r1, #0
 8003444:	0018      	movs	r0, r3
 8003446:	f005 fa31 	bl	80088ac <HAL_UARTEx_SetTxFifoThreshold>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800344e:	f000 fae3 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003454:	2100      	movs	r1, #0
 8003456:	0018      	movs	r0, r3
 8003458:	f005 fa68 	bl	800892c <HAL_UARTEx_SetRxFifoThreshold>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003460:	f000 fada 	bl	8003a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <MX_USART1_UART_Init+0x94>)
 8003466:	0018      	movs	r0, r3
 8003468:	f005 f9e6 	bl	8008838 <HAL_UARTEx_DisableFifoMode>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003470:	f000 fad2 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	20000370 	.word	0x20000370
 8003480:	40013800 	.word	0x40013800

08003484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <MX_USART3_UART_Init+0x64>)
 800348c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 8003490:	22e1      	movs	r2, #225	; 0xe1
 8003492:	0252      	lsls	r2, r2, #9
 8003494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003496:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034aa:	220c      	movs	r2, #12
 80034ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <MX_USART3_UART_Init+0x60>)
 80034ce:	0018      	movs	r0, r3
 80034d0:	f004 f82c 	bl	800752c <HAL_HalfDuplex_Init>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80034d8:	f000 fa9e 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	20000404 	.word	0x20000404
 80034e8:	40004800 	.word	0x40004800

080034ec <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <MX_USART4_UART_Init+0x60>)
 80034f2:	4a17      	ldr	r2, [pc, #92]	; (8003550 <MX_USART4_UART_Init+0x64>)
 80034f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_USART4_UART_Init+0x60>)
 80034f8:	22e1      	movs	r2, #225	; 0xe1
 80034fa:	0252      	lsls	r2, r2, #9
 80034fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80034fe:	4b13      	ldr	r3, [pc, #76]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <MX_USART4_UART_Init+0x60>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003512:	220c      	movs	r2, #12
 8003514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <MX_USART4_UART_Init+0x60>)
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003524:	2200      	movs	r2, #0
 8003526:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <MX_USART4_UART_Init+0x60>)
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003530:	2200      	movs	r2, #0
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <MX_USART4_UART_Init+0x60>)
 8003536:	0018      	movs	r0, r3
 8003538:	f003 ffa2 	bl	8007480 <HAL_UART_Init>
 800353c:	1e03      	subs	r3, r0, #0
 800353e:	d001      	beq.n	8003544 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8003540:	f000 fa6a 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000498 	.word	0x20000498
 8003550:	40004c00 	.word	0x40004c00

08003554 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <MX_SPI1_Init+0x74>)
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <MX_SPI1_Init+0x78>)
 800355c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003560:	2282      	movs	r2, #130	; 0x82
 8003562:	0052      	lsls	r2, r2, #1
 8003564:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <MX_SPI1_Init+0x74>)
 800356e:	22c0      	movs	r2, #192	; 0xc0
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <MX_SPI1_Init+0x74>)
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	02d2      	lsls	r2, r2, #11
 8003586:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <MX_SPI1_Init+0x74>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <MX_SPI1_Init+0x74>)
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <MX_SPI1_Init+0x74>)
 800359c:	2200      	movs	r2, #0
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035a2:	2207      	movs	r2, #7
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035ae:	2208      	movs	r2, #8
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <MX_SPI1_Init+0x74>)
 80035b4:	0018      	movs	r0, r3
 80035b6:	f003 fb97 	bl	8006ce8 <HAL_SPI_Init>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035be:	f000 fa2b 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	2000052c 	.word	0x2000052c
 80035cc:	40013000 	.word	0x40013000

080035d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035d6:	2310      	movs	r3, #16
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	0018      	movs	r0, r3
 80035dc:	2310      	movs	r3, #16
 80035de:	001a      	movs	r2, r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	f005 fa6d 	bl	8008ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	0018      	movs	r0, r3
 80035ea:	230c      	movs	r3, #12
 80035ec:	001a      	movs	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	f005 fa66 	bl	8008ac0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <MX_TIM15_Init+0xa4>)
 80035f6:	4a20      	ldr	r2, [pc, #128]	; (8003678 <MX_TIM15_Init+0xa8>)
 80035f8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <MX_TIM15_Init+0xa4>)
 80035fc:	4a1f      	ldr	r2, [pc, #124]	; (800367c <MX_TIM15_Init+0xac>)
 80035fe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <MX_TIM15_Init+0xa4>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <MX_TIM15_Init+0xa4>)
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <MX_TIM15_Init+0xb0>)
 800360a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <MX_TIM15_Init+0xa4>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <MX_TIM15_Init+0xa4>)
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <MX_TIM15_Init+0xa4>)
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <MX_TIM15_Init+0xa4>)
 8003620:	0018      	movs	r0, r3
 8003622:	f003 fc19 	bl	8006e58 <HAL_TIM_Base_Init>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800362a:	f000 f9f5 	bl	8003a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362e:	2110      	movs	r1, #16
 8003630:	187b      	adds	r3, r7, r1
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	0152      	lsls	r2, r2, #5
 8003636:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003638:	187a      	adds	r2, r7, r1
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <MX_TIM15_Init+0xa4>)
 800363c:	0011      	movs	r1, r2
 800363e:	0018      	movs	r0, r3
 8003640:	f003 fcbe 	bl	8006fc0 <HAL_TIM_ConfigClockSource>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003648:	f000 f9e6 	bl	8003a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	2220      	movs	r2, #32
 8003650:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003658:	1d3a      	adds	r2, r7, #4
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <MX_TIM15_Init+0xa4>)
 800365c:	0011      	movs	r1, r2
 800365e:	0018      	movs	r0, r3
 8003660:	f003 fea0 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d001      	beq.n	800366c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003668:	f000 f9d6 	bl	8003a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b008      	add	sp, #32
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000590 	.word	0x20000590
 8003678:	40014000 	.word	0x40014000
 800367c:	0000027f 	.word	0x0000027f
 8003680:	000003e7 	.word	0x000003e7

08003684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MX_DMA_Init+0x38>)
 800368c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <MX_DMA_Init+0x38>)
 8003690:	2101      	movs	r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <MX_DMA_Init+0x38>)
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	2201      	movs	r2, #1
 800369c:	4013      	ands	r3, r2
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	2009      	movs	r0, #9
 80036a8:	f001 fd20 	bl	80050ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036ac:	2009      	movs	r0, #9
 80036ae:	f001 fd32 	bl	8005116 <HAL_NVIC_EnableIRQ>

}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40021000 	.word	0x40021000

080036c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c6:	240c      	movs	r4, #12
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	0018      	movs	r0, r3
 80036cc:	2314      	movs	r3, #20
 80036ce:	001a      	movs	r2, r3
 80036d0:	2100      	movs	r1, #0
 80036d2:	f005 f9f5 	bl	8008ac0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d6:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <MX_GPIO_Init+0x120>)
 80036d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <MX_GPIO_Init+0x120>)
 80036dc:	2104      	movs	r1, #4
 80036de:	430a      	orrs	r2, r1
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <MX_GPIO_Init+0x120>)
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	2204      	movs	r2, #4
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <MX_GPIO_Init+0x120>)
 80036f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <MX_GPIO_Init+0x120>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	430a      	orrs	r2, r1
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <MX_GPIO_Init+0x120>)
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	2201      	movs	r2, #1
 8003700:	4013      	ands	r3, r2
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <MX_GPIO_Init+0x120>)
 8003708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370a:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <MX_GPIO_Init+0x120>)
 800370c:	2102      	movs	r1, #2
 800370e:	430a      	orrs	r2, r1
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <MX_GPIO_Init+0x120>)
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_3_Pin|RF_DIO0_Pin|LED_1_Pin|LED_0_Pin
 800371e:	4931      	ldr	r1, [pc, #196]	; (80037e4 <MX_GPIO_Init+0x124>)
 8003720:	23a0      	movs	r3, #160	; 0xa0
 8003722:	05db      	lsls	r3, r3, #23
 8003724:	2200      	movs	r2, #0
 8003726:	0018      	movs	r0, r3
 8003728:	f002 fb7e 	bl	8005e28 <HAL_GPIO_WritePin>
                          |GSM_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_RESET);
 800372c:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <MX_GPIO_Init+0x128>)
 800372e:	2200      	movs	r2, #0
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	0018      	movs	r0, r3
 8003734:	f002 fb78 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_GPIO1_INT_Pin|GSM_PWR_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <MX_GPIO_Init+0x12c>)
 800373a:	2200      	movs	r2, #0
 800373c:	2138      	movs	r1, #56	; 0x38
 800373e:	0018      	movs	r0, r3
 8003740:	f002 fb72 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_3_Pin RF_DIO0_Pin LED_1_Pin LED_0_Pin
                           GSM_RST_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|RF_DIO0_Pin|LED_1_Pin|LED_0_Pin
 8003744:	193b      	adds	r3, r7, r4
 8003746:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <MX_GPIO_Init+0x124>)
 8003748:	601a      	str	r2, [r3, #0]
                          |GSM_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374a:	193b      	adds	r3, r7, r4
 800374c:	2201      	movs	r2, #1
 800374e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	193b      	adds	r3, r7, r4
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	193b      	adds	r3, r7, r4
 8003758:	2200      	movs	r2, #0
 800375a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375c:	193a      	adds	r2, r7, r4
 800375e:	23a0      	movs	r3, #160	; 0xa0
 8003760:	05db      	lsls	r3, r3, #23
 8003762:	0011      	movs	r1, r2
 8003764:	0018      	movs	r0, r3
 8003766:	f002 f9fb 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_IRQ_Pin */
  GPIO_InitStruct.Pin = RF_IRQ_Pin;
 800376a:	0021      	movs	r1, r4
 800376c:	187b      	adds	r3, r7, r1
 800376e:	2202      	movs	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2288      	movs	r2, #136	; 0x88
 8003776:	0352      	lsls	r2, r2, #13
 8003778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	000c      	movs	r4, r1
 800377c:	193b      	adds	r3, r7, r4
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003782:	193b      	adds	r3, r7, r4
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <MX_GPIO_Init+0x12c>)
 8003786:	0019      	movs	r1, r3
 8003788:	0010      	movs	r0, r2
 800378a:	f002 f9e9 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 800378e:	193b      	adds	r3, r7, r4
 8003790:	2240      	movs	r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003794:	193b      	adds	r3, r7, r4
 8003796:	2201      	movs	r2, #1
 8003798:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	193b      	adds	r3, r7, r4
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	193b      	adds	r3, r7, r4
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <MX_GPIO_Init+0x128>)
 80037aa:	0019      	movs	r1, r3
 80037ac:	0010      	movs	r0, r2
 80037ae:	f002 f9d7 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_GPIO1_INT_Pin GSM_PWR_Pin LED2_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1_INT_Pin|GSM_PWR_Pin|LED2_Pin;
 80037b2:	0021      	movs	r1, r4
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2238      	movs	r2, #56	; 0x38
 80037b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2201      	movs	r2, #1
 80037be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2200      	movs	r2, #0
 80037ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	4a07      	ldr	r2, [pc, #28]	; (80037ec <MX_GPIO_Init+0x12c>)
 80037d0:	0019      	movs	r1, r3
 80037d2:	0010      	movs	r0, r2
 80037d4:	f002 f9c4 	bl	8005b60 <HAL_GPIO_Init>

}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b009      	add	sp, #36	; 0x24
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	00009910 	.word	0x00009910
 80037e8:	50000800 	.word	0x50000800
 80037ec:	50000400 	.word	0x50000400

080037f0 <process_adc_buffer>:

/* USER CODE BEGIN 4 */
static inline void process_adc_buffer(uint16_t *buffer) {
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

    uint32_t sum1 = 0, sum2 = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e016      	b.n	8003834 <process_adc_buffer+0x44>
        sum1 += buffer[i * 2];
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	18d3      	adds	r3, r2, r3
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	001a      	movs	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	189b      	adds	r3, r3, r2
 8003816:	617b      	str	r3, [r7, #20]
        sum2 += buffer[1 + i * 2];
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	3301      	adds	r3, #1
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	18d3      	adds	r3, r2, r3
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	001a      	movs	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	189b      	adds	r3, r3, r2
 800382c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b63      	cmp	r3, #99	; 0x63
 8003838:	dde5      	ble.n	8003806 <process_adc_buffer+0x16>
    }

    temp_avg = sum1 / ADC_SAMPLES;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2164      	movs	r1, #100	; 0x64
 800383e:	0018      	movs	r0, r3
 8003840:	f7fc fc7c 	bl	800013c <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <process_adc_buffer+0x118>)
 800384a:	801a      	strh	r2, [r3, #0]
    vref_avg = sum2 / ADC_SAMPLES;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2164      	movs	r1, #100	; 0x64
 8003850:	0018      	movs	r0, r3
 8003852:	f7fc fc73 	bl	800013c <__udivsi3>
 8003856:	0003      	movs	r3, r0
 8003858:	b29a      	uxth	r2, r3
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <process_adc_buffer+0x11c>)
 800385c:	801a      	strh	r2, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float)VREFINT_CAL_VREF * (float)*VREFINT_CAL_ADDR / vref_avg / 1000;
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <process_adc_buffer+0x120>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd fce2 	bl	800122c <__aeabi_ui2f>
 8003868:	1c03      	adds	r3, r0, #0
 800386a:	492a      	ldr	r1, [pc, #168]	; (8003914 <process_adc_buffer+0x124>)
 800386c:	1c18      	adds	r0, r3, #0
 800386e:	f7fd f9bb 	bl	8000be8 <__aeabi_fmul>
 8003872:	1c03      	adds	r3, r0, #0
 8003874:	1c1c      	adds	r4, r3, #0
 8003876:	4b25      	ldr	r3, [pc, #148]	; (800390c <process_adc_buffer+0x11c>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	0018      	movs	r0, r3
 800387c:	f7fd fc88 	bl	8001190 <__aeabi_i2f>
 8003880:	1c03      	adds	r3, r0, #0
 8003882:	1c19      	adds	r1, r3, #0
 8003884:	1c20      	adds	r0, r4, #0
 8003886:	f7fd f897 	bl	80009b8 <__aeabi_fdiv>
 800388a:	1c03      	adds	r3, r0, #0
 800388c:	4922      	ldr	r1, [pc, #136]	; (8003918 <process_adc_buffer+0x128>)
 800388e:	1c18      	adds	r0, r3, #0
 8003890:	f7fd f892 	bl	80009b8 <__aeabi_fdiv>
 8003894:	1c03      	adds	r3, r0, #0
 8003896:	1c1a      	adds	r2, r3, #0
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <process_adc_buffer+0x12c>)
 800389a:	601a      	str	r2, [r3, #0]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <process_adc_buffer+0x12c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	491f      	ldr	r1, [pc, #124]	; (8003920 <process_adc_buffer+0x130>)
 80038a2:	1c18      	adds	r0, r3, #0
 80038a4:	f7fd f888 	bl	80009b8 <__aeabi_fdiv>
 80038a8:	1c03      	adds	r3, r0, #0
 80038aa:	1c1c      	adds	r4, r3, #0
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <process_adc_buffer+0x11c>)
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7fd fc6d 	bl	8001190 <__aeabi_i2f>
 80038b6:	1c03      	adds	r3, r0, #0
 80038b8:	1c19      	adds	r1, r3, #0
 80038ba:	1c20      	adds	r0, r4, #0
 80038bc:	f7fd f994 	bl	8000be8 <__aeabi_fmul>
 80038c0:	1c03      	adds	r3, r0, #0
 80038c2:	1c1a      	adds	r2, r3, #0
 80038c4:	4b17      	ldr	r3, [pc, #92]	; (8003924 <process_adc_buffer+0x134>)
 80038c6:	601a      	str	r2, [r3, #0]

    temp = (float) (ta * (float) (sum1 / ADC_SAMPLES) + tb);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2164      	movs	r1, #100	; 0x64
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fc fc35 	bl	800013c <__udivsi3>
 80038d2:	0003      	movs	r3, r0
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7fd fca9 	bl	800122c <__aeabi_ui2f>
 80038da:	1c02      	adds	r2, r0, #0
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <process_adc_buffer+0x138>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	1c19      	adds	r1, r3, #0
 80038e2:	1c10      	adds	r0, r2, #0
 80038e4:	f7fd f980 	bl	8000be8 <__aeabi_fmul>
 80038e8:	1c03      	adds	r3, r0, #0
 80038ea:	1c1a      	adds	r2, r3, #0
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <process_adc_buffer+0x13c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	1c19      	adds	r1, r3, #0
 80038f2:	1c10      	adds	r0, r2, #0
 80038f4:	f7fc fec2 	bl	800067c <__aeabi_fadd>
 80038f8:	1c03      	adds	r3, r0, #0
 80038fa:	1c1a      	adds	r2, r3, #0
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <process_adc_buffer+0x140>)
 80038fe:	601a      	str	r2, [r3, #0]
    //vref = (float) sum2 / 1000 / ADC_SAMPLES;

}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b007      	add	sp, #28
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	20000906 	.word	0x20000906
 800390c:	20000904 	.word	0x20000904
 8003910:	1fff75aa 	.word	0x1fff75aa
 8003914:	453b8000 	.word	0x453b8000
 8003918:	447a0000 	.word	0x447a0000
 800391c:	20000908 	.word	0x20000908
 8003920:	457ff000 	.word	0x457ff000
 8003924:	2000090c 	.word	0x2000090c
 8003928:	200005dc 	.word	0x200005dc
 800392c:	200005e0 	.word	0x200005e0
 8003930:	20000910 	.word	0x20000910

08003934 <calculate_calibration>:

void calculate_calibration(void){
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0

    float x1 = (float) *TEMPSENSOR_CAL1_ADDR;
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <calculate_calibration+0x94>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	0018      	movs	r0, r3
 8003940:	f7fd fc74 	bl	800122c <__aeabi_ui2f>
 8003944:	1c03      	adds	r3, r0, #0
 8003946:	60fb      	str	r3, [r7, #12]
    float x2 = (float) *TEMPSENSOR_CAL2_ADDR;
 8003948:	4b20      	ldr	r3, [pc, #128]	; (80039cc <calculate_calibration+0x98>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	0018      	movs	r0, r3
 800394e:	f7fd fc6d 	bl	800122c <__aeabi_ui2f>
 8003952:	1c03      	adds	r3, r0, #0
 8003954:	60bb      	str	r3, [r7, #8]
    float y1 = (float) TEMPSENSOR_CAL1_TEMP;
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <calculate_calibration+0x9c>)
 8003958:	607b      	str	r3, [r7, #4]
    float y2 = (float) TEMPSENSOR_CAL2_TEMP;
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <calculate_calibration+0xa0>)
 800395c:	603b      	str	r3, [r7, #0]

    // Simple linear equation y = ax + b based on two points
    ta = (float) ((y2 - y1) / (x2 - x1));
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	6838      	ldr	r0, [r7, #0]
 8003962:	f7fd fa67 	bl	8000e34 <__aeabi_fsub>
 8003966:	1c03      	adds	r3, r0, #0
 8003968:	1c1c      	adds	r4, r3, #0
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	68b8      	ldr	r0, [r7, #8]
 800396e:	f7fd fa61 	bl	8000e34 <__aeabi_fsub>
 8003972:	1c03      	adds	r3, r0, #0
 8003974:	1c19      	adds	r1, r3, #0
 8003976:	1c20      	adds	r0, r4, #0
 8003978:	f7fd f81e 	bl	80009b8 <__aeabi_fdiv>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	1c1a      	adds	r2, r3, #0
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <calculate_calibration+0xa4>)
 8003982:	601a      	str	r2, [r3, #0]
    tb = (float) ((x2 * y1 - x1 * y2) / (x2 - x1));
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68b8      	ldr	r0, [r7, #8]
 8003988:	f7fd f92e 	bl	8000be8 <__aeabi_fmul>
 800398c:	1c03      	adds	r3, r0, #0
 800398e:	1c1c      	adds	r4, r3, #0
 8003990:	6839      	ldr	r1, [r7, #0]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7fd f928 	bl	8000be8 <__aeabi_fmul>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	1c19      	adds	r1, r3, #0
 800399c:	1c20      	adds	r0, r4, #0
 800399e:	f7fd fa49 	bl	8000e34 <__aeabi_fsub>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1c      	adds	r4, r3, #0
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	68b8      	ldr	r0, [r7, #8]
 80039aa:	f7fd fa43 	bl	8000e34 <__aeabi_fsub>
 80039ae:	1c03      	adds	r3, r0, #0
 80039b0:	1c19      	adds	r1, r3, #0
 80039b2:	1c20      	adds	r0, r4, #0
 80039b4:	f7fd f800 	bl	80009b8 <__aeabi_fdiv>
 80039b8:	1c03      	adds	r3, r0, #0
 80039ba:	1c1a      	adds	r2, r3, #0
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <calculate_calibration+0xa8>)
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b005      	add	sp, #20
 80039c6:	bd90      	pop	{r4, r7, pc}
 80039c8:	1fff75a8 	.word	0x1fff75a8
 80039cc:	1fff75ca 	.word	0x1fff75ca
 80039d0:	41f00000 	.word	0x41f00000
 80039d4:	43020000 	.word	0x43020000
 80039d8:	200005dc 	.word	0x200005dc
 80039dc:	200005e0 	.word	0x200005e0

080039e0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	process_adc_buffer(&adc_buffer[0]);
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ff00 	bl	80037f0 <process_adc_buffer>
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200005e4 	.word	0x200005e4

080039fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]);
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_ADC_ConvCpltCallback+0x18>)
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7ff fef2 	bl	80037f0 <process_adc_buffer>
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000774 	.word	0x20000774

08003a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a1c:	b672      	cpsid	i
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a20:	e7fe      	b.n	8003a20 <Error_Handler+0x8>
	...

08003a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003a2a:	2408      	movs	r4, #8
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	0018      	movs	r0, r3
 8003a30:	2308      	movs	r3, #8
 8003a32:	001a      	movs	r2, r3
 8003a34:	2100      	movs	r1, #0
 8003a36:	f005 f843 	bl	8008ac0 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_MspInit+0x6c>)
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <HAL_MspInit+0x6c>)
 8003a40:	2101      	movs	r1, #1
 8003a42:	430a      	orrs	r2, r1
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_MspInit+0x6c>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_MspInit+0x6c>)
 8003a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_MspInit+0x6c>)
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	0549      	lsls	r1, r1, #21
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_MspInit+0x6c>)
 8003a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	055b      	lsls	r3, r3, #21
 8003a68:	4013      	ands	r3, r2
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_RISING_0|PWR_PVDLEVEL_FALLING_0;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f002 f9f1 	bl	8005e64 <HAL_PWREx_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003a82:	f002 fa5b 	bl	8005f3c <HAL_PWREx_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b005      	add	sp, #20
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b091      	sub	sp, #68	; 0x44
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a9c:	240c      	movs	r4, #12
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	2334      	movs	r3, #52	; 0x34
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f005 f80a 	bl	8008ac0 <memset>
  if(hadc->Instance==ADC1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <HAL_ADC_MspInit+0xbc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d147      	bne.n	8003b46 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	01d2      	lsls	r2, r2, #7
 8003abc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ac4:	193b      	adds	r3, r7, r4
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f002 ff56 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8003ad0:	f7ff ffa2 	bl	8003a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <HAL_ADC_MspInit+0xc0>)
 8003ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_ADC_MspInit+0xc0>)
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	0349      	lsls	r1, r1, #13
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_ADC_MspInit+0xc0>)
 8003ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	035b      	lsls	r3, r3, #13
 8003aea:	4013      	ands	r3, r2
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_ADC_MspInit+0xc8>)
 8003af4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003af8:	2205      	movs	r2, #5
 8003afa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	0052      	lsls	r2, r2, #1
 8003b14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	00d2      	lsls	r2, r2, #3
 8003b1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b20:	2220      	movs	r2, #32
 8003b22:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f001 fcf9 	bl	8005524 <HAL_DMA_Init>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 8003b36:	f7ff ff6f 	bl	8003a18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a06      	ldr	r2, [pc, #24]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b3e:	651a      	str	r2, [r3, #80]	; 0x50
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_ADC_MspInit+0xc4>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b011      	add	sp, #68	; 0x44
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	40012400 	.word	0x40012400
 8003b54:	40021000 	.word	0x40021000
 8003b58:	2000025c 	.word	0x2000025c
 8003b5c:	40020008 	.word	0x40020008

08003b60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_CRC_MspInit+0x38>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10d      	bne.n	8003b8e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_CRC_MspInit+0x3c>)
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_CRC_MspInit+0x3c>)
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0149      	lsls	r1, r1, #5
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_CRC_MspInit+0x3c>)
 8003b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	015b      	lsls	r3, r3, #5
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b004      	add	sp, #16
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	40023000 	.word	0x40023000
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b09d      	sub	sp, #116	; 0x74
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	235c      	movs	r3, #92	; 0x5c
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	0018      	movs	r0, r3
 8003bae:	2314      	movs	r3, #20
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f004 ff84 	bl	8008ac0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bb8:	2428      	movs	r4, #40	; 0x28
 8003bba:	193b      	adds	r3, r7, r4
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	2334      	movs	r3, #52	; 0x34
 8003bc0:	001a      	movs	r2, r3
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f004 ff7c 	bl	8008ac0 <memset>
  if(huart->Instance==LPUART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a88      	ldr	r2, [pc, #544]	; (8003df0 <HAL_UART_MspInit+0x250>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d147      	bne.n	8003c62 <HAL_UART_MspInit+0xc2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bde:	193b      	adds	r3, r7, r4
 8003be0:	0018      	movs	r0, r3
 8003be2:	f002 fec9 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d001      	beq.n	8003bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003bea:	f7ff ff15 	bl	8003a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003bee:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf2:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	0349      	lsls	r1, r1, #13
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bfc:	4b7d      	ldr	r3, [pc, #500]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	035b      	lsls	r3, r3, #13
 8003c04:	4013      	ands	r3, r2
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0e:	4b79      	ldr	r3, [pc, #484]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	430a      	orrs	r2, r1
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34
 8003c16:	4b77      	ldr	r3, [pc, #476]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003c22:	215c      	movs	r1, #92	; 0x5c
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	220c      	movs	r2, #12
 8003c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2206      	movs	r2, #6
 8003c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	187a      	adds	r2, r7, r1
 8003c44:	23a0      	movs	r3, #160	; 0xa0
 8003c46:	05db      	lsls	r3, r3, #23
 8003c48:	0011      	movs	r1, r2
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f001 ff88 	bl	8005b60 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	201d      	movs	r0, #29
 8003c56:	f001 fa49 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8003c5a:	201d      	movs	r0, #29
 8003c5c:	f001 fa5b 	bl	8005116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8003c60:	e0c1      	b.n	8003de6 <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a64      	ldr	r2, [pc, #400]	; (8003df8 <HAL_UART_MspInit+0x258>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d13f      	bne.n	8003cec <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c6c:	2128      	movs	r1, #40	; 0x28
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	2201      	movs	r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f002 fe7b 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_UART_MspInit+0xea>
      Error_Handler();
 8003c86:	f7ff fec7 	bl	8003a18 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c8a:	4b5a      	ldr	r3, [pc, #360]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8e:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	01c9      	lsls	r1, r1, #7
 8003c94:	430a      	orrs	r2, r1
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
 8003c98:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	01db      	lsls	r3, r3, #7
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca6:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003cac:	2102      	movs	r1, #2
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003cb2:	4b50      	ldr	r3, [pc, #320]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8003cbe:	215c      	movs	r1, #92	; 0x5c
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	22c0      	movs	r2, #192	; 0xc0
 8003cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2202      	movs	r2, #2
 8003cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	4a46      	ldr	r2, [pc, #280]	; (8003dfc <HAL_UART_MspInit+0x25c>)
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	0010      	movs	r0, r2
 8003ce6:	f001 ff3b 	bl	8005b60 <HAL_GPIO_Init>
}
 8003cea:	e07c      	b.n	8003de6 <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a43      	ldr	r2, [pc, #268]	; (8003e00 <HAL_UART_MspInit+0x260>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d139      	bne.n	8003d6a <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cf6:	4b3f      	ldr	r3, [pc, #252]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003cfc:	2180      	movs	r1, #128	; 0x80
 8003cfe:	02c9      	lsls	r1, r1, #11
 8003d00:	430a      	orrs	r2, r1
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	02db      	lsls	r3, r3, #11
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d12:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d18:	2102      	movs	r1, #2
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d1e:	4b35      	ldr	r3, [pc, #212]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	2202      	movs	r2, #2
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8003d2a:	215c      	movs	r1, #92	; 0x5c
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	0052      	lsls	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	2212      	movs	r2, #18
 8003d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	2204      	movs	r2, #4
 8003d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_UART_MspInit+0x25c>)
 8003d50:	0019      	movs	r1, r3
 8003d52:	0010      	movs	r0, r2
 8003d54:	f001 ff04 	bl	8005b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	201d      	movs	r0, #29
 8003d5e:	f001 f9c5 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8003d62:	201d      	movs	r0, #29
 8003d64:	f001 f9d7 	bl	8005116 <HAL_NVIC_EnableIRQ>
}
 8003d68:	e03d      	b.n	8003de6 <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART4)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_UART_MspInit+0x264>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d138      	bne.n	8003de6 <HAL_UART_MspInit+0x246>
    __HAL_RCC_USART4_CLK_ENABLE();
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	0309      	lsls	r1, r1, #12
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	031b      	lsls	r3, r3, #12
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d96:	2101      	movs	r1, #1
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_UART_MspInit+0x254>)
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MB_TX_Pin|MB_RX_Pin;
 8003da8:	215c      	movs	r1, #92	; 0x5c
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	2203      	movs	r2, #3
 8003dae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2202      	movs	r2, #2
 8003db4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	187a      	adds	r2, r7, r1
 8003dca:	23a0      	movs	r3, #160	; 0xa0
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f001 fec5 	bl	8005b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	201d      	movs	r0, #29
 8003ddc:	f001 f986 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8003de0:	201d      	movs	r0, #29
 8003de2:	f001 f998 	bl	8005116 <HAL_NVIC_EnableIRQ>
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b01d      	add	sp, #116	; 0x74
 8003dec:	bd90      	pop	{r4, r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	40008000 	.word	0x40008000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	50000400 	.word	0x50000400
 8003e00:	40004800 	.word	0x40004800
 8003e04:	40004c00 	.word	0x40004c00

08003e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b08b      	sub	sp, #44	; 0x2c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	2414      	movs	r4, #20
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	0018      	movs	r0, r3
 8003e16:	2314      	movs	r3, #20
 8003e18:	001a      	movs	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f004 fe50 	bl	8008ac0 <memset>
  if(hspi->Instance==SPI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <HAL_SPI_MspInit+0xd0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d151      	bne.n	8003ece <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	0149      	lsls	r1, r1, #5
 8003e34:	430a      	orrs	r2, r1
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	015b      	lsls	r3, r3, #5
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e64:	2102      	movs	r1, #2
 8003e66:	430a      	orrs	r2, r1
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_SPI_MspInit+0xd4>)
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8003e76:	193b      	adds	r3, r7, r4
 8003e78:	22e0      	movs	r2, #224	; 0xe0
 8003e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	2202      	movs	r2, #2
 8003e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	193b      	adds	r3, r7, r4
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e8e:	193b      	adds	r3, r7, r4
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e94:	193a      	adds	r2, r7, r4
 8003e96:	23a0      	movs	r3, #160	; 0xa0
 8003e98:	05db      	lsls	r3, r3, #23
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f001 fe5f 	bl	8005b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_NSS_Pin;
 8003ea2:	0021      	movs	r1, r4
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	2202      	movs	r2, #2
 8003eae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	2200      	movs	r2, #0
 8003eba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	4a06      	ldr	r2, [pc, #24]	; (8003ee0 <HAL_SPI_MspInit+0xd8>)
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	0010      	movs	r0, r2
 8003eca:	f001 fe49 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b00b      	add	sp, #44	; 0x2c
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	40013000 	.word	0x40013000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	50000400 	.word	0x50000400

08003ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b091      	sub	sp, #68	; 0x44
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eec:	240c      	movs	r4, #12
 8003eee:	193b      	adds	r3, r7, r4
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	2334      	movs	r3, #52	; 0x34
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f004 fde2 	bl	8008ac0 <memset>
  if(htim_base->Instance==TIM15)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <HAL_TIM_Base_MspInit+0x64>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d11c      	bne.n	8003f40 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8003f06:	193b      	adds	r3, r7, r4
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	03d2      	lsls	r2, r2, #15
 8003f0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	2200      	movs	r2, #0
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f14:	193b      	adds	r3, r7, r4
 8003f16:	0018      	movs	r0, r3
 8003f18:	f002 fd2e 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8003f20:	f7ff fd7a 	bl	8003a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_TIM_Base_MspInit+0x68>)
 8003f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_TIM_Base_MspInit+0x68>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0249      	lsls	r1, r1, #9
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_TIM_Base_MspInit+0x68>)
 8003f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	025b      	lsls	r3, r3, #9
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b011      	add	sp, #68	; 0x44
 8003f46:	bd90      	pop	{r4, r7, pc}
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40021000 	.word	0x40021000

08003f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f54:	e7fe      	b.n	8003f54 <NMI_Handler+0x4>

08003f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f5a:	e7fe      	b.n	8003f5a <HardFault_Handler+0x4>

08003f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f74:	f000 f980 	bl	8004278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <DMA1_Channel1_IRQHandler+0x14>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f001 fca8 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	2000025c 	.word	0x2000025c

08003f98 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <USART3_4_LPUART1_IRQHandler+0x24>)
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f003 fbbe 	bl	8007720 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <USART3_4_LPUART1_IRQHandler+0x28>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f003 fbba 	bl	8007720 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&hlpuart1);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <USART3_4_LPUART1_IRQHandler+0x2c>)
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f003 fbb6 	bl	8007720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	20000404 	.word	0x20000404
 8003fc0:	20000498 	.word	0x20000498
 8003fc4:	200002dc 	.word	0x200002dc

08003fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
	return 1;
 8003fcc:	2301      	movs	r3, #1
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <_kill>:

int _kill(int pid, int sig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fde:	f004 fd45 	bl	8008a6c <__errno>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	2216      	movs	r2, #22
 8003fe6:	601a      	str	r2, [r3, #0]
	return -1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	425b      	negs	r3, r3
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_exit>:

void _exit (int status)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	425a      	negs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0011      	movs	r1, r2
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff ffe5 	bl	8003fd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800400a:	e7fe      	b.n	800400a <_exit+0x16>

0800400c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e00a      	b.n	8004034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800401e:	e000      	b.n	8004022 <_read+0x16>
 8004020:	bf00      	nop
 8004022:	0001      	movs	r1, r0
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	60ba      	str	r2, [r7, #8]
 800402a:	b2ca      	uxtb	r2, r1
 800402c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	3301      	adds	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	dbf0      	blt.n	800401e <_read+0x12>
	}

return len;
 800403c:	687b      	ldr	r3, [r7, #4]
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b006      	add	sp, #24
 8004044:	bd80      	pop	{r7, pc}

08004046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e009      	b.n	800406c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	60ba      	str	r2, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	0018      	movs	r0, r3
 8004062:	f7fe ff7d 	bl	8002f60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	3301      	adds	r3, #1
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	dbf1      	blt.n	8004058 <_write+0x12>
	}
	return len;
 8004074:	687b      	ldr	r3, [r7, #4]
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b006      	add	sp, #24
 800407c:	bd80      	pop	{r7, pc}

0800407e <_close>:

int _close(int file)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
	return -1;
 8004086:	2301      	movs	r3, #1
 8004088:	425b      	negs	r3, r3
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}

08004092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	0192      	lsls	r2, r2, #6
 80040a2:	605a      	str	r2, [r3, #4]
	return 0;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b002      	add	sp, #8
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_isatty>:

int _isatty(int file)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
	return 1;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	return 0;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <_sbrk+0x5c>)
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <_sbrk+0x60>)
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <_sbrk+0x64>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f4:	4b11      	ldr	r3, [pc, #68]	; (800413c <_sbrk+0x64>)
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <_sbrk+0x68>)
 80040f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	429a      	cmp	r2, r3
 8004106:	d207      	bcs.n	8004118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004108:	f004 fcb0 	bl	8008a6c <__errno>
 800410c:	0003      	movs	r3, r0
 800410e:	220c      	movs	r2, #12
 8004110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	e009      	b.n	800412c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <_sbrk+0x64>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	18d2      	adds	r2, r2, r3
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <_sbrk+0x64>)
 8004128:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b006      	add	sp, #24
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20009000 	.word	0x20009000
 8004138:	00000400 	.word	0x00000400
 800413c:	20000918 	.word	0x20000918
 8004140:	20000930 	.word	0x20000930

08004144 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004150:	480d      	ldr	r0, [pc, #52]	; (8004188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004152:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004154:	f7ff fff6 	bl	8004144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <LoopForever+0x6>)
  ldr r1, =_edata
 800415a:	490d      	ldr	r1, [pc, #52]	; (8004190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <LoopForever+0xe>)
  movs r3, #0
 800415e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004160:	e002      	b.n	8004168 <LoopCopyDataInit>

08004162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004166:	3304      	adds	r3, #4

08004168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800416a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800416c:	d3f9      	bcc.n	8004162 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004170:	4c0a      	ldr	r4, [pc, #40]	; (800419c <LoopForever+0x16>)
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004174:	e001      	b.n	800417a <LoopFillZerobss>

08004176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004178:	3204      	adds	r2, #4

0800417a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800417a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800417c:	d3fb      	bcc.n	8004176 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800417e:	f004 fc7b 	bl	8008a78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004182:	f7fe ff01 	bl	8002f88 <main>

08004186 <LoopForever>:

LoopForever:
  b LoopForever
 8004186:	e7fe      	b.n	8004186 <LoopForever>
  ldr   r0, =_estack
 8004188:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800418c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004190:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004194:	0800beb4 	.word	0x0800beb4
  ldr r2, =_sbss
 8004198:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800419c:	20000930 	.word	0x20000930

080041a0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041a0:	e7fe      	b.n	80041a0 <ADC1_COMP_IRQHandler>
	...

080041a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_Init+0x3c>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_Init+0x3c>)
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	0049      	lsls	r1, r1, #1
 80041ba:	430a      	orrs	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041be:	2003      	movs	r0, #3
 80041c0:	f000 f810 	bl	80041e4 <HAL_InitTick>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e001      	b.n	80041d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80041d0:	f7ff fc28 	bl	8003a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	781b      	ldrb	r3, [r3, #0]
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40022000 	.word	0x40022000

080041e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041ec:	230f      	movs	r3, #15
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_InitTick+0x88>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02b      	beq.n	8004254 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80041fc:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_InitTick+0x8c>)
 80041fe:	681c      	ldr	r4, [r3, #0]
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_InitTick+0x88>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	0019      	movs	r1, r3
 8004206:	23fa      	movs	r3, #250	; 0xfa
 8004208:	0098      	lsls	r0, r3, #2
 800420a:	f7fb ff97 	bl	800013c <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	0019      	movs	r1, r3
 8004212:	0020      	movs	r0, r4
 8004214:	f7fb ff92 	bl	800013c <__udivsi3>
 8004218:	0003      	movs	r3, r0
 800421a:	0018      	movs	r0, r3
 800421c:	f000 ff8b 	bl	8005136 <HAL_SYSTICK_Config>
 8004220:	1e03      	subs	r3, r0, #0
 8004222:	d112      	bne.n	800424a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d80a      	bhi.n	8004240 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	2301      	movs	r3, #1
 800422e:	425b      	negs	r3, r3
 8004230:	2200      	movs	r2, #0
 8004232:	0018      	movs	r0, r3
 8004234:	f000 ff5a 	bl	80050ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_InitTick+0x90>)
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e00d      	b.n	800425c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004240:	230f      	movs	r3, #15
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e008      	b.n	800425c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800424a:	230f      	movs	r3, #15
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	2201      	movs	r2, #1
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e003      	b.n	800425c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004254:	230f      	movs	r3, #15
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800425c:	230f      	movs	r3, #15
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	781b      	ldrb	r3, [r3, #0]
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b005      	add	sp, #20
 8004268:	bd90      	pop	{r4, r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	20000008 	.word	0x20000008
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_IncTick+0x1c>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	001a      	movs	r2, r3
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_IncTick+0x20>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	18d2      	adds	r2, r2, r3
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_IncTick+0x20>)
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	20000008 	.word	0x20000008
 8004298:	2000091c 	.word	0x2000091c

0800429c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  return uwTick;
 80042a0:	4b02      	ldr	r3, [pc, #8]	; (80042ac <HAL_GetTick+0x10>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	2000091c 	.word	0x2000091c

080042b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80042c0:	401a      	ands	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	fe3fffff 	.word	0xfe3fffff

080042d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	23e0      	movs	r3, #224	; 0xe0
 80042e6:	045b      	lsls	r3, r3, #17
 80042e8:	4013      	ands	r3, r2
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	2104      	movs	r1, #4
 8004306:	400a      	ands	r2, r1
 8004308:	2107      	movs	r1, #7
 800430a:	4091      	lsls	r1, r2
 800430c:	000a      	movs	r2, r1
 800430e:	43d2      	mvns	r2, r2
 8004310:	401a      	ands	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2104      	movs	r1, #4
 8004316:	400b      	ands	r3, r1
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4099      	lsls	r1, r3
 800431c:	000b      	movs	r3, r1
 800431e:	431a      	orrs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}

0800432c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	2104      	movs	r1, #4
 800433e:	400a      	ands	r2, r1
 8004340:	2107      	movs	r1, #7
 8004342:	4091      	lsls	r1, r2
 8004344:	000a      	movs	r2, r1
 8004346:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2104      	movs	r1, #4
 800434c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800434e:	40da      	lsrs	r2, r3
 8004350:	0013      	movs	r3, r2
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}

0800435a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	23c0      	movs	r3, #192	; 0xc0
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4013      	ands	r3, r2
 800436c:	d101      	bne.n	8004372 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004372:	2300      	movs	r3, #0
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}

0800437c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	211f      	movs	r1, #31
 8004390:	400a      	ands	r2, r1
 8004392:	210f      	movs	r1, #15
 8004394:	4091      	lsls	r1, r2
 8004396:	000a      	movs	r2, r1
 8004398:	43d2      	mvns	r2, r2
 800439a:	401a      	ands	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0e9b      	lsrs	r3, r3, #26
 80043a0:	210f      	movs	r1, #15
 80043a2:	4019      	ands	r1, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	201f      	movs	r0, #31
 80043a8:	4003      	ands	r3, r0
 80043aa:	4099      	lsls	r1, r3
 80043ac:	000b      	movs	r3, r1
 80043ae:	431a      	orrs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}

080043bc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	035b      	lsls	r3, r3, #13
 80043ce:	0b5b      	lsrs	r3, r3, #13
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b002      	add	sp, #8
 80043dc:	bd80      	pop	{r7, pc}

080043de <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	0352      	lsls	r2, r2, #13
 80043f0:	0b52      	lsrs	r2, r2, #13
 80043f2:	43d2      	mvns	r2, r2
 80043f4:	401a      	ands	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	0212      	lsls	r2, r2, #8
 8004418:	43d2      	mvns	r2, r2
 800441a:	401a      	ands	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	400b      	ands	r3, r1
 8004424:	4904      	ldr	r1, [pc, #16]	; (8004438 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004426:	400b      	ands	r3, r1
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	07ffff00 	.word	0x07ffff00

0800443c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a05      	ldr	r2, [pc, #20]	; (8004460 <LL_ADC_EnableInternalRegulator+0x24>)
 800444a:	4013      	ands	r3, r2
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	0552      	lsls	r2, r2, #21
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b002      	add	sp, #8
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	6fffffe8 	.word	0x6fffffe8

08004464 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	055b      	lsls	r3, r3, #21
 8004474:	401a      	ands	r2, r3
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	055b      	lsls	r3, r3, #21
 800447a:	429a      	cmp	r2, r3
 800447c:	d101      	bne.n	8004482 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004482:	2300      	movs	r3, #0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <LL_ADC_Enable+0x20>)
 800449a:	4013      	ands	r3, r2
 800449c:	2201      	movs	r2, #1
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	7fffffe8 	.word	0x7fffffe8

080044b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <LL_ADC_Disable+0x20>)
 80044be:	4013      	ands	r3, r2
 80044c0:	2202      	movs	r2, #2
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	7fffffe8 	.word	0x7fffffe8

080044d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2201      	movs	r2, #1
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <LL_ADC_IsEnabled+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_ADC_IsEnabled+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <LL_ADC_REG_StartConversion+0x20>)
 8004506:	4013      	ands	r3, r2
 8004508:	2204      	movs	r2, #4
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004510:	46c0      	nop			; (mov r8, r8)
 8004512:	46bd      	mov	sp, r7
 8004514:	b002      	add	sp, #8
 8004516:	bd80      	pop	{r7, pc}
 8004518:	7fffffe8 	.word	0x7fffffe8

0800451c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2204      	movs	r2, #4
 800452a:	4013      	ands	r3, r2
 800452c:	2b04      	cmp	r3, #4
 800452e:	d101      	bne.n	8004534 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004548:	231f      	movs	r3, #31
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e17f      	b.n	8004866 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff fa8f 	bl	8003a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2254      	movs	r2, #84	; 0x54
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff ff6b 	bl	8004464 <LL_ADC_IsInternalRegulatorEnabled>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d115      	bne.n	80045be <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	0018      	movs	r0, r3
 8004598:	f7ff ff50 	bl	800443c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459c:	4bb4      	ldr	r3, [pc, #720]	; (8004870 <HAL_ADC_Init+0x330>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	49b4      	ldr	r1, [pc, #720]	; (8004874 <HAL_ADC_Init+0x334>)
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7fb fdca 	bl	800013c <__udivsi3>
 80045a8:	0003      	movs	r3, r0
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045b0:	e002      	b.n	80045b8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f9      	bne.n	80045b2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7ff ff4e 	bl	8004464 <LL_ADC_IsInternalRegulatorEnabled>
 80045c8:	1e03      	subs	r3, r0, #0
 80045ca:	d10f      	bne.n	80045ec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	2210      	movs	r2, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	2201      	movs	r2, #1
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045e4:	231f      	movs	r3, #31
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7ff ff93 	bl	800451c <LL_ADC_REG_IsConversionOngoing>
 80045f6:	0003      	movs	r3, r0
 80045f8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	2210      	movs	r2, #16
 8004600:	4013      	ands	r3, r2
 8004602:	d000      	beq.n	8004606 <HAL_ADC_Init+0xc6>
 8004604:	e122      	b.n	800484c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d000      	beq.n	800460e <HAL_ADC_Init+0xce>
 800460c:	e11e      	b.n	800484c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	4a99      	ldr	r2, [pc, #612]	; (8004878 <HAL_ADC_Init+0x338>)
 8004614:	4013      	ands	r3, r2
 8004616:	2202      	movs	r2, #2
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0018      	movs	r0, r3
 8004624:	f7ff ff56 	bl	80044d4 <LL_ADC_IsEnabled>
 8004628:	1e03      	subs	r3, r0, #0
 800462a:	d000      	beq.n	800462e <HAL_ADC_Init+0xee>
 800462c:	e0ad      	b.n	800478a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7e1b      	ldrb	r3, [r3, #24]
 8004636:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004638:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7e5b      	ldrb	r3, [r3, #25]
 800463e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004640:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	7e9b      	ldrb	r3, [r3, #26]
 8004646:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004648:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_ADC_Init+0x118>
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	015b      	lsls	r3, r3, #5
 8004656:	e000      	b.n	800465a <HAL_ADC_Init+0x11a>
 8004658:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800465a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004660:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	da04      	bge.n	8004674 <HAL_ADC_Init+0x134>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	e001      	b.n	8004678 <HAL_ADC_Init+0x138>
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004678:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	5c5b      	ldrb	r3, [r3, r1]
 8004680:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004682:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	5c9b      	ldrb	r3, [r3, r2]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d115      	bne.n	80046c0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7e9b      	ldrb	r3, [r3, #26]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	0252      	lsls	r2, r2, #9
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e00b      	b.n	80046c0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	2220      	movs	r2, #32
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	2201      	movs	r2, #1
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046cc:	23e0      	movs	r3, #224	; 0xe0
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046d6:	4313      	orrs	r3, r2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4a65      	ldr	r2, [pc, #404]	; (800487c <HAL_ADC_Init+0x33c>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	0019      	movs	r1, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	0f9b      	lsrs	r3, r3, #30
 80046fa:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004700:	4313      	orrs	r3, r2
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	223c      	movs	r2, #60	; 0x3c
 800470c:	5c9b      	ldrb	r3, [r3, r2]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d111      	bne.n	8004736 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0f9b      	lsrs	r3, r3, #30
 8004718:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800471e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004724:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800472a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	2201      	movs	r2, #1
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	4a50      	ldr	r2, [pc, #320]	; (8004880 <HAL_ADC_Init+0x340>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	430a      	orrs	r2, r1
 800474a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	23c0      	movs	r3, #192	; 0xc0
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	429a      	cmp	r2, r3
 8004756:	d018      	beq.n	800478a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	05db      	lsls	r3, r3, #23
 8004760:	429a      	cmp	r2, r3
 8004762:	d012      	beq.n	800478a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	429a      	cmp	r2, r3
 800476e:	d00c      	beq.n	800478a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004770:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_ADC_Init+0x344>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a44      	ldr	r2, [pc, #272]	; (8004888 <HAL_ADC_Init+0x348>)
 8004776:	4013      	ands	r3, r2
 8004778:	0019      	movs	r1, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	23f0      	movs	r3, #240	; 0xf0
 8004780:	039b      	lsls	r3, r3, #14
 8004782:	401a      	ands	r2, r3
 8004784:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_ADC_Init+0x344>)
 8004786:	430a      	orrs	r2, r1
 8004788:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	001a      	movs	r2, r3
 8004794:	2100      	movs	r1, #0
 8004796:	f7ff fdac 	bl	80042f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	493a      	ldr	r1, [pc, #232]	; (800488c <HAL_ADC_Init+0x34c>)
 80047a4:	001a      	movs	r2, r3
 80047a6:	f7ff fda4 	bl	80042f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2110      	movs	r1, #16
 80047be:	4249      	negs	r1, r1
 80047c0:	430a      	orrs	r2, r1
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
 80047c4:	e018      	b.n	80047f8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	039b      	lsls	r3, r3, #14
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d112      	bne.n	80047f8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	3b01      	subs	r3, #1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	221c      	movs	r2, #28
 80047e2:	4013      	ands	r3, r2
 80047e4:	2210      	movs	r2, #16
 80047e6:	4252      	negs	r2, r2
 80047e8:	409a      	lsls	r2, r3
 80047ea:	0011      	movs	r1, r2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2100      	movs	r1, #0
 80047fe:	0018      	movs	r0, r3
 8004800:	f7ff fd94 	bl	800432c <LL_ADC_GetSamplingTimeCommonChannels>
 8004804:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800480a:	429a      	cmp	r2, r3
 800480c:	d10b      	bne.n	8004826 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	2203      	movs	r2, #3
 800481a:	4393      	bics	r3, r2
 800481c:	2201      	movs	r2, #1
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004824:	e01c      	b.n	8004860 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	2212      	movs	r2, #18
 800482c:	4393      	bics	r3, r2
 800482e:	2210      	movs	r2, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	2201      	movs	r2, #1
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004842:	231f      	movs	r3, #31
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800484a:	e009      	b.n	8004860 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	2210      	movs	r2, #16
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004858:	231f      	movs	r3, #31
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004860:	231f      	movs	r3, #31
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	781b      	ldrb	r3, [r3, #0]
}
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b008      	add	sp, #32
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000000 	.word	0x20000000
 8004874:	00030d40 	.word	0x00030d40
 8004878:	fffffefd 	.word	0xfffffefd
 800487c:	fffe0201 	.word	0xfffe0201
 8004880:	1ffffc02 	.word	0x1ffffc02
 8004884:	40012708 	.word	0x40012708
 8004888:	ffc3ffff 	.word	0xffc3ffff
 800488c:	07ffff04 	.word	0x07ffff04

08004890 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7ff fe3b 	bl	800451c <LL_ADC_REG_IsConversionOngoing>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d16c      	bne.n	8004984 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2254      	movs	r2, #84	; 0x54
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_Start_DMA+0x28>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e06c      	b.n	8004992 <HAL_ADC_Start_DMA+0x102>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2254      	movs	r2, #84	; 0x54
 80048bc:	2101      	movs	r1, #1
 80048be:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	4013      	ands	r3, r2
 80048ca:	d113      	bne.n	80048f4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff fdff 	bl	80044d4 <LL_ADC_IsEnabled>
 80048d6:	1e03      	subs	r3, r0, #0
 80048d8:	d004      	beq.n	80048e4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	0018      	movs	r0, r3
 80048e0:	f7ff fde6 	bl	80044b0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2101      	movs	r1, #1
 80048f0:	430a      	orrs	r2, r1
 80048f2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80048f4:	2517      	movs	r5, #23
 80048f6:	197c      	adds	r4, r7, r5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fa36 	bl	8004d6c <ADC_Enable>
 8004900:	0003      	movs	r3, r0
 8004902:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004904:	002c      	movs	r4, r5
 8004906:	193b      	adds	r3, r7, r4
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d13e      	bne.n	800498c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_ADC_Start_DMA+0x10c>)
 8004914:	4013      	ands	r3, r2
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	0052      	lsls	r2, r2, #1
 800491a:	431a      	orrs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <HAL_ADC_Start_DMA+0x110>)
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004932:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_ADC_Start_DMA+0x114>)
 8004934:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_ADC_Start_DMA+0x118>)
 800493c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	221c      	movs	r2, #28
 8004944:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2254      	movs	r2, #84	; 0x54
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2110      	movs	r1, #16
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3340      	adds	r3, #64	; 0x40
 8004968:	0019      	movs	r1, r3
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	193c      	adds	r4, r7, r4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f000 fe62 	bl	8005638 <HAL_DMA_Start_IT>
 8004974:	0003      	movs	r3, r0
 8004976:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	0018      	movs	r0, r3
 800497e:	f7ff fdbb 	bl	80044f8 <LL_ADC_REG_StartConversion>
 8004982:	e003      	b.n	800498c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004984:	2317      	movs	r3, #23
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2202      	movs	r2, #2
 800498a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800498c:	2317      	movs	r3, #23
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	781b      	ldrb	r3, [r3, #0]
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b006      	add	sp, #24
 8004998:	bdb0      	pop	{r4, r5, r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	fffff0fe 	.word	0xfffff0fe
 80049a0:	08004e79 	.word	0x08004e79
 80049a4:	08004f41 	.word	0x08004f41
 80049a8:	08004f5f 	.word	0x08004f5f

080049ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049c6:	2317      	movs	r3, #23
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2254      	movs	r2, #84	; 0x54
 80049d6:	5c9b      	ldrb	r3, [r3, r2]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x24>
 80049dc:	2302      	movs	r3, #2
 80049de:	e1c0      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x3a6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2254      	movs	r2, #84	; 0x54
 80049e4:	2101      	movs	r1, #1
 80049e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7ff fd95 	bl	800451c <LL_ADC_REG_IsConversionOngoing>
 80049f2:	1e03      	subs	r3, r0, #0
 80049f4:	d000      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x3c>
 80049f6:	e1a3      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d100      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x46>
 8004a00:	e143      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d004      	beq.n	8004a18 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a12:	4ac1      	ldr	r2, [pc, #772]	; (8004d18 <HAL_ADC_ConfigChannel+0x35c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0019      	movs	r1, r3
 8004a22:	0010      	movs	r0, r2
 8004a24:	f7ff fcca 	bl	80043bc <LL_ADC_REG_SetSequencerChAdd>
 8004a28:	e0c9      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	211f      	movs	r1, #31
 8004a34:	400b      	ands	r3, r1
 8004a36:	210f      	movs	r1, #15
 8004a38:	4099      	lsls	r1, r3
 8004a3a:	000b      	movs	r3, r1
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	4013      	ands	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	035b      	lsls	r3, r3, #13
 8004a48:	0b5b      	lsrs	r3, r3, #13
 8004a4a:	d105      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x9c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	221f      	movs	r2, #31
 8004a54:	4013      	ands	r3, r2
 8004a56:	e098      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d000      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0xa8>
 8004a62:	e091      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x1cc>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d000      	beq.n	8004a70 <HAL_ADC_ConfigChannel+0xb4>
 8004a6e:	e089      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x1c8>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2204      	movs	r2, #4
 8004a76:	4013      	ands	r3, r2
 8004a78:	d000      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0xc0>
 8004a7a:	e081      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x1c4>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2208      	movs	r2, #8
 8004a82:	4013      	ands	r3, r2
 8004a84:	d000      	beq.n	8004a88 <HAL_ADC_ConfigChannel+0xcc>
 8004a86:	e079      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x1c0>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d000      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0xd8>
 8004a92:	e071      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x1bc>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d000      	beq.n	8004aa0 <HAL_ADC_ConfigChannel+0xe4>
 8004a9e:	e069      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x1b8>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2240      	movs	r2, #64	; 0x40
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d000      	beq.n	8004aac <HAL_ADC_ConfigChannel+0xf0>
 8004aaa:	e061      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x1b4>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2280      	movs	r2, #128	; 0x80
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d000      	beq.n	8004ab8 <HAL_ADC_ConfigChannel+0xfc>
 8004ab6:	e059      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x1b0>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d151      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1ac>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4013      	ands	r3, r2
 8004ace:	d149      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x1a8>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d141      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x1a4>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d139      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x1a0>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	4013      	ands	r3, r2
 8004af2:	d131      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x19c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	019b      	lsls	r3, r3, #6
 8004afc:	4013      	ands	r3, r2
 8004afe:	d129      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x198>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	01db      	lsls	r3, r3, #7
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d121      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x194>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4013      	ands	r3, r2
 8004b16:	d119      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x190>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	4013      	ands	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x18c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d109      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x188>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	02db      	lsls	r3, r3, #11
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d001      	beq.n	8004b40 <HAL_ADC_ConfigChannel+0x184>
 8004b3c:	2312      	movs	r3, #18
 8004b3e:	e024      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b40:	2300      	movs	r3, #0
 8004b42:	e022      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b44:	2311      	movs	r3, #17
 8004b46:	e020      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	e01e      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b4c:	230f      	movs	r3, #15
 8004b4e:	e01c      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b50:	230e      	movs	r3, #14
 8004b52:	e01a      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b54:	230d      	movs	r3, #13
 8004b56:	e018      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	e016      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b5c:	230b      	movs	r3, #11
 8004b5e:	e014      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b60:	230a      	movs	r3, #10
 8004b62:	e012      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b64:	2309      	movs	r3, #9
 8004b66:	e010      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	e00e      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	e00c      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b70:	2306      	movs	r3, #6
 8004b72:	e00a      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b74:	2305      	movs	r3, #5
 8004b76:	e008      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e006      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e004      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e002      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1ce>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	6852      	ldr	r2, [r2, #4]
 8004b8e:	201f      	movs	r0, #31
 8004b90:	4002      	ands	r2, r0
 8004b92:	4093      	lsls	r3, r2
 8004b94:	000a      	movs	r2, r1
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d808      	bhi.n	8004bbe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	001a      	movs	r2, r3
 8004bba:	f7ff fbdf 	bl	800437c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	001a      	movs	r2, r3
 8004bcc:	f7ff fc1a 	bl	8004404 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db00      	blt.n	8004bda <HAL_ADC_ConfigChannel+0x21e>
 8004bd8:	e0bc      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7ff fb7b 	bl	80042d8 <LL_ADC_GetCommonPathInternalCh>
 8004be2:	0003      	movs	r3, r0
 8004be4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a4d      	ldr	r2, [pc, #308]	; (8004d20 <HAL_ADC_ConfigChannel+0x364>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d122      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bf8:	d11d      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2280      	movs	r2, #128	; 0x80
 8004bfe:	0412      	lsls	r2, r2, #16
 8004c00:	4313      	orrs	r3, r2
 8004c02:	4a46      	ldr	r2, [pc, #280]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f7ff fb52 	bl	80042b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c0c:	4b45      	ldr	r3, [pc, #276]	; (8004d24 <HAL_ADC_ConfigChannel+0x368>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4945      	ldr	r1, [pc, #276]	; (8004d28 <HAL_ADC_ConfigChannel+0x36c>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fb fa92 	bl	800013c <__udivsi3>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	0013      	movs	r3, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c26:	e002      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f9      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c34:	e08e      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3c      	ldr	r2, [pc, #240]	; (8004d2c <HAL_ADC_ConfigChannel+0x370>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10e      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	045b      	lsls	r3, r3, #17
 8004c46:	4013      	ands	r3, r2
 8004c48:	d109      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2280      	movs	r2, #128	; 0x80
 8004c4e:	0452      	lsls	r2, r2, #17
 8004c50:	4313      	orrs	r3, r2
 8004c52:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004c54:	0019      	movs	r1, r3
 8004c56:	0010      	movs	r0, r2
 8004c58:	f7ff fb2a 	bl	80042b0 <LL_ADC_SetCommonPathInternalCh>
 8004c5c:	e07a      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a33      	ldr	r2, [pc, #204]	; (8004d30 <HAL_ADC_ConfigChannel+0x374>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d000      	beq.n	8004c6a <HAL_ADC_ConfigChannel+0x2ae>
 8004c68:	e074      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	03db      	lsls	r3, r3, #15
 8004c70:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c72:	d000      	beq.n	8004c76 <HAL_ADC_ConfigChannel+0x2ba>
 8004c74:	e06e      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2280      	movs	r2, #128	; 0x80
 8004c7a:	03d2      	lsls	r2, r2, #15
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004c80:	0019      	movs	r1, r3
 8004c82:	0010      	movs	r0, r2
 8004c84:	f7ff fb14 	bl	80042b0 <LL_ADC_SetCommonPathInternalCh>
 8004c88:	e064      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	061b      	lsls	r3, r3, #24
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d004      	beq.n	8004ca0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_ADC_ConfigChannel+0x35c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d107      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0019      	movs	r1, r3
 8004caa:	0010      	movs	r0, r2
 8004cac:	f7ff fb97 	bl	80043de <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da4d      	bge.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cb8:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7ff fb0c 	bl	80042d8 <LL_ADC_GetCommonPathInternalCh>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_ADC_ConfigChannel+0x364>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_ADC_ConfigChannel+0x378>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	0010      	movs	r0, r2
 8004cda:	f7ff fae9 	bl	80042b0 <LL_ADC_SetCommonPathInternalCh>
 8004cde:	e039      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <HAL_ADC_ConfigChannel+0x370>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_ADC_ConfigChannel+0x37c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	0010      	movs	r0, r2
 8004cf6:	f7ff fadb 	bl	80042b0 <LL_ADC_SetCommonPathInternalCh>
 8004cfa:	e02b      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <HAL_ADC_ConfigChannel+0x374>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d126      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <HAL_ADC_ConfigChannel+0x380>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	4a03      	ldr	r2, [pc, #12]	; (8004d1c <HAL_ADC_ConfigChannel+0x360>)
 8004d0e:	0019      	movs	r1, r3
 8004d10:	0010      	movs	r0, r2
 8004d12:	f7ff facd 	bl	80042b0 <LL_ADC_SetCommonPathInternalCh>
 8004d16:	e01d      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x398>
 8004d18:	80000004 	.word	0x80000004
 8004d1c:	40012708 	.word	0x40012708
 8004d20:	b0001000 	.word	0xb0001000
 8004d24:	20000000 	.word	0x20000000
 8004d28:	00030d40 	.word	0x00030d40
 8004d2c:	b8004000 	.word	0xb8004000
 8004d30:	b4002000 	.word	0xb4002000
 8004d34:	ff7fffff 	.word	0xff7fffff
 8004d38:	feffffff 	.word	0xfeffffff
 8004d3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	2220      	movs	r2, #32
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d4c:	2317      	movs	r3, #23
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2254      	movs	r2, #84	; 0x54
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d5c:	2317      	movs	r3, #23
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b006      	add	sp, #24
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)

08004d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7ff fba9 	bl	80044d4 <LL_ADC_IsEnabled>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d000      	beq.n	8004d88 <ADC_Enable+0x1c>
 8004d86:	e069      	b.n	8004e5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4a36      	ldr	r2, [pc, #216]	; (8004e68 <ADC_Enable+0xfc>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	2210      	movs	r2, #16
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	2201      	movs	r2, #1
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e056      	b.n	8004e5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff fb69 	bl	800448c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004dba:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <ADC_Enable+0x100>)
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff fa8b 	bl	80042d8 <LL_ADC_GetCommonPathInternalCh>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00f      	beq.n	8004dec <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <ADC_Enable+0x104>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4928      	ldr	r1, [pc, #160]	; (8004e74 <ADC_Enable+0x108>)
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fb f9b2 	bl	800013c <__udivsi3>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004ddc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dde:	e002      	b.n	8004de6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f9      	bne.n	8004de0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	7e5b      	ldrb	r3, [r3, #25]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d033      	beq.n	8004e5c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004df4:	f7ff fa52 	bl	800429c <HAL_GetTick>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dfc:	e027      	b.n	8004e4e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7ff fb66 	bl	80044d4 <LL_ADC_IsEnabled>
 8004e08:	1e03      	subs	r3, r0, #0
 8004e0a:	d104      	bne.n	8004e16 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff fb3b 	bl	800448c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e16:	f7ff fa41 	bl	800429c <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d914      	bls.n	8004e4e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d00d      	beq.n	8004e4e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	2210      	movs	r2, #16
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	2201      	movs	r2, #1
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e007      	b.n	8004e5e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2201      	movs	r2, #1
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d1d0      	bne.n	8004dfe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	0018      	movs	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b004      	add	sp, #16
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	80000017 	.word	0x80000017
 8004e6c:	40012708 	.word	0x40012708
 8004e70:	20000000 	.word	0x20000000
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	2250      	movs	r2, #80	; 0x50
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d141      	bne.n	8004f14 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	0092      	lsls	r2, r2, #2
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7ff fa59 	bl	800435a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d02e      	beq.n	8004f0a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	7e9b      	ldrb	r3, [r3, #26]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d12a      	bne.n	8004f0a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2208      	movs	r2, #8
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d123      	bne.n	8004f0a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7ff fb28 	bl	800451c <LL_ADC_REG_IsConversionOngoing>
 8004ecc:	1e03      	subs	r3, r0, #0
 8004ece:	d110      	bne.n	8004ef2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	210c      	movs	r1, #12
 8004edc:	438a      	bics	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <ADC_DMAConvCplt+0xc4>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2201      	movs	r2, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	659a      	str	r2, [r3, #88]	; 0x58
 8004ef0:	e00b      	b.n	8004f0a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	2201      	movs	r2, #1
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7fe fd75 	bl	80039fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f12:	e00f      	b.n	8004f34 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	2210      	movs	r2, #16
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7ff fd43 	bl	80049ac <HAL_ADC_ErrorCallback>
}
 8004f26:	e005      	b.n	8004f34 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	0010      	movs	r0, r2
 8004f32:	4798      	blx	r3
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b004      	add	sp, #16
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	fffffefe 	.word	0xfffffefe

08004f40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7fe fd45 	bl	80039e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	431a      	orrs	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7ff fd10 	bl	80049ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	1dfb      	adds	r3, r7, #7
 8004f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d809      	bhi.n	8004fbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa8:	1dfb      	adds	r3, r7, #7
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	001a      	movs	r2, r3
 8004fae:	231f      	movs	r3, #31
 8004fb0:	401a      	ands	r2, r3
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <__NVIC_EnableIRQ+0x30>)
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4091      	lsls	r1, r2
 8004fb8:	000a      	movs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	0002      	movs	r2, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	1dfb      	adds	r3, r7, #7
 8004fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b7f      	cmp	r3, #127	; 0x7f
 8004fdc:	d828      	bhi.n	8005030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fde:	4a2f      	ldr	r2, [pc, #188]	; (800509c <__NVIC_SetPriority+0xd4>)
 8004fe0:	1dfb      	adds	r3, r7, #7
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	b25b      	sxtb	r3, r3
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	33c0      	adds	r3, #192	; 0xc0
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	589b      	ldr	r3, [r3, r2]
 8004fee:	1dfa      	adds	r2, r7, #7
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	0011      	movs	r1, r2
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	00d2      	lsls	r2, r2, #3
 8004ffa:	21ff      	movs	r1, #255	; 0xff
 8004ffc:	4091      	lsls	r1, r2
 8004ffe:	000a      	movs	r2, r1
 8005000:	43d2      	mvns	r2, r2
 8005002:	401a      	ands	r2, r3
 8005004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	22ff      	movs	r2, #255	; 0xff
 800500c:	401a      	ands	r2, r3
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	0018      	movs	r0, r3
 8005014:	2303      	movs	r3, #3
 8005016:	4003      	ands	r3, r0
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800501c:	481f      	ldr	r0, [pc, #124]	; (800509c <__NVIC_SetPriority+0xd4>)
 800501e:	1dfb      	adds	r3, r7, #7
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b25b      	sxtb	r3, r3
 8005024:	089b      	lsrs	r3, r3, #2
 8005026:	430a      	orrs	r2, r1
 8005028:	33c0      	adds	r3, #192	; 0xc0
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800502e:	e031      	b.n	8005094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <__NVIC_SetPriority+0xd8>)
 8005032:	1dfb      	adds	r3, r7, #7
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	0019      	movs	r1, r3
 8005038:	230f      	movs	r3, #15
 800503a:	400b      	ands	r3, r1
 800503c:	3b08      	subs	r3, #8
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	3306      	adds	r3, #6
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	18d3      	adds	r3, r2, r3
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1dfa      	adds	r2, r7, #7
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	0011      	movs	r1, r2
 8005050:	2203      	movs	r2, #3
 8005052:	400a      	ands	r2, r1
 8005054:	00d2      	lsls	r2, r2, #3
 8005056:	21ff      	movs	r1, #255	; 0xff
 8005058:	4091      	lsls	r1, r2
 800505a:	000a      	movs	r2, r1
 800505c:	43d2      	mvns	r2, r2
 800505e:	401a      	ands	r2, r3
 8005060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	22ff      	movs	r2, #255	; 0xff
 8005068:	401a      	ands	r2, r3
 800506a:	1dfb      	adds	r3, r7, #7
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	0018      	movs	r0, r3
 8005070:	2303      	movs	r3, #3
 8005072:	4003      	ands	r3, r0
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005078:	4809      	ldr	r0, [pc, #36]	; (80050a0 <__NVIC_SetPriority+0xd8>)
 800507a:	1dfb      	adds	r3, r7, #7
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	001c      	movs	r4, r3
 8005080:	230f      	movs	r3, #15
 8005082:	4023      	ands	r3, r4
 8005084:	3b08      	subs	r3, #8
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	430a      	orrs	r2, r1
 800508a:	3306      	adds	r3, #6
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	18c3      	adds	r3, r0, r3
 8005090:	3304      	adds	r3, #4
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b003      	add	sp, #12
 800509a:	bd90      	pop	{r4, r7, pc}
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	045b      	lsls	r3, r3, #17
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d301      	bcc.n	80050bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050b8:	2301      	movs	r3, #1
 80050ba:	e010      	b.n	80050de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <SysTick_Config+0x44>)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	3a01      	subs	r2, #1
 80050c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050c4:	2301      	movs	r3, #1
 80050c6:	425b      	negs	r3, r3
 80050c8:	2103      	movs	r1, #3
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7ff ff7c 	bl	8004fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <SysTick_Config+0x44>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050d6:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <SysTick_Config+0x44>)
 80050d8:	2207      	movs	r2, #7
 80050da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050dc:	2300      	movs	r3, #0
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b002      	add	sp, #8
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	e000e010 	.word	0xe000e010

080050ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	210f      	movs	r1, #15
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	1c02      	adds	r2, r0, #0
 80050fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	187b      	adds	r3, r7, r1
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b25b      	sxtb	r3, r3
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff ff5d 	bl	8004fc8 <__NVIC_SetPriority>
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	0002      	movs	r2, r0
 800511e:	1dfb      	adds	r3, r7, #7
 8005120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005122:	1dfb      	adds	r3, r7, #7
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b25b      	sxtb	r3, r3
 8005128:	0018      	movs	r0, r3
 800512a:	f7ff ff33 	bl	8004f94 <__NVIC_EnableIRQ>
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	46bd      	mov	sp, r7
 8005132:	b002      	add	sp, #8
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff ffaf 	bl	80050a4 <SysTick_Config>
 8005146:	0003      	movs	r3, r0
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e056      	b.n	8005210 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7f5b      	ldrb	r3, [r3, #29]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f7fe fcf3 	bl	8003b60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	791b      	ldrb	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10c      	bne.n	80051a2 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <HAL_CRC_Init+0xc8>)
 800518e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2118      	movs	r1, #24
 800519c:	438a      	bics	r2, r1
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	e00b      	b.n	80051ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6899      	ldr	r1, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 f94c 	bl	800544a <HAL_CRCEx_Polynomial_Set>
 80051b2:	1e03      	subs	r3, r0, #0
 80051b4:	d001      	beq.n	80051ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e02a      	b.n	8005210 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	795b      	ldrb	r3, [r3, #5]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2201      	movs	r2, #1
 80051c8:	4252      	negs	r2, r2
 80051ca:	611a      	str	r2, [r3, #16]
 80051cc:	e004      	b.n	80051d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6912      	ldr	r2, [r2, #16]
 80051d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2260      	movs	r2, #96	; 0x60
 80051e0:	4393      	bics	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	4393      	bics	r3, r2
 80051fa:	0019      	movs	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b002      	add	sp, #8
 8005216:	bd80      	pop	{r7, pc}
 8005218:	04c11db7 	.word	0x04c11db7

0800521c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2202      	movs	r2, #2
 8005230:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2101      	movs	r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d005      	beq.n	8005256 <HAL_CRC_Calculate+0x3a>
 800524a:	d82d      	bhi.n	80052a8 <HAL_CRC_Calculate+0x8c>
 800524c:	2b01      	cmp	r3, #1
 800524e:	d019      	beq.n	8005284 <HAL_CRC_Calculate+0x68>
 8005250:	2b02      	cmp	r3, #2
 8005252:	d020      	beq.n	8005296 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005254:	e028      	b.n	80052a8 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e00a      	b.n	8005272 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	18d2      	adds	r2, r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3301      	adds	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	d3f0      	bcc.n	800525c <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	613b      	str	r3, [r7, #16]
      break;
 8005282:	e012      	b.n	80052aa <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 f815 	bl	80052ba <CRC_Handle_8>
 8005290:	0003      	movs	r3, r0
 8005292:	613b      	str	r3, [r7, #16]
      break;
 8005294:	e009      	b.n	80052aa <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 f89d 	bl	80053dc <CRC_Handle_16>
 80052a2:	0003      	movs	r3, r0
 80052a4:	613b      	str	r3, [r7, #16]
      break;
 80052a6:	e000      	b.n	80052aa <HAL_CRC_Calculate+0x8e>
      break;
 80052a8:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80052b0:	693b      	ldr	r3, [r7, #16]
}
 80052b2:	0018      	movs	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b006      	add	sp, #24
 80052b8:	bd80      	pop	{r7, pc}

080052ba <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	e023      	b.n	8005314 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	3301      	adds	r3, #1
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	18cb      	adds	r3, r1, r3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80052e6:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	3302      	adds	r3, #2
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	18cb      	adds	r3, r1, r3
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80052f6:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	3303      	adds	r3, #3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	18cb      	adds	r3, r1, r3
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800530a:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800530c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3301      	adds	r3, #1
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3d6      	bcc.n	80052cc <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2203      	movs	r2, #3
 8005322:	4013      	ands	r3, r2
 8005324:	d053      	beq.n	80053ce <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2203      	movs	r2, #3
 800532a:	4013      	ands	r3, r2
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	18d2      	adds	r2, r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2203      	movs	r2, #3
 8005344:	4013      	ands	r3, r2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d119      	bne.n	800537e <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	b21a      	sxth	r2, r3
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	3301      	adds	r3, #1
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	18cb      	adds	r3, r1, r3
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	b21b      	sxth	r3, r3
 8005366:	4313      	orrs	r3, r2
 8005368:	b21a      	sxth	r2, r3
 800536a:	211a      	movs	r1, #26
 800536c:	187b      	adds	r3, r7, r1
 800536e:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	187a      	adds	r2, r7, r1
 800537a:	8812      	ldrh	r2, [r2, #0]
 800537c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	4013      	ands	r3, r2
 8005384:	2b03      	cmp	r3, #3
 8005386:	d122      	bne.n	80053ce <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	18d3      	adds	r3, r2, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	b21a      	sxth	r2, r3
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	3301      	adds	r3, #1
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	18cb      	adds	r3, r1, r3
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	b21b      	sxth	r3, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b21a      	sxth	r2, r3
 80053a8:	211a      	movs	r1, #26
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	187a      	adds	r2, r7, r1
 80053b8:	8812      	ldrh	r2, [r2, #0]
 80053ba:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3302      	adds	r3, #2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	18d2      	adds	r2, r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b008      	add	sp, #32
 80053da:	bd80      	pop	{r7, pc}

080053dc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e013      	b.n	8005416 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	041a      	lsls	r2, r3, #16
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	3302      	adds	r3, #2
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	18cb      	adds	r3, r1, r3
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	0019      	movs	r1, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3301      	adds	r3, #1
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	429a      	cmp	r2, r3
 800541e:	d3e6      	bcc.n	80053ee <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	4013      	ands	r3, r2
 8005426:	d009      	beq.n	800543c <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	18d3      	adds	r3, r2, r3
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b006      	add	sp, #24
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	2317      	movs	r3, #23
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800545e:	231f      	movs	r3, #31
 8005460:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1e5a      	subs	r2, r3, #1
 8005468:	613a      	str	r2, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_CRCEx_Polynomial_Set+0x36>
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	221f      	movs	r2, #31
 8005472:	4013      	ands	r3, r2
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	40da      	lsrs	r2, r3
 8005478:	0013      	movs	r3, r2
 800547a:	2201      	movs	r2, #1
 800547c:	4013      	ands	r3, r2
 800547e:	d0f1      	beq.n	8005464 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b18      	cmp	r3, #24
 8005484:	d00f      	beq.n	80054a6 <HAL_CRCEx_Polynomial_Set+0x5c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b18      	cmp	r3, #24
 800548a:	d824      	bhi.n	80054d6 <HAL_CRCEx_Polynomial_Set+0x8c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b10      	cmp	r3, #16
 8005490:	d011      	beq.n	80054b6 <HAL_CRCEx_Polynomial_Set+0x6c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b10      	cmp	r3, #16
 8005496:	d81e      	bhi.n	80054d6 <HAL_CRCEx_Polynomial_Set+0x8c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d020      	beq.n	80054e0 <HAL_CRCEx_Polynomial_Set+0x96>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d010      	beq.n	80054c6 <HAL_CRCEx_Polynomial_Set+0x7c>
 80054a4:	e017      	b.n	80054d6 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d91b      	bls.n	80054e4 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 80054ac:	2317      	movs	r3, #23
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80054b4:	e016      	b.n	80054e4 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b07      	cmp	r3, #7
 80054ba:	d915      	bls.n	80054e8 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80054bc:	2317      	movs	r3, #23
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80054c4:	e010      	b.n	80054e8 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d90f      	bls.n	80054ec <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80054cc:	2317      	movs	r3, #23
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80054d4:	e00a      	b.n	80054ec <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80054d6:	2317      	movs	r3, #23
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
      break;
 80054de:	e006      	b.n	80054ee <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	e004      	b.n	80054ee <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	e002      	b.n	80054ee <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	e000      	b.n	80054ee <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80054ec:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80054ee:	2317      	movs	r3, #23
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10e      	bne.n	8005516 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2218      	movs	r2, #24
 8005508:	4393      	bics	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	430a      	orrs	r2, r1
 8005514:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005516:	2317      	movs	r3, #23
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	781b      	ldrb	r3, [r3, #0]
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b006      	add	sp, #24
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e077      	b.n	8005626 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a3d      	ldr	r2, [pc, #244]	; (8005630 <HAL_DMA_Init+0x10c>)
 800553c:	4694      	mov	ip, r2
 800553e:	4463      	add	r3, ip
 8005540:	2114      	movs	r1, #20
 8005542:	0018      	movs	r0, r3
 8005544:	f7fa fdfa 	bl	800013c <__udivsi3>
 8005548:	0003      	movs	r3, r0
 800554a:	009a      	lsls	r2, r3, #2
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2225      	movs	r2, #37	; 0x25
 8005554:	2102      	movs	r1, #2
 8005556:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4934      	ldr	r1, [pc, #208]	; (8005634 <HAL_DMA_Init+0x110>)
 8005564:	400a      	ands	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 fa8d 	bl	8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d102      	bne.n	80055b8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	213f      	movs	r1, #63	; 0x3f
 80055c2:	400a      	ands	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d011      	beq.n	80055fc <HAL_DMA_Init+0xd8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d80d      	bhi.n	80055fc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 fa98 	bl	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e008      	b.n	800560e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2225      	movs	r2, #37	; 0x25
 8005618:	2101      	movs	r1, #1
 800561a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	; 0x24
 8005620:	2100      	movs	r1, #0
 8005622:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	b002      	add	sp, #8
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	bffdfff8 	.word	0xbffdfff8
 8005634:	ffff800f 	.word	0xffff800f

08005638 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2317      	movs	r3, #23
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2224      	movs	r2, #36	; 0x24
 8005652:	5c9b      	ldrb	r3, [r3, r2]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_DMA_Start_IT+0x24>
 8005658:	2302      	movs	r3, #2
 800565a:	e06f      	b.n	800573c <HAL_DMA_Start_IT+0x104>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	2101      	movs	r1, #1
 8005662:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2225      	movs	r2, #37	; 0x25
 8005668:	5c9b      	ldrb	r3, [r3, r2]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d157      	bne.n	8005720 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2225      	movs	r2, #37	; 0x25
 8005674:	2102      	movs	r1, #2
 8005676:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2101      	movs	r1, #1
 800568a:	438a      	bics	r2, r1
 800568c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f9d3 	bl	8005a40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	210e      	movs	r1, #14
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e00f      	b.n	80056d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2104      	movs	r1, #4
 80056c0:	438a      	bics	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	210a      	movs	r1, #10
 80056d0:	430a      	orrs	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	025b      	lsls	r3, r3, #9
 80056de:	4013      	ands	r3, r2
 80056e0:	d008      	beq.n	80056f4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	0049      	lsls	r1, r1, #1
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	0049      	lsls	r1, r1, #1
 800570a:	430a      	orrs	r2, r1
 800570c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e00a      	b.n	8005736 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2224      	movs	r2, #36	; 0x24
 800572a:	2100      	movs	r1, #0
 800572c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800572e:	2317      	movs	r3, #23
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005736:	2317      	movs	r3, #23
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	781b      	ldrb	r3, [r3, #0]
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b006      	add	sp, #24
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e050      	b.n	80057f8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2225      	movs	r2, #37	; 0x25
 800575a:	5c9b      	ldrb	r3, [r3, r2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d008      	beq.n	8005774 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2204      	movs	r2, #4
 8005766:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	; 0x24
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e041      	b.n	80057f8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	210e      	movs	r1, #14
 8005780:	438a      	bics	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	491c      	ldr	r1, [pc, #112]	; (8005800 <HAL_DMA_Abort+0xbc>)
 8005790:	400a      	ands	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	438a      	bics	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80057a4:	4b17      	ldr	r3, [pc, #92]	; (8005804 <HAL_DMA_Abort+0xc0>)
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	221c      	movs	r2, #28
 80057ae:	4013      	ands	r3, r2
 80057b0:	2201      	movs	r2, #1
 80057b2:	409a      	lsls	r2, r3
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <HAL_DMA_Abort+0xc0>)
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80057c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	490a      	ldr	r1, [pc, #40]	; (8005800 <HAL_DMA_Abort+0xbc>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80057e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2225      	movs	r2, #37	; 0x25
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2224      	movs	r2, #36	; 0x24
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	fffffeff 	.word	0xfffffeff
 8005804:	40020000 	.word	0x40020000

08005808 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	210f      	movs	r1, #15
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2225      	movs	r2, #37	; 0x25
 800581c:	5c9b      	ldrb	r3, [r3, r2]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d006      	beq.n	8005832 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2204      	movs	r2, #4
 8005828:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800582a:	187b      	adds	r3, r7, r1
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e049      	b.n	80058c6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	210e      	movs	r1, #14
 800583e:	438a      	bics	r2, r1
 8005840:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2101      	movs	r1, #1
 800584e:	438a      	bics	r2, r1
 8005850:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585c:	491d      	ldr	r1, [pc, #116]	; (80058d4 <HAL_DMA_Abort_IT+0xcc>)
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005862:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <HAL_DMA_Abort_IT+0xd0>)
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	221c      	movs	r2, #28
 800586c:	4013      	ands	r3, r2
 800586e:	2201      	movs	r2, #1
 8005870:	409a      	lsls	r2, r3
 8005872:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <HAL_DMA_Abort_IT+0xd0>)
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005880:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	490f      	ldr	r1, [pc, #60]	; (80058d4 <HAL_DMA_Abort_IT+0xcc>)
 8005896:	400a      	ands	r2, r1
 8005898:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80058a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2225      	movs	r2, #37	; 0x25
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	2100      	movs	r1, #0
 80058b2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	0010      	movs	r0, r2
 80058c4:	4798      	blx	r3
    }
  }
  return status;
 80058c6:	230f      	movs	r3, #15
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b004      	add	sp, #16
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	fffffeff 	.word	0xfffffeff
 80058d8:	40020000 	.word	0x40020000

080058dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80058e4:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	221c      	movs	r2, #28
 80058f8:	4013      	ands	r3, r2
 80058fa:	2204      	movs	r2, #4
 80058fc:	409a      	lsls	r2, r3
 80058fe:	0013      	movs	r3, r2
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4013      	ands	r3, r2
 8005904:	d027      	beq.n	8005956 <HAL_DMA_IRQHandler+0x7a>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2204      	movs	r2, #4
 800590a:	4013      	ands	r3, r2
 800590c:	d023      	beq.n	8005956 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2220      	movs	r2, #32
 8005916:	4013      	ands	r3, r2
 8005918:	d107      	bne.n	800592a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2104      	movs	r1, #4
 8005926:	438a      	bics	r2, r1
 8005928:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800592a:	4b44      	ldr	r3, [pc, #272]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	221c      	movs	r2, #28
 8005934:	4013      	ands	r3, r2
 8005936:	2204      	movs	r2, #4
 8005938:	409a      	lsls	r2, r3
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	2b00      	cmp	r3, #0
 8005946:	d100      	bne.n	800594a <HAL_DMA_IRQHandler+0x6e>
 8005948:	e073      	b.n	8005a32 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	0010      	movs	r0, r2
 8005952:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005954:	e06d      	b.n	8005a32 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	221c      	movs	r2, #28
 800595c:	4013      	ands	r3, r2
 800595e:	2202      	movs	r2, #2
 8005960:	409a      	lsls	r2, r3
 8005962:	0013      	movs	r3, r2
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4013      	ands	r3, r2
 8005968:	d02e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0xec>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2202      	movs	r2, #2
 800596e:	4013      	ands	r3, r2
 8005970:	d02a      	beq.n	80059c8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2220      	movs	r2, #32
 800597a:	4013      	ands	r3, r2
 800597c:	d10b      	bne.n	8005996 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	210a      	movs	r1, #10
 800598a:	438a      	bics	r2, r1
 800598c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2225      	movs	r2, #37	; 0x25
 8005992:	2101      	movs	r1, #1
 8005994:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	221c      	movs	r2, #28
 80059a0:	4013      	ands	r3, r2
 80059a2:	2202      	movs	r2, #2
 80059a4:	409a      	lsls	r2, r3
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	2100      	movs	r1, #0
 80059b2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d03a      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	0010      	movs	r0, r2
 80059c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80059c6:	e034      	b.n	8005a32 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	221c      	movs	r2, #28
 80059ce:	4013      	ands	r3, r2
 80059d0:	2208      	movs	r2, #8
 80059d2:	409a      	lsls	r2, r3
 80059d4:	0013      	movs	r3, r2
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4013      	ands	r3, r2
 80059da:	d02b      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x158>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2208      	movs	r2, #8
 80059e0:	4013      	ands	r3, r2
 80059e2:	d027      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	210e      	movs	r1, #14
 80059f0:	438a      	bics	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	221c      	movs	r2, #28
 80059fe:	4013      	ands	r3, r2
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <HAL_DMA_IRQHandler+0x160>)
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2225      	movs	r2, #37	; 0x25
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	0010      	movs	r0, r2
 8005a30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	46c0      	nop			; (mov r8, r8)
}
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40020000 	.word	0x40020000

08005a40 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005a68:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <DMA_SetConfig+0x7c>)
 8005a6c:	6859      	ldr	r1, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	221c      	movs	r2, #28
 8005a74:	4013      	ands	r3, r2
 8005a76:	2201      	movs	r2, #1
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <DMA_SetConfig+0x7c>)
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d108      	bne.n	8005aa2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005aa0:	e007      	b.n	8005ab2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]
}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b004      	add	sp, #16
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	40020000 	.word	0x40020000

08005ac0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005ad0:	4694      	mov	ip, r2
 8005ad2:	4463      	add	r3, ip
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	001a      	movs	r2, r3
 8005ae2:	23ff      	movs	r3, #255	; 0xff
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	3b08      	subs	r3, #8
 8005ae8:	2114      	movs	r1, #20
 8005aea:	0018      	movs	r0, r3
 8005aec:	f7fa fb26 	bl	800013c <__udivsi3>
 8005af0:	0003      	movs	r3, r0
 8005af2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a07      	ldr	r2, [pc, #28]	; (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005af8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	221f      	movs	r2, #31
 8005afe:	4013      	ands	r3, r2
 8005b00:	2201      	movs	r2, #1
 8005b02:	409a      	lsls	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	10008200 	.word	0x10008200
 8005b14:	40020880 	.word	0x40020880

08005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	223f      	movs	r2, #63	; 0x3f
 8005b26:	4013      	ands	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005b2e:	4694      	mov	ip, r2
 8005b30:	4463      	add	r3, ip
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	001a      	movs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	4013      	ands	r3, r2
 8005b48:	2201      	movs	r2, #1
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005b50:	46c0      	nop			; (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b004      	add	sp, #16
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	1000823f 	.word	0x1000823f
 8005b5c:	40020940 	.word	0x40020940

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b6e:	e147      	b.n	8005e00 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2101      	movs	r1, #1
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4091      	lsls	r1, r2
 8005b7a:	000a      	movs	r2, r1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d100      	bne.n	8005b88 <HAL_GPIO_Init+0x28>
 8005b86:	e138      	b.n	8005dfa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d005      	beq.n	8005ba0 <HAL_GPIO_Init+0x40>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d130      	bne.n	8005c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	2203      	movs	r2, #3
 8005bac:	409a      	lsls	r2, r3
 8005bae:	0013      	movs	r3, r2
 8005bb0:	43da      	mvns	r2, r3
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	0013      	movs	r3, r2
 8005bde:	43da      	mvns	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4013      	ands	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	2201      	movs	r2, #1
 8005bee:	401a      	ands	r2, r3
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	0013      	movs	r3, r2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2203      	movs	r2, #3
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d017      	beq.n	8005c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2203      	movs	r2, #3
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	0013      	movs	r3, r2
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	0013      	movs	r3, r2
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2203      	movs	r2, #3
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d123      	bne.n	8005c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	08da      	lsrs	r2, r3, #3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3208      	adds	r2, #8
 8005c52:	0092      	lsls	r2, r2, #2
 8005c54:	58d3      	ldr	r3, [r2, r3]
 8005c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2207      	movs	r2, #7
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	220f      	movs	r2, #15
 8005c62:	409a      	lsls	r2, r3
 8005c64:	0013      	movs	r3, r2
 8005c66:	43da      	mvns	r2, r3
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2107      	movs	r1, #7
 8005c76:	400b      	ands	r3, r1
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	0013      	movs	r3, r2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	08da      	lsrs	r2, r3, #3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3208      	adds	r2, #8
 8005c8c:	0092      	lsls	r2, r2, #2
 8005c8e:	6939      	ldr	r1, [r7, #16]
 8005c90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	0013      	movs	r3, r2
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2203      	movs	r2, #3
 8005cb0:	401a      	ands	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	0013      	movs	r3, r2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	23c0      	movs	r3, #192	; 0xc0
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d100      	bne.n	8005cd4 <HAL_GPIO_Init+0x174>
 8005cd2:	e092      	b.n	8005dfa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005cd4:	4a50      	ldr	r2, [pc, #320]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	089b      	lsrs	r3, r3, #2
 8005cda:	3318      	adds	r3, #24
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	589b      	ldr	r3, [r3, r2]
 8005ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	220f      	movs	r2, #15
 8005cec:	409a      	lsls	r2, r3
 8005cee:	0013      	movs	r3, r2
 8005cf0:	43da      	mvns	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	23a0      	movs	r3, #160	; 0xa0
 8005cfc:	05db      	lsls	r3, r3, #23
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d013      	beq.n	8005d2a <HAL_GPIO_Init+0x1ca>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a45      	ldr	r2, [pc, #276]	; (8005e1c <HAL_GPIO_Init+0x2bc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00d      	beq.n	8005d26 <HAL_GPIO_Init+0x1c6>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a44      	ldr	r2, [pc, #272]	; (8005e20 <HAL_GPIO_Init+0x2c0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d007      	beq.n	8005d22 <HAL_GPIO_Init+0x1c2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a43      	ldr	r2, [pc, #268]	; (8005e24 <HAL_GPIO_Init+0x2c4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d101      	bne.n	8005d1e <HAL_GPIO_Init+0x1be>
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e006      	b.n	8005d2c <HAL_GPIO_Init+0x1cc>
 8005d1e:	2305      	movs	r3, #5
 8005d20:	e004      	b.n	8005d2c <HAL_GPIO_Init+0x1cc>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e002      	b.n	8005d2c <HAL_GPIO_Init+0x1cc>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <HAL_GPIO_Init+0x1cc>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	2103      	movs	r1, #3
 8005d30:	400a      	ands	r2, r1
 8005d32:	00d2      	lsls	r2, r2, #3
 8005d34:	4093      	lsls	r3, r2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005d3c:	4936      	ldr	r1, [pc, #216]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	089b      	lsrs	r3, r3, #2
 8005d42:	3318      	adds	r3, #24
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d4a:	4b33      	ldr	r3, [pc, #204]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	43da      	mvns	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	035b      	lsls	r3, r3, #13
 8005d62:	4013      	ands	r3, r2
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d6e:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	43da      	mvns	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4013      	ands	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	039b      	lsls	r3, r3, #14
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d98:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005d9e:	4a1e      	ldr	r2, [pc, #120]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005da0:	2384      	movs	r3, #132	; 0x84
 8005da2:	58d3      	ldr	r3, [r2, r3]
 8005da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	43da      	mvns	r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	4013      	ands	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005dc4:	4914      	ldr	r1, [pc, #80]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005dc6:	2284      	movs	r2, #132	; 0x84
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005dcc:	4a12      	ldr	r2, [pc, #72]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	58d3      	ldr	r3, [r2, r3]
 8005dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	2380      	movs	r3, #128	; 0x80
 8005de4:	025b      	lsls	r3, r3, #9
 8005de6:	4013      	ands	r3, r2
 8005de8:	d003      	beq.n	8005df2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005df2:	4909      	ldr	r1, [pc, #36]	; (8005e18 <HAL_GPIO_Init+0x2b8>)
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	40da      	lsrs	r2, r3
 8005e08:	1e13      	subs	r3, r2, #0
 8005e0a:	d000      	beq.n	8005e0e <HAL_GPIO_Init+0x2ae>
 8005e0c:	e6b0      	b.n	8005b70 <HAL_GPIO_Init+0x10>
  }
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b006      	add	sp, #24
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021800 	.word	0x40021800
 8005e1c:	50000400 	.word	0x50000400
 8005e20:	50000800 	.word	0x50000800
 8005e24:	50000c00 	.word	0x50000c00

08005e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	0008      	movs	r0, r1
 8005e32:	0011      	movs	r1, r2
 8005e34:	1cbb      	adds	r3, r7, #2
 8005e36:	1c02      	adds	r2, r0, #0
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	1c7b      	adds	r3, r7, #1
 8005e3c:	1c0a      	adds	r2, r1, #0
 8005e3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e40:	1c7b      	adds	r3, r7, #1
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e48:	1cbb      	adds	r3, r7, #2
 8005e4a:	881a      	ldrh	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e50:	e003      	b.n	8005e5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e52:	1cbb      	adds	r3, r7, #2
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_PWREx_ConfigPVD>:
  * @note   User should take care that rising threshold is higher than falling
  *         one in order to avoid having always PVDO output set.
  * @retval HAL_OK
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PVD level bits only according to PVDLevel value */
  MODIFY_REG(PWR->CR2, (PWR_CR2_PVDFT | PWR_CR2_PVDRT), sConfigPVD->PVDLevel);
 8005e6c:	4b30      	ldr	r3, [pc, #192]	; (8005f30 <HAL_PWREx_ConfigPVD+0xcc>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	227e      	movs	r2, #126	; 0x7e
 8005e72:	4393      	bics	r3, r2
 8005e74:	0019      	movs	r1, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <HAL_PWREx_ConfigPVD+0xcc>)
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]

  /* Clear any previous config, in case no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8005e80:	4a2c      	ldr	r2, [pc, #176]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005e82:	2384      	movs	r3, #132	; 0x84
 8005e84:	58d3      	ldr	r3, [r2, r3]
 8005e86:	492b      	ldr	r1, [pc, #172]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005e88:	4a2b      	ldr	r2, [pc, #172]	; (8005f38 <HAL_PWREx_ConfigPVD+0xd4>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2284      	movs	r2, #132	; 0x84
 8005e8e:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005e90:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	58d3      	ldr	r3, [r2, r3]
 8005e96:	4927      	ldr	r1, [pc, #156]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005e98:	4a27      	ldr	r2, [pc, #156]	; (8005f38 <HAL_PWREx_ConfigPVD+0xd4>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2280      	movs	r2, #128	; 0x80
 8005e9e:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005ea0:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005ea6:	4924      	ldr	r1, [pc, #144]	; (8005f38 <HAL_PWREx_ConfigPVD+0xd4>)
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005eac:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005eb2:	4921      	ldr	r1, [pc, #132]	; (8005f38 <HAL_PWREx_ConfigPVD+0xd4>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	025b      	lsls	r3, r3, #9
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d008      	beq.n	8005ed6 <HAL_PWREx_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005ec6:	2380      	movs	r3, #128	; 0x80
 8005ec8:	58d3      	ldr	r3, [r2, r3]
 8005eca:	491a      	ldr	r1, [pc, #104]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005ecc:	2280      	movs	r2, #128	; 0x80
 8005ece:	0252      	lsls	r2, r2, #9
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	2280      	movs	r2, #128	; 0x80
 8005ed4:	508b      	str	r3, [r1, r2]
  }

  /* Configure event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	029b      	lsls	r3, r3, #10
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d008      	beq.n	8005ef4 <HAL_PWREx_ConfigPVD+0x90>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8005ee2:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005ee4:	2384      	movs	r3, #132	; 0x84
 8005ee6:	58d3      	ldr	r3, [r2, r3]
 8005ee8:	4912      	ldr	r1, [pc, #72]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	0252      	lsls	r2, r2, #9
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	2284      	movs	r2, #132	; 0x84
 8005ef2:	508b      	str	r3, [r1, r2]
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	d006      	beq.n	8005f0c <HAL_PWREx_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005f04:	2180      	movs	r1, #128	; 0x80
 8005f06:	0249      	lsls	r1, r1, #9
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	4013      	ands	r3, r2
 8005f14:	d006      	beq.n	8005f24 <HAL_PWREx_ConfigPVD+0xc0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_PWREx_ConfigPVD+0xd0>)
 8005f1c:	2180      	movs	r1, #128	; 0x80
 8005f1e:	0249      	lsls	r1, r1, #9
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	0018      	movs	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b002      	add	sp, #8
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	40007000 	.word	0x40007000
 8005f34:	40021800 	.word	0x40021800
 8005f38:	fffeffff 	.word	0xfffeffff

08005f3c <HAL_PWREx_EnablePVD>:
/**
  * @brief  Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWREx_EnablePVD(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <HAL_PWREx_EnablePVD+0x18>)
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <HAL_PWREx_EnablePVD+0x18>)
 8005f46:	2101      	movs	r1, #1
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	40007000 	.word	0x40007000

08005f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005f60:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a19      	ldr	r2, [pc, #100]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d11f      	bne.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005f7c:	4b14      	ldr	r3, [pc, #80]	; (8005fd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	0013      	movs	r3, r2
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	189b      	adds	r3, r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	4912      	ldr	r1, [pc, #72]	; (8005fd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fa f8d6 	bl	800013c <__udivsi3>
 8005f90:	0003      	movs	r3, r0
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f96:	e008      	b.n	8005faa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e001      	b.n	8005faa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e009      	b.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005faa:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d0ed      	beq.n	8005f98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b004      	add	sp, #16
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	fffff9ff 	.word	0xfffff9ff
 8005fd0:	20000000 	.word	0x20000000
 8005fd4:	000f4240 	.word	0x000f4240

08005fd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <LL_RCC_GetAPB1Prescaler+0x14>)
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	23e0      	movs	r3, #224	; 0xe0
 8005fe2:	01db      	lsls	r3, r3, #7
 8005fe4:	4013      	ands	r3, r2
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40021000 	.word	0x40021000

08005ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e2fe      	b.n	8006600 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2201      	movs	r2, #1
 8006008:	4013      	ands	r3, r2
 800600a:	d100      	bne.n	800600e <HAL_RCC_OscConfig+0x1e>
 800600c:	e07c      	b.n	8006108 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600e:	4bc3      	ldr	r3, [pc, #780]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2238      	movs	r2, #56	; 0x38
 8006014:	4013      	ands	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006018:	4bc0      	ldr	r3, [pc, #768]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2203      	movs	r2, #3
 800601e:	4013      	ands	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b10      	cmp	r3, #16
 8006026:	d102      	bne.n	800602e <HAL_RCC_OscConfig+0x3e>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d002      	beq.n	8006034 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d10b      	bne.n	800604c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006034:	4bb9      	ldr	r3, [pc, #740]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	4013      	ands	r3, r2
 800603e:	d062      	beq.n	8006106 <HAL_RCC_OscConfig+0x116>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d15e      	bne.n	8006106 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e2d9      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	025b      	lsls	r3, r3, #9
 8006054:	429a      	cmp	r2, r3
 8006056:	d107      	bne.n	8006068 <HAL_RCC_OscConfig+0x78>
 8006058:	4bb0      	ldr	r3, [pc, #704]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4baf      	ldr	r3, [pc, #700]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800605e:	2180      	movs	r1, #128	; 0x80
 8006060:	0249      	lsls	r1, r1, #9
 8006062:	430a      	orrs	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e020      	b.n	80060aa <HAL_RCC_OscConfig+0xba>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	23a0      	movs	r3, #160	; 0xa0
 800606e:	02db      	lsls	r3, r3, #11
 8006070:	429a      	cmp	r2, r3
 8006072:	d10e      	bne.n	8006092 <HAL_RCC_OscConfig+0xa2>
 8006074:	4ba9      	ldr	r3, [pc, #676]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4ba8      	ldr	r3, [pc, #672]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800607a:	2180      	movs	r1, #128	; 0x80
 800607c:	02c9      	lsls	r1, r1, #11
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	4ba6      	ldr	r3, [pc, #664]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4ba5      	ldr	r3, [pc, #660]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006088:	2180      	movs	r1, #128	; 0x80
 800608a:	0249      	lsls	r1, r1, #9
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e00b      	b.n	80060aa <HAL_RCC_OscConfig+0xba>
 8006092:	4ba2      	ldr	r3, [pc, #648]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4ba1      	ldr	r3, [pc, #644]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006098:	49a1      	ldr	r1, [pc, #644]	; (8006320 <HAL_RCC_OscConfig+0x330>)
 800609a:	400a      	ands	r2, r1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	4b9f      	ldr	r3, [pc, #636]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b9e      	ldr	r3, [pc, #632]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80060a4:	499f      	ldr	r1, [pc, #636]	; (8006324 <HAL_RCC_OscConfig+0x334>)
 80060a6:	400a      	ands	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d014      	beq.n	80060dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b2:	f7fe f8f3 	bl	800429c <HAL_GetTick>
 80060b6:	0003      	movs	r3, r0
 80060b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fe f8ee 	bl	800429c <HAL_GetTick>
 80060c0:	0002      	movs	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e298      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ce:	4b93      	ldr	r3, [pc, #588]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	4013      	ands	r3, r2
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0xcc>
 80060da:	e015      	b.n	8006108 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fe f8de 	bl	800429c <HAL_GetTick>
 80060e0:	0003      	movs	r3, r0
 80060e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e6:	f7fe f8d9 	bl	800429c <HAL_GetTick>
 80060ea:	0002      	movs	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b64      	cmp	r3, #100	; 0x64
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e283      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060f8:	4b88      	ldr	r3, [pc, #544]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	029b      	lsls	r3, r3, #10
 8006100:	4013      	ands	r3, r2
 8006102:	d1f0      	bne.n	80060e6 <HAL_RCC_OscConfig+0xf6>
 8006104:	e000      	b.n	8006108 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006106:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2202      	movs	r2, #2
 800610e:	4013      	ands	r3, r2
 8006110:	d100      	bne.n	8006114 <HAL_RCC_OscConfig+0x124>
 8006112:	e099      	b.n	8006248 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006114:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2238      	movs	r2, #56	; 0x38
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800611e:	4b7f      	ldr	r3, [pc, #508]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2203      	movs	r2, #3
 8006124:	4013      	ands	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b10      	cmp	r3, #16
 800612c:	d102      	bne.n	8006134 <HAL_RCC_OscConfig+0x144>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d002      	beq.n	800613a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d135      	bne.n	80061a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800613a:	4b78      	ldr	r3, [pc, #480]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4013      	ands	r3, r2
 8006144:	d005      	beq.n	8006152 <HAL_RCC_OscConfig+0x162>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e256      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006152:	4b72      	ldr	r3, [pc, #456]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4a74      	ldr	r2, [pc, #464]	; (8006328 <HAL_RCC_OscConfig+0x338>)
 8006158:	4013      	ands	r3, r2
 800615a:	0019      	movs	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	021a      	lsls	r2, r3, #8
 8006162:	4b6e      	ldr	r3, [pc, #440]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d112      	bne.n	8006194 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800616e:	4b6b      	ldr	r3, [pc, #428]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6e      	ldr	r2, [pc, #440]	; (800632c <HAL_RCC_OscConfig+0x33c>)
 8006174:	4013      	ands	r3, r2
 8006176:	0019      	movs	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	4b67      	ldr	r3, [pc, #412]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006182:	4b66      	ldr	r3, [pc, #408]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0adb      	lsrs	r3, r3, #11
 8006188:	2207      	movs	r2, #7
 800618a:	4013      	ands	r3, r2
 800618c:	4a68      	ldr	r2, [pc, #416]	; (8006330 <HAL_RCC_OscConfig+0x340>)
 800618e:	40da      	lsrs	r2, r3
 8006190:	4b68      	ldr	r3, [pc, #416]	; (8006334 <HAL_RCC_OscConfig+0x344>)
 8006192:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006194:	4b68      	ldr	r3, [pc, #416]	; (8006338 <HAL_RCC_OscConfig+0x348>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	0018      	movs	r0, r3
 800619a:	f7fe f823 	bl	80041e4 <HAL_InitTick>
 800619e:	1e03      	subs	r3, r0, #0
 80061a0:	d051      	beq.n	8006246 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e22c      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d030      	beq.n	8006210 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80061ae:	4b5b      	ldr	r3, [pc, #364]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5e      	ldr	r2, [pc, #376]	; (800632c <HAL_RCC_OscConfig+0x33c>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	0019      	movs	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	4b57      	ldr	r3, [pc, #348]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80061c2:	4b56      	ldr	r3, [pc, #344]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b55      	ldr	r3, [pc, #340]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	0049      	lsls	r1, r1, #1
 80061cc:	430a      	orrs	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fe f864 	bl	800429c <HAL_GetTick>
 80061d4:	0003      	movs	r3, r0
 80061d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061da:	f7fe f85f 	bl	800429c <HAL_GetTick>
 80061de:	0002      	movs	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e209      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061ec:	4b4b      	ldr	r3, [pc, #300]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4013      	ands	r3, r2
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f8:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a4a      	ldr	r2, [pc, #296]	; (8006328 <HAL_RCC_OscConfig+0x338>)
 80061fe:	4013      	ands	r3, r2
 8006200:	0019      	movs	r1, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	4b44      	ldr	r3, [pc, #272]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e01b      	b.n	8006248 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006210:	4b42      	ldr	r3, [pc, #264]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b41      	ldr	r3, [pc, #260]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006216:	4949      	ldr	r1, [pc, #292]	; (800633c <HAL_RCC_OscConfig+0x34c>)
 8006218:	400a      	ands	r2, r1
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fe f83e 	bl	800429c <HAL_GetTick>
 8006220:	0003      	movs	r3, r0
 8006222:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006226:	f7fe f839 	bl	800429c <HAL_GetTick>
 800622a:	0002      	movs	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e1e3      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006238:	4b38      	ldr	r3, [pc, #224]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4013      	ands	r3, r2
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_OscConfig+0x236>
 8006244:	e000      	b.n	8006248 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006246:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2208      	movs	r2, #8
 800624e:	4013      	ands	r3, r2
 8006250:	d047      	beq.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006252:	4b32      	ldr	r3, [pc, #200]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2238      	movs	r2, #56	; 0x38
 8006258:	4013      	ands	r3, r2
 800625a:	2b18      	cmp	r3, #24
 800625c:	d10a      	bne.n	8006274 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800625e:	4b2f      	ldr	r3, [pc, #188]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006262:	2202      	movs	r2, #2
 8006264:	4013      	ands	r3, r2
 8006266:	d03c      	beq.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d138      	bne.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e1c5      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d019      	beq.n	80062b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800627c:	4b27      	ldr	r3, [pc, #156]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 800627e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006280:	4b26      	ldr	r3, [pc, #152]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006282:	2101      	movs	r1, #1
 8006284:	430a      	orrs	r2, r1
 8006286:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fe f808 	bl	800429c <HAL_GetTick>
 800628c:	0003      	movs	r3, r0
 800628e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006292:	f7fe f803 	bl	800429c <HAL_GetTick>
 8006296:	0002      	movs	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e1ad      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062a4:	4b1d      	ldr	r3, [pc, #116]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	2202      	movs	r2, #2
 80062aa:	4013      	ands	r3, r2
 80062ac:	d0f1      	beq.n	8006292 <HAL_RCC_OscConfig+0x2a2>
 80062ae:	e018      	b.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80062b0:	4b1a      	ldr	r3, [pc, #104]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80062b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062b4:	4b19      	ldr	r3, [pc, #100]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80062b6:	2101      	movs	r1, #1
 80062b8:	438a      	bics	r2, r1
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fd ffee 	bl	800429c <HAL_GetTick>
 80062c0:	0003      	movs	r3, r0
 80062c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c6:	f7fd ffe9 	bl	800429c <HAL_GetTick>
 80062ca:	0002      	movs	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e193      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80062da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062dc:	2202      	movs	r2, #2
 80062de:	4013      	ands	r3, r2
 80062e0:	d1f1      	bne.n	80062c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2204      	movs	r2, #4
 80062e8:	4013      	ands	r3, r2
 80062ea:	d100      	bne.n	80062ee <HAL_RCC_OscConfig+0x2fe>
 80062ec:	e0c6      	b.n	800647c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ee:	231f      	movs	r3, #31
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2238      	movs	r2, #56	; 0x38
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d11e      	bne.n	8006340 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_RCC_OscConfig+0x32c>)
 8006304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006306:	2202      	movs	r2, #2
 8006308:	4013      	ands	r3, r2
 800630a:	d100      	bne.n	800630e <HAL_RCC_OscConfig+0x31e>
 800630c:	e0b6      	b.n	800647c <HAL_RCC_OscConfig+0x48c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d000      	beq.n	8006318 <HAL_RCC_OscConfig+0x328>
 8006316:	e0b1      	b.n	800647c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e171      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
 800631c:	40021000 	.word	0x40021000
 8006320:	fffeffff 	.word	0xfffeffff
 8006324:	fffbffff 	.word	0xfffbffff
 8006328:	ffff80ff 	.word	0xffff80ff
 800632c:	ffffc7ff 	.word	0xffffc7ff
 8006330:	00f42400 	.word	0x00f42400
 8006334:	20000000 	.word	0x20000000
 8006338:	20000004 	.word	0x20000004
 800633c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006340:	4bb1      	ldr	r3, [pc, #708]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	055b      	lsls	r3, r3, #21
 8006348:	4013      	ands	r3, r2
 800634a:	d101      	bne.n	8006350 <HAL_RCC_OscConfig+0x360>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x362>
 8006350:	2300      	movs	r3, #0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d011      	beq.n	800637a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006356:	4bac      	ldr	r3, [pc, #688]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800635a:	4bab      	ldr	r3, [pc, #684]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800635c:	2180      	movs	r1, #128	; 0x80
 800635e:	0549      	lsls	r1, r1, #21
 8006360:	430a      	orrs	r2, r1
 8006362:	63da      	str	r2, [r3, #60]	; 0x3c
 8006364:	4ba8      	ldr	r3, [pc, #672]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	055b      	lsls	r3, r3, #21
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006372:	231f      	movs	r3, #31
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637a:	4ba4      	ldr	r3, [pc, #656]	; (800660c <HAL_RCC_OscConfig+0x61c>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4013      	ands	r3, r2
 8006384:	d11a      	bne.n	80063bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006386:	4ba1      	ldr	r3, [pc, #644]	; (800660c <HAL_RCC_OscConfig+0x61c>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4ba0      	ldr	r3, [pc, #640]	; (800660c <HAL_RCC_OscConfig+0x61c>)
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	0049      	lsls	r1, r1, #1
 8006390:	430a      	orrs	r2, r1
 8006392:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006394:	f7fd ff82 	bl	800429c <HAL_GetTick>
 8006398:	0003      	movs	r3, r0
 800639a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639e:	f7fd ff7d 	bl	800429c <HAL_GetTick>
 80063a2:	0002      	movs	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e127      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063b0:	4b96      	ldr	r3, [pc, #600]	; (800660c <HAL_RCC_OscConfig+0x61c>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	4013      	ands	r3, r2
 80063ba:	d0f0      	beq.n	800639e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d106      	bne.n	80063d2 <HAL_RCC_OscConfig+0x3e2>
 80063c4:	4b90      	ldr	r3, [pc, #576]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063c8:	4b8f      	ldr	r3, [pc, #572]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063ca:	2101      	movs	r1, #1
 80063cc:	430a      	orrs	r2, r1
 80063ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80063d0:	e01c      	b.n	800640c <HAL_RCC_OscConfig+0x41c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x404>
 80063da:	4b8b      	ldr	r3, [pc, #556]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063de:	4b8a      	ldr	r3, [pc, #552]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063e0:	2104      	movs	r1, #4
 80063e2:	430a      	orrs	r2, r1
 80063e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80063e6:	4b88      	ldr	r3, [pc, #544]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063ea:	4b87      	ldr	r3, [pc, #540]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063ec:	2101      	movs	r1, #1
 80063ee:	430a      	orrs	r2, r1
 80063f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0x41c>
 80063f4:	4b84      	ldr	r3, [pc, #528]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063f8:	4b83      	ldr	r3, [pc, #524]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80063fa:	2101      	movs	r1, #1
 80063fc:	438a      	bics	r2, r1
 80063fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8006400:	4b81      	ldr	r3, [pc, #516]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006404:	4b80      	ldr	r3, [pc, #512]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006406:	2104      	movs	r1, #4
 8006408:	438a      	bics	r2, r1
 800640a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d014      	beq.n	800643e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fd ff42 	bl	800429c <HAL_GetTick>
 8006418:	0003      	movs	r3, r0
 800641a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641c:	e009      	b.n	8006432 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fd ff3d 	bl	800429c <HAL_GetTick>
 8006422:	0002      	movs	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	4a79      	ldr	r2, [pc, #484]	; (8006610 <HAL_RCC_OscConfig+0x620>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e0e6      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006432:	4b75      	ldr	r3, [pc, #468]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006436:	2202      	movs	r2, #2
 8006438:	4013      	ands	r3, r2
 800643a:	d0f0      	beq.n	800641e <HAL_RCC_OscConfig+0x42e>
 800643c:	e013      	b.n	8006466 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643e:	f7fd ff2d 	bl	800429c <HAL_GetTick>
 8006442:	0003      	movs	r3, r0
 8006444:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006446:	e009      	b.n	800645c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006448:	f7fd ff28 	bl	800429c <HAL_GetTick>
 800644c:	0002      	movs	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a6f      	ldr	r2, [pc, #444]	; (8006610 <HAL_RCC_OscConfig+0x620>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e0d1      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800645c:	4b6a      	ldr	r3, [pc, #424]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	2202      	movs	r2, #2
 8006462:	4013      	ands	r3, r2
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006466:	231f      	movs	r3, #31
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006470:	4b65      	ldr	r3, [pc, #404]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006474:	4b64      	ldr	r3, [pc, #400]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006476:	4967      	ldr	r1, [pc, #412]	; (8006614 <HAL_RCC_OscConfig+0x624>)
 8006478:	400a      	ands	r2, r1
 800647a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d100      	bne.n	8006486 <HAL_RCC_OscConfig+0x496>
 8006484:	e0bb      	b.n	80065fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006486:	4b60      	ldr	r3, [pc, #384]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2238      	movs	r2, #56	; 0x38
 800648c:	4013      	ands	r3, r2
 800648e:	2b10      	cmp	r3, #16
 8006490:	d100      	bne.n	8006494 <HAL_RCC_OscConfig+0x4a4>
 8006492:	e07b      	b.n	800658c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d156      	bne.n	800654a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800649c:	4b5a      	ldr	r3, [pc, #360]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b59      	ldr	r3, [pc, #356]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80064a2:	495d      	ldr	r1, [pc, #372]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 80064a4:	400a      	ands	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a8:	f7fd fef8 	bl	800429c <HAL_GetTick>
 80064ac:	0003      	movs	r3, r0
 80064ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b2:	f7fd fef3 	bl	800429c <HAL_GetTick>
 80064b6:	0002      	movs	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e09d      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	049b      	lsls	r3, r3, #18
 80064cc:	4013      	ands	r3, r2
 80064ce:	d1f0      	bne.n	80064b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d0:	4b4d      	ldr	r3, [pc, #308]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4a51      	ldr	r2, [pc, #324]	; (800661c <HAL_RCC_OscConfig+0x62c>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	0019      	movs	r1, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	431a      	orrs	r2, r3
 80064fe:	4b42      	ldr	r3, [pc, #264]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006500:	430a      	orrs	r2, r1
 8006502:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006504:	4b40      	ldr	r3, [pc, #256]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b3f      	ldr	r3, [pc, #252]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	0449      	lsls	r1, r1, #17
 800650e:	430a      	orrs	r2, r1
 8006510:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006512:	4b3d      	ldr	r3, [pc, #244]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	4b3c      	ldr	r3, [pc, #240]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	0549      	lsls	r1, r1, #21
 800651c:	430a      	orrs	r2, r1
 800651e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fd febc 	bl	800429c <HAL_GetTick>
 8006524:	0003      	movs	r3, r0
 8006526:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800652a:	f7fd feb7 	bl	800429c <HAL_GetTick>
 800652e:	0002      	movs	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e061      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800653c:	4b32      	ldr	r3, [pc, #200]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	049b      	lsls	r3, r3, #18
 8006544:	4013      	ands	r3, r2
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x53a>
 8006548:	e059      	b.n	80065fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654a:	4b2f      	ldr	r3, [pc, #188]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006550:	4931      	ldr	r1, [pc, #196]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006552:	400a      	ands	r2, r1
 8006554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fd fea1 	bl	800429c <HAL_GetTick>
 800655a:	0003      	movs	r3, r0
 800655c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006560:	f7fd fe9c 	bl	800429c <HAL_GetTick>
 8006564:	0002      	movs	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e046      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006572:	4b25      	ldr	r3, [pc, #148]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	049b      	lsls	r3, r3, #18
 800657a:	4013      	ands	r3, r2
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800657e:	4b22      	ldr	r3, [pc, #136]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	4b21      	ldr	r3, [pc, #132]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 8006584:	4926      	ldr	r1, [pc, #152]	; (8006620 <HAL_RCC_OscConfig+0x630>)
 8006586:	400a      	ands	r2, r1
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	e038      	b.n	80065fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e033      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006598:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <HAL_RCC_OscConfig+0x618>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2203      	movs	r2, #3
 80065a2:	401a      	ands	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d126      	bne.n	80065fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2270      	movs	r2, #112	; 0x70
 80065b0:	401a      	ands	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d11f      	bne.n	80065fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	23fe      	movs	r3, #254	; 0xfe
 80065be:	01db      	lsls	r3, r3, #7
 80065c0:	401a      	ands	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d116      	bne.n	80065fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	23f8      	movs	r3, #248	; 0xf8
 80065d0:	039b      	lsls	r3, r3, #14
 80065d2:	401a      	ands	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065d8:	429a      	cmp	r2, r3
 80065da:	d10e      	bne.n	80065fa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	23e0      	movs	r3, #224	; 0xe0
 80065e0:	051b      	lsls	r3, r3, #20
 80065e2:	401a      	ands	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d106      	bne.n	80065fa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	0f5b      	lsrs	r3, r3, #29
 80065f0:	075a      	lsls	r2, r3, #29
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d001      	beq.n	80065fe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b008      	add	sp, #32
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40021000 	.word	0x40021000
 800660c:	40007000 	.word	0x40007000
 8006610:	00001388 	.word	0x00001388
 8006614:	efffffff 	.word	0xefffffff
 8006618:	feffffff 	.word	0xfeffffff
 800661c:	11c1808c 	.word	0x11c1808c
 8006620:	eefefffc 	.word	0xeefefffc

08006624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0e9      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006638:	4b76      	ldr	r3, [pc, #472]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2207      	movs	r2, #7
 800663e:	4013      	ands	r3, r2
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d91e      	bls.n	8006684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	4b73      	ldr	r3, [pc, #460]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2207      	movs	r2, #7
 800664c:	4393      	bics	r3, r2
 800664e:	0019      	movs	r1, r3
 8006650:	4b70      	ldr	r3, [pc, #448]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006658:	f7fd fe20 	bl	800429c <HAL_GetTick>
 800665c:	0003      	movs	r3, r0
 800665e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006660:	e009      	b.n	8006676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006662:	f7fd fe1b 	bl	800429c <HAL_GetTick>
 8006666:	0002      	movs	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	4a6a      	ldr	r2, [pc, #424]	; (8006818 <HAL_RCC_ClockConfig+0x1f4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e0ca      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006676:	4b67      	ldr	r3, [pc, #412]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2207      	movs	r2, #7
 800667c:	4013      	ands	r3, r2
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d1ee      	bne.n	8006662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2202      	movs	r2, #2
 800668a:	4013      	ands	r3, r2
 800668c:	d015      	beq.n	80066ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2204      	movs	r2, #4
 8006694:	4013      	ands	r3, r2
 8006696:	d006      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006698:	4b60      	ldr	r3, [pc, #384]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	4b5f      	ldr	r3, [pc, #380]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 800669e:	21e0      	movs	r1, #224	; 0xe0
 80066a0:	01c9      	lsls	r1, r1, #7
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a6:	4b5d      	ldr	r3, [pc, #372]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	4a5d      	ldr	r2, [pc, #372]	; (8006820 <HAL_RCC_ClockConfig+0x1fc>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	0019      	movs	r1, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80066b6:	430a      	orrs	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	4013      	ands	r3, r2
 80066c2:	d057      	beq.n	8006774 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066cc:	4b53      	ldr	r3, [pc, #332]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	4013      	ands	r3, r2
 80066d6:	d12b      	bne.n	8006730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e097      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d107      	bne.n	80066f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066e4:	4b4d      	ldr	r3, [pc, #308]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	2380      	movs	r3, #128	; 0x80
 80066ea:	049b      	lsls	r3, r3, #18
 80066ec:	4013      	ands	r3, r2
 80066ee:	d11f      	bne.n	8006730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e08b      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066fc:	4b47      	ldr	r3, [pc, #284]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4013      	ands	r3, r2
 8006706:	d113      	bne.n	8006730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e07f      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d106      	bne.n	8006722 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006714:	4b41      	ldr	r3, [pc, #260]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	2202      	movs	r2, #2
 800671a:	4013      	ands	r3, r2
 800671c:	d108      	bne.n	8006730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e074      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006722:	4b3e      	ldr	r3, [pc, #248]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	2202      	movs	r2, #2
 8006728:	4013      	ands	r3, r2
 800672a:	d101      	bne.n	8006730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e06d      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006730:	4b3a      	ldr	r3, [pc, #232]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2207      	movs	r2, #7
 8006736:	4393      	bics	r3, r2
 8006738:	0019      	movs	r1, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4b37      	ldr	r3, [pc, #220]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006744:	f7fd fdaa 	bl	800429c <HAL_GetTick>
 8006748:	0003      	movs	r3, r0
 800674a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674c:	e009      	b.n	8006762 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674e:	f7fd fda5 	bl	800429c <HAL_GetTick>
 8006752:	0002      	movs	r2, r0
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	4a2f      	ldr	r2, [pc, #188]	; (8006818 <HAL_RCC_ClockConfig+0x1f4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e054      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2238      	movs	r2, #56	; 0x38
 8006768:	401a      	ands	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	429a      	cmp	r2, r3
 8006772:	d1ec      	bne.n	800674e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2207      	movs	r2, #7
 800677a:	4013      	ands	r3, r2
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d21e      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b24      	ldr	r3, [pc, #144]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2207      	movs	r2, #7
 8006788:	4393      	bics	r3, r2
 800678a:	0019      	movs	r1, r3
 800678c:	4b21      	ldr	r3, [pc, #132]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006794:	f7fd fd82 	bl	800429c <HAL_GetTick>
 8006798:	0003      	movs	r3, r0
 800679a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800679c:	e009      	b.n	80067b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800679e:	f7fd fd7d 	bl	800429c <HAL_GetTick>
 80067a2:	0002      	movs	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_RCC_ClockConfig+0x1f4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e02c      	b.n	800680c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_RCC_ClockConfig+0x1f0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2207      	movs	r2, #7
 80067b8:	4013      	ands	r3, r2
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2204      	movs	r2, #4
 80067c6:	4013      	ands	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <HAL_RCC_ClockConfig+0x200>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	0019      	movs	r1, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	4b10      	ldr	r3, [pc, #64]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80067de:	f000 f829 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 80067e2:	0001      	movs	r1, r0
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <HAL_RCC_ClockConfig+0x1f8>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	0a1b      	lsrs	r3, r3, #8
 80067ea:	220f      	movs	r2, #15
 80067ec:	401a      	ands	r2, r3
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <HAL_RCC_ClockConfig+0x204>)
 80067f0:	0092      	lsls	r2, r2, #2
 80067f2:	58d3      	ldr	r3, [r2, r3]
 80067f4:	221f      	movs	r2, #31
 80067f6:	4013      	ands	r3, r2
 80067f8:	000a      	movs	r2, r1
 80067fa:	40da      	lsrs	r2, r3
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCC_ClockConfig+0x208>)
 80067fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCC_ClockConfig+0x20c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	0018      	movs	r0, r3
 8006806:	f7fd fced 	bl	80041e4 <HAL_InitTick>
 800680a:	0003      	movs	r3, r0
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b004      	add	sp, #16
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40022000 	.word	0x40022000
 8006818:	00001388 	.word	0x00001388
 800681c:	40021000 	.word	0x40021000
 8006820:	fffff0ff 	.word	0xfffff0ff
 8006824:	ffff8fff 	.word	0xffff8fff
 8006828:	0800ba44 	.word	0x0800ba44
 800682c:	20000000 	.word	0x20000000
 8006830:	20000004 	.word	0x20000004

08006834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800683a:	4b3c      	ldr	r3, [pc, #240]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2238      	movs	r2, #56	; 0x38
 8006840:	4013      	ands	r3, r2
 8006842:	d10f      	bne.n	8006864 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006844:	4b39      	ldr	r3, [pc, #228]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	0adb      	lsrs	r3, r3, #11
 800684a:	2207      	movs	r2, #7
 800684c:	4013      	ands	r3, r2
 800684e:	2201      	movs	r2, #1
 8006850:	409a      	lsls	r2, r3
 8006852:	0013      	movs	r3, r2
 8006854:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	4835      	ldr	r0, [pc, #212]	; (8006930 <HAL_RCC_GetSysClockFreq+0xfc>)
 800685a:	f7f9 fc6f 	bl	800013c <__udivsi3>
 800685e:	0003      	movs	r3, r0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	e05d      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006864:	4b31      	ldr	r3, [pc, #196]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2238      	movs	r2, #56	; 0x38
 800686a:	4013      	ands	r3, r2
 800686c:	2b08      	cmp	r3, #8
 800686e:	d102      	bne.n	8006876 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006870:	4b30      	ldr	r3, [pc, #192]	; (8006934 <HAL_RCC_GetSysClockFreq+0x100>)
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e054      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2238      	movs	r2, #56	; 0x38
 800687c:	4013      	ands	r3, r2
 800687e:	2b10      	cmp	r3, #16
 8006880:	d138      	bne.n	80068f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006882:	4b2a      	ldr	r3, [pc, #168]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2203      	movs	r2, #3
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800688c:	4b27      	ldr	r3, [pc, #156]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	2207      	movs	r2, #7
 8006894:	4013      	ands	r3, r2
 8006896:	3301      	adds	r3, #1
 8006898:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d10d      	bne.n	80068bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4824      	ldr	r0, [pc, #144]	; (8006934 <HAL_RCC_GetSysClockFreq+0x100>)
 80068a4:	f7f9 fc4a 	bl	800013c <__udivsi3>
 80068a8:	0003      	movs	r3, r0
 80068aa:	0019      	movs	r1, r3
 80068ac:	4b1f      	ldr	r3, [pc, #124]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	227f      	movs	r2, #127	; 0x7f
 80068b4:	4013      	ands	r3, r2
 80068b6:	434b      	muls	r3, r1
 80068b8:	617b      	str	r3, [r7, #20]
        break;
 80068ba:	e00d      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	481c      	ldr	r0, [pc, #112]	; (8006930 <HAL_RCC_GetSysClockFreq+0xfc>)
 80068c0:	f7f9 fc3c 	bl	800013c <__udivsi3>
 80068c4:	0003      	movs	r3, r0
 80068c6:	0019      	movs	r1, r3
 80068c8:	4b18      	ldr	r3, [pc, #96]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	0a1b      	lsrs	r3, r3, #8
 80068ce:	227f      	movs	r2, #127	; 0x7f
 80068d0:	4013      	ands	r3, r2
 80068d2:	434b      	muls	r3, r1
 80068d4:	617b      	str	r3, [r7, #20]
        break;
 80068d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	0f5b      	lsrs	r3, r3, #29
 80068de:	2207      	movs	r2, #7
 80068e0:	4013      	ands	r3, r2
 80068e2:	3301      	adds	r3, #1
 80068e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	f7f9 fc27 	bl	800013c <__udivsi3>
 80068ee:	0003      	movs	r3, r0
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e015      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80068f4:	4b0d      	ldr	r3, [pc, #52]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2238      	movs	r2, #56	; 0x38
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d103      	bne.n	8006908 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	e00b      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <HAL_RCC_GetSysClockFreq+0xf8>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2238      	movs	r2, #56	; 0x38
 800690e:	4013      	ands	r3, r2
 8006910:	2b18      	cmp	r3, #24
 8006912:	d103      	bne.n	800691c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006914:	23fa      	movs	r3, #250	; 0xfa
 8006916:	01db      	lsls	r3, r3, #7
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	e001      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006920:	693b      	ldr	r3, [r7, #16]
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b006      	add	sp, #24
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	40021000 	.word	0x40021000
 8006930:	00f42400 	.word	0x00f42400
 8006934:	007a1200 	.word	0x007a1200

08006938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800693c:	4b02      	ldr	r3, [pc, #8]	; (8006948 <HAL_RCC_GetHCLKFreq+0x10>)
 800693e:	681b      	ldr	r3, [r3, #0]
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	20000000 	.word	0x20000000

0800694c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800694c:	b5b0      	push	{r4, r5, r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006950:	f7ff fff2 	bl	8006938 <HAL_RCC_GetHCLKFreq>
 8006954:	0004      	movs	r4, r0
 8006956:	f7ff fb3f 	bl	8005fd8 <LL_RCC_GetAPB1Prescaler>
 800695a:	0003      	movs	r3, r0
 800695c:	0b1a      	lsrs	r2, r3, #12
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	58d3      	ldr	r3, [r2, r3]
 8006964:	221f      	movs	r2, #31
 8006966:	4013      	ands	r3, r2
 8006968:	40dc      	lsrs	r4, r3
 800696a:	0023      	movs	r3, r4
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	bdb0      	pop	{r4, r5, r7, pc}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	0800ba84 	.word	0x0800ba84

08006978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006980:	2313      	movs	r3, #19
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006988:	2312      	movs	r3, #18
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	029b      	lsls	r3, r3, #10
 8006998:	4013      	ands	r3, r2
 800699a:	d100      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800699c:	e0a3      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800699e:	2011      	movs	r0, #17
 80069a0:	183b      	adds	r3, r7, r0
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069a6:	4bc3      	ldr	r3, [pc, #780]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80069a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	055b      	lsls	r3, r3, #21
 80069ae:	4013      	ands	r3, r2
 80069b0:	d110      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b2:	4bc0      	ldr	r3, [pc, #768]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80069b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b6:	4bbf      	ldr	r3, [pc, #764]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80069b8:	2180      	movs	r1, #128	; 0x80
 80069ba:	0549      	lsls	r1, r1, #21
 80069bc:	430a      	orrs	r2, r1
 80069be:	63da      	str	r2, [r3, #60]	; 0x3c
 80069c0:	4bbc      	ldr	r3, [pc, #752]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80069c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	055b      	lsls	r3, r3, #21
 80069c8:	4013      	ands	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ce:	183b      	adds	r3, r7, r0
 80069d0:	2201      	movs	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d4:	4bb8      	ldr	r3, [pc, #736]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4bb7      	ldr	r3, [pc, #732]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80069da:	2180      	movs	r1, #128	; 0x80
 80069dc:	0049      	lsls	r1, r1, #1
 80069de:	430a      	orrs	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069e2:	f7fd fc5b 	bl	800429c <HAL_GetTick>
 80069e6:	0003      	movs	r3, r0
 80069e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ea:	e00b      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ec:	f7fd fc56 	bl	800429c <HAL_GetTick>
 80069f0:	0002      	movs	r2, r0
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d904      	bls.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80069fa:	2313      	movs	r3, #19
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	2203      	movs	r2, #3
 8006a00:	701a      	strb	r2, [r3, #0]
        break;
 8006a02:	e005      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a04:	4bac      	ldr	r3, [pc, #688]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	2380      	movs	r3, #128	; 0x80
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d0ed      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006a10:	2313      	movs	r3, #19
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d154      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a1a:	4ba6      	ldr	r3, [pc, #664]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a1e:	23c0      	movs	r3, #192	; 0xc0
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4013      	ands	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d019      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d014      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a36:	4b9f      	ldr	r3, [pc, #636]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	4aa0      	ldr	r2, [pc, #640]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a40:	4b9c      	ldr	r3, [pc, #624]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a44:	4b9b      	ldr	r3, [pc, #620]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	0249      	lsls	r1, r1, #9
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a4e:	4b99      	ldr	r3, [pc, #612]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a52:	4b98      	ldr	r3, [pc, #608]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a54:	499a      	ldr	r1, [pc, #616]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006a56:	400a      	ands	r2, r1
 8006a58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a5a:	4b96      	ldr	r3, [pc, #600]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2201      	movs	r2, #1
 8006a64:	4013      	ands	r3, r2
 8006a66:	d016      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fd fc18 	bl	800429c <HAL_GetTick>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a70:	e00c      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a72:	f7fd fc13 	bl	800429c <HAL_GetTick>
 8006a76:	0002      	movs	r2, r0
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	4a91      	ldr	r2, [pc, #580]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d904      	bls.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006a82:	2313      	movs	r3, #19
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	2203      	movs	r2, #3
 8006a88:	701a      	strb	r2, [r3, #0]
            break;
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8c:	4b89      	ldr	r3, [pc, #548]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	2202      	movs	r2, #2
 8006a92:	4013      	ands	r3, r2
 8006a94:	d0ed      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006a96:	2313      	movs	r3, #19
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa0:	4b84      	ldr	r3, [pc, #528]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa4:	4a85      	ldr	r2, [pc, #532]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aae:	4b81      	ldr	r3, [pc, #516]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ab4:	e00c      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ab6:	2312      	movs	r3, #18
 8006ab8:	18fb      	adds	r3, r7, r3
 8006aba:	2213      	movs	r2, #19
 8006abc:	18ba      	adds	r2, r7, r2
 8006abe:	7812      	ldrb	r2, [r2, #0]
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	2312      	movs	r3, #18
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2213      	movs	r2, #19
 8006aca:	18ba      	adds	r2, r7, r2
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ad0:	2311      	movs	r3, #17
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ada:	4b76      	ldr	r3, [pc, #472]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ade:	4b75      	ldr	r3, [pc, #468]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006ae0:	4979      	ldr	r1, [pc, #484]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006ae2:	400a      	ands	r2, r1
 8006ae4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	4013      	ands	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006af0:	4b70      	ldr	r3, [pc, #448]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af4:	2203      	movs	r2, #3
 8006af6:	4393      	bics	r3, r2
 8006af8:	0019      	movs	r1, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	4b6d      	ldr	r3, [pc, #436]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b00:	430a      	orrs	r2, r1
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b0e:	4b69      	ldr	r3, [pc, #420]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	220c      	movs	r2, #12
 8006b14:	4393      	bics	r3, r2
 8006b16:	0019      	movs	r1, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	4b65      	ldr	r3, [pc, #404]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2210      	movs	r2, #16
 8006b28:	4013      	ands	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b2c:	4b61      	ldr	r3, [pc, #388]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	4a66      	ldr	r2, [pc, #408]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	0019      	movs	r1, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	2380      	movs	r3, #128	; 0x80
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b4c:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	4a5f      	ldr	r2, [pc, #380]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	0019      	movs	r1, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	4b56      	ldr	r3, [pc, #344]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b6c:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	4a58      	ldr	r2, [pc, #352]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	0019      	movs	r1, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	4b4e      	ldr	r3, [pc, #312]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2220      	movs	r2, #32
 8006b86:	4013      	ands	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b8a:	4b4a      	ldr	r3, [pc, #296]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	4a52      	ldr	r2, [pc, #328]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	0019      	movs	r1, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	4b46      	ldr	r3, [pc, #280]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	2380      	movs	r3, #128	; 0x80
 8006ba4:	01db      	lsls	r3, r3, #7
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d015      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	0899      	lsrs	r1, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1a      	ldr	r2, [r3, #32]
 8006bb6:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1a      	ldr	r2, [r3, #32]
 8006bc0:	2380      	movs	r3, #128	; 0x80
 8006bc2:	05db      	lsls	r3, r3, #23
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d106      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006bc8:	4b3a      	ldr	r3, [pc, #232]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006bce:	2180      	movs	r1, #128	; 0x80
 8006bd0:	0249      	lsls	r1, r1, #9
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	2380      	movs	r3, #128	; 0x80
 8006bdc:	031b      	lsls	r3, r3, #12
 8006bde:	4013      	ands	r3, r2
 8006be0:	d009      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006be2:	4b34      	ldr	r3, [pc, #208]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	2240      	movs	r2, #64	; 0x40
 8006be8:	4393      	bics	r3, r2
 8006bea:	0019      	movs	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bf0:	4b30      	ldr	r3, [pc, #192]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	039b      	lsls	r3, r3, #14
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d016      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	4a35      	ldr	r2, [pc, #212]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c10:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c12:	430a      	orrs	r2, r1
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	03db      	lsls	r3, r3, #15
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d106      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	4b23      	ldr	r3, [pc, #140]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	0449      	lsls	r1, r1, #17
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	03db      	lsls	r3, r3, #15
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d016      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	4a27      	ldr	r2, [pc, #156]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	0019      	movs	r1, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4a:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	045b      	lsls	r3, r3, #17
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d106      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006c5c:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c62:	2180      	movs	r1, #128	; 0x80
 8006c64:	0449      	lsls	r1, r1, #17
 8006c66:	430a      	orrs	r2, r1
 8006c68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	4013      	ands	r3, r2
 8006c74:	d016      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006c76:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	0019      	movs	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c86:	430a      	orrs	r2, r1
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	2380      	movs	r3, #128	; 0x80
 8006c90:	01db      	lsls	r3, r3, #7
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d106      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006c96:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	0249      	lsls	r1, r1, #9
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006ca4:	2312      	movs	r3, #18
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	781b      	ldrb	r3, [r3, #0]
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b006      	add	sp, #24
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	40007000 	.word	0x40007000
 8006cbc:	fffffcff 	.word	0xfffffcff
 8006cc0:	fffeffff 	.word	0xfffeffff
 8006cc4:	00001388 	.word	0x00001388
 8006cc8:	efffffff 	.word	0xefffffff
 8006ccc:	fffff3ff 	.word	0xfffff3ff
 8006cd0:	fff3ffff 	.word	0xfff3ffff
 8006cd4:	ffcfffff 	.word	0xffcfffff
 8006cd8:	ffffcfff 	.word	0xffffcfff
 8006cdc:	ffbfffff 	.word	0xffbfffff
 8006ce0:	feffffff 	.word	0xfeffffff
 8006ce4:	ffff3fff 	.word	0xffff3fff

08006ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e0a8      	b.n	8006e4c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	2382      	movs	r3, #130	; 0x82
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d009      	beq.n	8006d22 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	61da      	str	r2, [r3, #28]
 8006d14:	e005      	b.n	8006d22 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	225d      	movs	r2, #93	; 0x5d
 8006d2c:	5c9b      	ldrb	r3, [r3, r2]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d107      	bne.n	8006d44 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	225c      	movs	r2, #92	; 0x5c
 8006d38:	2100      	movs	r1, #0
 8006d3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7fd f862 	bl	8003e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	225d      	movs	r2, #93	; 0x5d
 8006d48:	2102      	movs	r1, #2
 8006d4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2140      	movs	r1, #64	; 0x40
 8006d58:	438a      	bics	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	23e0      	movs	r3, #224	; 0xe0
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d902      	bls.n	8006d6e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	e002      	b.n	8006d74 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	015b      	lsls	r3, r3, #5
 8006d72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	23f0      	movs	r3, #240	; 0xf0
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d008      	beq.n	8006d92 <HAL_SPI_Init+0xaa>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	23e0      	movs	r3, #224	; 0xe0
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d002      	beq.n	8006d92 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	2382      	movs	r3, #130	; 0x82
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	2384      	movs	r3, #132	; 0x84
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	400b      	ands	r3, r1
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2102      	movs	r1, #2
 8006dae:	400b      	ands	r3, r1
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2101      	movs	r1, #1
 8006db8:	400b      	ands	r3, r1
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6999      	ldr	r1, [r3, #24]
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	400b      	ands	r3, r1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2138      	movs	r1, #56	; 0x38
 8006dce:	400b      	ands	r3, r1
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	2180      	movs	r1, #128	; 0x80
 8006dd8:	400b      	ands	r3, r1
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	0011      	movs	r1, r2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	019b      	lsls	r3, r3, #6
 8006de6:	401a      	ands	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	2204      	movs	r2, #4
 8006df8:	401a      	ands	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2110      	movs	r1, #16
 8006e00:	400b      	ands	r3, r1
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e08:	2108      	movs	r1, #8
 8006e0a:	400b      	ands	r3, r1
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68d9      	ldr	r1, [r3, #12]
 8006e12:	23f0      	movs	r3, #240	; 0xf0
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	400b      	ands	r3, r1
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	0011      	movs	r1, r2
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	2380      	movs	r3, #128	; 0x80
 8006e20:	015b      	lsls	r3, r3, #5
 8006e22:	401a      	ands	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4907      	ldr	r1, [pc, #28]	; (8006e54 <HAL_SPI_Init+0x16c>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	225d      	movs	r2, #93	; 0x5d
 8006e46:	2101      	movs	r1, #1
 8006e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b004      	add	sp, #16
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	fffff7ff 	.word	0xfffff7ff

08006e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e04a      	b.n	8006f00 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	223d      	movs	r2, #61	; 0x3d
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d107      	bne.n	8006e86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	223c      	movs	r2, #60	; 0x3c
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7fd f82f 	bl	8003ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	223d      	movs	r2, #61	; 0x3d
 8006e8a:	2102      	movs	r1, #2
 8006e8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3304      	adds	r3, #4
 8006e96:	0019      	movs	r1, r3
 8006e98:	0010      	movs	r0, r2
 8006e9a:	f000 f967 	bl	800716c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2248      	movs	r2, #72	; 0x48
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	223e      	movs	r2, #62	; 0x3e
 8006eaa:	2101      	movs	r1, #1
 8006eac:	5499      	strb	r1, [r3, r2]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	223f      	movs	r2, #63	; 0x3f
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	5499      	strb	r1, [r3, r2]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2240      	movs	r2, #64	; 0x40
 8006eba:	2101      	movs	r1, #1
 8006ebc:	5499      	strb	r1, [r3, r2]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2241      	movs	r2, #65	; 0x41
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	5499      	strb	r1, [r3, r2]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2242      	movs	r2, #66	; 0x42
 8006eca:	2101      	movs	r1, #1
 8006ecc:	5499      	strb	r1, [r3, r2]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2243      	movs	r2, #67	; 0x43
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2244      	movs	r2, #68	; 0x44
 8006eda:	2101      	movs	r1, #1
 8006edc:	5499      	strb	r1, [r3, r2]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2245      	movs	r2, #69	; 0x45
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	5499      	strb	r1, [r3, r2]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2246      	movs	r2, #70	; 0x46
 8006eea:	2101      	movs	r1, #1
 8006eec:	5499      	strb	r1, [r3, r2]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2247      	movs	r2, #71	; 0x47
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	223d      	movs	r2, #61	; 0x3d
 8006efa:	2101      	movs	r1, #1
 8006efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	0018      	movs	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b002      	add	sp, #8
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	223d      	movs	r2, #61	; 0x3d
 8006f14:	5c9b      	ldrb	r3, [r3, r2]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d001      	beq.n	8006f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e042      	b.n	8006fa6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	223d      	movs	r2, #61	; 0x3d
 8006f24:	2102      	movs	r1, #2
 8006f26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2101      	movs	r1, #1
 8006f34:	430a      	orrs	r2, r1
 8006f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a1c      	ldr	r2, [pc, #112]	; (8006fb0 <HAL_TIM_Base_Start_IT+0xa8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <HAL_TIM_Base_Start_IT+0x5a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	2380      	movs	r3, #128	; 0x80
 8006f48:	05db      	lsls	r3, r3, #23
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d009      	beq.n	8006f62 <HAL_TIM_Base_Start_IT+0x5a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <HAL_TIM_Base_Start_IT+0xac>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d004      	beq.n	8006f62 <HAL_TIM_Base_Start_IT+0x5a>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d116      	bne.n	8006f90 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <HAL_TIM_Base_Start_IT+0xb4>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b06      	cmp	r3, #6
 8006f72:	d016      	beq.n	8006fa2 <HAL_TIM_Base_Start_IT+0x9a>
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	025b      	lsls	r3, r3, #9
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d011      	beq.n	8006fa2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2101      	movs	r1, #1
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8e:	e008      	b.n	8006fa2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e000      	b.n	8006fa4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b004      	add	sp, #16
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40000400 	.word	0x40000400
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	00010007 	.word	0x00010007

08006fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fca:	230f      	movs	r3, #15
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	223c      	movs	r2, #60	; 0x3c
 8006fd6:	5c9b      	ldrb	r3, [r3, r2]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIM_ConfigClockSource+0x20>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e0bc      	b.n	800715a <HAL_TIM_ConfigClockSource+0x19a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	223c      	movs	r2, #60	; 0x3c
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	223d      	movs	r2, #61	; 0x3d
 8006fec:	2102      	movs	r1, #2
 8006fee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a5a      	ldr	r2, [pc, #360]	; (8007164 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4a59      	ldr	r2, [pc, #356]	; (8007168 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007004:	4013      	ands	r3, r2
 8007006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2280      	movs	r2, #128	; 0x80
 8007016:	0192      	lsls	r2, r2, #6
 8007018:	4293      	cmp	r3, r2
 800701a:	d040      	beq.n	800709e <HAL_TIM_ConfigClockSource+0xde>
 800701c:	2280      	movs	r2, #128	; 0x80
 800701e:	0192      	lsls	r2, r2, #6
 8007020:	4293      	cmp	r3, r2
 8007022:	d900      	bls.n	8007026 <HAL_TIM_ConfigClockSource+0x66>
 8007024:	e088      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	0152      	lsls	r2, r2, #5
 800702a:	4293      	cmp	r3, r2
 800702c:	d100      	bne.n	8007030 <HAL_TIM_ConfigClockSource+0x70>
 800702e:	e088      	b.n	8007142 <HAL_TIM_ConfigClockSource+0x182>
 8007030:	2280      	movs	r2, #128	; 0x80
 8007032:	0152      	lsls	r2, r2, #5
 8007034:	4293      	cmp	r3, r2
 8007036:	d900      	bls.n	800703a <HAL_TIM_ConfigClockSource+0x7a>
 8007038:	e07e      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 800703a:	2b70      	cmp	r3, #112	; 0x70
 800703c:	d018      	beq.n	8007070 <HAL_TIM_ConfigClockSource+0xb0>
 800703e:	d900      	bls.n	8007042 <HAL_TIM_ConfigClockSource+0x82>
 8007040:	e07a      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 8007042:	2b60      	cmp	r3, #96	; 0x60
 8007044:	d04f      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x126>
 8007046:	d900      	bls.n	800704a <HAL_TIM_ConfigClockSource+0x8a>
 8007048:	e076      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 800704a:	2b50      	cmp	r3, #80	; 0x50
 800704c:	d03b      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x106>
 800704e:	d900      	bls.n	8007052 <HAL_TIM_ConfigClockSource+0x92>
 8007050:	e072      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d057      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x146>
 8007056:	d900      	bls.n	800705a <HAL_TIM_ConfigClockSource+0x9a>
 8007058:	e06e      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d063      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x166>
 800705e:	d86b      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 8007060:	2b20      	cmp	r3, #32
 8007062:	d060      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x166>
 8007064:	d868      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d05d      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x166>
 800706a:	2b10      	cmp	r3, #16
 800706c:	d05b      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x166>
 800706e:	e063      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	6899      	ldr	r1, [r3, #8]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f000 f970 	bl	8007364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2277      	movs	r2, #119	; 0x77
 8007090:	4313      	orrs	r3, r2
 8007092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	609a      	str	r2, [r3, #8]
      break;
 800709c:	e052      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6899      	ldr	r1, [r3, #8]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f000 f959 	bl	8007364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2180      	movs	r1, #128	; 0x80
 80070be:	01c9      	lsls	r1, r1, #7
 80070c0:	430a      	orrs	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
      break;
 80070c4:	e03e      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6859      	ldr	r1, [r3, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	001a      	movs	r2, r3
 80070d4:	f000 f8ca 	bl	800726c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2150      	movs	r1, #80	; 0x50
 80070de:	0018      	movs	r0, r3
 80070e0:	f000 f924 	bl	800732c <TIM_ITRx_SetConfig>
      break;
 80070e4:	e02e      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	001a      	movs	r2, r3
 80070f4:	f000 f8e8 	bl	80072c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2160      	movs	r1, #96	; 0x60
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 f914 	bl	800732c <TIM_ITRx_SetConfig>
      break;
 8007104:	e01e      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6859      	ldr	r1, [r3, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	001a      	movs	r2, r3
 8007114:	f000 f8aa 	bl	800726c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2140      	movs	r1, #64	; 0x40
 800711e:	0018      	movs	r0, r3
 8007120:	f000 f904 	bl	800732c <TIM_ITRx_SetConfig>
      break;
 8007124:	e00e      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	0019      	movs	r1, r3
 8007130:	0010      	movs	r0, r2
 8007132:	f000 f8fb 	bl	800732c <TIM_ITRx_SetConfig>
      break;
 8007136:	e005      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007138:	230f      	movs	r3, #15
 800713a:	18fb      	adds	r3, r7, r3
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
      break;
 8007140:	e000      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007142:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	223d      	movs	r2, #61	; 0x3d
 8007148:	2101      	movs	r1, #1
 800714a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	223c      	movs	r2, #60	; 0x3c
 8007150:	2100      	movs	r1, #0
 8007152:	5499      	strb	r1, [r3, r2]

  return status;
 8007154:	230f      	movs	r3, #15
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	781b      	ldrb	r3, [r3, #0]
}
 800715a:	0018      	movs	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	b004      	add	sp, #16
 8007160:	bd80      	pop	{r7, pc}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	ffceff88 	.word	0xffceff88
 8007168:	ffff00ff 	.word	0xffff00ff

0800716c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a34      	ldr	r2, [pc, #208]	; (8007250 <TIM_Base_SetConfig+0xe4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d008      	beq.n	8007196 <TIM_Base_SetConfig+0x2a>
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	05db      	lsls	r3, r3, #23
 800718a:	429a      	cmp	r2, r3
 800718c:	d003      	beq.n	8007196 <TIM_Base_SetConfig+0x2a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a30      	ldr	r2, [pc, #192]	; (8007254 <TIM_Base_SetConfig+0xe8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2270      	movs	r2, #112	; 0x70
 800719a:	4393      	bics	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a29      	ldr	r2, [pc, #164]	; (8007250 <TIM_Base_SetConfig+0xe4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d018      	beq.n	80071e2 <TIM_Base_SetConfig+0x76>
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	05db      	lsls	r3, r3, #23
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d013      	beq.n	80071e2 <TIM_Base_SetConfig+0x76>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a25      	ldr	r2, [pc, #148]	; (8007254 <TIM_Base_SetConfig+0xe8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00f      	beq.n	80071e2 <TIM_Base_SetConfig+0x76>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a24      	ldr	r2, [pc, #144]	; (8007258 <TIM_Base_SetConfig+0xec>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00b      	beq.n	80071e2 <TIM_Base_SetConfig+0x76>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a23      	ldr	r2, [pc, #140]	; (800725c <TIM_Base_SetConfig+0xf0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_Base_SetConfig+0x76>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a22      	ldr	r2, [pc, #136]	; (8007260 <TIM_Base_SetConfig+0xf4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_Base_SetConfig+0x76>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a21      	ldr	r2, [pc, #132]	; (8007264 <TIM_Base_SetConfig+0xf8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d108      	bne.n	80071f4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a20      	ldr	r2, [pc, #128]	; (8007268 <TIM_Base_SetConfig+0xfc>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2280      	movs	r2, #128	; 0x80
 80071f8:	4393      	bics	r3, r2
 80071fa:	001a      	movs	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a0c      	ldr	r2, [pc, #48]	; (8007250 <TIM_Base_SetConfig+0xe4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00b      	beq.n	800723a <TIM_Base_SetConfig+0xce>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <TIM_Base_SetConfig+0xf0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <TIM_Base_SetConfig+0xce>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a0c      	ldr	r2, [pc, #48]	; (8007260 <TIM_Base_SetConfig+0xf4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_Base_SetConfig+0xce>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <TIM_Base_SetConfig+0xf8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d103      	bne.n	8007242 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	615a      	str	r2, [r3, #20]
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40000400 	.word	0x40000400
 8007258:	40002000 	.word	0x40002000
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400
 8007264:	40014800 	.word	0x40014800
 8007268:	fffffcff 	.word	0xfffffcff

0800726c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	2201      	movs	r2, #1
 8007284:	4393      	bics	r3, r2
 8007286:	001a      	movs	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	22f0      	movs	r2, #240	; 0xf0
 8007296:	4393      	bics	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	220a      	movs	r2, #10
 80072a8:	4393      	bics	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	46c0      	nop			; (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b006      	add	sp, #24
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	2210      	movs	r2, #16
 80072da:	4393      	bics	r3, r2
 80072dc:	001a      	movs	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <TIM_TI2_ConfigInputStage+0x60>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	031b      	lsls	r3, r3, #12
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	22a0      	movs	r2, #160	; 0xa0
 8007304:	4393      	bics	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	46bd      	mov	sp, r7
 8007322:	b006      	add	sp, #24
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	ffff0fff 	.word	0xffff0fff

0800732c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4a08      	ldr	r2, [pc, #32]	; (8007360 <TIM_ITRx_SetConfig+0x34>)
 8007340:	4013      	ands	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	2207      	movs	r2, #7
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	609a      	str	r2, [r3, #8]
}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	46bd      	mov	sp, r7
 800735a:	b004      	add	sp, #16
 800735c:	bd80      	pop	{r7, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	ffcfff8f 	.word	0xffcfff8f

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <TIM_ETR_SetConfig+0x3c>)
 800737c:	4013      	ands	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	46c0      	nop			; (mov r8, r8)
 800739a:	46bd      	mov	sp, r7
 800739c:	b006      	add	sp, #24
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	ffff00ff 	.word	0xffff00ff

080073a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	223c      	movs	r2, #60	; 0x3c
 80073b2:	5c9b      	ldrb	r3, [r3, r2]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e055      	b.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	223c      	movs	r2, #60	; 0x3c
 80073c0:	2101      	movs	r1, #1
 80073c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	223d      	movs	r2, #61	; 0x3d
 80073c8:	2102      	movs	r1, #2
 80073ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a23      	ldr	r2, [pc, #140]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d108      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4a22      	ldr	r2, [pc, #136]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2270      	movs	r2, #112	; 0x70
 80073fc:	4393      	bics	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a16      	ldr	r2, [pc, #88]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00f      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	05db      	lsls	r3, r3, #23
 8007424:	429a      	cmp	r2, r3
 8007426:	d009      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a12      	ldr	r2, [pc, #72]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a11      	ldr	r2, [pc, #68]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2280      	movs	r2, #128	; 0x80
 8007440:	4393      	bics	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	223d      	movs	r2, #61	; 0x3d
 800745a:	2101      	movs	r1, #1
 800745c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	223c      	movs	r2, #60	; 0x3c
 8007462:	2100      	movs	r1, #0
 8007464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	0018      	movs	r0, r3
 800746a:	46bd      	mov	sp, r7
 800746c:	b004      	add	sp, #16
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40012c00 	.word	0x40012c00
 8007474:	ff0fffff 	.word	0xff0fffff
 8007478:	40000400 	.word	0x40000400
 800747c:	40014000 	.word	0x40014000

08007480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e046      	b.n	8007520 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2288      	movs	r2, #136	; 0x88
 8007496:	589b      	ldr	r3, [r3, r2]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d107      	bne.n	80074ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2284      	movs	r2, #132	; 0x84
 80074a0:	2100      	movs	r1, #0
 80074a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0018      	movs	r0, r3
 80074a8:	f7fc fb7a 	bl	8003ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2288      	movs	r2, #136	; 0x88
 80074b0:	2124      	movs	r1, #36	; 0x24
 80074b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2101      	movs	r1, #1
 80074c0:	438a      	bics	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	0018      	movs	r0, r3
 80074c8:	f000 fc6c 	bl	8007da4 <UART_SetConfig>
 80074cc:	0003      	movs	r3, r0
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e024      	b.n	8007520 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	0018      	movs	r0, r3
 80074e2:	f000 ff1d 	bl	8008320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	490d      	ldr	r1, [pc, #52]	; (8007528 <HAL_UART_Init+0xa8>)
 80074f2:	400a      	ands	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	212a      	movs	r1, #42	; 0x2a
 8007502:	438a      	bics	r2, r1
 8007504:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2101      	movs	r1, #1
 8007512:	430a      	orrs	r2, r1
 8007514:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	0018      	movs	r0, r3
 800751a:	f000 ffb5 	bl	8008488 <UART_CheckIdleState>
 800751e:	0003      	movs	r3, r0
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b002      	add	sp, #8
 8007526:	bd80      	pop	{r7, pc}
 8007528:	ffffb7ff 	.word	0xffffb7ff

0800752c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e04e      	b.n	80075dc <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2288      	movs	r2, #136	; 0x88
 8007542:	589b      	ldr	r3, [r3, r2]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2284      	movs	r2, #132	; 0x84
 800754c:	2100      	movs	r1, #0
 800754e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	0018      	movs	r0, r3
 8007554:	f7fc fb24 	bl	8003ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2288      	movs	r2, #136	; 0x88
 800755c:	2124      	movs	r1, #36	; 0x24
 800755e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2101      	movs	r1, #1
 800756c:	438a      	bics	r2, r1
 800756e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	0018      	movs	r0, r3
 8007574:	f000 fc16 	bl	8007da4 <UART_SetConfig>
 8007578:	0003      	movs	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e02c      	b.n	80075dc <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	0018      	movs	r0, r3
 800758e:	f000 fec7 	bl	8008320 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4911      	ldr	r1, [pc, #68]	; (80075e4 <HAL_HalfDuplex_Init+0xb8>)
 800759e:	400a      	ands	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2122      	movs	r1, #34	; 0x22
 80075ae:	438a      	bics	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2108      	movs	r1, #8
 80075be:	430a      	orrs	r2, r1
 80075c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2101      	movs	r1, #1
 80075ce:	430a      	orrs	r2, r1
 80075d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 ff57 	bl	8008488 <UART_CheckIdleState>
 80075da:	0003      	movs	r3, r0
}
 80075dc:	0018      	movs	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	b002      	add	sp, #8
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	ffffb7ff 	.word	0xffffb7ff

080075e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	1dbb      	adds	r3, r7, #6
 80075f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2288      	movs	r2, #136	; 0x88
 80075fc:	589b      	ldr	r3, [r3, r2]
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d000      	beq.n	8007604 <HAL_UART_Transmit+0x1c>
 8007602:	e088      	b.n	8007716 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_UART_Transmit+0x2a>
 800760a:	1dbb      	adds	r3, r7, #6
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e080      	b.n	8007718 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	2380      	movs	r3, #128	; 0x80
 800761c:	015b      	lsls	r3, r3, #5
 800761e:	429a      	cmp	r2, r3
 8007620:	d109      	bne.n	8007636 <HAL_UART_Transmit+0x4e>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2201      	movs	r2, #1
 800762e:	4013      	ands	r3, r2
 8007630:	d001      	beq.n	8007636 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e070      	b.n	8007718 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2290      	movs	r2, #144	; 0x90
 800763a:	2100      	movs	r1, #0
 800763c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2288      	movs	r2, #136	; 0x88
 8007642:	2121      	movs	r1, #33	; 0x21
 8007644:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007646:	f7fc fe29 	bl	800429c <HAL_GetTick>
 800764a:	0003      	movs	r3, r0
 800764c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1dba      	adds	r2, r7, #6
 8007652:	2154      	movs	r1, #84	; 0x54
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	1dba      	adds	r2, r7, #6
 800765c:	2156      	movs	r1, #86	; 0x56
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	2380      	movs	r3, #128	; 0x80
 8007668:	015b      	lsls	r3, r3, #5
 800766a:	429a      	cmp	r2, r3
 800766c:	d108      	bne.n	8007680 <HAL_UART_Transmit+0x98>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e003      	b.n	8007688 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007688:	e02c      	b.n	80076e4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	0013      	movs	r3, r2
 8007694:	2200      	movs	r2, #0
 8007696:	2180      	movs	r1, #128	; 0x80
 8007698:	f000 ff44 	bl	8008524 <UART_WaitOnFlagUntilTimeout>
 800769c:	1e03      	subs	r3, r0, #0
 800769e:	d001      	beq.n	80076a4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e039      	b.n	8007718 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	001a      	movs	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	05d2      	lsls	r2, r2, #23
 80076b6:	0dd2      	lsrs	r2, r2, #23
 80076b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	3302      	adds	r3, #2
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	e007      	b.n	80076d2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2256      	movs	r2, #86	; 0x56
 80076d6:	5a9b      	ldrh	r3, [r3, r2]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b299      	uxth	r1, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2256      	movs	r2, #86	; 0x56
 80076e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2256      	movs	r2, #86	; 0x56
 80076e8:	5a9b      	ldrh	r3, [r3, r2]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1cc      	bne.n	800768a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	0013      	movs	r3, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	2140      	movs	r1, #64	; 0x40
 80076fe:	f000 ff11 	bl	8008524 <UART_WaitOnFlagUntilTimeout>
 8007702:	1e03      	subs	r3, r0, #0
 8007704:	d001      	beq.n	800770a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e006      	b.n	8007718 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2288      	movs	r2, #136	; 0x88
 800770e:	2120      	movs	r1, #32
 8007710:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	e000      	b.n	8007718 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007716:	2302      	movs	r3, #2
  }
}
 8007718:	0018      	movs	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	b008      	add	sp, #32
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007720:	b5b0      	push	{r4, r5, r7, lr}
 8007722:	b0aa      	sub	sp, #168	; 0xa8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	22a4      	movs	r2, #164	; 0xa4
 8007730:	18b9      	adds	r1, r7, r2
 8007732:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	20a0      	movs	r0, #160	; 0xa0
 800773c:	1839      	adds	r1, r7, r0
 800773e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	249c      	movs	r4, #156	; 0x9c
 8007748:	1939      	adds	r1, r7, r4
 800774a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800774c:	0011      	movs	r1, r2
 800774e:	18bb      	adds	r3, r7, r2
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4aa2      	ldr	r2, [pc, #648]	; (80079dc <HAL_UART_IRQHandler+0x2bc>)
 8007754:	4013      	ands	r3, r2
 8007756:	2298      	movs	r2, #152	; 0x98
 8007758:	18bd      	adds	r5, r7, r2
 800775a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800775c:	18bb      	adds	r3, r7, r2
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11a      	bne.n	800779a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007764:	187b      	adds	r3, r7, r1
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2220      	movs	r2, #32
 800776a:	4013      	ands	r3, r2
 800776c:	d015      	beq.n	800779a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800776e:	183b      	adds	r3, r7, r0
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2220      	movs	r2, #32
 8007774:	4013      	ands	r3, r2
 8007776:	d105      	bne.n	8007784 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007778:	193b      	adds	r3, r7, r4
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	2380      	movs	r3, #128	; 0x80
 800777e:	055b      	lsls	r3, r3, #21
 8007780:	4013      	ands	r3, r2
 8007782:	d00a      	beq.n	800779a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007788:	2b00      	cmp	r3, #0
 800778a:	d100      	bne.n	800778e <HAL_UART_IRQHandler+0x6e>
 800778c:	e2dc      	b.n	8007d48 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	0010      	movs	r0, r2
 8007796:	4798      	blx	r3
      }
      return;
 8007798:	e2d6      	b.n	8007d48 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800779a:	2398      	movs	r3, #152	; 0x98
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d100      	bne.n	80077a6 <HAL_UART_IRQHandler+0x86>
 80077a4:	e122      	b.n	80079ec <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077a6:	239c      	movs	r3, #156	; 0x9c
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a8c      	ldr	r2, [pc, #560]	; (80079e0 <HAL_UART_IRQHandler+0x2c0>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	d106      	bne.n	80077c0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077b2:	23a0      	movs	r3, #160	; 0xa0
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a8a      	ldr	r2, [pc, #552]	; (80079e4 <HAL_UART_IRQHandler+0x2c4>)
 80077ba:	4013      	ands	r3, r2
 80077bc:	d100      	bne.n	80077c0 <HAL_UART_IRQHandler+0xa0>
 80077be:	e115      	b.n	80079ec <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077c0:	23a4      	movs	r3, #164	; 0xa4
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2201      	movs	r2, #1
 80077c8:	4013      	ands	r3, r2
 80077ca:	d012      	beq.n	80077f2 <HAL_UART_IRQHandler+0xd2>
 80077cc:	23a0      	movs	r3, #160	; 0xa0
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	2380      	movs	r3, #128	; 0x80
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	4013      	ands	r3, r2
 80077d8:	d00b      	beq.n	80077f2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2201      	movs	r2, #1
 80077e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2290      	movs	r2, #144	; 0x90
 80077e6:	589b      	ldr	r3, [r3, r2]
 80077e8:	2201      	movs	r2, #1
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2190      	movs	r1, #144	; 0x90
 80077f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f2:	23a4      	movs	r3, #164	; 0xa4
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2202      	movs	r2, #2
 80077fa:	4013      	ands	r3, r2
 80077fc:	d011      	beq.n	8007822 <HAL_UART_IRQHandler+0x102>
 80077fe:	239c      	movs	r3, #156	; 0x9c
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2201      	movs	r2, #1
 8007806:	4013      	ands	r3, r2
 8007808:	d00b      	beq.n	8007822 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2202      	movs	r2, #2
 8007810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2290      	movs	r2, #144	; 0x90
 8007816:	589b      	ldr	r3, [r3, r2]
 8007818:	2204      	movs	r2, #4
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2190      	movs	r1, #144	; 0x90
 8007820:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007822:	23a4      	movs	r3, #164	; 0xa4
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2204      	movs	r2, #4
 800782a:	4013      	ands	r3, r2
 800782c:	d011      	beq.n	8007852 <HAL_UART_IRQHandler+0x132>
 800782e:	239c      	movs	r3, #156	; 0x9c
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2201      	movs	r2, #1
 8007836:	4013      	ands	r3, r2
 8007838:	d00b      	beq.n	8007852 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2204      	movs	r2, #4
 8007840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2290      	movs	r2, #144	; 0x90
 8007846:	589b      	ldr	r3, [r3, r2]
 8007848:	2202      	movs	r2, #2
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2190      	movs	r1, #144	; 0x90
 8007850:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007852:	23a4      	movs	r3, #164	; 0xa4
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2208      	movs	r2, #8
 800785a:	4013      	ands	r3, r2
 800785c:	d017      	beq.n	800788e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800785e:	23a0      	movs	r3, #160	; 0xa0
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2220      	movs	r2, #32
 8007866:	4013      	ands	r3, r2
 8007868:	d105      	bne.n	8007876 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800786a:	239c      	movs	r3, #156	; 0x9c
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a5b      	ldr	r2, [pc, #364]	; (80079e0 <HAL_UART_IRQHandler+0x2c0>)
 8007872:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007874:	d00b      	beq.n	800788e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2290      	movs	r2, #144	; 0x90
 8007882:	589b      	ldr	r3, [r3, r2]
 8007884:	2208      	movs	r2, #8
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2190      	movs	r1, #144	; 0x90
 800788c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800788e:	23a4      	movs	r3, #164	; 0xa4
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	4013      	ands	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_UART_IRQHandler+0x1a4>
 800789c:	23a0      	movs	r3, #160	; 0xa0
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	04db      	lsls	r3, r3, #19
 80078a6:	4013      	ands	r3, r2
 80078a8:	d00c      	beq.n	80078c4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2280      	movs	r2, #128	; 0x80
 80078b0:	0112      	lsls	r2, r2, #4
 80078b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2290      	movs	r2, #144	; 0x90
 80078b8:	589b      	ldr	r3, [r3, r2]
 80078ba:	2220      	movs	r2, #32
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2190      	movs	r1, #144	; 0x90
 80078c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2290      	movs	r2, #144	; 0x90
 80078c8:	589b      	ldr	r3, [r3, r2]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d100      	bne.n	80078d0 <HAL_UART_IRQHandler+0x1b0>
 80078ce:	e23d      	b.n	8007d4c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078d0:	23a4      	movs	r3, #164	; 0xa4
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2220      	movs	r2, #32
 80078d8:	4013      	ands	r3, r2
 80078da:	d015      	beq.n	8007908 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078dc:	23a0      	movs	r3, #160	; 0xa0
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2220      	movs	r2, #32
 80078e4:	4013      	ands	r3, r2
 80078e6:	d106      	bne.n	80078f6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078e8:	239c      	movs	r3, #156	; 0x9c
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	2380      	movs	r3, #128	; 0x80
 80078f0:	055b      	lsls	r3, r3, #21
 80078f2:	4013      	ands	r3, r2
 80078f4:	d008      	beq.n	8007908 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	0010      	movs	r0, r2
 8007906:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2290      	movs	r2, #144	; 0x90
 800790c:	589b      	ldr	r3, [r3, r2]
 800790e:	2194      	movs	r1, #148	; 0x94
 8007910:	187a      	adds	r2, r7, r1
 8007912:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2240      	movs	r2, #64	; 0x40
 800791c:	4013      	ands	r3, r2
 800791e:	2b40      	cmp	r3, #64	; 0x40
 8007920:	d004      	beq.n	800792c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007922:	187b      	adds	r3, r7, r1
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2228      	movs	r2, #40	; 0x28
 8007928:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800792a:	d04c      	beq.n	80079c6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	0018      	movs	r0, r3
 8007930:	f000 fec0 	bl	80086b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2240      	movs	r2, #64	; 0x40
 800793c:	4013      	ands	r3, r2
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d13c      	bne.n	80079bc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007942:	f3ef 8310 	mrs	r3, PRIMASK
 8007946:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794a:	2090      	movs	r0, #144	; 0x90
 800794c:	183a      	adds	r2, r7, r0
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	2301      	movs	r3, #1
 8007952:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2140      	movs	r1, #64	; 0x40
 8007968:	438a      	bics	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	183b      	adds	r3, r7, r0
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007974:	f383 8810 	msr	PRIMASK, r3
}
 8007978:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	589b      	ldr	r3, [r3, r2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d016      	beq.n	80079b2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2280      	movs	r2, #128	; 0x80
 8007988:	589b      	ldr	r3, [r3, r2]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <HAL_UART_IRQHandler+0x2c8>)
 800798c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2280      	movs	r2, #128	; 0x80
 8007992:	589b      	ldr	r3, [r3, r2]
 8007994:	0018      	movs	r0, r3
 8007996:	f7fd ff37 	bl	8005808 <HAL_DMA_Abort_IT>
 800799a:	1e03      	subs	r3, r0, #0
 800799c:	d01c      	beq.n	80079d8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2280      	movs	r2, #128	; 0x80
 80079a2:	589b      	ldr	r3, [r3, r2]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	5852      	ldr	r2, [r2, r1]
 80079ac:	0010      	movs	r0, r2
 80079ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	e012      	b.n	80079d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	0018      	movs	r0, r3
 80079b6:	f000 f9e1 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ba:	e00d      	b.n	80079d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	0018      	movs	r0, r3
 80079c0:	f000 f9dc 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	e008      	b.n	80079d8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	0018      	movs	r0, r3
 80079ca:	f000 f9d7 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2290      	movs	r2, #144	; 0x90
 80079d2:	2100      	movs	r1, #0
 80079d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80079d6:	e1b9      	b.n	8007d4c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	46c0      	nop			; (mov r8, r8)
    return;
 80079da:	e1b7      	b.n	8007d4c <HAL_UART_IRQHandler+0x62c>
 80079dc:	0000080f 	.word	0x0000080f
 80079e0:	10000001 	.word	0x10000001
 80079e4:	04000120 	.word	0x04000120
 80079e8:	08008781 	.word	0x08008781

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d000      	beq.n	80079f6 <HAL_UART_IRQHandler+0x2d6>
 80079f4:	e13e      	b.n	8007c74 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079f6:	23a4      	movs	r3, #164	; 0xa4
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2210      	movs	r2, #16
 80079fe:	4013      	ands	r3, r2
 8007a00:	d100      	bne.n	8007a04 <HAL_UART_IRQHandler+0x2e4>
 8007a02:	e137      	b.n	8007c74 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a04:	23a0      	movs	r3, #160	; 0xa0
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d100      	bne.n	8007a12 <HAL_UART_IRQHandler+0x2f2>
 8007a10:	e130      	b.n	8007c74 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2210      	movs	r2, #16
 8007a18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2240      	movs	r2, #64	; 0x40
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d000      	beq.n	8007a2a <HAL_UART_IRQHandler+0x30a>
 8007a28:	e0a4      	b.n	8007b74 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2280      	movs	r2, #128	; 0x80
 8007a2e:	589b      	ldr	r3, [r3, r2]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	217e      	movs	r1, #126	; 0x7e
 8007a36:	187b      	adds	r3, r7, r1
 8007a38:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007a3a:	187b      	adds	r3, r7, r1
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d100      	bne.n	8007a44 <HAL_UART_IRQHandler+0x324>
 8007a42:	e185      	b.n	8007d50 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	225c      	movs	r2, #92	; 0x5c
 8007a48:	5a9b      	ldrh	r3, [r3, r2]
 8007a4a:	187a      	adds	r2, r7, r1
 8007a4c:	8812      	ldrh	r2, [r2, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d300      	bcc.n	8007a54 <HAL_UART_IRQHandler+0x334>
 8007a52:	e17d      	b.n	8007d50 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	187a      	adds	r2, r7, r1
 8007a58:	215e      	movs	r1, #94	; 0x5e
 8007a5a:	8812      	ldrh	r2, [r2, #0]
 8007a5c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2280      	movs	r2, #128	; 0x80
 8007a62:	589b      	ldr	r3, [r3, r2]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d170      	bne.n	8007b50 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a76:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a78:	2301      	movs	r3, #1
 8007a7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7e:	f383 8810 	msr	PRIMASK, r3
}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	49b4      	ldr	r1, [pc, #720]	; (8007d60 <HAL_UART_IRQHandler+0x640>)
 8007a90:	400a      	ands	r2, r1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f383 8810 	msr	PRIMASK, r3
}
 8007a9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	677b      	str	r3, [r7, #116]	; 0x74
 8007aaa:	2301      	movs	r3, #1
 8007aac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab0:	f383 8810 	msr	PRIMASK, r3
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	438a      	bics	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007acc:	f383 8810 	msr	PRIMASK, r3
}
 8007ad0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ada:	673b      	str	r3, [r7, #112]	; 0x70
 8007adc:	2301      	movs	r3, #1
 8007ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae2:	f383 8810 	msr	PRIMASK, r3
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2140      	movs	r1, #64	; 0x40
 8007af4:	438a      	bics	r2, r1
 8007af6:	609a      	str	r2, [r3, #8]
 8007af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afe:	f383 8810 	msr	PRIMASK, r3
}
 8007b02:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	228c      	movs	r2, #140	; 0x8c
 8007b08:	2120      	movs	r1, #32
 8007b0a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b12:	f3ef 8310 	mrs	r3, PRIMASK
 8007b16:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b22:	f383 8810 	msr	PRIMASK, r3
}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2110      	movs	r1, #16
 8007b34:	438a      	bics	r2, r1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b3e:	f383 8810 	msr	PRIMASK, r3
}
 8007b42:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2280      	movs	r2, #128	; 0x80
 8007b48:	589b      	ldr	r3, [r3, r2]
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f7fd fdfa 	bl	8005744 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	225c      	movs	r2, #92	; 0x5c
 8007b5a:	5a9a      	ldrh	r2, [r3, r2]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	215e      	movs	r1, #94	; 0x5e
 8007b60:	5a5b      	ldrh	r3, [r3, r1]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	0011      	movs	r1, r2
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f000 f90d 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b72:	e0ed      	b.n	8007d50 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	225c      	movs	r2, #92	; 0x5c
 8007b78:	5a99      	ldrh	r1, [r3, r2]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	225e      	movs	r2, #94	; 0x5e
 8007b7e:	5a9b      	ldrh	r3, [r3, r2]
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	208e      	movs	r0, #142	; 0x8e
 8007b84:	183b      	adds	r3, r7, r0
 8007b86:	1a8a      	subs	r2, r1, r2
 8007b88:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	225e      	movs	r2, #94	; 0x5e
 8007b8e:	5a9b      	ldrh	r3, [r3, r2]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d100      	bne.n	8007b98 <HAL_UART_IRQHandler+0x478>
 8007b96:	e0dd      	b.n	8007d54 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007b98:	183b      	adds	r3, r7, r0
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d100      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x482>
 8007ba0:	e0d8      	b.n	8007d54 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007baa:	2488      	movs	r4, #136	; 0x88
 8007bac:	193a      	adds	r2, r7, r4
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f383 8810 	msr	PRIMASK, r3
}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4967      	ldr	r1, [pc, #412]	; (8007d64 <HAL_UART_IRQHandler+0x644>)
 8007bc8:	400a      	ands	r2, r1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	193b      	adds	r3, r7, r4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f383 8810 	msr	PRIMASK, r3
}
 8007bd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bda:	f3ef 8310 	mrs	r3, PRIMASK
 8007bde:	61bb      	str	r3, [r7, #24]
  return(result);
 8007be0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007be2:	2484      	movs	r4, #132	; 0x84
 8007be4:	193a      	adds	r2, r7, r4
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	2301      	movs	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f383 8810 	msr	PRIMASK, r3
}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	495a      	ldr	r1, [pc, #360]	; (8007d68 <HAL_UART_IRQHandler+0x648>)
 8007c00:	400a      	ands	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]
 8007c04:	193b      	adds	r3, r7, r4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f383 8810 	msr	PRIMASK, r3
}
 8007c10:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	228c      	movs	r2, #140	; 0x8c
 8007c16:	2120      	movs	r1, #32
 8007c18:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c26:	f3ef 8310 	mrs	r3, PRIMASK
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	2480      	movs	r4, #128	; 0x80
 8007c30:	193a      	adds	r2, r7, r4
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	2301      	movs	r3, #1
 8007c36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	f383 8810 	msr	PRIMASK, r3
}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2110      	movs	r1, #16
 8007c4c:	438a      	bics	r2, r1
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	193b      	adds	r3, r7, r4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	f383 8810 	msr	PRIMASK, r3
}
 8007c5c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c64:	183b      	adds	r3, r7, r0
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	0011      	movs	r1, r2
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	f000 f88d 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c72:	e06f      	b.n	8007d54 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c74:	23a4      	movs	r3, #164	; 0xa4
 8007c76:	18fb      	adds	r3, r7, r3
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	035b      	lsls	r3, r3, #13
 8007c7e:	4013      	ands	r3, r2
 8007c80:	d010      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x584>
 8007c82:	239c      	movs	r3, #156	; 0x9c
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	03db      	lsls	r3, r3, #15
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2280      	movs	r2, #128	; 0x80
 8007c96:	0352      	lsls	r2, r2, #13
 8007c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f000 fdb2 	bl	8008806 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ca2:	e05a      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ca4:	23a4      	movs	r3, #164	; 0xa4
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2280      	movs	r2, #128	; 0x80
 8007cac:	4013      	ands	r3, r2
 8007cae:	d016      	beq.n	8007cde <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007cb0:	23a0      	movs	r3, #160	; 0xa0
 8007cb2:	18fb      	adds	r3, r7, r3
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2280      	movs	r2, #128	; 0x80
 8007cb8:	4013      	ands	r3, r2
 8007cba:	d106      	bne.n	8007cca <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cbc:	239c      	movs	r3, #156	; 0x9c
 8007cbe:	18fb      	adds	r3, r7, r3
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	2380      	movs	r3, #128	; 0x80
 8007cc4:	041b      	lsls	r3, r3, #16
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d009      	beq.n	8007cde <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d042      	beq.n	8007d58 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	0010      	movs	r0, r2
 8007cda:	4798      	blx	r3
    }
    return;
 8007cdc:	e03c      	b.n	8007d58 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cde:	23a4      	movs	r3, #164	; 0xa4
 8007ce0:	18fb      	adds	r3, r7, r3
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2240      	movs	r2, #64	; 0x40
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	d00a      	beq.n	8007d00 <HAL_UART_IRQHandler+0x5e0>
 8007cea:	23a0      	movs	r3, #160	; 0xa0
 8007cec:	18fb      	adds	r3, r7, r3
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2240      	movs	r2, #64	; 0x40
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	d004      	beq.n	8007d00 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f000 fd58 	bl	80087ae <UART_EndTransmit_IT>
    return;
 8007cfe:	e02c      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d00:	23a4      	movs	r3, #164	; 0xa4
 8007d02:	18fb      	adds	r3, r7, r3
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	2380      	movs	r3, #128	; 0x80
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d00b      	beq.n	8007d26 <HAL_UART_IRQHandler+0x606>
 8007d0e:	23a0      	movs	r3, #160	; 0xa0
 8007d10:	18fb      	adds	r3, r7, r3
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	05db      	lsls	r3, r3, #23
 8007d18:	4013      	ands	r3, r2
 8007d1a:	d004      	beq.n	8007d26 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f000 fd81 	bl	8008826 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d24:	e019      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d26:	23a4      	movs	r3, #164	; 0xa4
 8007d28:	18fb      	adds	r3, r7, r3
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	2380      	movs	r3, #128	; 0x80
 8007d2e:	045b      	lsls	r3, r3, #17
 8007d30:	4013      	ands	r3, r2
 8007d32:	d012      	beq.n	8007d5a <HAL_UART_IRQHandler+0x63a>
 8007d34:	23a0      	movs	r3, #160	; 0xa0
 8007d36:	18fb      	adds	r3, r7, r3
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da0d      	bge.n	8007d5a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	0018      	movs	r0, r3
 8007d42:	f000 fd68 	bl	8008816 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d46:	e008      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
      return;
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	e006      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
    return;
 8007d4c:	46c0      	nop			; (mov r8, r8)
 8007d4e:	e004      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
      return;
 8007d50:	46c0      	nop			; (mov r8, r8)
 8007d52:	e002      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
      return;
 8007d54:	46c0      	nop			; (mov r8, r8)
 8007d56:	e000      	b.n	8007d5a <HAL_UART_IRQHandler+0x63a>
    return;
 8007d58:	46c0      	nop			; (mov r8, r8)
  }
}
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b02a      	add	sp, #168	; 0xa8
 8007d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d60:	fffffeff 	.word	0xfffffeff
 8007d64:	fffffedf 	.word	0xfffffedf
 8007d68:	effffffe 	.word	0xeffffffe

08007d6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b002      	add	sp, #8
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	000a      	movs	r2, r1
 8007d96:	1cbb      	adds	r3, r7, #2
 8007d98:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b002      	add	sp, #8
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da4:	b5b0      	push	{r4, r5, r7, lr}
 8007da6:	b090      	sub	sp, #64	; 0x40
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dac:	231a      	movs	r3, #26
 8007dae:	2220      	movs	r2, #32
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	19db      	adds	r3, r3, r7
 8007db4:	2200      	movs	r2, #0
 8007db6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4aaf      	ldr	r2, [pc, #700]	; (8008094 <UART_SetConfig+0x2f0>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	0019      	movs	r1, r3
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de2:	430b      	orrs	r3, r1
 8007de4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	4aaa      	ldr	r2, [pc, #680]	; (8008098 <UART_SetConfig+0x2f4>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	0018      	movs	r0, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	68d9      	ldr	r1, [r3, #12]
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	430b      	orrs	r3, r1
 8007dfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4aa4      	ldr	r2, [pc, #656]	; (800809c <UART_SetConfig+0x2f8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d004      	beq.n	8007e1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e16:	4313      	orrs	r3, r2
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	4a9f      	ldr	r2, [pc, #636]	; (80080a0 <UART_SetConfig+0x2fc>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	0019      	movs	r1, r3
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	220f      	movs	r2, #15
 8007e38:	4393      	bics	r3, r2
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	0003      	movs	r3, r0
 8007e46:	430b      	orrs	r3, r1
 8007e48:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a95      	ldr	r2, [pc, #596]	; (80080a4 <UART_SetConfig+0x300>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d131      	bne.n	8007eb8 <UART_SetConfig+0x114>
 8007e54:	4b94      	ldr	r3, [pc, #592]	; (80080a8 <UART_SetConfig+0x304>)
 8007e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e58:	2203      	movs	r2, #3
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d01d      	beq.n	8007e9c <UART_SetConfig+0xf8>
 8007e60:	d823      	bhi.n	8007eaa <UART_SetConfig+0x106>
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d00c      	beq.n	8007e80 <UART_SetConfig+0xdc>
 8007e66:	d820      	bhi.n	8007eaa <UART_SetConfig+0x106>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <UART_SetConfig+0xce>
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d00e      	beq.n	8007e8e <UART_SetConfig+0xea>
 8007e70:	e01b      	b.n	8007eaa <UART_SetConfig+0x106>
 8007e72:	231b      	movs	r3, #27
 8007e74:	2220      	movs	r2, #32
 8007e76:	189b      	adds	r3, r3, r2
 8007e78:	19db      	adds	r3, r3, r7
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e0b4      	b.n	8007fea <UART_SetConfig+0x246>
 8007e80:	231b      	movs	r3, #27
 8007e82:	2220      	movs	r2, #32
 8007e84:	189b      	adds	r3, r3, r2
 8007e86:	19db      	adds	r3, r3, r7
 8007e88:	2202      	movs	r2, #2
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	e0ad      	b.n	8007fea <UART_SetConfig+0x246>
 8007e8e:	231b      	movs	r3, #27
 8007e90:	2220      	movs	r2, #32
 8007e92:	189b      	adds	r3, r3, r2
 8007e94:	19db      	adds	r3, r3, r7
 8007e96:	2204      	movs	r2, #4
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e0a6      	b.n	8007fea <UART_SetConfig+0x246>
 8007e9c:	231b      	movs	r3, #27
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	189b      	adds	r3, r3, r2
 8007ea2:	19db      	adds	r3, r3, r7
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e09f      	b.n	8007fea <UART_SetConfig+0x246>
 8007eaa:	231b      	movs	r3, #27
 8007eac:	2220      	movs	r2, #32
 8007eae:	189b      	adds	r3, r3, r2
 8007eb0:	19db      	adds	r3, r3, r7
 8007eb2:	2210      	movs	r2, #16
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e098      	b.n	8007fea <UART_SetConfig+0x246>
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a7b      	ldr	r2, [pc, #492]	; (80080ac <UART_SetConfig+0x308>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d131      	bne.n	8007f26 <UART_SetConfig+0x182>
 8007ec2:	4b79      	ldr	r3, [pc, #484]	; (80080a8 <UART_SetConfig+0x304>)
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	220c      	movs	r2, #12
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b0c      	cmp	r3, #12
 8007ecc:	d01d      	beq.n	8007f0a <UART_SetConfig+0x166>
 8007ece:	d823      	bhi.n	8007f18 <UART_SetConfig+0x174>
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d00c      	beq.n	8007eee <UART_SetConfig+0x14a>
 8007ed4:	d820      	bhi.n	8007f18 <UART_SetConfig+0x174>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <UART_SetConfig+0x13c>
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d00e      	beq.n	8007efc <UART_SetConfig+0x158>
 8007ede:	e01b      	b.n	8007f18 <UART_SetConfig+0x174>
 8007ee0:	231b      	movs	r3, #27
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	189b      	adds	r3, r3, r2
 8007ee6:	19db      	adds	r3, r3, r7
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	e07d      	b.n	8007fea <UART_SetConfig+0x246>
 8007eee:	231b      	movs	r3, #27
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	19db      	adds	r3, r3, r7
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	e076      	b.n	8007fea <UART_SetConfig+0x246>
 8007efc:	231b      	movs	r3, #27
 8007efe:	2220      	movs	r2, #32
 8007f00:	189b      	adds	r3, r3, r2
 8007f02:	19db      	adds	r3, r3, r7
 8007f04:	2204      	movs	r2, #4
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e06f      	b.n	8007fea <UART_SetConfig+0x246>
 8007f0a:	231b      	movs	r3, #27
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	19db      	adds	r3, r3, r7
 8007f12:	2208      	movs	r2, #8
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	e068      	b.n	8007fea <UART_SetConfig+0x246>
 8007f18:	231b      	movs	r3, #27
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	189b      	adds	r3, r3, r2
 8007f1e:	19db      	adds	r3, r3, r7
 8007f20:	2210      	movs	r2, #16
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e061      	b.n	8007fea <UART_SetConfig+0x246>
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a61      	ldr	r2, [pc, #388]	; (80080b0 <UART_SetConfig+0x30c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d106      	bne.n	8007f3e <UART_SetConfig+0x19a>
 8007f30:	231b      	movs	r3, #27
 8007f32:	2220      	movs	r2, #32
 8007f34:	189b      	adds	r3, r3, r2
 8007f36:	19db      	adds	r3, r3, r7
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e055      	b.n	8007fea <UART_SetConfig+0x246>
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5c      	ldr	r2, [pc, #368]	; (80080b4 <UART_SetConfig+0x310>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d106      	bne.n	8007f56 <UART_SetConfig+0x1b2>
 8007f48:	231b      	movs	r3, #27
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	189b      	adds	r3, r3, r2
 8007f4e:	19db      	adds	r3, r3, r7
 8007f50:	2200      	movs	r2, #0
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e049      	b.n	8007fea <UART_SetConfig+0x246>
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a50      	ldr	r2, [pc, #320]	; (800809c <UART_SetConfig+0x2f8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d13e      	bne.n	8007fde <UART_SetConfig+0x23a>
 8007f60:	4b51      	ldr	r3, [pc, #324]	; (80080a8 <UART_SetConfig+0x304>)
 8007f62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f64:	23c0      	movs	r3, #192	; 0xc0
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	4013      	ands	r3, r2
 8007f6a:	22c0      	movs	r2, #192	; 0xc0
 8007f6c:	0112      	lsls	r2, r2, #4
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d027      	beq.n	8007fc2 <UART_SetConfig+0x21e>
 8007f72:	22c0      	movs	r2, #192	; 0xc0
 8007f74:	0112      	lsls	r2, r2, #4
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d82a      	bhi.n	8007fd0 <UART_SetConfig+0x22c>
 8007f7a:	2280      	movs	r2, #128	; 0x80
 8007f7c:	0112      	lsls	r2, r2, #4
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d011      	beq.n	8007fa6 <UART_SetConfig+0x202>
 8007f82:	2280      	movs	r2, #128	; 0x80
 8007f84:	0112      	lsls	r2, r2, #4
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d822      	bhi.n	8007fd0 <UART_SetConfig+0x22c>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <UART_SetConfig+0x1f4>
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	00d2      	lsls	r2, r2, #3
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00e      	beq.n	8007fb4 <UART_SetConfig+0x210>
 8007f96:	e01b      	b.n	8007fd0 <UART_SetConfig+0x22c>
 8007f98:	231b      	movs	r3, #27
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	19db      	adds	r3, r3, r7
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e021      	b.n	8007fea <UART_SetConfig+0x246>
 8007fa6:	231b      	movs	r3, #27
 8007fa8:	2220      	movs	r2, #32
 8007faa:	189b      	adds	r3, r3, r2
 8007fac:	19db      	adds	r3, r3, r7
 8007fae:	2202      	movs	r2, #2
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e01a      	b.n	8007fea <UART_SetConfig+0x246>
 8007fb4:	231b      	movs	r3, #27
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	189b      	adds	r3, r3, r2
 8007fba:	19db      	adds	r3, r3, r7
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	701a      	strb	r2, [r3, #0]
 8007fc0:	e013      	b.n	8007fea <UART_SetConfig+0x246>
 8007fc2:	231b      	movs	r3, #27
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	189b      	adds	r3, r3, r2
 8007fc8:	19db      	adds	r3, r3, r7
 8007fca:	2208      	movs	r2, #8
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e00c      	b.n	8007fea <UART_SetConfig+0x246>
 8007fd0:	231b      	movs	r3, #27
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	189b      	adds	r3, r3, r2
 8007fd6:	19db      	adds	r3, r3, r7
 8007fd8:	2210      	movs	r2, #16
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e005      	b.n	8007fea <UART_SetConfig+0x246>
 8007fde:	231b      	movs	r3, #27
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	19db      	adds	r3, r3, r7
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a2b      	ldr	r2, [pc, #172]	; (800809c <UART_SetConfig+0x2f8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d000      	beq.n	8007ff6 <UART_SetConfig+0x252>
 8007ff4:	e0a9      	b.n	800814a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ff6:	231b      	movs	r3, #27
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	19db      	adds	r3, r3, r7
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d015      	beq.n	8008030 <UART_SetConfig+0x28c>
 8008004:	dc18      	bgt.n	8008038 <UART_SetConfig+0x294>
 8008006:	2b04      	cmp	r3, #4
 8008008:	d00d      	beq.n	8008026 <UART_SetConfig+0x282>
 800800a:	dc15      	bgt.n	8008038 <UART_SetConfig+0x294>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <UART_SetConfig+0x272>
 8008010:	2b02      	cmp	r3, #2
 8008012:	d005      	beq.n	8008020 <UART_SetConfig+0x27c>
 8008014:	e010      	b.n	8008038 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008016:	f7fe fc99 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 800801a:	0003      	movs	r3, r0
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800801e:	e014      	b.n	800804a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008020:	4b25      	ldr	r3, [pc, #148]	; (80080b8 <UART_SetConfig+0x314>)
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008024:	e011      	b.n	800804a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008026:	f7fe fc05 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 800802a:	0003      	movs	r3, r0
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802e:	e00c      	b.n	800804a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008036:	e008      	b.n	800804a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800803c:	231a      	movs	r3, #26
 800803e:	2220      	movs	r2, #32
 8008040:	189b      	adds	r3, r3, r2
 8008042:	19db      	adds	r3, r3, r7
 8008044:	2201      	movs	r2, #1
 8008046:	701a      	strb	r2, [r3, #0]
        break;
 8008048:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	2b00      	cmp	r3, #0
 800804e:	d100      	bne.n	8008052 <UART_SetConfig+0x2ae>
 8008050:	e14b      	b.n	80082ea <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008056:	4b19      	ldr	r3, [pc, #100]	; (80080bc <UART_SetConfig+0x318>)
 8008058:	0052      	lsls	r2, r2, #1
 800805a:	5ad3      	ldrh	r3, [r2, r3]
 800805c:	0019      	movs	r1, r3
 800805e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008060:	f7f8 f86c 	bl	800013c <__udivsi3>
 8008064:	0003      	movs	r3, r0
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	0013      	movs	r3, r2
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	189b      	adds	r3, r3, r2
 8008072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008074:	429a      	cmp	r2, r3
 8008076:	d305      	bcc.n	8008084 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800807e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008080:	429a      	cmp	r2, r3
 8008082:	d91d      	bls.n	80080c0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008084:	231a      	movs	r3, #26
 8008086:	2220      	movs	r2, #32
 8008088:	189b      	adds	r3, r3, r2
 800808a:	19db      	adds	r3, r3, r7
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]
 8008090:	e12b      	b.n	80082ea <UART_SetConfig+0x546>
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	cfff69f3 	.word	0xcfff69f3
 8008098:	ffffcfff 	.word	0xffffcfff
 800809c:	40008000 	.word	0x40008000
 80080a0:	11fff4ff 	.word	0x11fff4ff
 80080a4:	40013800 	.word	0x40013800
 80080a8:	40021000 	.word	0x40021000
 80080ac:	40004400 	.word	0x40004400
 80080b0:	40004800 	.word	0x40004800
 80080b4:	40004c00 	.word	0x40004c00
 80080b8:	00f42400 	.word	0x00f42400
 80080bc:	0800baa4 	.word	0x0800baa4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	61bb      	str	r3, [r7, #24]
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080cc:	4b92      	ldr	r3, [pc, #584]	; (8008318 <UART_SetConfig+0x574>)
 80080ce:	0052      	lsls	r2, r2, #1
 80080d0:	5ad3      	ldrh	r3, [r2, r3]
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	69b8      	ldr	r0, [r7, #24]
 80080de:	69f9      	ldr	r1, [r7, #28]
 80080e0:	f7f8 f9e0 	bl	80004a4 <__aeabi_uldivmod>
 80080e4:	0002      	movs	r2, r0
 80080e6:	000b      	movs	r3, r1
 80080e8:	0e11      	lsrs	r1, r2, #24
 80080ea:	021d      	lsls	r5, r3, #8
 80080ec:	430d      	orrs	r5, r1
 80080ee:	0214      	lsls	r4, r2, #8
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	085b      	lsrs	r3, r3, #1
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68b8      	ldr	r0, [r7, #8]
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	1900      	adds	r0, r0, r4
 8008102:	4169      	adcs	r1, r5
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	603b      	str	r3, [r7, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f7f8 f9c7 	bl	80004a4 <__aeabi_uldivmod>
 8008116:	0002      	movs	r2, r0
 8008118:	000b      	movs	r3, r1
 800811a:	0013      	movs	r3, r2
 800811c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800811e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008120:	23c0      	movs	r3, #192	; 0xc0
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	429a      	cmp	r2, r3
 8008126:	d309      	bcc.n	800813c <UART_SetConfig+0x398>
 8008128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812a:	2380      	movs	r3, #128	; 0x80
 800812c:	035b      	lsls	r3, r3, #13
 800812e:	429a      	cmp	r2, r3
 8008130:	d204      	bcs.n	800813c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008138:	60da      	str	r2, [r3, #12]
 800813a:	e0d6      	b.n	80082ea <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800813c:	231a      	movs	r3, #26
 800813e:	2220      	movs	r2, #32
 8008140:	189b      	adds	r3, r3, r2
 8008142:	19db      	adds	r3, r3, r7
 8008144:	2201      	movs	r2, #1
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	e0cf      	b.n	80082ea <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	69da      	ldr	r2, [r3, #28]
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	429a      	cmp	r2, r3
 8008154:	d000      	beq.n	8008158 <UART_SetConfig+0x3b4>
 8008156:	e070      	b.n	800823a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8008158:	231b      	movs	r3, #27
 800815a:	2220      	movs	r2, #32
 800815c:	189b      	adds	r3, r3, r2
 800815e:	19db      	adds	r3, r3, r7
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b08      	cmp	r3, #8
 8008164:	d015      	beq.n	8008192 <UART_SetConfig+0x3ee>
 8008166:	dc18      	bgt.n	800819a <UART_SetConfig+0x3f6>
 8008168:	2b04      	cmp	r3, #4
 800816a:	d00d      	beq.n	8008188 <UART_SetConfig+0x3e4>
 800816c:	dc15      	bgt.n	800819a <UART_SetConfig+0x3f6>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <UART_SetConfig+0x3d4>
 8008172:	2b02      	cmp	r3, #2
 8008174:	d005      	beq.n	8008182 <UART_SetConfig+0x3de>
 8008176:	e010      	b.n	800819a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008178:	f7fe fbe8 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 800817c:	0003      	movs	r3, r0
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008180:	e014      	b.n	80081ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008182:	4b66      	ldr	r3, [pc, #408]	; (800831c <UART_SetConfig+0x578>)
 8008184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008186:	e011      	b.n	80081ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008188:	f7fe fb54 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 800818c:	0003      	movs	r3, r0
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008190:	e00c      	b.n	80081ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008192:	2380      	movs	r3, #128	; 0x80
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008198:	e008      	b.n	80081ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800819e:	231a      	movs	r3, #26
 80081a0:	2220      	movs	r2, #32
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	19db      	adds	r3, r3, r7
 80081a6:	2201      	movs	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
        break;
 80081aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d100      	bne.n	80081b4 <UART_SetConfig+0x410>
 80081b2:	e09a      	b.n	80082ea <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081b8:	4b57      	ldr	r3, [pc, #348]	; (8008318 <UART_SetConfig+0x574>)
 80081ba:	0052      	lsls	r2, r2, #1
 80081bc:	5ad3      	ldrh	r3, [r2, r3]
 80081be:	0019      	movs	r1, r3
 80081c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081c2:	f7f7 ffbb 	bl	800013c <__udivsi3>
 80081c6:	0003      	movs	r3, r0
 80081c8:	005a      	lsls	r2, r3, #1
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	085b      	lsrs	r3, r3, #1
 80081d0:	18d2      	adds	r2, r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	0019      	movs	r1, r3
 80081d8:	0010      	movs	r0, r2
 80081da:	f7f7 ffaf 	bl	800013c <__udivsi3>
 80081de:	0003      	movs	r3, r0
 80081e0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2b0f      	cmp	r3, #15
 80081e6:	d921      	bls.n	800822c <UART_SetConfig+0x488>
 80081e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ea:	2380      	movs	r3, #128	; 0x80
 80081ec:	025b      	lsls	r3, r3, #9
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d21c      	bcs.n	800822c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	200e      	movs	r0, #14
 80081f8:	2420      	movs	r4, #32
 80081fa:	1903      	adds	r3, r0, r4
 80081fc:	19db      	adds	r3, r3, r7
 80081fe:	210f      	movs	r1, #15
 8008200:	438a      	bics	r2, r1
 8008202:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	b29b      	uxth	r3, r3
 800820a:	2207      	movs	r2, #7
 800820c:	4013      	ands	r3, r2
 800820e:	b299      	uxth	r1, r3
 8008210:	1903      	adds	r3, r0, r4
 8008212:	19db      	adds	r3, r3, r7
 8008214:	1902      	adds	r2, r0, r4
 8008216:	19d2      	adds	r2, r2, r7
 8008218:	8812      	ldrh	r2, [r2, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	1902      	adds	r2, r0, r4
 8008224:	19d2      	adds	r2, r2, r7
 8008226:	8812      	ldrh	r2, [r2, #0]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	e05e      	b.n	80082ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800822c:	231a      	movs	r3, #26
 800822e:	2220      	movs	r2, #32
 8008230:	189b      	adds	r3, r3, r2
 8008232:	19db      	adds	r3, r3, r7
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e057      	b.n	80082ea <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800823a:	231b      	movs	r3, #27
 800823c:	2220      	movs	r2, #32
 800823e:	189b      	adds	r3, r3, r2
 8008240:	19db      	adds	r3, r3, r7
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d015      	beq.n	8008274 <UART_SetConfig+0x4d0>
 8008248:	dc18      	bgt.n	800827c <UART_SetConfig+0x4d8>
 800824a:	2b04      	cmp	r3, #4
 800824c:	d00d      	beq.n	800826a <UART_SetConfig+0x4c6>
 800824e:	dc15      	bgt.n	800827c <UART_SetConfig+0x4d8>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <UART_SetConfig+0x4b6>
 8008254:	2b02      	cmp	r3, #2
 8008256:	d005      	beq.n	8008264 <UART_SetConfig+0x4c0>
 8008258:	e010      	b.n	800827c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800825a:	f7fe fb77 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 800825e:	0003      	movs	r3, r0
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008262:	e014      	b.n	800828e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008264:	4b2d      	ldr	r3, [pc, #180]	; (800831c <UART_SetConfig+0x578>)
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008268:	e011      	b.n	800828e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826a:	f7fe fae3 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 800826e:	0003      	movs	r3, r0
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008272:	e00c      	b.n	800828e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	021b      	lsls	r3, r3, #8
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800827a:	e008      	b.n	800828e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008280:	231a      	movs	r3, #26
 8008282:	2220      	movs	r2, #32
 8008284:	189b      	adds	r3, r3, r2
 8008286:	19db      	adds	r3, r3, r7
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
        break;
 800828c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02a      	beq.n	80082ea <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008298:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <UART_SetConfig+0x574>)
 800829a:	0052      	lsls	r2, r2, #1
 800829c:	5ad3      	ldrh	r3, [r2, r3]
 800829e:	0019      	movs	r1, r3
 80082a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082a2:	f7f7 ff4b 	bl	800013c <__udivsi3>
 80082a6:	0003      	movs	r3, r0
 80082a8:	001a      	movs	r2, r3
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	18d2      	adds	r2, r2, r3
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	0019      	movs	r1, r3
 80082b8:	0010      	movs	r0, r2
 80082ba:	f7f7 ff3f 	bl	800013c <__udivsi3>
 80082be:	0003      	movs	r3, r0
 80082c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	2b0f      	cmp	r3, #15
 80082c6:	d90a      	bls.n	80082de <UART_SetConfig+0x53a>
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	2380      	movs	r3, #128	; 0x80
 80082cc:	025b      	lsls	r3, r3, #9
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d205      	bcs.n	80082de <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60da      	str	r2, [r3, #12]
 80082dc:	e005      	b.n	80082ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80082de:	231a      	movs	r3, #26
 80082e0:	2220      	movs	r2, #32
 80082e2:	189b      	adds	r3, r3, r2
 80082e4:	19db      	adds	r3, r3, r7
 80082e6:	2201      	movs	r2, #1
 80082e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	226a      	movs	r2, #106	; 0x6a
 80082ee:	2101      	movs	r1, #1
 80082f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2268      	movs	r2, #104	; 0x68
 80082f6:	2101      	movs	r1, #1
 80082f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	2200      	movs	r2, #0
 80082fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	2200      	movs	r2, #0
 8008304:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008306:	231a      	movs	r3, #26
 8008308:	2220      	movs	r2, #32
 800830a:	189b      	adds	r3, r3, r2
 800830c:	19db      	adds	r3, r3, r7
 800830e:	781b      	ldrb	r3, [r3, #0]
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b010      	add	sp, #64	; 0x40
 8008316:	bdb0      	pop	{r4, r5, r7, pc}
 8008318:	0800baa4 	.word	0x0800baa4
 800831c:	00f42400 	.word	0x00f42400

08008320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	2201      	movs	r2, #1
 800832e:	4013      	ands	r3, r2
 8008330:	d00b      	beq.n	800834a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4a4a      	ldr	r2, [pc, #296]	; (8008464 <UART_AdvFeatureConfig+0x144>)
 800833a:	4013      	ands	r3, r2
 800833c:	0019      	movs	r1, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834e:	2202      	movs	r2, #2
 8008350:	4013      	ands	r3, r2
 8008352:	d00b      	beq.n	800836c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4a43      	ldr	r2, [pc, #268]	; (8008468 <UART_AdvFeatureConfig+0x148>)
 800835c:	4013      	ands	r3, r2
 800835e:	0019      	movs	r1, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	2204      	movs	r2, #4
 8008372:	4013      	ands	r3, r2
 8008374:	d00b      	beq.n	800838e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4a3b      	ldr	r2, [pc, #236]	; (800846c <UART_AdvFeatureConfig+0x14c>)
 800837e:	4013      	ands	r3, r2
 8008380:	0019      	movs	r1, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	2208      	movs	r2, #8
 8008394:	4013      	ands	r3, r2
 8008396:	d00b      	beq.n	80083b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	4a34      	ldr	r2, [pc, #208]	; (8008470 <UART_AdvFeatureConfig+0x150>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	0019      	movs	r1, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	2210      	movs	r2, #16
 80083b6:	4013      	ands	r3, r2
 80083b8:	d00b      	beq.n	80083d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	4a2c      	ldr	r2, [pc, #176]	; (8008474 <UART_AdvFeatureConfig+0x154>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	0019      	movs	r1, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	2220      	movs	r2, #32
 80083d8:	4013      	ands	r3, r2
 80083da:	d00b      	beq.n	80083f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4a25      	ldr	r2, [pc, #148]	; (8008478 <UART_AdvFeatureConfig+0x158>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	0019      	movs	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	2240      	movs	r2, #64	; 0x40
 80083fa:	4013      	ands	r3, r2
 80083fc:	d01d      	beq.n	800843a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a1d      	ldr	r2, [pc, #116]	; (800847c <UART_AdvFeatureConfig+0x15c>)
 8008406:	4013      	ands	r3, r2
 8008408:	0019      	movs	r1, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800841a:	2380      	movs	r3, #128	; 0x80
 800841c:	035b      	lsls	r3, r3, #13
 800841e:	429a      	cmp	r2, r3
 8008420:	d10b      	bne.n	800843a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a15      	ldr	r2, [pc, #84]	; (8008480 <UART_AdvFeatureConfig+0x160>)
 800842a:	4013      	ands	r3, r2
 800842c:	0019      	movs	r1, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	2280      	movs	r2, #128	; 0x80
 8008440:	4013      	ands	r3, r2
 8008442:	d00b      	beq.n	800845c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <UART_AdvFeatureConfig+0x164>)
 800844c:	4013      	ands	r3, r2
 800844e:	0019      	movs	r1, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }
}
 800845c:	46c0      	nop			; (mov r8, r8)
 800845e:	46bd      	mov	sp, r7
 8008460:	b002      	add	sp, #8
 8008462:	bd80      	pop	{r7, pc}
 8008464:	fffdffff 	.word	0xfffdffff
 8008468:	fffeffff 	.word	0xfffeffff
 800846c:	fffbffff 	.word	0xfffbffff
 8008470:	ffff7fff 	.word	0xffff7fff
 8008474:	ffffefff 	.word	0xffffefff
 8008478:	ffffdfff 	.word	0xffffdfff
 800847c:	ffefffff 	.word	0xffefffff
 8008480:	ff9fffff 	.word	0xff9fffff
 8008484:	fff7ffff 	.word	0xfff7ffff

08008488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2290      	movs	r2, #144	; 0x90
 8008494:	2100      	movs	r1, #0
 8008496:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008498:	f7fb ff00 	bl	800429c <HAL_GetTick>
 800849c:	0003      	movs	r3, r0
 800849e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2208      	movs	r2, #8
 80084a8:	4013      	ands	r3, r2
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d10c      	bne.n	80084c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2280      	movs	r2, #128	; 0x80
 80084b2:	0391      	lsls	r1, r2, #14
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4a1a      	ldr	r2, [pc, #104]	; (8008520 <UART_CheckIdleState+0x98>)
 80084b8:	9200      	str	r2, [sp, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f000 f832 	bl	8008524 <UART_WaitOnFlagUntilTimeout>
 80084c0:	1e03      	subs	r3, r0, #0
 80084c2:	d001      	beq.n	80084c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e026      	b.n	8008516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2204      	movs	r2, #4
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d10c      	bne.n	80084f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2280      	movs	r2, #128	; 0x80
 80084da:	03d1      	lsls	r1, r2, #15
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	4a10      	ldr	r2, [pc, #64]	; (8008520 <UART_CheckIdleState+0x98>)
 80084e0:	9200      	str	r2, [sp, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f000 f81e 	bl	8008524 <UART_WaitOnFlagUntilTimeout>
 80084e8:	1e03      	subs	r3, r0, #0
 80084ea:	d001      	beq.n	80084f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e012      	b.n	8008516 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2288      	movs	r2, #136	; 0x88
 80084f4:	2120      	movs	r1, #32
 80084f6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	228c      	movs	r2, #140	; 0x8c
 80084fc:	2120      	movs	r1, #32
 80084fe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2284      	movs	r2, #132	; 0x84
 8008510:	2100      	movs	r1, #0
 8008512:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b004      	add	sp, #16
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	01ffffff 	.word	0x01ffffff

08008524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b094      	sub	sp, #80	; 0x50
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	1dfb      	adds	r3, r7, #7
 8008532:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008534:	e0a7      	b.n	8008686 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008538:	3301      	adds	r3, #1
 800853a:	d100      	bne.n	800853e <UART_WaitOnFlagUntilTimeout+0x1a>
 800853c:	e0a3      	b.n	8008686 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853e:	f7fb fead 	bl	800429c <HAL_GetTick>
 8008542:	0002      	movs	r2, r0
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800854a:	429a      	cmp	r2, r3
 800854c:	d302      	bcc.n	8008554 <UART_WaitOnFlagUntilTimeout+0x30>
 800854e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008550:	2b00      	cmp	r3, #0
 8008552:	d13f      	bne.n	80085d4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008554:	f3ef 8310 	mrs	r3, PRIMASK
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800855c:	647b      	str	r3, [r7, #68]	; 0x44
 800855e:	2301      	movs	r3, #1
 8008560:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	f383 8810 	msr	PRIMASK, r3
}
 8008568:	46c0      	nop			; (mov r8, r8)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	494e      	ldr	r1, [pc, #312]	; (80086b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008576:	400a      	ands	r2, r1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	f383 8810 	msr	PRIMASK, r3
}
 8008584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008586:	f3ef 8310 	mrs	r3, PRIMASK
 800858a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858e:	643b      	str	r3, [r7, #64]	; 0x40
 8008590:	2301      	movs	r3, #1
 8008592:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	f383 8810 	msr	PRIMASK, r3
}
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2101      	movs	r1, #1
 80085a8:	438a      	bics	r2, r1
 80085aa:	609a      	str	r2, [r3, #8]
 80085ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b2:	f383 8810 	msr	PRIMASK, r3
}
 80085b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2288      	movs	r2, #136	; 0x88
 80085bc:	2120      	movs	r1, #32
 80085be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	228c      	movs	r2, #140	; 0x8c
 80085c4:	2120      	movs	r1, #32
 80085c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2284      	movs	r2, #132	; 0x84
 80085cc:	2100      	movs	r1, #0
 80085ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e069      	b.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2204      	movs	r2, #4
 80085dc:	4013      	ands	r3, r2
 80085de:	d052      	beq.n	8008686 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	2380      	movs	r3, #128	; 0x80
 80085e8:	011b      	lsls	r3, r3, #4
 80085ea:	401a      	ands	r2, r3
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d148      	bne.n	8008686 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2280      	movs	r2, #128	; 0x80
 80085fa:	0112      	lsls	r2, r2, #4
 80085fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008602:	613b      	str	r3, [r7, #16]
  return(result);
 8008604:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008608:	2301      	movs	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f383 8810 	msr	PRIMASK, r3
}
 8008612:	46c0      	nop			; (mov r8, r8)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4924      	ldr	r1, [pc, #144]	; (80086b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008620:	400a      	ands	r2, r1
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008626:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	f383 8810 	msr	PRIMASK, r3
}
 800862e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008630:	f3ef 8310 	mrs	r3, PRIMASK
 8008634:	61fb      	str	r3, [r7, #28]
  return(result);
 8008636:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008638:	64bb      	str	r3, [r7, #72]	; 0x48
 800863a:	2301      	movs	r3, #1
 800863c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f383 8810 	msr	PRIMASK, r3
}
 8008644:	46c0      	nop			; (mov r8, r8)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2101      	movs	r1, #1
 8008652:	438a      	bics	r2, r1
 8008654:	609a      	str	r2, [r3, #8]
 8008656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	f383 8810 	msr	PRIMASK, r3
}
 8008660:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2288      	movs	r2, #136	; 0x88
 8008666:	2120      	movs	r1, #32
 8008668:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	228c      	movs	r2, #140	; 0x8c
 800866e:	2120      	movs	r1, #32
 8008670:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2290      	movs	r2, #144	; 0x90
 8008676:	2120      	movs	r1, #32
 8008678:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2284      	movs	r2, #132	; 0x84
 800867e:	2100      	movs	r1, #0
 8008680:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e010      	b.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	4013      	ands	r3, r2
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	425a      	negs	r2, r3
 8008696:	4153      	adcs	r3, r2
 8008698:	b2db      	uxtb	r3, r3
 800869a:	001a      	movs	r2, r3
 800869c:	1dfb      	adds	r3, r7, #7
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d100      	bne.n	80086a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80086a4:	e747      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	0018      	movs	r0, r3
 80086aa:	46bd      	mov	sp, r7
 80086ac:	b014      	add	sp, #80	; 0x50
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	fffffe5f 	.word	0xfffffe5f

080086b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	; 0x38
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086bc:	f3ef 8310 	mrs	r3, PRIMASK
 80086c0:	617b      	str	r3, [r7, #20]
  return(result);
 80086c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34
 80086c6:	2301      	movs	r3, #1
 80086c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4926      	ldr	r1, [pc, #152]	; (8008778 <UART_EndRxTransfer+0xc4>)
 80086de:	400a      	ands	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f383 8810 	msr	PRIMASK, r3
}
 80086ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ee:	f3ef 8310 	mrs	r3, PRIMASK
 80086f2:	623b      	str	r3, [r7, #32]
  return(result);
 80086f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
 80086f8:	2301      	movs	r3, #1
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	f383 8810 	msr	PRIMASK, r3
}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	491b      	ldr	r1, [pc, #108]	; (800877c <UART_EndRxTransfer+0xc8>)
 8008710:	400a      	ands	r2, r1
 8008712:	609a      	str	r2, [r3, #8]
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d118      	bne.n	800875a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008728:	f3ef 8310 	mrs	r3, PRIMASK
 800872c:	60bb      	str	r3, [r7, #8]
  return(result);
 800872e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008732:	2301      	movs	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f383 8810 	msr	PRIMASK, r3
}
 800873c:	46c0      	nop			; (mov r8, r8)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2110      	movs	r1, #16
 800874a:	438a      	bics	r2, r1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f383 8810 	msr	PRIMASK, r3
}
 8008758:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	228c      	movs	r2, #140	; 0x8c
 800875e:	2120      	movs	r1, #32
 8008760:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	46bd      	mov	sp, r7
 8008772:	b00e      	add	sp, #56	; 0x38
 8008774:	bd80      	pop	{r7, pc}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	fffffedf 	.word	0xfffffedf
 800877c:	effffffe 	.word	0xeffffffe

08008780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	225e      	movs	r2, #94	; 0x5e
 8008792:	2100      	movs	r1, #0
 8008794:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2256      	movs	r2, #86	; 0x56
 800879a:	2100      	movs	r1, #0
 800879c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	0018      	movs	r0, r3
 80087a2:	f7ff faeb 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b004      	add	sp, #16
 80087ac:	bd80      	pop	{r7, pc}

080087ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b086      	sub	sp, #24
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80087bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	2301      	movs	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f383 8810 	msr	PRIMASK, r3
}
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2140      	movs	r1, #64	; 0x40
 80087d8:	438a      	bics	r2, r1
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f383 8810 	msr	PRIMASK, r3
}
 80087e6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2288      	movs	r2, #136	; 0x88
 80087ec:	2120      	movs	r1, #32
 80087ee:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7ff fab7 	bl	8007d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	46bd      	mov	sp, r7
 8008802:	b006      	add	sp, #24
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800880e:	46c0      	nop			; (mov r8, r8)
 8008810:	46bd      	mov	sp, r7
 8008812:	b002      	add	sp, #8
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	46bd      	mov	sp, r7
 8008822:	b002      	add	sp, #8
 8008824:	bd80      	pop	{r7, pc}

08008826 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	46bd      	mov	sp, r7
 8008832:	b002      	add	sp, #8
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2284      	movs	r2, #132	; 0x84
 8008844:	5c9b      	ldrb	r3, [r3, r2]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <HAL_UARTEx_DisableFifoMode+0x16>
 800884a:	2302      	movs	r3, #2
 800884c:	e027      	b.n	800889e <HAL_UARTEx_DisableFifoMode+0x66>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2284      	movs	r2, #132	; 0x84
 8008852:	2101      	movs	r1, #1
 8008854:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2288      	movs	r2, #136	; 0x88
 800885a:	2124      	movs	r1, #36	; 0x24
 800885c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2101      	movs	r1, #1
 8008872:	438a      	bics	r2, r1
 8008874:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a0b      	ldr	r2, [pc, #44]	; (80088a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800887a:	4013      	ands	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2288      	movs	r2, #136	; 0x88
 8008890:	2120      	movs	r1, #32
 8008892:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2284      	movs	r2, #132	; 0x84
 8008898:	2100      	movs	r1, #0
 800889a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	0018      	movs	r0, r3
 80088a0:	46bd      	mov	sp, r7
 80088a2:	b004      	add	sp, #16
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	dfffffff 	.word	0xdfffffff

080088ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2284      	movs	r2, #132	; 0x84
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e02e      	b.n	8008922 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2284      	movs	r2, #132	; 0x84
 80088c8:	2101      	movs	r1, #1
 80088ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2288      	movs	r2, #136	; 0x88
 80088d0:	2124      	movs	r1, #36	; 0x24
 80088d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2101      	movs	r1, #1
 80088e8:	438a      	bics	r2, r1
 80088ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	08d9      	lsrs	r1, r3, #3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	0018      	movs	r0, r3
 8008904:	f000 f854 	bl	80089b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2288      	movs	r2, #136	; 0x88
 8008914:	2120      	movs	r1, #32
 8008916:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2284      	movs	r2, #132	; 0x84
 800891c:	2100      	movs	r1, #0
 800891e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	0018      	movs	r0, r3
 8008924:	46bd      	mov	sp, r7
 8008926:	b004      	add	sp, #16
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2284      	movs	r2, #132	; 0x84
 800893a:	5c9b      	ldrb	r3, [r3, r2]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008940:	2302      	movs	r3, #2
 8008942:	e02f      	b.n	80089a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2284      	movs	r2, #132	; 0x84
 8008948:	2101      	movs	r1, #1
 800894a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2288      	movs	r2, #136	; 0x88
 8008950:	2124      	movs	r1, #36	; 0x24
 8008952:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2101      	movs	r1, #1
 8008968:	438a      	bics	r2, r1
 800896a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	4a0e      	ldr	r2, [pc, #56]	; (80089ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008974:	4013      	ands	r3, r2
 8008976:	0019      	movs	r1, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	0018      	movs	r0, r3
 8008986:	f000 f813 	bl	80089b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2288      	movs	r2, #136	; 0x88
 8008996:	2120      	movs	r1, #32
 8008998:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2284      	movs	r2, #132	; 0x84
 800899e:	2100      	movs	r1, #0
 80089a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b004      	add	sp, #16
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	f1ffffff 	.word	0xf1ffffff

080089b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d108      	bne.n	80089d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	226a      	movs	r2, #106	; 0x6a
 80089c4:	2101      	movs	r1, #1
 80089c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2268      	movs	r2, #104	; 0x68
 80089cc:	2101      	movs	r1, #1
 80089ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089d0:	e043      	b.n	8008a5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089d2:	260f      	movs	r6, #15
 80089d4:	19bb      	adds	r3, r7, r6
 80089d6:	2208      	movs	r2, #8
 80089d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089da:	200e      	movs	r0, #14
 80089dc:	183b      	adds	r3, r7, r0
 80089de:	2208      	movs	r2, #8
 80089e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	0e5b      	lsrs	r3, r3, #25
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	240d      	movs	r4, #13
 80089ee:	193b      	adds	r3, r7, r4
 80089f0:	2107      	movs	r1, #7
 80089f2:	400a      	ands	r2, r1
 80089f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	0f5b      	lsrs	r3, r3, #29
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	250c      	movs	r5, #12
 8008a02:	197b      	adds	r3, r7, r5
 8008a04:	2107      	movs	r1, #7
 8008a06:	400a      	ands	r2, r1
 8008a08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	197a      	adds	r2, r7, r5
 8008a10:	7812      	ldrb	r2, [r2, #0]
 8008a12:	4914      	ldr	r1, [pc, #80]	; (8008a64 <UARTEx_SetNbDataToProcess+0xb4>)
 8008a14:	5c8a      	ldrb	r2, [r1, r2]
 8008a16:	435a      	muls	r2, r3
 8008a18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a1a:	197b      	adds	r3, r7, r5
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	4a12      	ldr	r2, [pc, #72]	; (8008a68 <UARTEx_SetNbDataToProcess+0xb8>)
 8008a20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a22:	0019      	movs	r1, r3
 8008a24:	f7f7 fc14 	bl	8000250 <__divsi3>
 8008a28:	0003      	movs	r3, r0
 8008a2a:	b299      	uxth	r1, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	226a      	movs	r2, #106	; 0x6a
 8008a30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a32:	19bb      	adds	r3, r7, r6
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	193a      	adds	r2, r7, r4
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	490a      	ldr	r1, [pc, #40]	; (8008a64 <UARTEx_SetNbDataToProcess+0xb4>)
 8008a3c:	5c8a      	ldrb	r2, [r1, r2]
 8008a3e:	435a      	muls	r2, r3
 8008a40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a42:	193b      	adds	r3, r7, r4
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <UARTEx_SetNbDataToProcess+0xb8>)
 8008a48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a4a:	0019      	movs	r1, r3
 8008a4c:	f7f7 fc00 	bl	8000250 <__divsi3>
 8008a50:	0003      	movs	r3, r0
 8008a52:	b299      	uxth	r1, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2268      	movs	r2, #104	; 0x68
 8008a58:	5299      	strh	r1, [r3, r2]
}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	b005      	add	sp, #20
 8008a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	0800babc 	.word	0x0800babc
 8008a68:	0800bac4 	.word	0x0800bac4

08008a6c <__errno>:
 8008a6c:	4b01      	ldr	r3, [pc, #4]	; (8008a74 <__errno+0x8>)
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	4770      	bx	lr
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	2000000c 	.word	0x2000000c

08008a78 <__libc_init_array>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	4d0c      	ldr	r5, [pc, #48]	; (8008ab0 <__libc_init_array+0x38>)
 8008a7e:	4c0d      	ldr	r4, [pc, #52]	; (8008ab4 <__libc_init_array+0x3c>)
 8008a80:	1b64      	subs	r4, r4, r5
 8008a82:	10a4      	asrs	r4, r4, #2
 8008a84:	42a6      	cmp	r6, r4
 8008a86:	d109      	bne.n	8008a9c <__libc_init_array+0x24>
 8008a88:	2600      	movs	r6, #0
 8008a8a:	f002 fe83 	bl	800b794 <_init>
 8008a8e:	4d0a      	ldr	r5, [pc, #40]	; (8008ab8 <__libc_init_array+0x40>)
 8008a90:	4c0a      	ldr	r4, [pc, #40]	; (8008abc <__libc_init_array+0x44>)
 8008a92:	1b64      	subs	r4, r4, r5
 8008a94:	10a4      	asrs	r4, r4, #2
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d105      	bne.n	8008aa6 <__libc_init_array+0x2e>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	00b3      	lsls	r3, r6, #2
 8008a9e:	58eb      	ldr	r3, [r5, r3]
 8008aa0:	4798      	blx	r3
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7ee      	b.n	8008a84 <__libc_init_array+0xc>
 8008aa6:	00b3      	lsls	r3, r6, #2
 8008aa8:	58eb      	ldr	r3, [r5, r3]
 8008aaa:	4798      	blx	r3
 8008aac:	3601      	adds	r6, #1
 8008aae:	e7f2      	b.n	8008a96 <__libc_init_array+0x1e>
 8008ab0:	0800beac 	.word	0x0800beac
 8008ab4:	0800beac 	.word	0x0800beac
 8008ab8:	0800beac 	.word	0x0800beac
 8008abc:	0800beb0 	.word	0x0800beb0

08008ac0 <memset>:
 8008ac0:	0003      	movs	r3, r0
 8008ac2:	1882      	adds	r2, r0, r2
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d100      	bne.n	8008aca <memset+0xa>
 8008ac8:	4770      	bx	lr
 8008aca:	7019      	strb	r1, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	e7f9      	b.n	8008ac4 <memset+0x4>

08008ad0 <__cvt>:
 8008ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad2:	001e      	movs	r6, r3
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	0014      	movs	r4, r2
 8008ad8:	b08b      	sub	sp, #44	; 0x2c
 8008ada:	429e      	cmp	r6, r3
 8008adc:	da04      	bge.n	8008ae8 <__cvt+0x18>
 8008ade:	2180      	movs	r1, #128	; 0x80
 8008ae0:	0609      	lsls	r1, r1, #24
 8008ae2:	1873      	adds	r3, r6, r1
 8008ae4:	001e      	movs	r6, r3
 8008ae6:	232d      	movs	r3, #45	; 0x2d
 8008ae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008aea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008aec:	7013      	strb	r3, [r2, #0]
 8008aee:	2320      	movs	r3, #32
 8008af0:	2203      	movs	r2, #3
 8008af2:	439f      	bics	r7, r3
 8008af4:	2f46      	cmp	r7, #70	; 0x46
 8008af6:	d007      	beq.n	8008b08 <__cvt+0x38>
 8008af8:	003b      	movs	r3, r7
 8008afa:	3b45      	subs	r3, #69	; 0x45
 8008afc:	4259      	negs	r1, r3
 8008afe:	414b      	adcs	r3, r1
 8008b00:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b02:	3a01      	subs	r2, #1
 8008b04:	18cb      	adds	r3, r1, r3
 8008b06:	9310      	str	r3, [sp, #64]	; 0x40
 8008b08:	ab09      	add	r3, sp, #36	; 0x24
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	ab08      	add	r3, sp, #32
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b12:	9200      	str	r2, [sp, #0]
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b18:	0022      	movs	r2, r4
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	0033      	movs	r3, r6
 8008b1e:	f000 fe35 	bl	800978c <_dtoa_r>
 8008b22:	0005      	movs	r5, r0
 8008b24:	2f47      	cmp	r7, #71	; 0x47
 8008b26:	d102      	bne.n	8008b2e <__cvt+0x5e>
 8008b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b2a:	07db      	lsls	r3, r3, #31
 8008b2c:	d528      	bpl.n	8008b80 <__cvt+0xb0>
 8008b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b30:	18eb      	adds	r3, r5, r3
 8008b32:	9307      	str	r3, [sp, #28]
 8008b34:	2f46      	cmp	r7, #70	; 0x46
 8008b36:	d114      	bne.n	8008b62 <__cvt+0x92>
 8008b38:	782b      	ldrb	r3, [r5, #0]
 8008b3a:	2b30      	cmp	r3, #48	; 0x30
 8008b3c:	d10c      	bne.n	8008b58 <__cvt+0x88>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2300      	movs	r3, #0
 8008b42:	0020      	movs	r0, r4
 8008b44:	0031      	movs	r1, r6
 8008b46:	f7f7 fc7f 	bl	8000448 <__aeabi_dcmpeq>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d104      	bne.n	8008b58 <__cvt+0x88>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b5a:	9a07      	ldr	r2, [sp, #28]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	18d3      	adds	r3, r2, r3
 8008b60:	9307      	str	r3, [sp, #28]
 8008b62:	2200      	movs	r2, #0
 8008b64:	2300      	movs	r3, #0
 8008b66:	0020      	movs	r0, r4
 8008b68:	0031      	movs	r1, r6
 8008b6a:	f7f7 fc6d 	bl	8000448 <__aeabi_dcmpeq>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d001      	beq.n	8008b76 <__cvt+0xa6>
 8008b72:	9b07      	ldr	r3, [sp, #28]
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	2230      	movs	r2, #48	; 0x30
 8008b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7a:	9907      	ldr	r1, [sp, #28]
 8008b7c:	428b      	cmp	r3, r1
 8008b7e:	d306      	bcc.n	8008b8e <__cvt+0xbe>
 8008b80:	0028      	movs	r0, r5
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b86:	1b5b      	subs	r3, r3, r5
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	b00b      	add	sp, #44	; 0x2c
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	1c59      	adds	r1, r3, #1
 8008b90:	9109      	str	r1, [sp, #36]	; 0x24
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	e7f0      	b.n	8008b78 <__cvt+0xa8>

08008b96 <__exponent>:
 8008b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b98:	1c83      	adds	r3, r0, #2
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	9303      	str	r3, [sp, #12]
 8008b9e:	0005      	movs	r5, r0
 8008ba0:	000c      	movs	r4, r1
 8008ba2:	232b      	movs	r3, #43	; 0x2b
 8008ba4:	7002      	strb	r2, [r0, #0]
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	da01      	bge.n	8008bae <__exponent+0x18>
 8008baa:	424c      	negs	r4, r1
 8008bac:	3302      	adds	r3, #2
 8008bae:	706b      	strb	r3, [r5, #1]
 8008bb0:	2c09      	cmp	r4, #9
 8008bb2:	dd31      	ble.n	8008c18 <__exponent+0x82>
 8008bb4:	270a      	movs	r7, #10
 8008bb6:	ab04      	add	r3, sp, #16
 8008bb8:	1dde      	adds	r6, r3, #7
 8008bba:	0020      	movs	r0, r4
 8008bbc:	0039      	movs	r1, r7
 8008bbe:	9601      	str	r6, [sp, #4]
 8008bc0:	f7f7 fc2c 	bl	800041c <__aeabi_idivmod>
 8008bc4:	3e01      	subs	r6, #1
 8008bc6:	3130      	adds	r1, #48	; 0x30
 8008bc8:	0020      	movs	r0, r4
 8008bca:	7031      	strb	r1, [r6, #0]
 8008bcc:	0039      	movs	r1, r7
 8008bce:	9402      	str	r4, [sp, #8]
 8008bd0:	f7f7 fb3e 	bl	8000250 <__divsi3>
 8008bd4:	9b02      	ldr	r3, [sp, #8]
 8008bd6:	0004      	movs	r4, r0
 8008bd8:	2b63      	cmp	r3, #99	; 0x63
 8008bda:	dcee      	bgt.n	8008bba <__exponent+0x24>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	3430      	adds	r4, #48	; 0x30
 8008be0:	1e9a      	subs	r2, r3, #2
 8008be2:	0013      	movs	r3, r2
 8008be4:	9903      	ldr	r1, [sp, #12]
 8008be6:	7014      	strb	r4, [r2, #0]
 8008be8:	a804      	add	r0, sp, #16
 8008bea:	3007      	adds	r0, #7
 8008bec:	4298      	cmp	r0, r3
 8008bee:	d80e      	bhi.n	8008c0e <__exponent+0x78>
 8008bf0:	ab04      	add	r3, sp, #16
 8008bf2:	3307      	adds	r3, #7
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d804      	bhi.n	8008c04 <__exponent+0x6e>
 8008bfa:	ab04      	add	r3, sp, #16
 8008bfc:	3009      	adds	r0, #9
 8008bfe:	18c0      	adds	r0, r0, r3
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	1ac0      	subs	r0, r0, r3
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	1818      	adds	r0, r3, r0
 8008c08:	1b40      	subs	r0, r0, r5
 8008c0a:	b007      	add	sp, #28
 8008c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c0e:	7818      	ldrb	r0, [r3, #0]
 8008c10:	3301      	adds	r3, #1
 8008c12:	7008      	strb	r0, [r1, #0]
 8008c14:	3101      	adds	r1, #1
 8008c16:	e7e7      	b.n	8008be8 <__exponent+0x52>
 8008c18:	2330      	movs	r3, #48	; 0x30
 8008c1a:	18e4      	adds	r4, r4, r3
 8008c1c:	70ab      	strb	r3, [r5, #2]
 8008c1e:	1d28      	adds	r0, r5, #4
 8008c20:	70ec      	strb	r4, [r5, #3]
 8008c22:	e7f1      	b.n	8008c08 <__exponent+0x72>

08008c24 <_printf_float>:
 8008c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c26:	b095      	sub	sp, #84	; 0x54
 8008c28:	000c      	movs	r4, r1
 8008c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c2c:	001e      	movs	r6, r3
 8008c2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008c30:	0007      	movs	r7, r0
 8008c32:	f001 fd93 	bl	800a75c <_localeconv_r>
 8008c36:	6803      	ldr	r3, [r0, #0]
 8008c38:	0018      	movs	r0, r3
 8008c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c3c:	f7f7 fa62 	bl	8000104 <strlen>
 8008c40:	2300      	movs	r3, #0
 8008c42:	9312      	str	r3, [sp, #72]	; 0x48
 8008c44:	7e23      	ldrb	r3, [r4, #24]
 8008c46:	2207      	movs	r2, #7
 8008c48:	930a      	str	r3, [sp, #40]	; 0x28
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	900e      	str	r0, [sp, #56]	; 0x38
 8008c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	05c9      	lsls	r1, r1, #23
 8008c56:	d547      	bpl.n	8008ce8 <_printf_float+0xc4>
 8008c58:	189b      	adds	r3, r3, r2
 8008c5a:	4393      	bics	r3, r2
 8008c5c:	001a      	movs	r2, r3
 8008c5e:	3208      	adds	r2, #8
 8008c60:	602a      	str	r2, [r5, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	64a2      	str	r2, [r4, #72]	; 0x48
 8008c68:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008c6e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c72:	006b      	lsls	r3, r5, #1
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c7a:	4ba7      	ldr	r3, [pc, #668]	; (8008f18 <_printf_float+0x2f4>)
 8008c7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c7e:	4252      	negs	r2, r2
 8008c80:	f7fa f852 	bl	8002d28 <__aeabi_dcmpun>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d131      	bne.n	8008cec <_printf_float+0xc8>
 8008c88:	2201      	movs	r2, #1
 8008c8a:	4ba3      	ldr	r3, [pc, #652]	; (8008f18 <_printf_float+0x2f4>)
 8008c8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c90:	4252      	negs	r2, r2
 8008c92:	f7f7 fbe9 	bl	8000468 <__aeabi_dcmple>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d128      	bne.n	8008cec <_printf_float+0xc8>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	0029      	movs	r1, r5
 8008ca0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ca2:	f7f7 fbd7 	bl	8000454 <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d003      	beq.n	8008cb2 <_printf_float+0x8e>
 8008caa:	0023      	movs	r3, r4
 8008cac:	222d      	movs	r2, #45	; 0x2d
 8008cae:	3343      	adds	r3, #67	; 0x43
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb4:	4d99      	ldr	r5, [pc, #612]	; (8008f1c <_printf_float+0x2f8>)
 8008cb6:	2b47      	cmp	r3, #71	; 0x47
 8008cb8:	d900      	bls.n	8008cbc <_printf_float+0x98>
 8008cba:	4d99      	ldr	r5, [pc, #612]	; (8008f20 <_printf_float+0x2fc>)
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	439a      	bics	r2, r3
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	6022      	str	r2, [r4, #0]
 8008cca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cce:	0021      	movs	r1, r4
 8008cd0:	0038      	movs	r0, r7
 8008cd2:	9600      	str	r6, [sp, #0]
 8008cd4:	aa13      	add	r2, sp, #76	; 0x4c
 8008cd6:	f000 f9e7 	bl	80090a8 <_printf_common>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d000      	beq.n	8008ce0 <_printf_float+0xbc>
 8008cde:	e0a2      	b.n	8008e26 <_printf_float+0x202>
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	4240      	negs	r0, r0
 8008ce4:	b015      	add	sp, #84	; 0x54
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce8:	3307      	adds	r3, #7
 8008cea:	e7b6      	b.n	8008c5a <_printf_float+0x36>
 8008cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cee:	002b      	movs	r3, r5
 8008cf0:	0010      	movs	r0, r2
 8008cf2:	0029      	movs	r1, r5
 8008cf4:	f7fa f818 	bl	8002d28 <__aeabi_dcmpun>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d00b      	beq.n	8008d14 <_printf_float+0xf0>
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	da03      	bge.n	8008d08 <_printf_float+0xe4>
 8008d00:	0023      	movs	r3, r4
 8008d02:	222d      	movs	r2, #45	; 0x2d
 8008d04:	3343      	adds	r3, #67	; 0x43
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0a:	4d86      	ldr	r5, [pc, #536]	; (8008f24 <_printf_float+0x300>)
 8008d0c:	2b47      	cmp	r3, #71	; 0x47
 8008d0e:	d9d5      	bls.n	8008cbc <_printf_float+0x98>
 8008d10:	4d85      	ldr	r5, [pc, #532]	; (8008f28 <_printf_float+0x304>)
 8008d12:	e7d3      	b.n	8008cbc <_printf_float+0x98>
 8008d14:	2220      	movs	r2, #32
 8008d16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	4391      	bics	r1, r2
 8008d1c:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	d149      	bne.n	8008db6 <_printf_float+0x192>
 8008d22:	3307      	adds	r3, #7
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	2380      	movs	r3, #128	; 0x80
 8008d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	9206      	str	r2, [sp, #24]
 8008d32:	aa12      	add	r2, sp, #72	; 0x48
 8008d34:	9205      	str	r2, [sp, #20]
 8008d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d38:	a908      	add	r1, sp, #32
 8008d3a:	9204      	str	r2, [sp, #16]
 8008d3c:	aa11      	add	r2, sp, #68	; 0x44
 8008d3e:	9203      	str	r2, [sp, #12]
 8008d40:	2223      	movs	r2, #35	; 0x23
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	6863      	ldr	r3, [r4, #4]
 8008d48:	1852      	adds	r2, r2, r1
 8008d4a:	9202      	str	r2, [sp, #8]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	0038      	movs	r0, r7
 8008d50:	002b      	movs	r3, r5
 8008d52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d54:	f7ff febc 	bl	8008ad0 <__cvt>
 8008d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d5a:	0005      	movs	r5, r0
 8008d5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d5e:	2b47      	cmp	r3, #71	; 0x47
 8008d60:	d108      	bne.n	8008d74 <_printf_float+0x150>
 8008d62:	1ccb      	adds	r3, r1, #3
 8008d64:	db02      	blt.n	8008d6c <_printf_float+0x148>
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	4299      	cmp	r1, r3
 8008d6a:	dd48      	ble.n	8008dfe <_printf_float+0x1da>
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d6e:	3b02      	subs	r3, #2
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	930a      	str	r3, [sp, #40]	; 0x28
 8008d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d76:	2b65      	cmp	r3, #101	; 0x65
 8008d78:	d824      	bhi.n	8008dc4 <_printf_float+0x1a0>
 8008d7a:	0020      	movs	r0, r4
 8008d7c:	001a      	movs	r2, r3
 8008d7e:	3901      	subs	r1, #1
 8008d80:	3050      	adds	r0, #80	; 0x50
 8008d82:	9111      	str	r1, [sp, #68]	; 0x44
 8008d84:	f7ff ff07 	bl	8008b96 <__exponent>
 8008d88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d8c:	1813      	adds	r3, r2, r0
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	2a01      	cmp	r2, #1
 8008d92:	dc02      	bgt.n	8008d9a <_printf_float+0x176>
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	07d2      	lsls	r2, r2, #31
 8008d98:	d501      	bpl.n	8008d9e <_printf_float+0x17a>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	2323      	movs	r3, #35	; 0x23
 8008da0:	aa08      	add	r2, sp, #32
 8008da2:	189b      	adds	r3, r3, r2
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d100      	bne.n	8008dac <_printf_float+0x188>
 8008daa:	e78f      	b.n	8008ccc <_printf_float+0xa8>
 8008dac:	0023      	movs	r3, r4
 8008dae:	222d      	movs	r2, #45	; 0x2d
 8008db0:	3343      	adds	r3, #67	; 0x43
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e78a      	b.n	8008ccc <_printf_float+0xa8>
 8008db6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008db8:	2a47      	cmp	r2, #71	; 0x47
 8008dba:	d1b4      	bne.n	8008d26 <_printf_float+0x102>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1b2      	bne.n	8008d26 <_printf_float+0x102>
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	e7af      	b.n	8008d24 <_printf_float+0x100>
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc6:	2b66      	cmp	r3, #102	; 0x66
 8008dc8:	d11b      	bne.n	8008e02 <_printf_float+0x1de>
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	dd0d      	ble.n	8008dec <_printf_float+0x1c8>
 8008dd0:	6121      	str	r1, [r4, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <_printf_float+0x1b8>
 8008dd6:	6822      	ldr	r2, [r4, #0]
 8008dd8:	07d2      	lsls	r2, r2, #31
 8008dda:	d502      	bpl.n	8008de2 <_printf_float+0x1be>
 8008ddc:	3301      	adds	r3, #1
 8008dde:	1859      	adds	r1, r3, r1
 8008de0:	6121      	str	r1, [r4, #16]
 8008de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de4:	65a3      	str	r3, [r4, #88]	; 0x58
 8008de6:	2300      	movs	r3, #0
 8008de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dea:	e7d8      	b.n	8008d9e <_printf_float+0x17a>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d103      	bne.n	8008df8 <_printf_float+0x1d4>
 8008df0:	2201      	movs	r2, #1
 8008df2:	6821      	ldr	r1, [r4, #0]
 8008df4:	4211      	tst	r1, r2
 8008df6:	d000      	beq.n	8008dfa <_printf_float+0x1d6>
 8008df8:	1c9a      	adds	r2, r3, #2
 8008dfa:	6122      	str	r2, [r4, #16]
 8008dfc:	e7f1      	b.n	8008de2 <_printf_float+0x1be>
 8008dfe:	2367      	movs	r3, #103	; 0x67
 8008e00:	930a      	str	r3, [sp, #40]	; 0x28
 8008e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e06:	4293      	cmp	r3, r2
 8008e08:	db06      	blt.n	8008e18 <_printf_float+0x1f4>
 8008e0a:	6822      	ldr	r2, [r4, #0]
 8008e0c:	6123      	str	r3, [r4, #16]
 8008e0e:	07d2      	lsls	r2, r2, #31
 8008e10:	d5e7      	bpl.n	8008de2 <_printf_float+0x1be>
 8008e12:	3301      	adds	r3, #1
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	e7e4      	b.n	8008de2 <_printf_float+0x1be>
 8008e18:	2101      	movs	r1, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dc01      	bgt.n	8008e22 <_printf_float+0x1fe>
 8008e1e:	1849      	adds	r1, r1, r1
 8008e20:	1ac9      	subs	r1, r1, r3
 8008e22:	1852      	adds	r2, r2, r1
 8008e24:	e7e9      	b.n	8008dfa <_printf_float+0x1d6>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	0553      	lsls	r3, r2, #21
 8008e2a:	d407      	bmi.n	8008e3c <_printf_float+0x218>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	002a      	movs	r2, r5
 8008e30:	0038      	movs	r0, r7
 8008e32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e34:	47b0      	blx	r6
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	d128      	bne.n	8008e8c <_printf_float+0x268>
 8008e3a:	e751      	b.n	8008ce0 <_printf_float+0xbc>
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3e:	2b65      	cmp	r3, #101	; 0x65
 8008e40:	d800      	bhi.n	8008e44 <_printf_float+0x220>
 8008e42:	e0e1      	b.n	8009008 <_printf_float+0x3e4>
 8008e44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008e46:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f7f7 fafc 	bl	8000448 <__aeabi_dcmpeq>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d031      	beq.n	8008eb8 <_printf_float+0x294>
 8008e54:	2301      	movs	r3, #1
 8008e56:	0038      	movs	r0, r7
 8008e58:	4a34      	ldr	r2, [pc, #208]	; (8008f2c <_printf_float+0x308>)
 8008e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e5c:	47b0      	blx	r6
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d100      	bne.n	8008e64 <_printf_float+0x240>
 8008e62:	e73d      	b.n	8008ce0 <_printf_float+0xbc>
 8008e64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	db02      	blt.n	8008e72 <_printf_float+0x24e>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	07db      	lsls	r3, r3, #31
 8008e70:	d50c      	bpl.n	8008e8c <_printf_float+0x268>
 8008e72:	0038      	movs	r0, r7
 8008e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e7a:	47b0      	blx	r6
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	d100      	bne.n	8008e84 <_printf_float+0x260>
 8008e82:	e72d      	b.n	8008ce0 <_printf_float+0xbc>
 8008e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e86:	3b01      	subs	r3, #1
 8008e88:	42ab      	cmp	r3, r5
 8008e8a:	dc0a      	bgt.n	8008ea2 <_printf_float+0x27e>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	079b      	lsls	r3, r3, #30
 8008e90:	d500      	bpl.n	8008e94 <_printf_float+0x270>
 8008e92:	e106      	b.n	80090a2 <_printf_float+0x47e>
 8008e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e96:	68e0      	ldr	r0, [r4, #12]
 8008e98:	4298      	cmp	r0, r3
 8008e9a:	db00      	blt.n	8008e9e <_printf_float+0x27a>
 8008e9c:	e722      	b.n	8008ce4 <_printf_float+0xc0>
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	e720      	b.n	8008ce4 <_printf_float+0xc0>
 8008ea2:	0022      	movs	r2, r4
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	0038      	movs	r0, r7
 8008ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eaa:	321a      	adds	r2, #26
 8008eac:	47b0      	blx	r6
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d100      	bne.n	8008eb4 <_printf_float+0x290>
 8008eb2:	e715      	b.n	8008ce0 <_printf_float+0xbc>
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	e7e5      	b.n	8008e84 <_printf_float+0x260>
 8008eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	dc38      	bgt.n	8008f30 <_printf_float+0x30c>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	0038      	movs	r0, r7
 8008ec2:	4a1a      	ldr	r2, [pc, #104]	; (8008f2c <_printf_float+0x308>)
 8008ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ec6:	47b0      	blx	r6
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d100      	bne.n	8008ece <_printf_float+0x2aa>
 8008ecc:	e708      	b.n	8008ce0 <_printf_float+0xbc>
 8008ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	d102      	bne.n	8008edc <_printf_float+0x2b8>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	07db      	lsls	r3, r3, #31
 8008eda:	d5d7      	bpl.n	8008e8c <_printf_float+0x268>
 8008edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ede:	0038      	movs	r0, r7
 8008ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee4:	47b0      	blx	r6
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d100      	bne.n	8008eec <_printf_float+0x2c8>
 8008eea:	e6f9      	b.n	8008ce0 <_printf_float+0xbc>
 8008eec:	2300      	movs	r3, #0
 8008eee:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	dc01      	bgt.n	8008efe <_printf_float+0x2da>
 8008efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008efc:	e797      	b.n	8008e2e <_printf_float+0x20a>
 8008efe:	0022      	movs	r2, r4
 8008f00:	2301      	movs	r3, #1
 8008f02:	0038      	movs	r0, r7
 8008f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f06:	321a      	adds	r2, #26
 8008f08:	47b0      	blx	r6
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	d100      	bne.n	8008f10 <_printf_float+0x2ec>
 8008f0e:	e6e7      	b.n	8008ce0 <_printf_float+0xbc>
 8008f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f12:	3301      	adds	r3, #1
 8008f14:	e7eb      	b.n	8008eee <_printf_float+0x2ca>
 8008f16:	46c0      	nop			; (mov r8, r8)
 8008f18:	7fefffff 	.word	0x7fefffff
 8008f1c:	0800bad0 	.word	0x0800bad0
 8008f20:	0800bad4 	.word	0x0800bad4
 8008f24:	0800bad8 	.word	0x0800bad8
 8008f28:	0800badc 	.word	0x0800badc
 8008f2c:	0800bae0 	.word	0x0800bae0
 8008f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f34:	920a      	str	r2, [sp, #40]	; 0x28
 8008f36:	429a      	cmp	r2, r3
 8008f38:	dd00      	ble.n	8008f3c <_printf_float+0x318>
 8008f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dc3c      	bgt.n	8008fbc <_printf_float+0x398>
 8008f42:	2300      	movs	r3, #0
 8008f44:	930d      	str	r3, [sp, #52]	; 0x34
 8008f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	17db      	asrs	r3, r3, #31
 8008f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f56:	4013      	ands	r3, r2
 8008f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	dc34      	bgt.n	8008fcc <_printf_float+0x3a8>
 8008f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f66:	4293      	cmp	r3, r2
 8008f68:	db3d      	blt.n	8008fe6 <_printf_float+0x3c2>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	07db      	lsls	r3, r3, #31
 8008f6e:	d43a      	bmi.n	8008fe6 <_printf_float+0x3c2>
 8008f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	1a52      	subs	r2, r2, r1
 8008f7a:	920a      	str	r2, [sp, #40]	; 0x28
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	dd00      	ble.n	8008f82 <_printf_float+0x35e>
 8008f80:	930a      	str	r3, [sp, #40]	; 0x28
 8008f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dc36      	bgt.n	8008ff6 <_printf_float+0x3d2>
 8008f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8a:	2500      	movs	r5, #0
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	17db      	asrs	r3, r3, #31
 8008f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9c:	400a      	ands	r2, r1
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	42ab      	cmp	r3, r5
 8008fa2:	dc00      	bgt.n	8008fa6 <_printf_float+0x382>
 8008fa4:	e772      	b.n	8008e8c <_printf_float+0x268>
 8008fa6:	0022      	movs	r2, r4
 8008fa8:	2301      	movs	r3, #1
 8008faa:	0038      	movs	r0, r7
 8008fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fae:	321a      	adds	r2, #26
 8008fb0:	47b0      	blx	r6
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d100      	bne.n	8008fb8 <_printf_float+0x394>
 8008fb6:	e693      	b.n	8008ce0 <_printf_float+0xbc>
 8008fb8:	3501      	adds	r5, #1
 8008fba:	e7ea      	b.n	8008f92 <_printf_float+0x36e>
 8008fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbe:	002a      	movs	r2, r5
 8008fc0:	0038      	movs	r0, r7
 8008fc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fc4:	47b0      	blx	r6
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d1bb      	bne.n	8008f42 <_printf_float+0x31e>
 8008fca:	e689      	b.n	8008ce0 <_printf_float+0xbc>
 8008fcc:	0022      	movs	r2, r4
 8008fce:	2301      	movs	r3, #1
 8008fd0:	0038      	movs	r0, r7
 8008fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fd4:	321a      	adds	r2, #26
 8008fd6:	47b0      	blx	r6
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d100      	bne.n	8008fde <_printf_float+0x3ba>
 8008fdc:	e680      	b.n	8008ce0 <_printf_float+0xbc>
 8008fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fe4:	e7b3      	b.n	8008f4e <_printf_float+0x32a>
 8008fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe8:	0038      	movs	r0, r7
 8008fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fee:	47b0      	blx	r6
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d1bd      	bne.n	8008f70 <_printf_float+0x34c>
 8008ff4:	e674      	b.n	8008ce0 <_printf_float+0xbc>
 8008ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff8:	0038      	movs	r0, r7
 8008ffa:	18ea      	adds	r2, r5, r3
 8008ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	47b0      	blx	r6
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d1c0      	bne.n	8008f88 <_printf_float+0x364>
 8009006:	e66b      	b.n	8008ce0 <_printf_float+0xbc>
 8009008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800900a:	2b01      	cmp	r3, #1
 800900c:	dc02      	bgt.n	8009014 <_printf_float+0x3f0>
 800900e:	2301      	movs	r3, #1
 8009010:	421a      	tst	r2, r3
 8009012:	d034      	beq.n	800907e <_printf_float+0x45a>
 8009014:	2301      	movs	r3, #1
 8009016:	002a      	movs	r2, r5
 8009018:	0038      	movs	r0, r7
 800901a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800901c:	47b0      	blx	r6
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d100      	bne.n	8009024 <_printf_float+0x400>
 8009022:	e65d      	b.n	8008ce0 <_printf_float+0xbc>
 8009024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009026:	0038      	movs	r0, r7
 8009028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800902a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800902c:	47b0      	blx	r6
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d100      	bne.n	8009034 <_printf_float+0x410>
 8009032:	e655      	b.n	8008ce0 <_printf_float+0xbc>
 8009034:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009036:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009038:	2200      	movs	r2, #0
 800903a:	2300      	movs	r3, #0
 800903c:	f7f7 fa04 	bl	8000448 <__aeabi_dcmpeq>
 8009040:	2800      	cmp	r0, #0
 8009042:	d11a      	bne.n	800907a <_printf_float+0x456>
 8009044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009046:	1c6a      	adds	r2, r5, #1
 8009048:	3b01      	subs	r3, #1
 800904a:	0038      	movs	r0, r7
 800904c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800904e:	47b0      	blx	r6
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d10e      	bne.n	8009072 <_printf_float+0x44e>
 8009054:	e644      	b.n	8008ce0 <_printf_float+0xbc>
 8009056:	0022      	movs	r2, r4
 8009058:	2301      	movs	r3, #1
 800905a:	0038      	movs	r0, r7
 800905c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905e:	321a      	adds	r2, #26
 8009060:	47b0      	blx	r6
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	d100      	bne.n	8009068 <_printf_float+0x444>
 8009066:	e63b      	b.n	8008ce0 <_printf_float+0xbc>
 8009068:	3501      	adds	r5, #1
 800906a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800906c:	3b01      	subs	r3, #1
 800906e:	42ab      	cmp	r3, r5
 8009070:	dcf1      	bgt.n	8009056 <_printf_float+0x432>
 8009072:	0022      	movs	r2, r4
 8009074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009076:	3250      	adds	r2, #80	; 0x50
 8009078:	e6da      	b.n	8008e30 <_printf_float+0x20c>
 800907a:	2500      	movs	r5, #0
 800907c:	e7f5      	b.n	800906a <_printf_float+0x446>
 800907e:	002a      	movs	r2, r5
 8009080:	e7e3      	b.n	800904a <_printf_float+0x426>
 8009082:	0022      	movs	r2, r4
 8009084:	2301      	movs	r3, #1
 8009086:	0038      	movs	r0, r7
 8009088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800908a:	3219      	adds	r2, #25
 800908c:	47b0      	blx	r6
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d100      	bne.n	8009094 <_printf_float+0x470>
 8009092:	e625      	b.n	8008ce0 <_printf_float+0xbc>
 8009094:	3501      	adds	r5, #1
 8009096:	68e3      	ldr	r3, [r4, #12]
 8009098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	42ab      	cmp	r3, r5
 800909e:	dcf0      	bgt.n	8009082 <_printf_float+0x45e>
 80090a0:	e6f8      	b.n	8008e94 <_printf_float+0x270>
 80090a2:	2500      	movs	r5, #0
 80090a4:	e7f7      	b.n	8009096 <_printf_float+0x472>
 80090a6:	46c0      	nop			; (mov r8, r8)

080090a8 <_printf_common>:
 80090a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090aa:	0015      	movs	r5, r2
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	688a      	ldr	r2, [r1, #8]
 80090b0:	690b      	ldr	r3, [r1, #16]
 80090b2:	000c      	movs	r4, r1
 80090b4:	9000      	str	r0, [sp, #0]
 80090b6:	4293      	cmp	r3, r2
 80090b8:	da00      	bge.n	80090bc <_printf_common+0x14>
 80090ba:	0013      	movs	r3, r2
 80090bc:	0022      	movs	r2, r4
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	3243      	adds	r2, #67	; 0x43
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	d001      	beq.n	80090cc <_printf_common+0x24>
 80090c8:	3301      	adds	r3, #1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	069b      	lsls	r3, r3, #26
 80090d0:	d502      	bpl.n	80090d8 <_printf_common+0x30>
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	3302      	adds	r3, #2
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	2306      	movs	r3, #6
 80090dc:	0017      	movs	r7, r2
 80090de:	401f      	ands	r7, r3
 80090e0:	421a      	tst	r2, r3
 80090e2:	d027      	beq.n	8009134 <_printf_common+0x8c>
 80090e4:	0023      	movs	r3, r4
 80090e6:	3343      	adds	r3, #67	; 0x43
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	1e5a      	subs	r2, r3, #1
 80090ec:	4193      	sbcs	r3, r2
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	0692      	lsls	r2, r2, #26
 80090f2:	d430      	bmi.n	8009156 <_printf_common+0xae>
 80090f4:	0022      	movs	r2, r4
 80090f6:	9901      	ldr	r1, [sp, #4]
 80090f8:	9800      	ldr	r0, [sp, #0]
 80090fa:	9e08      	ldr	r6, [sp, #32]
 80090fc:	3243      	adds	r2, #67	; 0x43
 80090fe:	47b0      	blx	r6
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d025      	beq.n	8009150 <_printf_common+0xa8>
 8009104:	2306      	movs	r3, #6
 8009106:	6820      	ldr	r0, [r4, #0]
 8009108:	682a      	ldr	r2, [r5, #0]
 800910a:	68e1      	ldr	r1, [r4, #12]
 800910c:	2500      	movs	r5, #0
 800910e:	4003      	ands	r3, r0
 8009110:	2b04      	cmp	r3, #4
 8009112:	d103      	bne.n	800911c <_printf_common+0x74>
 8009114:	1a8d      	subs	r5, r1, r2
 8009116:	43eb      	mvns	r3, r5
 8009118:	17db      	asrs	r3, r3, #31
 800911a:	401d      	ands	r5, r3
 800911c:	68a3      	ldr	r3, [r4, #8]
 800911e:	6922      	ldr	r2, [r4, #16]
 8009120:	4293      	cmp	r3, r2
 8009122:	dd01      	ble.n	8009128 <_printf_common+0x80>
 8009124:	1a9b      	subs	r3, r3, r2
 8009126:	18ed      	adds	r5, r5, r3
 8009128:	2700      	movs	r7, #0
 800912a:	42bd      	cmp	r5, r7
 800912c:	d120      	bne.n	8009170 <_printf_common+0xc8>
 800912e:	2000      	movs	r0, #0
 8009130:	e010      	b.n	8009154 <_printf_common+0xac>
 8009132:	3701      	adds	r7, #1
 8009134:	68e3      	ldr	r3, [r4, #12]
 8009136:	682a      	ldr	r2, [r5, #0]
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	42bb      	cmp	r3, r7
 800913c:	ddd2      	ble.n	80090e4 <_printf_common+0x3c>
 800913e:	0022      	movs	r2, r4
 8009140:	2301      	movs	r3, #1
 8009142:	9901      	ldr	r1, [sp, #4]
 8009144:	9800      	ldr	r0, [sp, #0]
 8009146:	9e08      	ldr	r6, [sp, #32]
 8009148:	3219      	adds	r2, #25
 800914a:	47b0      	blx	r6
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d1f0      	bne.n	8009132 <_printf_common+0x8a>
 8009150:	2001      	movs	r0, #1
 8009152:	4240      	negs	r0, r0
 8009154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009156:	2030      	movs	r0, #48	; 0x30
 8009158:	18e1      	adds	r1, r4, r3
 800915a:	3143      	adds	r1, #67	; 0x43
 800915c:	7008      	strb	r0, [r1, #0]
 800915e:	0021      	movs	r1, r4
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	3145      	adds	r1, #69	; 0x45
 8009164:	7809      	ldrb	r1, [r1, #0]
 8009166:	18a2      	adds	r2, r4, r2
 8009168:	3243      	adds	r2, #67	; 0x43
 800916a:	3302      	adds	r3, #2
 800916c:	7011      	strb	r1, [r2, #0]
 800916e:	e7c1      	b.n	80090f4 <_printf_common+0x4c>
 8009170:	0022      	movs	r2, r4
 8009172:	2301      	movs	r3, #1
 8009174:	9901      	ldr	r1, [sp, #4]
 8009176:	9800      	ldr	r0, [sp, #0]
 8009178:	9e08      	ldr	r6, [sp, #32]
 800917a:	321a      	adds	r2, #26
 800917c:	47b0      	blx	r6
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d0e6      	beq.n	8009150 <_printf_common+0xa8>
 8009182:	3701      	adds	r7, #1
 8009184:	e7d1      	b.n	800912a <_printf_common+0x82>
	...

08009188 <_printf_i>:
 8009188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800918a:	b08b      	sub	sp, #44	; 0x2c
 800918c:	9206      	str	r2, [sp, #24]
 800918e:	000a      	movs	r2, r1
 8009190:	3243      	adds	r2, #67	; 0x43
 8009192:	9307      	str	r3, [sp, #28]
 8009194:	9005      	str	r0, [sp, #20]
 8009196:	9204      	str	r2, [sp, #16]
 8009198:	7e0a      	ldrb	r2, [r1, #24]
 800919a:	000c      	movs	r4, r1
 800919c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800919e:	2a78      	cmp	r2, #120	; 0x78
 80091a0:	d807      	bhi.n	80091b2 <_printf_i+0x2a>
 80091a2:	2a62      	cmp	r2, #98	; 0x62
 80091a4:	d809      	bhi.n	80091ba <_printf_i+0x32>
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	d100      	bne.n	80091ac <_printf_i+0x24>
 80091aa:	e0c1      	b.n	8009330 <_printf_i+0x1a8>
 80091ac:	2a58      	cmp	r2, #88	; 0x58
 80091ae:	d100      	bne.n	80091b2 <_printf_i+0x2a>
 80091b0:	e08c      	b.n	80092cc <_printf_i+0x144>
 80091b2:	0026      	movs	r6, r4
 80091b4:	3642      	adds	r6, #66	; 0x42
 80091b6:	7032      	strb	r2, [r6, #0]
 80091b8:	e022      	b.n	8009200 <_printf_i+0x78>
 80091ba:	0010      	movs	r0, r2
 80091bc:	3863      	subs	r0, #99	; 0x63
 80091be:	2815      	cmp	r0, #21
 80091c0:	d8f7      	bhi.n	80091b2 <_printf_i+0x2a>
 80091c2:	f7f6 ffb1 	bl	8000128 <__gnu_thumb1_case_shi>
 80091c6:	0016      	.short	0x0016
 80091c8:	fff6001f 	.word	0xfff6001f
 80091cc:	fff6fff6 	.word	0xfff6fff6
 80091d0:	001ffff6 	.word	0x001ffff6
 80091d4:	fff6fff6 	.word	0xfff6fff6
 80091d8:	fff6fff6 	.word	0xfff6fff6
 80091dc:	003600a8 	.word	0x003600a8
 80091e0:	fff6009a 	.word	0xfff6009a
 80091e4:	00b9fff6 	.word	0x00b9fff6
 80091e8:	0036fff6 	.word	0x0036fff6
 80091ec:	fff6fff6 	.word	0xfff6fff6
 80091f0:	009e      	.short	0x009e
 80091f2:	0026      	movs	r6, r4
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	3642      	adds	r6, #66	; 0x42
 80091f8:	1d11      	adds	r1, r2, #4
 80091fa:	6019      	str	r1, [r3, #0]
 80091fc:	6813      	ldr	r3, [r2, #0]
 80091fe:	7033      	strb	r3, [r6, #0]
 8009200:	2301      	movs	r3, #1
 8009202:	e0a7      	b.n	8009354 <_printf_i+0x1cc>
 8009204:	6808      	ldr	r0, [r1, #0]
 8009206:	6819      	ldr	r1, [r3, #0]
 8009208:	1d0a      	adds	r2, r1, #4
 800920a:	0605      	lsls	r5, r0, #24
 800920c:	d50b      	bpl.n	8009226 <_printf_i+0x9e>
 800920e:	680d      	ldr	r5, [r1, #0]
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	2d00      	cmp	r5, #0
 8009214:	da03      	bge.n	800921e <_printf_i+0x96>
 8009216:	232d      	movs	r3, #45	; 0x2d
 8009218:	9a04      	ldr	r2, [sp, #16]
 800921a:	426d      	negs	r5, r5
 800921c:	7013      	strb	r3, [r2, #0]
 800921e:	4b61      	ldr	r3, [pc, #388]	; (80093a4 <_printf_i+0x21c>)
 8009220:	270a      	movs	r7, #10
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	e01b      	b.n	800925e <_printf_i+0xd6>
 8009226:	680d      	ldr	r5, [r1, #0]
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	0641      	lsls	r1, r0, #25
 800922c:	d5f1      	bpl.n	8009212 <_printf_i+0x8a>
 800922e:	b22d      	sxth	r5, r5
 8009230:	e7ef      	b.n	8009212 <_printf_i+0x8a>
 8009232:	680d      	ldr	r5, [r1, #0]
 8009234:	6819      	ldr	r1, [r3, #0]
 8009236:	1d08      	adds	r0, r1, #4
 8009238:	6018      	str	r0, [r3, #0]
 800923a:	062e      	lsls	r6, r5, #24
 800923c:	d501      	bpl.n	8009242 <_printf_i+0xba>
 800923e:	680d      	ldr	r5, [r1, #0]
 8009240:	e003      	b.n	800924a <_printf_i+0xc2>
 8009242:	066d      	lsls	r5, r5, #25
 8009244:	d5fb      	bpl.n	800923e <_printf_i+0xb6>
 8009246:	680d      	ldr	r5, [r1, #0]
 8009248:	b2ad      	uxth	r5, r5
 800924a:	4b56      	ldr	r3, [pc, #344]	; (80093a4 <_printf_i+0x21c>)
 800924c:	2708      	movs	r7, #8
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	2a6f      	cmp	r2, #111	; 0x6f
 8009252:	d000      	beq.n	8009256 <_printf_i+0xce>
 8009254:	3702      	adds	r7, #2
 8009256:	0023      	movs	r3, r4
 8009258:	2200      	movs	r2, #0
 800925a:	3343      	adds	r3, #67	; 0x43
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	6863      	ldr	r3, [r4, #4]
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	db03      	blt.n	800926e <_printf_i+0xe6>
 8009266:	2204      	movs	r2, #4
 8009268:	6821      	ldr	r1, [r4, #0]
 800926a:	4391      	bics	r1, r2
 800926c:	6021      	str	r1, [r4, #0]
 800926e:	2d00      	cmp	r5, #0
 8009270:	d102      	bne.n	8009278 <_printf_i+0xf0>
 8009272:	9e04      	ldr	r6, [sp, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00c      	beq.n	8009292 <_printf_i+0x10a>
 8009278:	9e04      	ldr	r6, [sp, #16]
 800927a:	0028      	movs	r0, r5
 800927c:	0039      	movs	r1, r7
 800927e:	f7f6 ffe3 	bl	8000248 <__aeabi_uidivmod>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	3e01      	subs	r6, #1
 8009286:	5c5b      	ldrb	r3, [r3, r1]
 8009288:	7033      	strb	r3, [r6, #0]
 800928a:	002b      	movs	r3, r5
 800928c:	0005      	movs	r5, r0
 800928e:	429f      	cmp	r7, r3
 8009290:	d9f3      	bls.n	800927a <_printf_i+0xf2>
 8009292:	2f08      	cmp	r7, #8
 8009294:	d109      	bne.n	80092aa <_printf_i+0x122>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	07db      	lsls	r3, r3, #31
 800929a:	d506      	bpl.n	80092aa <_printf_i+0x122>
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	6922      	ldr	r2, [r4, #16]
 80092a0:	4293      	cmp	r3, r2
 80092a2:	dc02      	bgt.n	80092aa <_printf_i+0x122>
 80092a4:	2330      	movs	r3, #48	; 0x30
 80092a6:	3e01      	subs	r6, #1
 80092a8:	7033      	strb	r3, [r6, #0]
 80092aa:	9b04      	ldr	r3, [sp, #16]
 80092ac:	1b9b      	subs	r3, r3, r6
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	9b07      	ldr	r3, [sp, #28]
 80092b2:	0021      	movs	r1, r4
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	9b06      	ldr	r3, [sp, #24]
 80092ba:	aa09      	add	r2, sp, #36	; 0x24
 80092bc:	f7ff fef4 	bl	80090a8 <_printf_common>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d14c      	bne.n	800935e <_printf_i+0x1d6>
 80092c4:	2001      	movs	r0, #1
 80092c6:	4240      	negs	r0, r0
 80092c8:	b00b      	add	sp, #44	; 0x2c
 80092ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092cc:	3145      	adds	r1, #69	; 0x45
 80092ce:	700a      	strb	r2, [r1, #0]
 80092d0:	4a34      	ldr	r2, [pc, #208]	; (80093a4 <_printf_i+0x21c>)
 80092d2:	9203      	str	r2, [sp, #12]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	6821      	ldr	r1, [r4, #0]
 80092d8:	ca20      	ldmia	r2!, {r5}
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	0608      	lsls	r0, r1, #24
 80092de:	d516      	bpl.n	800930e <_printf_i+0x186>
 80092e0:	07cb      	lsls	r3, r1, #31
 80092e2:	d502      	bpl.n	80092ea <_printf_i+0x162>
 80092e4:	2320      	movs	r3, #32
 80092e6:	4319      	orrs	r1, r3
 80092e8:	6021      	str	r1, [r4, #0]
 80092ea:	2710      	movs	r7, #16
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	d1b2      	bne.n	8009256 <_printf_i+0xce>
 80092f0:	2320      	movs	r3, #32
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	439a      	bics	r2, r3
 80092f6:	6022      	str	r2, [r4, #0]
 80092f8:	e7ad      	b.n	8009256 <_printf_i+0xce>
 80092fa:	2220      	movs	r2, #32
 80092fc:	6809      	ldr	r1, [r1, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	0022      	movs	r2, r4
 8009304:	2178      	movs	r1, #120	; 0x78
 8009306:	3245      	adds	r2, #69	; 0x45
 8009308:	7011      	strb	r1, [r2, #0]
 800930a:	4a27      	ldr	r2, [pc, #156]	; (80093a8 <_printf_i+0x220>)
 800930c:	e7e1      	b.n	80092d2 <_printf_i+0x14a>
 800930e:	0648      	lsls	r0, r1, #25
 8009310:	d5e6      	bpl.n	80092e0 <_printf_i+0x158>
 8009312:	b2ad      	uxth	r5, r5
 8009314:	e7e4      	b.n	80092e0 <_printf_i+0x158>
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	680d      	ldr	r5, [r1, #0]
 800931a:	1d10      	adds	r0, r2, #4
 800931c:	6949      	ldr	r1, [r1, #20]
 800931e:	6018      	str	r0, [r3, #0]
 8009320:	6813      	ldr	r3, [r2, #0]
 8009322:	062e      	lsls	r6, r5, #24
 8009324:	d501      	bpl.n	800932a <_printf_i+0x1a2>
 8009326:	6019      	str	r1, [r3, #0]
 8009328:	e002      	b.n	8009330 <_printf_i+0x1a8>
 800932a:	066d      	lsls	r5, r5, #25
 800932c:	d5fb      	bpl.n	8009326 <_printf_i+0x19e>
 800932e:	8019      	strh	r1, [r3, #0]
 8009330:	2300      	movs	r3, #0
 8009332:	9e04      	ldr	r6, [sp, #16]
 8009334:	6123      	str	r3, [r4, #16]
 8009336:	e7bb      	b.n	80092b0 <_printf_i+0x128>
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	1d11      	adds	r1, r2, #4
 800933c:	6019      	str	r1, [r3, #0]
 800933e:	6816      	ldr	r6, [r2, #0]
 8009340:	2100      	movs	r1, #0
 8009342:	0030      	movs	r0, r6
 8009344:	6862      	ldr	r2, [r4, #4]
 8009346:	f001 fa87 	bl	800a858 <memchr>
 800934a:	2800      	cmp	r0, #0
 800934c:	d001      	beq.n	8009352 <_printf_i+0x1ca>
 800934e:	1b80      	subs	r0, r0, r6
 8009350:	6060      	str	r0, [r4, #4]
 8009352:	6863      	ldr	r3, [r4, #4]
 8009354:	6123      	str	r3, [r4, #16]
 8009356:	2300      	movs	r3, #0
 8009358:	9a04      	ldr	r2, [sp, #16]
 800935a:	7013      	strb	r3, [r2, #0]
 800935c:	e7a8      	b.n	80092b0 <_printf_i+0x128>
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	0032      	movs	r2, r6
 8009362:	9906      	ldr	r1, [sp, #24]
 8009364:	9805      	ldr	r0, [sp, #20]
 8009366:	9d07      	ldr	r5, [sp, #28]
 8009368:	47a8      	blx	r5
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	d0aa      	beq.n	80092c4 <_printf_i+0x13c>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	079b      	lsls	r3, r3, #30
 8009372:	d415      	bmi.n	80093a0 <_printf_i+0x218>
 8009374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009376:	68e0      	ldr	r0, [r4, #12]
 8009378:	4298      	cmp	r0, r3
 800937a:	daa5      	bge.n	80092c8 <_printf_i+0x140>
 800937c:	0018      	movs	r0, r3
 800937e:	e7a3      	b.n	80092c8 <_printf_i+0x140>
 8009380:	0022      	movs	r2, r4
 8009382:	2301      	movs	r3, #1
 8009384:	9906      	ldr	r1, [sp, #24]
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	9e07      	ldr	r6, [sp, #28]
 800938a:	3219      	adds	r2, #25
 800938c:	47b0      	blx	r6
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	d098      	beq.n	80092c4 <_printf_i+0x13c>
 8009392:	3501      	adds	r5, #1
 8009394:	68e3      	ldr	r3, [r4, #12]
 8009396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	42ab      	cmp	r3, r5
 800939c:	dcf0      	bgt.n	8009380 <_printf_i+0x1f8>
 800939e:	e7e9      	b.n	8009374 <_printf_i+0x1ec>
 80093a0:	2500      	movs	r5, #0
 80093a2:	e7f7      	b.n	8009394 <_printf_i+0x20c>
 80093a4:	0800bae2 	.word	0x0800bae2
 80093a8:	0800baf3 	.word	0x0800baf3

080093ac <iprintf>:
 80093ac:	b40f      	push	{r0, r1, r2, r3}
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <iprintf+0x30>)
 80093b0:	b513      	push	{r0, r1, r4, lr}
 80093b2:	681c      	ldr	r4, [r3, #0]
 80093b4:	2c00      	cmp	r4, #0
 80093b6:	d005      	beq.n	80093c4 <iprintf+0x18>
 80093b8:	69a3      	ldr	r3, [r4, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <iprintf+0x18>
 80093be:	0020      	movs	r0, r4
 80093c0:	f001 f92c 	bl	800a61c <__sinit>
 80093c4:	ab05      	add	r3, sp, #20
 80093c6:	0020      	movs	r0, r4
 80093c8:	9a04      	ldr	r2, [sp, #16]
 80093ca:	68a1      	ldr	r1, [r4, #8]
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	f001 ff29 	bl	800b224 <_vfiprintf_r>
 80093d2:	bc16      	pop	{r1, r2, r4}
 80093d4:	bc08      	pop	{r3}
 80093d6:	b004      	add	sp, #16
 80093d8:	4718      	bx	r3
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	2000000c 	.word	0x2000000c

080093e0 <_puts_r>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	0005      	movs	r5, r0
 80093e4:	000e      	movs	r6, r1
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d004      	beq.n	80093f4 <_puts_r+0x14>
 80093ea:	6983      	ldr	r3, [r0, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <_puts_r+0x14>
 80093f0:	f001 f914 	bl	800a61c <__sinit>
 80093f4:	69ab      	ldr	r3, [r5, #24]
 80093f6:	68ac      	ldr	r4, [r5, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <_puts_r+0x22>
 80093fc:	0028      	movs	r0, r5
 80093fe:	f001 f90d 	bl	800a61c <__sinit>
 8009402:	4b2d      	ldr	r3, [pc, #180]	; (80094b8 <_puts_r+0xd8>)
 8009404:	429c      	cmp	r4, r3
 8009406:	d122      	bne.n	800944e <_puts_r+0x6e>
 8009408:	686c      	ldr	r4, [r5, #4]
 800940a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800940c:	07db      	lsls	r3, r3, #31
 800940e:	d405      	bmi.n	800941c <_puts_r+0x3c>
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	059b      	lsls	r3, r3, #22
 8009414:	d402      	bmi.n	800941c <_puts_r+0x3c>
 8009416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009418:	f001 f9a5 	bl	800a766 <__retarget_lock_acquire_recursive>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	071b      	lsls	r3, r3, #28
 8009420:	d502      	bpl.n	8009428 <_puts_r+0x48>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d129      	bne.n	800947c <_puts_r+0x9c>
 8009428:	0021      	movs	r1, r4
 800942a:	0028      	movs	r0, r5
 800942c:	f000 f8aa 	bl	8009584 <__swsetup_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	d023      	beq.n	800947c <_puts_r+0x9c>
 8009434:	2501      	movs	r5, #1
 8009436:	426d      	negs	r5, r5
 8009438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800943a:	07db      	lsls	r3, r3, #31
 800943c:	d405      	bmi.n	800944a <_puts_r+0x6a>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	059b      	lsls	r3, r3, #22
 8009442:	d402      	bmi.n	800944a <_puts_r+0x6a>
 8009444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009446:	f001 f98f 	bl	800a768 <__retarget_lock_release_recursive>
 800944a:	0028      	movs	r0, r5
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <_puts_r+0xdc>)
 8009450:	429c      	cmp	r4, r3
 8009452:	d101      	bne.n	8009458 <_puts_r+0x78>
 8009454:	68ac      	ldr	r4, [r5, #8]
 8009456:	e7d8      	b.n	800940a <_puts_r+0x2a>
 8009458:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <_puts_r+0xe0>)
 800945a:	429c      	cmp	r4, r3
 800945c:	d1d5      	bne.n	800940a <_puts_r+0x2a>
 800945e:	68ec      	ldr	r4, [r5, #12]
 8009460:	e7d3      	b.n	800940a <_puts_r+0x2a>
 8009462:	3601      	adds	r6, #1
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	da04      	bge.n	8009474 <_puts_r+0x94>
 800946a:	69a2      	ldr	r2, [r4, #24]
 800946c:	429a      	cmp	r2, r3
 800946e:	dc16      	bgt.n	800949e <_puts_r+0xbe>
 8009470:	290a      	cmp	r1, #10
 8009472:	d014      	beq.n	800949e <_puts_r+0xbe>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	7019      	strb	r1, [r3, #0]
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	7831      	ldrb	r1, [r6, #0]
 8009480:	3b01      	subs	r3, #1
 8009482:	2900      	cmp	r1, #0
 8009484:	d1ed      	bne.n	8009462 <_puts_r+0x82>
 8009486:	60a3      	str	r3, [r4, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	da0f      	bge.n	80094ac <_puts_r+0xcc>
 800948c:	0028      	movs	r0, r5
 800948e:	0022      	movs	r2, r4
 8009490:	310a      	adds	r1, #10
 8009492:	f000 f821 	bl	80094d8 <__swbuf_r>
 8009496:	250a      	movs	r5, #10
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d1cd      	bne.n	8009438 <_puts_r+0x58>
 800949c:	e7ca      	b.n	8009434 <_puts_r+0x54>
 800949e:	0022      	movs	r2, r4
 80094a0:	0028      	movs	r0, r5
 80094a2:	f000 f819 	bl	80094d8 <__swbuf_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d1e8      	bne.n	800947c <_puts_r+0x9c>
 80094aa:	e7c3      	b.n	8009434 <_puts_r+0x54>
 80094ac:	250a      	movs	r5, #10
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	701d      	strb	r5, [r3, #0]
 80094b6:	e7bf      	b.n	8009438 <_puts_r+0x58>
 80094b8:	0800bbb4 	.word	0x0800bbb4
 80094bc:	0800bbd4 	.word	0x0800bbd4
 80094c0:	0800bb94 	.word	0x0800bb94

080094c4 <puts>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <puts+0x10>)
 80094c8:	0001      	movs	r1, r0
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	f7ff ff88 	bl	80093e0 <_puts_r>
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	46c0      	nop			; (mov r8, r8)
 80094d4:	2000000c 	.word	0x2000000c

080094d8 <__swbuf_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	0005      	movs	r5, r0
 80094dc:	000e      	movs	r6, r1
 80094de:	0014      	movs	r4, r2
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d004      	beq.n	80094ee <__swbuf_r+0x16>
 80094e4:	6983      	ldr	r3, [r0, #24]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <__swbuf_r+0x16>
 80094ea:	f001 f897 	bl	800a61c <__sinit>
 80094ee:	4b22      	ldr	r3, [pc, #136]	; (8009578 <__swbuf_r+0xa0>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d12e      	bne.n	8009552 <__swbuf_r+0x7a>
 80094f4:	686c      	ldr	r4, [r5, #4]
 80094f6:	69a3      	ldr	r3, [r4, #24]
 80094f8:	60a3      	str	r3, [r4, #8]
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	071b      	lsls	r3, r3, #28
 80094fe:	d532      	bpl.n	8009566 <__swbuf_r+0x8e>
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d02f      	beq.n	8009566 <__swbuf_r+0x8e>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	b2f7      	uxtb	r7, r6
 800950c:	1a98      	subs	r0, r3, r2
 800950e:	6963      	ldr	r3, [r4, #20]
 8009510:	b2f6      	uxtb	r6, r6
 8009512:	4283      	cmp	r3, r0
 8009514:	dc05      	bgt.n	8009522 <__swbuf_r+0x4a>
 8009516:	0021      	movs	r1, r4
 8009518:	0028      	movs	r0, r5
 800951a:	f000 ffdd 	bl	800a4d8 <_fflush_r>
 800951e:	2800      	cmp	r0, #0
 8009520:	d127      	bne.n	8009572 <__swbuf_r+0x9a>
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	3001      	adds	r0, #1
 8009526:	3b01      	subs	r3, #1
 8009528:	60a3      	str	r3, [r4, #8]
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	6022      	str	r2, [r4, #0]
 8009530:	701f      	strb	r7, [r3, #0]
 8009532:	6963      	ldr	r3, [r4, #20]
 8009534:	4283      	cmp	r3, r0
 8009536:	d004      	beq.n	8009542 <__swbuf_r+0x6a>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	07db      	lsls	r3, r3, #31
 800953c:	d507      	bpl.n	800954e <__swbuf_r+0x76>
 800953e:	2e0a      	cmp	r6, #10
 8009540:	d105      	bne.n	800954e <__swbuf_r+0x76>
 8009542:	0021      	movs	r1, r4
 8009544:	0028      	movs	r0, r5
 8009546:	f000 ffc7 	bl	800a4d8 <_fflush_r>
 800954a:	2800      	cmp	r0, #0
 800954c:	d111      	bne.n	8009572 <__swbuf_r+0x9a>
 800954e:	0030      	movs	r0, r6
 8009550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <__swbuf_r+0xa4>)
 8009554:	429c      	cmp	r4, r3
 8009556:	d101      	bne.n	800955c <__swbuf_r+0x84>
 8009558:	68ac      	ldr	r4, [r5, #8]
 800955a:	e7cc      	b.n	80094f6 <__swbuf_r+0x1e>
 800955c:	4b08      	ldr	r3, [pc, #32]	; (8009580 <__swbuf_r+0xa8>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d1c9      	bne.n	80094f6 <__swbuf_r+0x1e>
 8009562:	68ec      	ldr	r4, [r5, #12]
 8009564:	e7c7      	b.n	80094f6 <__swbuf_r+0x1e>
 8009566:	0021      	movs	r1, r4
 8009568:	0028      	movs	r0, r5
 800956a:	f000 f80b 	bl	8009584 <__swsetup_r>
 800956e:	2800      	cmp	r0, #0
 8009570:	d0c9      	beq.n	8009506 <__swbuf_r+0x2e>
 8009572:	2601      	movs	r6, #1
 8009574:	4276      	negs	r6, r6
 8009576:	e7ea      	b.n	800954e <__swbuf_r+0x76>
 8009578:	0800bbb4 	.word	0x0800bbb4
 800957c:	0800bbd4 	.word	0x0800bbd4
 8009580:	0800bb94 	.word	0x0800bb94

08009584 <__swsetup_r>:
 8009584:	4b37      	ldr	r3, [pc, #220]	; (8009664 <__swsetup_r+0xe0>)
 8009586:	b570      	push	{r4, r5, r6, lr}
 8009588:	681d      	ldr	r5, [r3, #0]
 800958a:	0006      	movs	r6, r0
 800958c:	000c      	movs	r4, r1
 800958e:	2d00      	cmp	r5, #0
 8009590:	d005      	beq.n	800959e <__swsetup_r+0x1a>
 8009592:	69ab      	ldr	r3, [r5, #24]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <__swsetup_r+0x1a>
 8009598:	0028      	movs	r0, r5
 800959a:	f001 f83f 	bl	800a61c <__sinit>
 800959e:	4b32      	ldr	r3, [pc, #200]	; (8009668 <__swsetup_r+0xe4>)
 80095a0:	429c      	cmp	r4, r3
 80095a2:	d10f      	bne.n	80095c4 <__swsetup_r+0x40>
 80095a4:	686c      	ldr	r4, [r5, #4]
 80095a6:	230c      	movs	r3, #12
 80095a8:	5ee2      	ldrsh	r2, [r4, r3]
 80095aa:	b293      	uxth	r3, r2
 80095ac:	0711      	lsls	r1, r2, #28
 80095ae:	d42d      	bmi.n	800960c <__swsetup_r+0x88>
 80095b0:	06d9      	lsls	r1, r3, #27
 80095b2:	d411      	bmi.n	80095d8 <__swsetup_r+0x54>
 80095b4:	2309      	movs	r3, #9
 80095b6:	2001      	movs	r0, #1
 80095b8:	6033      	str	r3, [r6, #0]
 80095ba:	3337      	adds	r3, #55	; 0x37
 80095bc:	4313      	orrs	r3, r2
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	4240      	negs	r0, r0
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	4b29      	ldr	r3, [pc, #164]	; (800966c <__swsetup_r+0xe8>)
 80095c6:	429c      	cmp	r4, r3
 80095c8:	d101      	bne.n	80095ce <__swsetup_r+0x4a>
 80095ca:	68ac      	ldr	r4, [r5, #8]
 80095cc:	e7eb      	b.n	80095a6 <__swsetup_r+0x22>
 80095ce:	4b28      	ldr	r3, [pc, #160]	; (8009670 <__swsetup_r+0xec>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	d1e8      	bne.n	80095a6 <__swsetup_r+0x22>
 80095d4:	68ec      	ldr	r4, [r5, #12]
 80095d6:	e7e6      	b.n	80095a6 <__swsetup_r+0x22>
 80095d8:	075b      	lsls	r3, r3, #29
 80095da:	d513      	bpl.n	8009604 <__swsetup_r+0x80>
 80095dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095de:	2900      	cmp	r1, #0
 80095e0:	d008      	beq.n	80095f4 <__swsetup_r+0x70>
 80095e2:	0023      	movs	r3, r4
 80095e4:	3344      	adds	r3, #68	; 0x44
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d002      	beq.n	80095f0 <__swsetup_r+0x6c>
 80095ea:	0030      	movs	r0, r6
 80095ec:	f001 fd10 	bl	800b010 <_free_r>
 80095f0:	2300      	movs	r3, #0
 80095f2:	6363      	str	r3, [r4, #52]	; 0x34
 80095f4:	2224      	movs	r2, #36	; 0x24
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	4393      	bics	r3, r2
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	2300      	movs	r3, #0
 80095fe:	6063      	str	r3, [r4, #4]
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	2308      	movs	r3, #8
 8009606:	89a2      	ldrh	r2, [r4, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	81a3      	strh	r3, [r4, #12]
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10b      	bne.n	800962a <__swsetup_r+0xa6>
 8009612:	21a0      	movs	r1, #160	; 0xa0
 8009614:	2280      	movs	r2, #128	; 0x80
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	0089      	lsls	r1, r1, #2
 800961a:	0092      	lsls	r2, r2, #2
 800961c:	400b      	ands	r3, r1
 800961e:	4293      	cmp	r3, r2
 8009620:	d003      	beq.n	800962a <__swsetup_r+0xa6>
 8009622:	0021      	movs	r1, r4
 8009624:	0030      	movs	r0, r6
 8009626:	f001 f8c9 	bl	800a7bc <__smakebuf_r>
 800962a:	220c      	movs	r2, #12
 800962c:	5ea3      	ldrsh	r3, [r4, r2]
 800962e:	2001      	movs	r0, #1
 8009630:	001a      	movs	r2, r3
 8009632:	b299      	uxth	r1, r3
 8009634:	4002      	ands	r2, r0
 8009636:	4203      	tst	r3, r0
 8009638:	d00f      	beq.n	800965a <__swsetup_r+0xd6>
 800963a:	2200      	movs	r2, #0
 800963c:	60a2      	str	r2, [r4, #8]
 800963e:	6962      	ldr	r2, [r4, #20]
 8009640:	4252      	negs	r2, r2
 8009642:	61a2      	str	r2, [r4, #24]
 8009644:	2000      	movs	r0, #0
 8009646:	6922      	ldr	r2, [r4, #16]
 8009648:	4282      	cmp	r2, r0
 800964a:	d1ba      	bne.n	80095c2 <__swsetup_r+0x3e>
 800964c:	060a      	lsls	r2, r1, #24
 800964e:	d5b8      	bpl.n	80095c2 <__swsetup_r+0x3e>
 8009650:	2240      	movs	r2, #64	; 0x40
 8009652:	4313      	orrs	r3, r2
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	3801      	subs	r0, #1
 8009658:	e7b3      	b.n	80095c2 <__swsetup_r+0x3e>
 800965a:	0788      	lsls	r0, r1, #30
 800965c:	d400      	bmi.n	8009660 <__swsetup_r+0xdc>
 800965e:	6962      	ldr	r2, [r4, #20]
 8009660:	60a2      	str	r2, [r4, #8]
 8009662:	e7ef      	b.n	8009644 <__swsetup_r+0xc0>
 8009664:	2000000c 	.word	0x2000000c
 8009668:	0800bbb4 	.word	0x0800bbb4
 800966c:	0800bbd4 	.word	0x0800bbd4
 8009670:	0800bb94 	.word	0x0800bb94

08009674 <quorem>:
 8009674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009676:	0006      	movs	r6, r0
 8009678:	690b      	ldr	r3, [r1, #16]
 800967a:	6932      	ldr	r2, [r6, #16]
 800967c:	b087      	sub	sp, #28
 800967e:	2000      	movs	r0, #0
 8009680:	9103      	str	r1, [sp, #12]
 8009682:	429a      	cmp	r2, r3
 8009684:	db65      	blt.n	8009752 <quorem+0xde>
 8009686:	3b01      	subs	r3, #1
 8009688:	009c      	lsls	r4, r3, #2
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	000b      	movs	r3, r1
 800968e:	3314      	adds	r3, #20
 8009690:	9305      	str	r3, [sp, #20]
 8009692:	191b      	adds	r3, r3, r4
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	0033      	movs	r3, r6
 8009698:	3314      	adds	r3, #20
 800969a:	9302      	str	r3, [sp, #8]
 800969c:	191c      	adds	r4, r3, r4
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	6827      	ldr	r7, [r4, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	0038      	movs	r0, r7
 80096a6:	1c5d      	adds	r5, r3, #1
 80096a8:	0029      	movs	r1, r5
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	f7f6 fd46 	bl	800013c <__udivsi3>
 80096b0:	9001      	str	r0, [sp, #4]
 80096b2:	42af      	cmp	r7, r5
 80096b4:	d324      	bcc.n	8009700 <quorem+0x8c>
 80096b6:	2500      	movs	r5, #0
 80096b8:	46ac      	mov	ip, r5
 80096ba:	9802      	ldr	r0, [sp, #8]
 80096bc:	9f05      	ldr	r7, [sp, #20]
 80096be:	cf08      	ldmia	r7!, {r3}
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	b299      	uxth	r1, r3
 80096c4:	4351      	muls	r1, r2
 80096c6:	0c1b      	lsrs	r3, r3, #16
 80096c8:	4353      	muls	r3, r2
 80096ca:	1949      	adds	r1, r1, r5
 80096cc:	0c0a      	lsrs	r2, r1, #16
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	6802      	ldr	r2, [r0, #0]
 80096d2:	b289      	uxth	r1, r1
 80096d4:	b292      	uxth	r2, r2
 80096d6:	4462      	add	r2, ip
 80096d8:	1a52      	subs	r2, r2, r1
 80096da:	6801      	ldr	r1, [r0, #0]
 80096dc:	0c1d      	lsrs	r5, r3, #16
 80096de:	0c09      	lsrs	r1, r1, #16
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	1acb      	subs	r3, r1, r3
 80096e4:	1411      	asrs	r1, r2, #16
 80096e6:	185b      	adds	r3, r3, r1
 80096e8:	1419      	asrs	r1, r3, #16
 80096ea:	b292      	uxth	r2, r2
 80096ec:	041b      	lsls	r3, r3, #16
 80096ee:	431a      	orrs	r2, r3
 80096f0:	9b04      	ldr	r3, [sp, #16]
 80096f2:	468c      	mov	ip, r1
 80096f4:	c004      	stmia	r0!, {r2}
 80096f6:	42bb      	cmp	r3, r7
 80096f8:	d2e1      	bcs.n	80096be <quorem+0x4a>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d030      	beq.n	8009762 <quorem+0xee>
 8009700:	0030      	movs	r0, r6
 8009702:	9903      	ldr	r1, [sp, #12]
 8009704:	f001 fb40 	bl	800ad88 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	db21      	blt.n	8009750 <quorem+0xdc>
 800970c:	0030      	movs	r0, r6
 800970e:	2400      	movs	r4, #0
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	9903      	ldr	r1, [sp, #12]
 8009714:	3301      	adds	r3, #1
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	3014      	adds	r0, #20
 800971a:	3114      	adds	r1, #20
 800971c:	6803      	ldr	r3, [r0, #0]
 800971e:	c920      	ldmia	r1!, {r5}
 8009720:	b29a      	uxth	r2, r3
 8009722:	1914      	adds	r4, r2, r4
 8009724:	b2aa      	uxth	r2, r5
 8009726:	1aa2      	subs	r2, r4, r2
 8009728:	0c1b      	lsrs	r3, r3, #16
 800972a:	0c2d      	lsrs	r5, r5, #16
 800972c:	1414      	asrs	r4, r2, #16
 800972e:	1b5b      	subs	r3, r3, r5
 8009730:	191b      	adds	r3, r3, r4
 8009732:	141c      	asrs	r4, r3, #16
 8009734:	b292      	uxth	r2, r2
 8009736:	041b      	lsls	r3, r3, #16
 8009738:	4313      	orrs	r3, r2
 800973a:	c008      	stmia	r0!, {r3}
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	428b      	cmp	r3, r1
 8009740:	d2ec      	bcs.n	800971c <quorem+0xa8>
 8009742:	9b00      	ldr	r3, [sp, #0]
 8009744:	9a02      	ldr	r2, [sp, #8]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	18d3      	adds	r3, r2, r3
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	2a00      	cmp	r2, #0
 800974e:	d015      	beq.n	800977c <quorem+0x108>
 8009750:	9801      	ldr	r0, [sp, #4]
 8009752:	b007      	add	sp, #28
 8009754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d106      	bne.n	800976a <quorem+0xf6>
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	3b01      	subs	r3, #1
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	9b02      	ldr	r3, [sp, #8]
 8009764:	3c04      	subs	r4, #4
 8009766:	42a3      	cmp	r3, r4
 8009768:	d3f5      	bcc.n	8009756 <quorem+0xe2>
 800976a:	9b00      	ldr	r3, [sp, #0]
 800976c:	6133      	str	r3, [r6, #16]
 800976e:	e7c7      	b.n	8009700 <quorem+0x8c>
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	2a00      	cmp	r2, #0
 8009774:	d106      	bne.n	8009784 <quorem+0x110>
 8009776:	9a00      	ldr	r2, [sp, #0]
 8009778:	3a01      	subs	r2, #1
 800977a:	9200      	str	r2, [sp, #0]
 800977c:	9a02      	ldr	r2, [sp, #8]
 800977e:	3b04      	subs	r3, #4
 8009780:	429a      	cmp	r2, r3
 8009782:	d3f5      	bcc.n	8009770 <quorem+0xfc>
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	6133      	str	r3, [r6, #16]
 8009788:	e7e2      	b.n	8009750 <quorem+0xdc>
	...

0800978c <_dtoa_r>:
 800978c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978e:	b09d      	sub	sp, #116	; 0x74
 8009790:	9202      	str	r2, [sp, #8]
 8009792:	9303      	str	r3, [sp, #12]
 8009794:	9b02      	ldr	r3, [sp, #8]
 8009796:	9c03      	ldr	r4, [sp, #12]
 8009798:	9308      	str	r3, [sp, #32]
 800979a:	9409      	str	r4, [sp, #36]	; 0x24
 800979c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800979e:	0007      	movs	r7, r0
 80097a0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	d10e      	bne.n	80097c4 <_dtoa_r+0x38>
 80097a6:	2010      	movs	r0, #16
 80097a8:	f001 f84c 	bl	800a844 <malloc>
 80097ac:	1e02      	subs	r2, r0, #0
 80097ae:	6278      	str	r0, [r7, #36]	; 0x24
 80097b0:	d104      	bne.n	80097bc <_dtoa_r+0x30>
 80097b2:	21ea      	movs	r1, #234	; 0xea
 80097b4:	4bc7      	ldr	r3, [pc, #796]	; (8009ad4 <_dtoa_r+0x348>)
 80097b6:	48c8      	ldr	r0, [pc, #800]	; (8009ad8 <_dtoa_r+0x34c>)
 80097b8:	f001 fee0 	bl	800b57c <__assert_func>
 80097bc:	6044      	str	r4, [r0, #4]
 80097be:	6084      	str	r4, [r0, #8]
 80097c0:	6004      	str	r4, [r0, #0]
 80097c2:	60c4      	str	r4, [r0, #12]
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	6819      	ldr	r1, [r3, #0]
 80097c8:	2900      	cmp	r1, #0
 80097ca:	d00a      	beq.n	80097e2 <_dtoa_r+0x56>
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	2301      	movs	r3, #1
 80097d0:	4093      	lsls	r3, r2
 80097d2:	604a      	str	r2, [r1, #4]
 80097d4:	608b      	str	r3, [r1, #8]
 80097d6:	0038      	movs	r0, r7
 80097d8:	f001 f896 	bl	800a908 <_Bfree>
 80097dc:	2200      	movs	r2, #0
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	da20      	bge.n	800982a <_dtoa_r+0x9e>
 80097e8:	2301      	movs	r3, #1
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	085b      	lsrs	r3, r3, #1
 80097f2:	9309      	str	r3, [sp, #36]	; 0x24
 80097f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097f6:	4bb9      	ldr	r3, [pc, #740]	; (8009adc <_dtoa_r+0x350>)
 80097f8:	4ab8      	ldr	r2, [pc, #736]	; (8009adc <_dtoa_r+0x350>)
 80097fa:	402b      	ands	r3, r5
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d117      	bne.n	8009830 <_dtoa_r+0xa4>
 8009800:	4bb7      	ldr	r3, [pc, #732]	; (8009ae0 <_dtoa_r+0x354>)
 8009802:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009804:	0328      	lsls	r0, r5, #12
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	0b00      	lsrs	r0, r0, #12
 800980c:	4318      	orrs	r0, r3
 800980e:	d101      	bne.n	8009814 <_dtoa_r+0x88>
 8009810:	f000 fdbf 	bl	800a392 <_dtoa_r+0xc06>
 8009814:	48b3      	ldr	r0, [pc, #716]	; (8009ae4 <_dtoa_r+0x358>)
 8009816:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009818:	9006      	str	r0, [sp, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <_dtoa_r+0x98>
 800981e:	4bb2      	ldr	r3, [pc, #712]	; (8009ae8 <_dtoa_r+0x35c>)
 8009820:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	9806      	ldr	r0, [sp, #24]
 8009826:	b01d      	add	sp, #116	; 0x74
 8009828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800982a:	2300      	movs	r3, #0
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	e7e1      	b.n	80097f4 <_dtoa_r+0x68>
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009834:	9312      	str	r3, [sp, #72]	; 0x48
 8009836:	9413      	str	r4, [sp, #76]	; 0x4c
 8009838:	9812      	ldr	r0, [sp, #72]	; 0x48
 800983a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800983c:	2200      	movs	r2, #0
 800983e:	2300      	movs	r3, #0
 8009840:	f7f6 fe02 	bl	8000448 <__aeabi_dcmpeq>
 8009844:	1e04      	subs	r4, r0, #0
 8009846:	d009      	beq.n	800985c <_dtoa_r+0xd0>
 8009848:	2301      	movs	r3, #1
 800984a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	4ba7      	ldr	r3, [pc, #668]	; (8009aec <_dtoa_r+0x360>)
 8009850:	9306      	str	r3, [sp, #24]
 8009852:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009854:	2b00      	cmp	r3, #0
 8009856:	d0e5      	beq.n	8009824 <_dtoa_r+0x98>
 8009858:	4ba5      	ldr	r3, [pc, #660]	; (8009af0 <_dtoa_r+0x364>)
 800985a:	e7e1      	b.n	8009820 <_dtoa_r+0x94>
 800985c:	ab1a      	add	r3, sp, #104	; 0x68
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	ab1b      	add	r3, sp, #108	; 0x6c
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	0038      	movs	r0, r7
 8009866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800986a:	f001 fb41 	bl	800aef0 <__d2b>
 800986e:	006e      	lsls	r6, r5, #1
 8009870:	9005      	str	r0, [sp, #20]
 8009872:	0d76      	lsrs	r6, r6, #21
 8009874:	d100      	bne.n	8009878 <_dtoa_r+0xec>
 8009876:	e07c      	b.n	8009972 <_dtoa_r+0x1e6>
 8009878:	9812      	ldr	r0, [sp, #72]	; 0x48
 800987a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800987c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800987e:	4a9d      	ldr	r2, [pc, #628]	; (8009af4 <_dtoa_r+0x368>)
 8009880:	031b      	lsls	r3, r3, #12
 8009882:	0b1b      	lsrs	r3, r3, #12
 8009884:	431a      	orrs	r2, r3
 8009886:	0011      	movs	r1, r2
 8009888:	4b9b      	ldr	r3, [pc, #620]	; (8009af8 <_dtoa_r+0x36c>)
 800988a:	9418      	str	r4, [sp, #96]	; 0x60
 800988c:	18f6      	adds	r6, r6, r3
 800988e:	2200      	movs	r2, #0
 8009890:	4b9a      	ldr	r3, [pc, #616]	; (8009afc <_dtoa_r+0x370>)
 8009892:	f7f8 feb7 	bl	8002604 <__aeabi_dsub>
 8009896:	4a9a      	ldr	r2, [pc, #616]	; (8009b00 <_dtoa_r+0x374>)
 8009898:	4b9a      	ldr	r3, [pc, #616]	; (8009b04 <_dtoa_r+0x378>)
 800989a:	f7f8 fc47 	bl	800212c <__aeabi_dmul>
 800989e:	4a9a      	ldr	r2, [pc, #616]	; (8009b08 <_dtoa_r+0x37c>)
 80098a0:	4b9a      	ldr	r3, [pc, #616]	; (8009b0c <_dtoa_r+0x380>)
 80098a2:	f7f7 fd05 	bl	80012b0 <__aeabi_dadd>
 80098a6:	0004      	movs	r4, r0
 80098a8:	0030      	movs	r0, r6
 80098aa:	000d      	movs	r5, r1
 80098ac:	f7f9 fa90 	bl	8002dd0 <__aeabi_i2d>
 80098b0:	4a97      	ldr	r2, [pc, #604]	; (8009b10 <_dtoa_r+0x384>)
 80098b2:	4b98      	ldr	r3, [pc, #608]	; (8009b14 <_dtoa_r+0x388>)
 80098b4:	f7f8 fc3a 	bl	800212c <__aeabi_dmul>
 80098b8:	0002      	movs	r2, r0
 80098ba:	000b      	movs	r3, r1
 80098bc:	0020      	movs	r0, r4
 80098be:	0029      	movs	r1, r5
 80098c0:	f7f7 fcf6 	bl	80012b0 <__aeabi_dadd>
 80098c4:	0004      	movs	r4, r0
 80098c6:	000d      	movs	r5, r1
 80098c8:	f7f9 fa4c 	bl	8002d64 <__aeabi_d2iz>
 80098cc:	2200      	movs	r2, #0
 80098ce:	9002      	str	r0, [sp, #8]
 80098d0:	2300      	movs	r3, #0
 80098d2:	0020      	movs	r0, r4
 80098d4:	0029      	movs	r1, r5
 80098d6:	f7f6 fdbd 	bl	8000454 <__aeabi_dcmplt>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d00b      	beq.n	80098f6 <_dtoa_r+0x16a>
 80098de:	9802      	ldr	r0, [sp, #8]
 80098e0:	f7f9 fa76 	bl	8002dd0 <__aeabi_i2d>
 80098e4:	002b      	movs	r3, r5
 80098e6:	0022      	movs	r2, r4
 80098e8:	f7f6 fdae 	bl	8000448 <__aeabi_dcmpeq>
 80098ec:	4243      	negs	r3, r0
 80098ee:	4158      	adcs	r0, r3
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	1a1b      	subs	r3, r3, r0
 80098f4:	9302      	str	r3, [sp, #8]
 80098f6:	2301      	movs	r3, #1
 80098f8:	9316      	str	r3, [sp, #88]	; 0x58
 80098fa:	9b02      	ldr	r3, [sp, #8]
 80098fc:	2b16      	cmp	r3, #22
 80098fe:	d80f      	bhi.n	8009920 <_dtoa_r+0x194>
 8009900:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009902:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009904:	00da      	lsls	r2, r3, #3
 8009906:	4b84      	ldr	r3, [pc, #528]	; (8009b18 <_dtoa_r+0x38c>)
 8009908:	189b      	adds	r3, r3, r2
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f7f6 fda1 	bl	8000454 <__aeabi_dcmplt>
 8009912:	2800      	cmp	r0, #0
 8009914:	d049      	beq.n	80099aa <_dtoa_r+0x21e>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	3b01      	subs	r3, #1
 800991a:	9302      	str	r3, [sp, #8]
 800991c:	2300      	movs	r3, #0
 800991e:	9316      	str	r3, [sp, #88]	; 0x58
 8009920:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009922:	1b9e      	subs	r6, r3, r6
 8009924:	2300      	movs	r3, #0
 8009926:	930a      	str	r3, [sp, #40]	; 0x28
 8009928:	0033      	movs	r3, r6
 800992a:	3b01      	subs	r3, #1
 800992c:	930d      	str	r3, [sp, #52]	; 0x34
 800992e:	d504      	bpl.n	800993a <_dtoa_r+0x1ae>
 8009930:	2301      	movs	r3, #1
 8009932:	1b9b      	subs	r3, r3, r6
 8009934:	930a      	str	r3, [sp, #40]	; 0x28
 8009936:	2300      	movs	r3, #0
 8009938:	930d      	str	r3, [sp, #52]	; 0x34
 800993a:	9b02      	ldr	r3, [sp, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	db36      	blt.n	80099ae <_dtoa_r+0x222>
 8009940:	9a02      	ldr	r2, [sp, #8]
 8009942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009944:	4694      	mov	ip, r2
 8009946:	4463      	add	r3, ip
 8009948:	930d      	str	r3, [sp, #52]	; 0x34
 800994a:	2300      	movs	r3, #0
 800994c:	9215      	str	r2, [sp, #84]	; 0x54
 800994e:	930e      	str	r3, [sp, #56]	; 0x38
 8009950:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009952:	2401      	movs	r4, #1
 8009954:	2b09      	cmp	r3, #9
 8009956:	d864      	bhi.n	8009a22 <_dtoa_r+0x296>
 8009958:	2b05      	cmp	r3, #5
 800995a:	dd02      	ble.n	8009962 <_dtoa_r+0x1d6>
 800995c:	2400      	movs	r4, #0
 800995e:	3b04      	subs	r3, #4
 8009960:	9322      	str	r3, [sp, #136]	; 0x88
 8009962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009964:	1e98      	subs	r0, r3, #2
 8009966:	2803      	cmp	r0, #3
 8009968:	d864      	bhi.n	8009a34 <_dtoa_r+0x2a8>
 800996a:	f7f6 fbd3 	bl	8000114 <__gnu_thumb1_case_uqi>
 800996e:	3829      	.short	0x3829
 8009970:	5836      	.short	0x5836
 8009972:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009974:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009976:	189e      	adds	r6, r3, r2
 8009978:	4b68      	ldr	r3, [pc, #416]	; (8009b1c <_dtoa_r+0x390>)
 800997a:	18f2      	adds	r2, r6, r3
 800997c:	2a20      	cmp	r2, #32
 800997e:	dd0f      	ble.n	80099a0 <_dtoa_r+0x214>
 8009980:	2340      	movs	r3, #64	; 0x40
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	409d      	lsls	r5, r3
 8009986:	4b66      	ldr	r3, [pc, #408]	; (8009b20 <_dtoa_r+0x394>)
 8009988:	9802      	ldr	r0, [sp, #8]
 800998a:	18f3      	adds	r3, r6, r3
 800998c:	40d8      	lsrs	r0, r3
 800998e:	4328      	orrs	r0, r5
 8009990:	f7f9 fa4e 	bl	8002e30 <__aeabi_ui2d>
 8009994:	2301      	movs	r3, #1
 8009996:	4c63      	ldr	r4, [pc, #396]	; (8009b24 <_dtoa_r+0x398>)
 8009998:	3e01      	subs	r6, #1
 800999a:	1909      	adds	r1, r1, r4
 800999c:	9318      	str	r3, [sp, #96]	; 0x60
 800999e:	e776      	b.n	800988e <_dtoa_r+0x102>
 80099a0:	2320      	movs	r3, #32
 80099a2:	9802      	ldr	r0, [sp, #8]
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	4098      	lsls	r0, r3
 80099a8:	e7f2      	b.n	8009990 <_dtoa_r+0x204>
 80099aa:	9016      	str	r0, [sp, #88]	; 0x58
 80099ac:	e7b8      	b.n	8009920 <_dtoa_r+0x194>
 80099ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b0:	9a02      	ldr	r2, [sp, #8]
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	930a      	str	r3, [sp, #40]	; 0x28
 80099b6:	4253      	negs	r3, r2
 80099b8:	930e      	str	r3, [sp, #56]	; 0x38
 80099ba:	2300      	movs	r3, #0
 80099bc:	9315      	str	r3, [sp, #84]	; 0x54
 80099be:	e7c7      	b.n	8009950 <_dtoa_r+0x1c4>
 80099c0:	2300      	movs	r3, #0
 80099c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80099c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099c6:	930c      	str	r3, [sp, #48]	; 0x30
 80099c8:	9307      	str	r3, [sp, #28]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dc13      	bgt.n	80099f6 <_dtoa_r+0x26a>
 80099ce:	2301      	movs	r3, #1
 80099d0:	001a      	movs	r2, r3
 80099d2:	930c      	str	r3, [sp, #48]	; 0x30
 80099d4:	9307      	str	r3, [sp, #28]
 80099d6:	9223      	str	r2, [sp, #140]	; 0x8c
 80099d8:	e00d      	b.n	80099f6 <_dtoa_r+0x26a>
 80099da:	2301      	movs	r3, #1
 80099dc:	e7f1      	b.n	80099c2 <_dtoa_r+0x236>
 80099de:	2300      	movs	r3, #0
 80099e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80099e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e4:	4694      	mov	ip, r2
 80099e6:	9b02      	ldr	r3, [sp, #8]
 80099e8:	4463      	add	r3, ip
 80099ea:	930c      	str	r3, [sp, #48]	; 0x30
 80099ec:	3301      	adds	r3, #1
 80099ee:	9307      	str	r3, [sp, #28]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dc00      	bgt.n	80099f6 <_dtoa_r+0x26a>
 80099f4:	2301      	movs	r3, #1
 80099f6:	2200      	movs	r2, #0
 80099f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099fa:	6042      	str	r2, [r0, #4]
 80099fc:	3204      	adds	r2, #4
 80099fe:	0015      	movs	r5, r2
 8009a00:	3514      	adds	r5, #20
 8009a02:	6841      	ldr	r1, [r0, #4]
 8009a04:	429d      	cmp	r5, r3
 8009a06:	d919      	bls.n	8009a3c <_dtoa_r+0x2b0>
 8009a08:	0038      	movs	r0, r7
 8009a0a:	f000 ff39 	bl	800a880 <_Balloc>
 8009a0e:	9006      	str	r0, [sp, #24]
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d117      	bne.n	8009a44 <_dtoa_r+0x2b8>
 8009a14:	21d5      	movs	r1, #213	; 0xd5
 8009a16:	0002      	movs	r2, r0
 8009a18:	4b43      	ldr	r3, [pc, #268]	; (8009b28 <_dtoa_r+0x39c>)
 8009a1a:	0049      	lsls	r1, r1, #1
 8009a1c:	e6cb      	b.n	80097b6 <_dtoa_r+0x2a>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7de      	b.n	80099e0 <_dtoa_r+0x254>
 8009a22:	2300      	movs	r3, #0
 8009a24:	940f      	str	r4, [sp, #60]	; 0x3c
 8009a26:	9322      	str	r3, [sp, #136]	; 0x88
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a2c:	9307      	str	r3, [sp, #28]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	3313      	adds	r3, #19
 8009a32:	e7d0      	b.n	80099d6 <_dtoa_r+0x24a>
 8009a34:	2301      	movs	r3, #1
 8009a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a38:	3b02      	subs	r3, #2
 8009a3a:	e7f6      	b.n	8009a2a <_dtoa_r+0x29e>
 8009a3c:	3101      	adds	r1, #1
 8009a3e:	6041      	str	r1, [r0, #4]
 8009a40:	0052      	lsls	r2, r2, #1
 8009a42:	e7dc      	b.n	80099fe <_dtoa_r+0x272>
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	9a06      	ldr	r2, [sp, #24]
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	9b07      	ldr	r3, [sp, #28]
 8009a4c:	2b0e      	cmp	r3, #14
 8009a4e:	d900      	bls.n	8009a52 <_dtoa_r+0x2c6>
 8009a50:	e0eb      	b.n	8009c2a <_dtoa_r+0x49e>
 8009a52:	2c00      	cmp	r4, #0
 8009a54:	d100      	bne.n	8009a58 <_dtoa_r+0x2cc>
 8009a56:	e0e8      	b.n	8009c2a <_dtoa_r+0x49e>
 8009a58:	9b02      	ldr	r3, [sp, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd68      	ble.n	8009b30 <_dtoa_r+0x3a4>
 8009a5e:	001a      	movs	r2, r3
 8009a60:	210f      	movs	r1, #15
 8009a62:	4b2d      	ldr	r3, [pc, #180]	; (8009b18 <_dtoa_r+0x38c>)
 8009a64:	400a      	ands	r2, r1
 8009a66:	00d2      	lsls	r2, r2, #3
 8009a68:	189b      	adds	r3, r3, r2
 8009a6a:	681d      	ldr	r5, [r3, #0]
 8009a6c:	685e      	ldr	r6, [r3, #4]
 8009a6e:	9b02      	ldr	r3, [sp, #8]
 8009a70:	111c      	asrs	r4, r3, #4
 8009a72:	2302      	movs	r3, #2
 8009a74:	9310      	str	r3, [sp, #64]	; 0x40
 8009a76:	9b02      	ldr	r3, [sp, #8]
 8009a78:	05db      	lsls	r3, r3, #23
 8009a7a:	d50b      	bpl.n	8009a94 <_dtoa_r+0x308>
 8009a7c:	4b2b      	ldr	r3, [pc, #172]	; (8009b2c <_dtoa_r+0x3a0>)
 8009a7e:	400c      	ands	r4, r1
 8009a80:	6a1a      	ldr	r2, [r3, #32]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a88:	f7f7 ff4e 	bl	8001928 <__aeabi_ddiv>
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	9008      	str	r0, [sp, #32]
 8009a90:	9109      	str	r1, [sp, #36]	; 0x24
 8009a92:	9310      	str	r3, [sp, #64]	; 0x40
 8009a94:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <_dtoa_r+0x3a0>)
 8009a96:	9314      	str	r3, [sp, #80]	; 0x50
 8009a98:	2c00      	cmp	r4, #0
 8009a9a:	d108      	bne.n	8009aae <_dtoa_r+0x322>
 8009a9c:	9808      	ldr	r0, [sp, #32]
 8009a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aa0:	002a      	movs	r2, r5
 8009aa2:	0033      	movs	r3, r6
 8009aa4:	f7f7 ff40 	bl	8001928 <__aeabi_ddiv>
 8009aa8:	9008      	str	r0, [sp, #32]
 8009aaa:	9109      	str	r1, [sp, #36]	; 0x24
 8009aac:	e05c      	b.n	8009b68 <_dtoa_r+0x3dc>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	421c      	tst	r4, r3
 8009ab2:	d00b      	beq.n	8009acc <_dtoa_r+0x340>
 8009ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ab6:	0028      	movs	r0, r5
 8009ab8:	3301      	adds	r3, #1
 8009aba:	9310      	str	r3, [sp, #64]	; 0x40
 8009abc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009abe:	0031      	movs	r1, r6
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f7f8 fb32 	bl	800212c <__aeabi_dmul>
 8009ac8:	0005      	movs	r5, r0
 8009aca:	000e      	movs	r6, r1
 8009acc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ace:	1064      	asrs	r4, r4, #1
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	e7e0      	b.n	8009a96 <_dtoa_r+0x30a>
 8009ad4:	0800bb11 	.word	0x0800bb11
 8009ad8:	0800bb28 	.word	0x0800bb28
 8009adc:	7ff00000 	.word	0x7ff00000
 8009ae0:	0000270f 	.word	0x0000270f
 8009ae4:	0800bb0d 	.word	0x0800bb0d
 8009ae8:	0800bb10 	.word	0x0800bb10
 8009aec:	0800bae0 	.word	0x0800bae0
 8009af0:	0800bae1 	.word	0x0800bae1
 8009af4:	3ff00000 	.word	0x3ff00000
 8009af8:	fffffc01 	.word	0xfffffc01
 8009afc:	3ff80000 	.word	0x3ff80000
 8009b00:	636f4361 	.word	0x636f4361
 8009b04:	3fd287a7 	.word	0x3fd287a7
 8009b08:	8b60c8b3 	.word	0x8b60c8b3
 8009b0c:	3fc68a28 	.word	0x3fc68a28
 8009b10:	509f79fb 	.word	0x509f79fb
 8009b14:	3fd34413 	.word	0x3fd34413
 8009b18:	0800bc78 	.word	0x0800bc78
 8009b1c:	00000432 	.word	0x00000432
 8009b20:	00000412 	.word	0x00000412
 8009b24:	fe100000 	.word	0xfe100000
 8009b28:	0800bb83 	.word	0x0800bb83
 8009b2c:	0800bc50 	.word	0x0800bc50
 8009b30:	2302      	movs	r3, #2
 8009b32:	9310      	str	r3, [sp, #64]	; 0x40
 8009b34:	9b02      	ldr	r3, [sp, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d016      	beq.n	8009b68 <_dtoa_r+0x3dc>
 8009b3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b3c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009b3e:	425c      	negs	r4, r3
 8009b40:	230f      	movs	r3, #15
 8009b42:	4ab6      	ldr	r2, [pc, #728]	; (8009e1c <_dtoa_r+0x690>)
 8009b44:	4023      	ands	r3, r4
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	18d3      	adds	r3, r2, r3
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f7f8 faed 	bl	800212c <__aeabi_dmul>
 8009b52:	2601      	movs	r6, #1
 8009b54:	2300      	movs	r3, #0
 8009b56:	9008      	str	r0, [sp, #32]
 8009b58:	9109      	str	r1, [sp, #36]	; 0x24
 8009b5a:	4db1      	ldr	r5, [pc, #708]	; (8009e20 <_dtoa_r+0x694>)
 8009b5c:	1124      	asrs	r4, r4, #4
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d000      	beq.n	8009b64 <_dtoa_r+0x3d8>
 8009b62:	e094      	b.n	8009c8e <_dtoa_r+0x502>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d19f      	bne.n	8009aa8 <_dtoa_r+0x31c>
 8009b68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d100      	bne.n	8009b70 <_dtoa_r+0x3e4>
 8009b6e:	e09b      	b.n	8009ca8 <_dtoa_r+0x51c>
 8009b70:	9c08      	ldr	r4, [sp, #32]
 8009b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b74:	2200      	movs	r2, #0
 8009b76:	0020      	movs	r0, r4
 8009b78:	0029      	movs	r1, r5
 8009b7a:	4baa      	ldr	r3, [pc, #680]	; (8009e24 <_dtoa_r+0x698>)
 8009b7c:	f7f6 fc6a 	bl	8000454 <__aeabi_dcmplt>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d100      	bne.n	8009b86 <_dtoa_r+0x3fa>
 8009b84:	e090      	b.n	8009ca8 <_dtoa_r+0x51c>
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d100      	bne.n	8009b8e <_dtoa_r+0x402>
 8009b8c:	e08c      	b.n	8009ca8 <_dtoa_r+0x51c>
 8009b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd46      	ble.n	8009c22 <_dtoa_r+0x496>
 8009b94:	9b02      	ldr	r3, [sp, #8]
 8009b96:	2200      	movs	r2, #0
 8009b98:	0020      	movs	r0, r4
 8009b9a:	0029      	movs	r1, r5
 8009b9c:	1e5e      	subs	r6, r3, #1
 8009b9e:	4ba2      	ldr	r3, [pc, #648]	; (8009e28 <_dtoa_r+0x69c>)
 8009ba0:	f7f8 fac4 	bl	800212c <__aeabi_dmul>
 8009ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ba6:	9008      	str	r0, [sp, #32]
 8009ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8009baa:	3301      	adds	r3, #1
 8009bac:	9310      	str	r3, [sp, #64]	; 0x40
 8009bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009bb2:	9c08      	ldr	r4, [sp, #32]
 8009bb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bb6:	9314      	str	r3, [sp, #80]	; 0x50
 8009bb8:	f7f9 f90a 	bl	8002dd0 <__aeabi_i2d>
 8009bbc:	0022      	movs	r2, r4
 8009bbe:	002b      	movs	r3, r5
 8009bc0:	f7f8 fab4 	bl	800212c <__aeabi_dmul>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4b99      	ldr	r3, [pc, #612]	; (8009e2c <_dtoa_r+0x6a0>)
 8009bc8:	f7f7 fb72 	bl	80012b0 <__aeabi_dadd>
 8009bcc:	9010      	str	r0, [sp, #64]	; 0x40
 8009bce:	9111      	str	r1, [sp, #68]	; 0x44
 8009bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bd4:	9208      	str	r2, [sp, #32]
 8009bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd8:	4a95      	ldr	r2, [pc, #596]	; (8009e30 <_dtoa_r+0x6a4>)
 8009bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bdc:	4694      	mov	ip, r2
 8009bde:	4463      	add	r3, ip
 8009be0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009be2:	9309      	str	r3, [sp, #36]	; 0x24
 8009be4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d161      	bne.n	8009cae <_dtoa_r+0x522>
 8009bea:	2200      	movs	r2, #0
 8009bec:	0020      	movs	r0, r4
 8009bee:	0029      	movs	r1, r5
 8009bf0:	4b90      	ldr	r3, [pc, #576]	; (8009e34 <_dtoa_r+0x6a8>)
 8009bf2:	f7f8 fd07 	bl	8002604 <__aeabi_dsub>
 8009bf6:	9a08      	ldr	r2, [sp, #32]
 8009bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bfa:	0004      	movs	r4, r0
 8009bfc:	000d      	movs	r5, r1
 8009bfe:	f7f6 fc3d 	bl	800047c <__aeabi_dcmpgt>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d000      	beq.n	8009c08 <_dtoa_r+0x47c>
 8009c06:	e2af      	b.n	800a168 <_dtoa_r+0x9dc>
 8009c08:	488b      	ldr	r0, [pc, #556]	; (8009e38 <_dtoa_r+0x6ac>)
 8009c0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c0c:	4684      	mov	ip, r0
 8009c0e:	4461      	add	r1, ip
 8009c10:	000b      	movs	r3, r1
 8009c12:	0020      	movs	r0, r4
 8009c14:	0029      	movs	r1, r5
 8009c16:	9a08      	ldr	r2, [sp, #32]
 8009c18:	f7f6 fc1c 	bl	8000454 <__aeabi_dcmplt>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d000      	beq.n	8009c22 <_dtoa_r+0x496>
 8009c20:	e29f      	b.n	800a162 <_dtoa_r+0x9d6>
 8009c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009c26:	9308      	str	r3, [sp, #32]
 8009c28:	9409      	str	r4, [sp, #36]	; 0x24
 8009c2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da00      	bge.n	8009c32 <_dtoa_r+0x4a6>
 8009c30:	e172      	b.n	8009f18 <_dtoa_r+0x78c>
 8009c32:	9a02      	ldr	r2, [sp, #8]
 8009c34:	2a0e      	cmp	r2, #14
 8009c36:	dd00      	ble.n	8009c3a <_dtoa_r+0x4ae>
 8009c38:	e16e      	b.n	8009f18 <_dtoa_r+0x78c>
 8009c3a:	4b78      	ldr	r3, [pc, #480]	; (8009e1c <_dtoa_r+0x690>)
 8009c3c:	00d2      	lsls	r2, r2, #3
 8009c3e:	189b      	adds	r3, r3, r2
 8009c40:	685c      	ldr	r4, [r3, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	930a      	str	r3, [sp, #40]	; 0x28
 8009c46:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	db00      	blt.n	8009c50 <_dtoa_r+0x4c4>
 8009c4e:	e0f7      	b.n	8009e40 <_dtoa_r+0x6b4>
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd00      	ble.n	8009c58 <_dtoa_r+0x4cc>
 8009c56:	e0f3      	b.n	8009e40 <_dtoa_r+0x6b4>
 8009c58:	d000      	beq.n	8009c5c <_dtoa_r+0x4d0>
 8009c5a:	e282      	b.n	800a162 <_dtoa_r+0x9d6>
 8009c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c60:	2200      	movs	r2, #0
 8009c62:	4b74      	ldr	r3, [pc, #464]	; (8009e34 <_dtoa_r+0x6a8>)
 8009c64:	f7f8 fa62 	bl	800212c <__aeabi_dmul>
 8009c68:	9a08      	ldr	r2, [sp, #32]
 8009c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6c:	f7f6 fc10 	bl	8000490 <__aeabi_dcmpge>
 8009c70:	9e07      	ldr	r6, [sp, #28]
 8009c72:	0035      	movs	r5, r6
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d000      	beq.n	8009c7a <_dtoa_r+0x4ee>
 8009c78:	e259      	b.n	800a12e <_dtoa_r+0x9a2>
 8009c7a:	9b06      	ldr	r3, [sp, #24]
 8009c7c:	9a06      	ldr	r2, [sp, #24]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	9308      	str	r3, [sp, #32]
 8009c82:	2331      	movs	r3, #49	; 0x31
 8009c84:	7013      	strb	r3, [r2, #0]
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	9302      	str	r3, [sp, #8]
 8009c8c:	e254      	b.n	800a138 <_dtoa_r+0x9ac>
 8009c8e:	4234      	tst	r4, r6
 8009c90:	d007      	beq.n	8009ca2 <_dtoa_r+0x516>
 8009c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c94:	3301      	adds	r3, #1
 8009c96:	9310      	str	r3, [sp, #64]	; 0x40
 8009c98:	682a      	ldr	r2, [r5, #0]
 8009c9a:	686b      	ldr	r3, [r5, #4]
 8009c9c:	f7f8 fa46 	bl	800212c <__aeabi_dmul>
 8009ca0:	0033      	movs	r3, r6
 8009ca2:	1064      	asrs	r4, r4, #1
 8009ca4:	3508      	adds	r5, #8
 8009ca6:	e75a      	b.n	8009b5e <_dtoa_r+0x3d2>
 8009ca8:	9e02      	ldr	r6, [sp, #8]
 8009caa:	9b07      	ldr	r3, [sp, #28]
 8009cac:	e780      	b.n	8009bb0 <_dtoa_r+0x424>
 8009cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009cb2:	1e5a      	subs	r2, r3, #1
 8009cb4:	4b59      	ldr	r3, [pc, #356]	; (8009e1c <_dtoa_r+0x690>)
 8009cb6:	00d2      	lsls	r2, r2, #3
 8009cb8:	189b      	adds	r3, r3, r2
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d051      	beq.n	8009d66 <_dtoa_r+0x5da>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	495d      	ldr	r1, [pc, #372]	; (8009e3c <_dtoa_r+0x6b0>)
 8009cc6:	f7f7 fe2f 	bl	8001928 <__aeabi_ddiv>
 8009cca:	9a08      	ldr	r2, [sp, #32]
 8009ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cce:	f7f8 fc99 	bl	8002604 <__aeabi_dsub>
 8009cd2:	9a06      	ldr	r2, [sp, #24]
 8009cd4:	9b06      	ldr	r3, [sp, #24]
 8009cd6:	4694      	mov	ip, r2
 8009cd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cdc:	9010      	str	r0, [sp, #64]	; 0x40
 8009cde:	9111      	str	r1, [sp, #68]	; 0x44
 8009ce0:	4463      	add	r3, ip
 8009ce2:	9319      	str	r3, [sp, #100]	; 0x64
 8009ce4:	0029      	movs	r1, r5
 8009ce6:	0020      	movs	r0, r4
 8009ce8:	f7f9 f83c 	bl	8002d64 <__aeabi_d2iz>
 8009cec:	9014      	str	r0, [sp, #80]	; 0x50
 8009cee:	f7f9 f86f 	bl	8002dd0 <__aeabi_i2d>
 8009cf2:	0002      	movs	r2, r0
 8009cf4:	000b      	movs	r3, r1
 8009cf6:	0020      	movs	r0, r4
 8009cf8:	0029      	movs	r1, r5
 8009cfa:	f7f8 fc83 	bl	8002604 <__aeabi_dsub>
 8009cfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d02:	3301      	adds	r3, #1
 8009d04:	9308      	str	r3, [sp, #32]
 8009d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d08:	0004      	movs	r4, r0
 8009d0a:	3330      	adds	r3, #48	; 0x30
 8009d0c:	7013      	strb	r3, [r2, #0]
 8009d0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d12:	000d      	movs	r5, r1
 8009d14:	f7f6 fb9e 	bl	8000454 <__aeabi_dcmplt>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d175      	bne.n	8009e08 <_dtoa_r+0x67c>
 8009d1c:	0022      	movs	r2, r4
 8009d1e:	002b      	movs	r3, r5
 8009d20:	2000      	movs	r0, #0
 8009d22:	4940      	ldr	r1, [pc, #256]	; (8009e24 <_dtoa_r+0x698>)
 8009d24:	f7f8 fc6e 	bl	8002604 <__aeabi_dsub>
 8009d28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d2c:	f7f6 fb92 	bl	8000454 <__aeabi_dcmplt>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d000      	beq.n	8009d36 <_dtoa_r+0x5aa>
 8009d34:	e0d2      	b.n	8009edc <_dtoa_r+0x750>
 8009d36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d38:	9a08      	ldr	r2, [sp, #32]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d100      	bne.n	8009d40 <_dtoa_r+0x5b4>
 8009d3e:	e770      	b.n	8009c22 <_dtoa_r+0x496>
 8009d40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d44:	2200      	movs	r2, #0
 8009d46:	4b38      	ldr	r3, [pc, #224]	; (8009e28 <_dtoa_r+0x69c>)
 8009d48:	f7f8 f9f0 	bl	800212c <__aeabi_dmul>
 8009d4c:	4b36      	ldr	r3, [pc, #216]	; (8009e28 <_dtoa_r+0x69c>)
 8009d4e:	9010      	str	r0, [sp, #64]	; 0x40
 8009d50:	9111      	str	r1, [sp, #68]	; 0x44
 8009d52:	2200      	movs	r2, #0
 8009d54:	0020      	movs	r0, r4
 8009d56:	0029      	movs	r1, r5
 8009d58:	f7f8 f9e8 	bl	800212c <__aeabi_dmul>
 8009d5c:	9b08      	ldr	r3, [sp, #32]
 8009d5e:	0004      	movs	r4, r0
 8009d60:	000d      	movs	r5, r1
 8009d62:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d64:	e7be      	b.n	8009ce4 <_dtoa_r+0x558>
 8009d66:	9808      	ldr	r0, [sp, #32]
 8009d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d6a:	f7f8 f9df 	bl	800212c <__aeabi_dmul>
 8009d6e:	9a06      	ldr	r2, [sp, #24]
 8009d70:	9b06      	ldr	r3, [sp, #24]
 8009d72:	4694      	mov	ip, r2
 8009d74:	9308      	str	r3, [sp, #32]
 8009d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d78:	9010      	str	r0, [sp, #64]	; 0x40
 8009d7a:	9111      	str	r1, [sp, #68]	; 0x44
 8009d7c:	4463      	add	r3, ip
 8009d7e:	9319      	str	r3, [sp, #100]	; 0x64
 8009d80:	0029      	movs	r1, r5
 8009d82:	0020      	movs	r0, r4
 8009d84:	f7f8 ffee 	bl	8002d64 <__aeabi_d2iz>
 8009d88:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d8a:	f7f9 f821 	bl	8002dd0 <__aeabi_i2d>
 8009d8e:	0002      	movs	r2, r0
 8009d90:	000b      	movs	r3, r1
 8009d92:	0020      	movs	r0, r4
 8009d94:	0029      	movs	r1, r5
 8009d96:	f7f8 fc35 	bl	8002604 <__aeabi_dsub>
 8009d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d9c:	9a08      	ldr	r2, [sp, #32]
 8009d9e:	3330      	adds	r3, #48	; 0x30
 8009da0:	7013      	strb	r3, [r2, #0]
 8009da2:	0013      	movs	r3, r2
 8009da4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009da6:	3301      	adds	r3, #1
 8009da8:	0004      	movs	r4, r0
 8009daa:	000d      	movs	r5, r1
 8009dac:	9308      	str	r3, [sp, #32]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d12c      	bne.n	8009e0c <_dtoa_r+0x680>
 8009db2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009db4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009db6:	9a06      	ldr	r2, [sp, #24]
 8009db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dba:	4694      	mov	ip, r2
 8009dbc:	4463      	add	r3, ip
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <_dtoa_r+0x6b0>)
 8009dc4:	f7f7 fa74 	bl	80012b0 <__aeabi_dadd>
 8009dc8:	0002      	movs	r2, r0
 8009dca:	000b      	movs	r3, r1
 8009dcc:	0020      	movs	r0, r4
 8009dce:	0029      	movs	r1, r5
 8009dd0:	f7f6 fb54 	bl	800047c <__aeabi_dcmpgt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d000      	beq.n	8009dda <_dtoa_r+0x64e>
 8009dd8:	e080      	b.n	8009edc <_dtoa_r+0x750>
 8009dda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dde:	2000      	movs	r0, #0
 8009de0:	4916      	ldr	r1, [pc, #88]	; (8009e3c <_dtoa_r+0x6b0>)
 8009de2:	f7f8 fc0f 	bl	8002604 <__aeabi_dsub>
 8009de6:	0002      	movs	r2, r0
 8009de8:	000b      	movs	r3, r1
 8009dea:	0020      	movs	r0, r4
 8009dec:	0029      	movs	r1, r5
 8009dee:	f7f6 fb31 	bl	8000454 <__aeabi_dcmplt>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d100      	bne.n	8009df8 <_dtoa_r+0x66c>
 8009df6:	e714      	b.n	8009c22 <_dtoa_r+0x496>
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	001a      	movs	r2, r3
 8009dfc:	3a01      	subs	r2, #1
 8009dfe:	9208      	str	r2, [sp, #32]
 8009e00:	7812      	ldrb	r2, [r2, #0]
 8009e02:	2a30      	cmp	r2, #48	; 0x30
 8009e04:	d0f8      	beq.n	8009df8 <_dtoa_r+0x66c>
 8009e06:	9308      	str	r3, [sp, #32]
 8009e08:	9602      	str	r6, [sp, #8]
 8009e0a:	e055      	b.n	8009eb8 <_dtoa_r+0x72c>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <_dtoa_r+0x69c>)
 8009e10:	f7f8 f98c 	bl	800212c <__aeabi_dmul>
 8009e14:	0004      	movs	r4, r0
 8009e16:	000d      	movs	r5, r1
 8009e18:	e7b2      	b.n	8009d80 <_dtoa_r+0x5f4>
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	0800bc78 	.word	0x0800bc78
 8009e20:	0800bc50 	.word	0x0800bc50
 8009e24:	3ff00000 	.word	0x3ff00000
 8009e28:	40240000 	.word	0x40240000
 8009e2c:	401c0000 	.word	0x401c0000
 8009e30:	fcc00000 	.word	0xfcc00000
 8009e34:	40140000 	.word	0x40140000
 8009e38:	7cc00000 	.word	0x7cc00000
 8009e3c:	3fe00000 	.word	0x3fe00000
 8009e40:	9b07      	ldr	r3, [sp, #28]
 8009e42:	9e06      	ldr	r6, [sp, #24]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	199b      	adds	r3, r3, r6
 8009e48:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4a:	9c08      	ldr	r4, [sp, #32]
 8009e4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e52:	0020      	movs	r0, r4
 8009e54:	0029      	movs	r1, r5
 8009e56:	f7f7 fd67 	bl	8001928 <__aeabi_ddiv>
 8009e5a:	f7f8 ff83 	bl	8002d64 <__aeabi_d2iz>
 8009e5e:	9007      	str	r0, [sp, #28]
 8009e60:	f7f8 ffb6 	bl	8002dd0 <__aeabi_i2d>
 8009e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e68:	f7f8 f960 	bl	800212c <__aeabi_dmul>
 8009e6c:	0002      	movs	r2, r0
 8009e6e:	000b      	movs	r3, r1
 8009e70:	0020      	movs	r0, r4
 8009e72:	0029      	movs	r1, r5
 8009e74:	f7f8 fbc6 	bl	8002604 <__aeabi_dsub>
 8009e78:	0033      	movs	r3, r6
 8009e7a:	9a07      	ldr	r2, [sp, #28]
 8009e7c:	3601      	adds	r6, #1
 8009e7e:	3230      	adds	r2, #48	; 0x30
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e84:	9608      	str	r6, [sp, #32]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d139      	bne.n	8009efe <_dtoa_r+0x772>
 8009e8a:	0002      	movs	r2, r0
 8009e8c:	000b      	movs	r3, r1
 8009e8e:	f7f7 fa0f 	bl	80012b0 <__aeabi_dadd>
 8009e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e96:	0004      	movs	r4, r0
 8009e98:	000d      	movs	r5, r1
 8009e9a:	f7f6 faef 	bl	800047c <__aeabi_dcmpgt>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d11b      	bne.n	8009eda <_dtoa_r+0x74e>
 8009ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea6:	0020      	movs	r0, r4
 8009ea8:	0029      	movs	r1, r5
 8009eaa:	f7f6 facd 	bl	8000448 <__aeabi_dcmpeq>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d002      	beq.n	8009eb8 <_dtoa_r+0x72c>
 8009eb2:	9b07      	ldr	r3, [sp, #28]
 8009eb4:	07db      	lsls	r3, r3, #31
 8009eb6:	d410      	bmi.n	8009eda <_dtoa_r+0x74e>
 8009eb8:	0038      	movs	r0, r7
 8009eba:	9905      	ldr	r1, [sp, #20]
 8009ebc:	f000 fd24 	bl	800a908 <_Bfree>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9a08      	ldr	r2, [sp, #32]
 8009ec4:	9802      	ldr	r0, [sp, #8]
 8009ec6:	7013      	strb	r3, [r2, #0]
 8009ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009eca:	3001      	adds	r0, #1
 8009ecc:	6018      	str	r0, [r3, #0]
 8009ece:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d100      	bne.n	8009ed6 <_dtoa_r+0x74a>
 8009ed4:	e4a6      	b.n	8009824 <_dtoa_r+0x98>
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	e4a4      	b.n	8009824 <_dtoa_r+0x98>
 8009eda:	9e02      	ldr	r6, [sp, #8]
 8009edc:	9b08      	ldr	r3, [sp, #32]
 8009ede:	9308      	str	r3, [sp, #32]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	781a      	ldrb	r2, [r3, #0]
 8009ee4:	2a39      	cmp	r2, #57	; 0x39
 8009ee6:	d106      	bne.n	8009ef6 <_dtoa_r+0x76a>
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d1f7      	bne.n	8009ede <_dtoa_r+0x752>
 8009eee:	2230      	movs	r2, #48	; 0x30
 8009ef0:	9906      	ldr	r1, [sp, #24]
 8009ef2:	3601      	adds	r6, #1
 8009ef4:	700a      	strb	r2, [r1, #0]
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	3201      	adds	r2, #1
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e784      	b.n	8009e08 <_dtoa_r+0x67c>
 8009efe:	2200      	movs	r2, #0
 8009f00:	4baa      	ldr	r3, [pc, #680]	; (800a1ac <_dtoa_r+0xa20>)
 8009f02:	f7f8 f913 	bl	800212c <__aeabi_dmul>
 8009f06:	2200      	movs	r2, #0
 8009f08:	2300      	movs	r3, #0
 8009f0a:	0004      	movs	r4, r0
 8009f0c:	000d      	movs	r5, r1
 8009f0e:	f7f6 fa9b 	bl	8000448 <__aeabi_dcmpeq>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d09b      	beq.n	8009e4e <_dtoa_r+0x6c2>
 8009f16:	e7cf      	b.n	8009eb8 <_dtoa_r+0x72c>
 8009f18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	d012      	beq.n	8009f48 <_dtoa_r+0x7bc>
 8009f22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f24:	2a01      	cmp	r2, #1
 8009f26:	dc66      	bgt.n	8009ff6 <_dtoa_r+0x86a>
 8009f28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d05d      	beq.n	8009fea <_dtoa_r+0x85e>
 8009f2e:	4aa0      	ldr	r2, [pc, #640]	; (800a1b0 <_dtoa_r+0xa24>)
 8009f30:	189b      	adds	r3, r3, r2
 8009f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f34:	2101      	movs	r1, #1
 8009f36:	18d2      	adds	r2, r2, r3
 8009f38:	920a      	str	r2, [sp, #40]	; 0x28
 8009f3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f3c:	0038      	movs	r0, r7
 8009f3e:	18d3      	adds	r3, r2, r3
 8009f40:	930d      	str	r3, [sp, #52]	; 0x34
 8009f42:	f000 fd91 	bl	800aa68 <__i2b>
 8009f46:	0005      	movs	r5, r0
 8009f48:	2c00      	cmp	r4, #0
 8009f4a:	dd0e      	ble.n	8009f6a <_dtoa_r+0x7de>
 8009f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dd0b      	ble.n	8009f6a <_dtoa_r+0x7de>
 8009f52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f54:	0023      	movs	r3, r4
 8009f56:	4294      	cmp	r4, r2
 8009f58:	dd00      	ble.n	8009f5c <_dtoa_r+0x7d0>
 8009f5a:	0013      	movs	r3, r2
 8009f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f5e:	1ae4      	subs	r4, r4, r3
 8009f60:	1ad2      	subs	r2, r2, r3
 8009f62:	920a      	str	r2, [sp, #40]	; 0x28
 8009f64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	930d      	str	r3, [sp, #52]	; 0x34
 8009f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01f      	beq.n	8009fb0 <_dtoa_r+0x824>
 8009f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d054      	beq.n	800a020 <_dtoa_r+0x894>
 8009f76:	2e00      	cmp	r6, #0
 8009f78:	dd11      	ble.n	8009f9e <_dtoa_r+0x812>
 8009f7a:	0029      	movs	r1, r5
 8009f7c:	0032      	movs	r2, r6
 8009f7e:	0038      	movs	r0, r7
 8009f80:	f000 fe38 	bl	800abf4 <__pow5mult>
 8009f84:	9a05      	ldr	r2, [sp, #20]
 8009f86:	0001      	movs	r1, r0
 8009f88:	0005      	movs	r5, r0
 8009f8a:	0038      	movs	r0, r7
 8009f8c:	f000 fd82 	bl	800aa94 <__multiply>
 8009f90:	9905      	ldr	r1, [sp, #20]
 8009f92:	9014      	str	r0, [sp, #80]	; 0x50
 8009f94:	0038      	movs	r0, r7
 8009f96:	f000 fcb7 	bl	800a908 <_Bfree>
 8009f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa0:	1b9a      	subs	r2, r3, r6
 8009fa2:	42b3      	cmp	r3, r6
 8009fa4:	d004      	beq.n	8009fb0 <_dtoa_r+0x824>
 8009fa6:	0038      	movs	r0, r7
 8009fa8:	9905      	ldr	r1, [sp, #20]
 8009faa:	f000 fe23 	bl	800abf4 <__pow5mult>
 8009fae:	9005      	str	r0, [sp, #20]
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	0038      	movs	r0, r7
 8009fb4:	f000 fd58 	bl	800aa68 <__i2b>
 8009fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fba:	0006      	movs	r6, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dd31      	ble.n	800a024 <_dtoa_r+0x898>
 8009fc0:	001a      	movs	r2, r3
 8009fc2:	0001      	movs	r1, r0
 8009fc4:	0038      	movs	r0, r7
 8009fc6:	f000 fe15 	bl	800abf4 <__pow5mult>
 8009fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fcc:	0006      	movs	r6, r0
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	dd2d      	ble.n	800a02e <_dtoa_r+0x8a2>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8009fd6:	6933      	ldr	r3, [r6, #16]
 8009fd8:	3303      	adds	r3, #3
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	18f3      	adds	r3, r6, r3
 8009fde:	6858      	ldr	r0, [r3, #4]
 8009fe0:	f000 fcfa 	bl	800a9d8 <__hi0bits>
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	1a18      	subs	r0, r3, r0
 8009fe8:	e039      	b.n	800a05e <_dtoa_r+0x8d2>
 8009fea:	2336      	movs	r3, #54	; 0x36
 8009fec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009fee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009ff0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	e79d      	b.n	8009f32 <_dtoa_r+0x7a6>
 8009ff6:	9b07      	ldr	r3, [sp, #28]
 8009ff8:	1e5e      	subs	r6, r3, #1
 8009ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ffc:	42b3      	cmp	r3, r6
 8009ffe:	db07      	blt.n	800a010 <_dtoa_r+0x884>
 800a000:	1b9e      	subs	r6, r3, r6
 800a002:	9b07      	ldr	r3, [sp, #28]
 800a004:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	da93      	bge.n	8009f32 <_dtoa_r+0x7a6>
 800a00a:	1ae4      	subs	r4, r4, r3
 800a00c:	2300      	movs	r3, #0
 800a00e:	e790      	b.n	8009f32 <_dtoa_r+0x7a6>
 800a010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a012:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a014:	1af3      	subs	r3, r6, r3
 800a016:	18d3      	adds	r3, r2, r3
 800a018:	960e      	str	r6, [sp, #56]	; 0x38
 800a01a:	9315      	str	r3, [sp, #84]	; 0x54
 800a01c:	2600      	movs	r6, #0
 800a01e:	e7f0      	b.n	800a002 <_dtoa_r+0x876>
 800a020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a022:	e7c0      	b.n	8009fa6 <_dtoa_r+0x81a>
 800a024:	2300      	movs	r3, #0
 800a026:	930e      	str	r3, [sp, #56]	; 0x38
 800a028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	dc13      	bgt.n	800a056 <_dtoa_r+0x8ca>
 800a02e:	2300      	movs	r3, #0
 800a030:	930e      	str	r3, [sp, #56]	; 0x38
 800a032:	9b08      	ldr	r3, [sp, #32]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10e      	bne.n	800a056 <_dtoa_r+0x8ca>
 800a038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03a:	031b      	lsls	r3, r3, #12
 800a03c:	d10b      	bne.n	800a056 <_dtoa_r+0x8ca>
 800a03e:	4b5d      	ldr	r3, [pc, #372]	; (800a1b4 <_dtoa_r+0xa28>)
 800a040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a042:	4213      	tst	r3, r2
 800a044:	d007      	beq.n	800a056 <_dtoa_r+0x8ca>
 800a046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a048:	3301      	adds	r3, #1
 800a04a:	930a      	str	r3, [sp, #40]	; 0x28
 800a04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a04e:	3301      	adds	r3, #1
 800a050:	930d      	str	r3, [sp, #52]	; 0x34
 800a052:	2301      	movs	r3, #1
 800a054:	930e      	str	r3, [sp, #56]	; 0x38
 800a056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a058:	2001      	movs	r0, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1bb      	bne.n	8009fd6 <_dtoa_r+0x84a>
 800a05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a060:	221f      	movs	r2, #31
 800a062:	1818      	adds	r0, r3, r0
 800a064:	0003      	movs	r3, r0
 800a066:	4013      	ands	r3, r2
 800a068:	4210      	tst	r0, r2
 800a06a:	d046      	beq.n	800a0fa <_dtoa_r+0x96e>
 800a06c:	3201      	adds	r2, #1
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	2a04      	cmp	r2, #4
 800a072:	dd3f      	ble.n	800a0f4 <_dtoa_r+0x968>
 800a074:	221c      	movs	r2, #28
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a07a:	18e4      	adds	r4, r4, r3
 800a07c:	18d2      	adds	r2, r2, r3
 800a07e:	920a      	str	r2, [sp, #40]	; 0x28
 800a080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a082:	18d3      	adds	r3, r2, r3
 800a084:	930d      	str	r3, [sp, #52]	; 0x34
 800a086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dd05      	ble.n	800a098 <_dtoa_r+0x90c>
 800a08c:	001a      	movs	r2, r3
 800a08e:	0038      	movs	r0, r7
 800a090:	9905      	ldr	r1, [sp, #20]
 800a092:	f000 fe0b 	bl	800acac <__lshift>
 800a096:	9005      	str	r0, [sp, #20]
 800a098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dd05      	ble.n	800a0aa <_dtoa_r+0x91e>
 800a09e:	0031      	movs	r1, r6
 800a0a0:	001a      	movs	r2, r3
 800a0a2:	0038      	movs	r0, r7
 800a0a4:	f000 fe02 	bl	800acac <__lshift>
 800a0a8:	0006      	movs	r6, r0
 800a0aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d026      	beq.n	800a0fe <_dtoa_r+0x972>
 800a0b0:	0031      	movs	r1, r6
 800a0b2:	9805      	ldr	r0, [sp, #20]
 800a0b4:	f000 fe68 	bl	800ad88 <__mcmp>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	da20      	bge.n	800a0fe <_dtoa_r+0x972>
 800a0bc:	9b02      	ldr	r3, [sp, #8]
 800a0be:	220a      	movs	r2, #10
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	0038      	movs	r0, r7
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9905      	ldr	r1, [sp, #20]
 800a0ca:	f000 fc41 	bl	800a950 <__multadd>
 800a0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0d0:	9005      	str	r0, [sp, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d100      	bne.n	800a0d8 <_dtoa_r+0x94c>
 800a0d6:	e166      	b.n	800a3a6 <_dtoa_r+0xc1a>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	0029      	movs	r1, r5
 800a0dc:	220a      	movs	r2, #10
 800a0de:	0038      	movs	r0, r7
 800a0e0:	f000 fc36 	bl	800a950 <__multadd>
 800a0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0e6:	0005      	movs	r5, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc47      	bgt.n	800a17c <_dtoa_r+0x9f0>
 800a0ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	dc0d      	bgt.n	800a10e <_dtoa_r+0x982>
 800a0f2:	e043      	b.n	800a17c <_dtoa_r+0x9f0>
 800a0f4:	2a04      	cmp	r2, #4
 800a0f6:	d0c6      	beq.n	800a086 <_dtoa_r+0x8fa>
 800a0f8:	0013      	movs	r3, r2
 800a0fa:	331c      	adds	r3, #28
 800a0fc:	e7bc      	b.n	800a078 <_dtoa_r+0x8ec>
 800a0fe:	9b07      	ldr	r3, [sp, #28]
 800a100:	2b00      	cmp	r3, #0
 800a102:	dc35      	bgt.n	800a170 <_dtoa_r+0x9e4>
 800a104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a106:	2b02      	cmp	r3, #2
 800a108:	dd32      	ble.n	800a170 <_dtoa_r+0x9e4>
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	930c      	str	r3, [sp, #48]	; 0x30
 800a10e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10c      	bne.n	800a12e <_dtoa_r+0x9a2>
 800a114:	0031      	movs	r1, r6
 800a116:	2205      	movs	r2, #5
 800a118:	0038      	movs	r0, r7
 800a11a:	f000 fc19 	bl	800a950 <__multadd>
 800a11e:	0006      	movs	r6, r0
 800a120:	0001      	movs	r1, r0
 800a122:	9805      	ldr	r0, [sp, #20]
 800a124:	f000 fe30 	bl	800ad88 <__mcmp>
 800a128:	2800      	cmp	r0, #0
 800a12a:	dd00      	ble.n	800a12e <_dtoa_r+0x9a2>
 800a12c:	e5a5      	b.n	8009c7a <_dtoa_r+0x4ee>
 800a12e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a130:	43db      	mvns	r3, r3
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	9b06      	ldr	r3, [sp, #24]
 800a136:	9308      	str	r3, [sp, #32]
 800a138:	2400      	movs	r4, #0
 800a13a:	0031      	movs	r1, r6
 800a13c:	0038      	movs	r0, r7
 800a13e:	f000 fbe3 	bl	800a908 <_Bfree>
 800a142:	2d00      	cmp	r5, #0
 800a144:	d100      	bne.n	800a148 <_dtoa_r+0x9bc>
 800a146:	e6b7      	b.n	8009eb8 <_dtoa_r+0x72c>
 800a148:	2c00      	cmp	r4, #0
 800a14a:	d005      	beq.n	800a158 <_dtoa_r+0x9cc>
 800a14c:	42ac      	cmp	r4, r5
 800a14e:	d003      	beq.n	800a158 <_dtoa_r+0x9cc>
 800a150:	0021      	movs	r1, r4
 800a152:	0038      	movs	r0, r7
 800a154:	f000 fbd8 	bl	800a908 <_Bfree>
 800a158:	0029      	movs	r1, r5
 800a15a:	0038      	movs	r0, r7
 800a15c:	f000 fbd4 	bl	800a908 <_Bfree>
 800a160:	e6aa      	b.n	8009eb8 <_dtoa_r+0x72c>
 800a162:	2600      	movs	r6, #0
 800a164:	0035      	movs	r5, r6
 800a166:	e7e2      	b.n	800a12e <_dtoa_r+0x9a2>
 800a168:	9602      	str	r6, [sp, #8]
 800a16a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a16c:	0035      	movs	r5, r6
 800a16e:	e584      	b.n	8009c7a <_dtoa_r+0x4ee>
 800a170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d100      	bne.n	800a178 <_dtoa_r+0x9ec>
 800a176:	e0ce      	b.n	800a316 <_dtoa_r+0xb8a>
 800a178:	9b07      	ldr	r3, [sp, #28]
 800a17a:	930c      	str	r3, [sp, #48]	; 0x30
 800a17c:	2c00      	cmp	r4, #0
 800a17e:	dd05      	ble.n	800a18c <_dtoa_r+0xa00>
 800a180:	0029      	movs	r1, r5
 800a182:	0022      	movs	r2, r4
 800a184:	0038      	movs	r0, r7
 800a186:	f000 fd91 	bl	800acac <__lshift>
 800a18a:	0005      	movs	r5, r0
 800a18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a18e:	0028      	movs	r0, r5
 800a190:	2b00      	cmp	r3, #0
 800a192:	d022      	beq.n	800a1da <_dtoa_r+0xa4e>
 800a194:	0038      	movs	r0, r7
 800a196:	6869      	ldr	r1, [r5, #4]
 800a198:	f000 fb72 	bl	800a880 <_Balloc>
 800a19c:	1e04      	subs	r4, r0, #0
 800a19e:	d10f      	bne.n	800a1c0 <_dtoa_r+0xa34>
 800a1a0:	0002      	movs	r2, r0
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <_dtoa_r+0xa2c>)
 800a1a4:	4905      	ldr	r1, [pc, #20]	; (800a1bc <_dtoa_r+0xa30>)
 800a1a6:	f7ff fb06 	bl	80097b6 <_dtoa_r+0x2a>
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	40240000 	.word	0x40240000
 800a1b0:	00000433 	.word	0x00000433
 800a1b4:	7ff00000 	.word	0x7ff00000
 800a1b8:	0800bb83 	.word	0x0800bb83
 800a1bc:	000002ea 	.word	0x000002ea
 800a1c0:	0029      	movs	r1, r5
 800a1c2:	692b      	ldr	r3, [r5, #16]
 800a1c4:	310c      	adds	r1, #12
 800a1c6:	1c9a      	adds	r2, r3, #2
 800a1c8:	0092      	lsls	r2, r2, #2
 800a1ca:	300c      	adds	r0, #12
 800a1cc:	f000 fb4f 	bl	800a86e <memcpy>
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	0021      	movs	r1, r4
 800a1d4:	0038      	movs	r0, r7
 800a1d6:	f000 fd69 	bl	800acac <__lshift>
 800a1da:	9b06      	ldr	r3, [sp, #24]
 800a1dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1de:	930a      	str	r3, [sp, #40]	; 0x28
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	189b      	adds	r3, r3, r2
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	002c      	movs	r4, r5
 800a1e8:	0005      	movs	r5, r0
 800a1ea:	9314      	str	r3, [sp, #80]	; 0x50
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f2:	0031      	movs	r1, r6
 800a1f4:	9805      	ldr	r0, [sp, #20]
 800a1f6:	f7ff fa3d 	bl	8009674 <quorem>
 800a1fa:	0003      	movs	r3, r0
 800a1fc:	0021      	movs	r1, r4
 800a1fe:	3330      	adds	r3, #48	; 0x30
 800a200:	900d      	str	r0, [sp, #52]	; 0x34
 800a202:	9805      	ldr	r0, [sp, #20]
 800a204:	9307      	str	r3, [sp, #28]
 800a206:	f000 fdbf 	bl	800ad88 <__mcmp>
 800a20a:	002a      	movs	r2, r5
 800a20c:	900e      	str	r0, [sp, #56]	; 0x38
 800a20e:	0031      	movs	r1, r6
 800a210:	0038      	movs	r0, r7
 800a212:	f000 fdd5 	bl	800adc0 <__mdiff>
 800a216:	68c3      	ldr	r3, [r0, #12]
 800a218:	9008      	str	r0, [sp, #32]
 800a21a:	9310      	str	r3, [sp, #64]	; 0x40
 800a21c:	2301      	movs	r3, #1
 800a21e:	930c      	str	r3, [sp, #48]	; 0x30
 800a220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d104      	bne.n	800a230 <_dtoa_r+0xaa4>
 800a226:	0001      	movs	r1, r0
 800a228:	9805      	ldr	r0, [sp, #20]
 800a22a:	f000 fdad 	bl	800ad88 <__mcmp>
 800a22e:	900c      	str	r0, [sp, #48]	; 0x30
 800a230:	0038      	movs	r0, r7
 800a232:	9908      	ldr	r1, [sp, #32]
 800a234:	f000 fb68 	bl	800a908 <_Bfree>
 800a238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a23c:	3301      	adds	r3, #1
 800a23e:	9308      	str	r3, [sp, #32]
 800a240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a242:	4313      	orrs	r3, r2
 800a244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a246:	4313      	orrs	r3, r2
 800a248:	d10c      	bne.n	800a264 <_dtoa_r+0xad8>
 800a24a:	9b07      	ldr	r3, [sp, #28]
 800a24c:	2b39      	cmp	r3, #57	; 0x39
 800a24e:	d026      	beq.n	800a29e <_dtoa_r+0xb12>
 800a250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a252:	2b00      	cmp	r3, #0
 800a254:	dd02      	ble.n	800a25c <_dtoa_r+0xad0>
 800a256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a258:	3331      	adds	r3, #49	; 0x31
 800a25a:	9307      	str	r3, [sp, #28]
 800a25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25e:	9a07      	ldr	r2, [sp, #28]
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	e76a      	b.n	800a13a <_dtoa_r+0x9ae>
 800a264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a266:	2b00      	cmp	r3, #0
 800a268:	db04      	blt.n	800a274 <_dtoa_r+0xae8>
 800a26a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a26c:	4313      	orrs	r3, r2
 800a26e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a270:	4313      	orrs	r3, r2
 800a272:	d11f      	bne.n	800a2b4 <_dtoa_r+0xb28>
 800a274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a276:	2b00      	cmp	r3, #0
 800a278:	ddf0      	ble.n	800a25c <_dtoa_r+0xad0>
 800a27a:	9905      	ldr	r1, [sp, #20]
 800a27c:	2201      	movs	r2, #1
 800a27e:	0038      	movs	r0, r7
 800a280:	f000 fd14 	bl	800acac <__lshift>
 800a284:	0031      	movs	r1, r6
 800a286:	9005      	str	r0, [sp, #20]
 800a288:	f000 fd7e 	bl	800ad88 <__mcmp>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	dc03      	bgt.n	800a298 <_dtoa_r+0xb0c>
 800a290:	d1e4      	bne.n	800a25c <_dtoa_r+0xad0>
 800a292:	9b07      	ldr	r3, [sp, #28]
 800a294:	07db      	lsls	r3, r3, #31
 800a296:	d5e1      	bpl.n	800a25c <_dtoa_r+0xad0>
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	2b39      	cmp	r3, #57	; 0x39
 800a29c:	d1db      	bne.n	800a256 <_dtoa_r+0xaca>
 800a29e:	2339      	movs	r3, #57	; 0x39
 800a2a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2a2:	7013      	strb	r3, [r2, #0]
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	9308      	str	r3, [sp, #32]
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	2a39      	cmp	r2, #57	; 0x39
 800a2ae:	d068      	beq.n	800a382 <_dtoa_r+0xbf6>
 800a2b0:	3201      	adds	r2, #1
 800a2b2:	e7d5      	b.n	800a260 <_dtoa_r+0xad4>
 800a2b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dd07      	ble.n	800a2ca <_dtoa_r+0xb3e>
 800a2ba:	9b07      	ldr	r3, [sp, #28]
 800a2bc:	2b39      	cmp	r3, #57	; 0x39
 800a2be:	d0ee      	beq.n	800a29e <_dtoa_r+0xb12>
 800a2c0:	9b07      	ldr	r3, [sp, #28]
 800a2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	7013      	strb	r3, [r2, #0]
 800a2c8:	e737      	b.n	800a13a <_dtoa_r+0x9ae>
 800a2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2cc:	9a07      	ldr	r2, [sp, #28]
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d03e      	beq.n	800a356 <_dtoa_r+0xbca>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	220a      	movs	r2, #10
 800a2dc:	9905      	ldr	r1, [sp, #20]
 800a2de:	0038      	movs	r0, r7
 800a2e0:	f000 fb36 	bl	800a950 <__multadd>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9005      	str	r0, [sp, #20]
 800a2e8:	220a      	movs	r2, #10
 800a2ea:	0021      	movs	r1, r4
 800a2ec:	0038      	movs	r0, r7
 800a2ee:	42ac      	cmp	r4, r5
 800a2f0:	d106      	bne.n	800a300 <_dtoa_r+0xb74>
 800a2f2:	f000 fb2d 	bl	800a950 <__multadd>
 800a2f6:	0004      	movs	r4, r0
 800a2f8:	0005      	movs	r5, r0
 800a2fa:	9b08      	ldr	r3, [sp, #32]
 800a2fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a2fe:	e778      	b.n	800a1f2 <_dtoa_r+0xa66>
 800a300:	f000 fb26 	bl	800a950 <__multadd>
 800a304:	0029      	movs	r1, r5
 800a306:	0004      	movs	r4, r0
 800a308:	2300      	movs	r3, #0
 800a30a:	220a      	movs	r2, #10
 800a30c:	0038      	movs	r0, r7
 800a30e:	f000 fb1f 	bl	800a950 <__multadd>
 800a312:	0005      	movs	r5, r0
 800a314:	e7f1      	b.n	800a2fa <_dtoa_r+0xb6e>
 800a316:	9b07      	ldr	r3, [sp, #28]
 800a318:	930c      	str	r3, [sp, #48]	; 0x30
 800a31a:	2400      	movs	r4, #0
 800a31c:	0031      	movs	r1, r6
 800a31e:	9805      	ldr	r0, [sp, #20]
 800a320:	f7ff f9a8 	bl	8009674 <quorem>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	3030      	adds	r0, #48	; 0x30
 800a328:	5518      	strb	r0, [r3, r4]
 800a32a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a32c:	3401      	adds	r4, #1
 800a32e:	9007      	str	r0, [sp, #28]
 800a330:	42a3      	cmp	r3, r4
 800a332:	dd07      	ble.n	800a344 <_dtoa_r+0xbb8>
 800a334:	2300      	movs	r3, #0
 800a336:	220a      	movs	r2, #10
 800a338:	0038      	movs	r0, r7
 800a33a:	9905      	ldr	r1, [sp, #20]
 800a33c:	f000 fb08 	bl	800a950 <__multadd>
 800a340:	9005      	str	r0, [sp, #20]
 800a342:	e7eb      	b.n	800a31c <_dtoa_r+0xb90>
 800a344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a346:	2001      	movs	r0, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	dd00      	ble.n	800a34e <_dtoa_r+0xbc2>
 800a34c:	0018      	movs	r0, r3
 800a34e:	2400      	movs	r4, #0
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	181b      	adds	r3, r3, r0
 800a354:	9308      	str	r3, [sp, #32]
 800a356:	9905      	ldr	r1, [sp, #20]
 800a358:	2201      	movs	r2, #1
 800a35a:	0038      	movs	r0, r7
 800a35c:	f000 fca6 	bl	800acac <__lshift>
 800a360:	0031      	movs	r1, r6
 800a362:	9005      	str	r0, [sp, #20]
 800a364:	f000 fd10 	bl	800ad88 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dc9b      	bgt.n	800a2a4 <_dtoa_r+0xb18>
 800a36c:	d102      	bne.n	800a374 <_dtoa_r+0xbe8>
 800a36e:	9b07      	ldr	r3, [sp, #28]
 800a370:	07db      	lsls	r3, r3, #31
 800a372:	d497      	bmi.n	800a2a4 <_dtoa_r+0xb18>
 800a374:	9b08      	ldr	r3, [sp, #32]
 800a376:	9308      	str	r3, [sp, #32]
 800a378:	3b01      	subs	r3, #1
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	2a30      	cmp	r2, #48	; 0x30
 800a37e:	d0fa      	beq.n	800a376 <_dtoa_r+0xbea>
 800a380:	e6db      	b.n	800a13a <_dtoa_r+0x9ae>
 800a382:	9a06      	ldr	r2, [sp, #24]
 800a384:	429a      	cmp	r2, r3
 800a386:	d18e      	bne.n	800a2a6 <_dtoa_r+0xb1a>
 800a388:	9b02      	ldr	r3, [sp, #8]
 800a38a:	3301      	adds	r3, #1
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	2331      	movs	r3, #49	; 0x31
 800a390:	e799      	b.n	800a2c6 <_dtoa_r+0xb3a>
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <_dtoa_r+0xc2c>)
 800a394:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a396:	9306      	str	r3, [sp, #24]
 800a398:	4b08      	ldr	r3, [pc, #32]	; (800a3bc <_dtoa_r+0xc30>)
 800a39a:	2a00      	cmp	r2, #0
 800a39c:	d001      	beq.n	800a3a2 <_dtoa_r+0xc16>
 800a39e:	f7ff fa3f 	bl	8009820 <_dtoa_r+0x94>
 800a3a2:	f7ff fa3f 	bl	8009824 <_dtoa_r+0x98>
 800a3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dcb6      	bgt.n	800a31a <_dtoa_r+0xb8e>
 800a3ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	dd00      	ble.n	800a3b4 <_dtoa_r+0xc28>
 800a3b2:	e6ac      	b.n	800a10e <_dtoa_r+0x982>
 800a3b4:	e7b1      	b.n	800a31a <_dtoa_r+0xb8e>
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	0800bb04 	.word	0x0800bb04
 800a3bc:	0800bb0c 	.word	0x0800bb0c

0800a3c0 <__sflush_r>:
 800a3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c2:	898b      	ldrh	r3, [r1, #12]
 800a3c4:	0005      	movs	r5, r0
 800a3c6:	000c      	movs	r4, r1
 800a3c8:	071a      	lsls	r2, r3, #28
 800a3ca:	d45f      	bmi.n	800a48c <__sflush_r+0xcc>
 800a3cc:	684a      	ldr	r2, [r1, #4]
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	dc04      	bgt.n	800a3dc <__sflush_r+0x1c>
 800a3d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	dc01      	bgt.n	800a3dc <__sflush_r+0x1c>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	d0fa      	beq.n	800a3d8 <__sflush_r+0x18>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2180      	movs	r1, #128	; 0x80
 800a3e6:	682e      	ldr	r6, [r5, #0]
 800a3e8:	602a      	str	r2, [r5, #0]
 800a3ea:	001a      	movs	r2, r3
 800a3ec:	0149      	lsls	r1, r1, #5
 800a3ee:	400a      	ands	r2, r1
 800a3f0:	420b      	tst	r3, r1
 800a3f2:	d034      	beq.n	800a45e <__sflush_r+0x9e>
 800a3f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	075b      	lsls	r3, r3, #29
 800a3fa:	d506      	bpl.n	800a40a <__sflush_r+0x4a>
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	1ac0      	subs	r0, r0, r3
 800a400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <__sflush_r+0x4a>
 800a406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a408:	1ac0      	subs	r0, r0, r3
 800a40a:	0002      	movs	r2, r0
 800a40c:	6a21      	ldr	r1, [r4, #32]
 800a40e:	2300      	movs	r3, #0
 800a410:	0028      	movs	r0, r5
 800a412:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a414:	47b8      	blx	r7
 800a416:	89a1      	ldrh	r1, [r4, #12]
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d106      	bne.n	800a42a <__sflush_r+0x6a>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	2b1d      	cmp	r3, #29
 800a420:	d831      	bhi.n	800a486 <__sflush_r+0xc6>
 800a422:	4a2c      	ldr	r2, [pc, #176]	; (800a4d4 <__sflush_r+0x114>)
 800a424:	40da      	lsrs	r2, r3
 800a426:	07d3      	lsls	r3, r2, #31
 800a428:	d52d      	bpl.n	800a486 <__sflush_r+0xc6>
 800a42a:	2300      	movs	r3, #0
 800a42c:	6063      	str	r3, [r4, #4]
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	04cb      	lsls	r3, r1, #19
 800a434:	d505      	bpl.n	800a442 <__sflush_r+0x82>
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	d102      	bne.n	800a440 <__sflush_r+0x80>
 800a43a:	682b      	ldr	r3, [r5, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d100      	bne.n	800a442 <__sflush_r+0x82>
 800a440:	6560      	str	r0, [r4, #84]	; 0x54
 800a442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a444:	602e      	str	r6, [r5, #0]
 800a446:	2900      	cmp	r1, #0
 800a448:	d0c6      	beq.n	800a3d8 <__sflush_r+0x18>
 800a44a:	0023      	movs	r3, r4
 800a44c:	3344      	adds	r3, #68	; 0x44
 800a44e:	4299      	cmp	r1, r3
 800a450:	d002      	beq.n	800a458 <__sflush_r+0x98>
 800a452:	0028      	movs	r0, r5
 800a454:	f000 fddc 	bl	800b010 <_free_r>
 800a458:	2000      	movs	r0, #0
 800a45a:	6360      	str	r0, [r4, #52]	; 0x34
 800a45c:	e7bd      	b.n	800a3da <__sflush_r+0x1a>
 800a45e:	2301      	movs	r3, #1
 800a460:	0028      	movs	r0, r5
 800a462:	6a21      	ldr	r1, [r4, #32]
 800a464:	47b8      	blx	r7
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d1c5      	bne.n	800a3f6 <__sflush_r+0x36>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0c2      	beq.n	800a3f6 <__sflush_r+0x36>
 800a470:	2b1d      	cmp	r3, #29
 800a472:	d001      	beq.n	800a478 <__sflush_r+0xb8>
 800a474:	2b16      	cmp	r3, #22
 800a476:	d101      	bne.n	800a47c <__sflush_r+0xbc>
 800a478:	602e      	str	r6, [r5, #0]
 800a47a:	e7ad      	b.n	800a3d8 <__sflush_r+0x18>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	89a2      	ldrh	r2, [r4, #12]
 800a480:	4313      	orrs	r3, r2
 800a482:	81a3      	strh	r3, [r4, #12]
 800a484:	e7a9      	b.n	800a3da <__sflush_r+0x1a>
 800a486:	2340      	movs	r3, #64	; 0x40
 800a488:	430b      	orrs	r3, r1
 800a48a:	e7fa      	b.n	800a482 <__sflush_r+0xc2>
 800a48c:	690f      	ldr	r7, [r1, #16]
 800a48e:	2f00      	cmp	r7, #0
 800a490:	d0a2      	beq.n	800a3d8 <__sflush_r+0x18>
 800a492:	680a      	ldr	r2, [r1, #0]
 800a494:	600f      	str	r7, [r1, #0]
 800a496:	1bd2      	subs	r2, r2, r7
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	079b      	lsls	r3, r3, #30
 800a49e:	d100      	bne.n	800a4a2 <__sflush_r+0xe2>
 800a4a0:	694a      	ldr	r2, [r1, #20]
 800a4a2:	60a2      	str	r2, [r4, #8]
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	dc00      	bgt.n	800a4ac <__sflush_r+0xec>
 800a4aa:	e795      	b.n	800a3d8 <__sflush_r+0x18>
 800a4ac:	003a      	movs	r2, r7
 800a4ae:	0028      	movs	r0, r5
 800a4b0:	9b01      	ldr	r3, [sp, #4]
 800a4b2:	6a21      	ldr	r1, [r4, #32]
 800a4b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4b6:	47b0      	blx	r6
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dc06      	bgt.n	800a4ca <__sflush_r+0x10a>
 800a4bc:	2340      	movs	r3, #64	; 0x40
 800a4be:	2001      	movs	r0, #1
 800a4c0:	89a2      	ldrh	r2, [r4, #12]
 800a4c2:	4240      	negs	r0, r0
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	81a3      	strh	r3, [r4, #12]
 800a4c8:	e787      	b.n	800a3da <__sflush_r+0x1a>
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	183f      	adds	r7, r7, r0
 800a4ce:	1a1b      	subs	r3, r3, r0
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	e7e7      	b.n	800a4a4 <__sflush_r+0xe4>
 800a4d4:	20400001 	.word	0x20400001

0800a4d8 <_fflush_r>:
 800a4d8:	690b      	ldr	r3, [r1, #16]
 800a4da:	b570      	push	{r4, r5, r6, lr}
 800a4dc:	0005      	movs	r5, r0
 800a4de:	000c      	movs	r4, r1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <_fflush_r+0x12>
 800a4e4:	2500      	movs	r5, #0
 800a4e6:	0028      	movs	r0, r5
 800a4e8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d004      	beq.n	800a4f8 <_fflush_r+0x20>
 800a4ee:	6983      	ldr	r3, [r0, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <_fflush_r+0x20>
 800a4f4:	f000 f892 	bl	800a61c <__sinit>
 800a4f8:	4b14      	ldr	r3, [pc, #80]	; (800a54c <_fflush_r+0x74>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d11b      	bne.n	800a536 <_fflush_r+0x5e>
 800a4fe:	686c      	ldr	r4, [r5, #4]
 800a500:	220c      	movs	r2, #12
 800a502:	5ea3      	ldrsh	r3, [r4, r2]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0ed      	beq.n	800a4e4 <_fflush_r+0xc>
 800a508:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a50a:	07d2      	lsls	r2, r2, #31
 800a50c:	d404      	bmi.n	800a518 <_fflush_r+0x40>
 800a50e:	059b      	lsls	r3, r3, #22
 800a510:	d402      	bmi.n	800a518 <_fflush_r+0x40>
 800a512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a514:	f000 f927 	bl	800a766 <__retarget_lock_acquire_recursive>
 800a518:	0028      	movs	r0, r5
 800a51a:	0021      	movs	r1, r4
 800a51c:	f7ff ff50 	bl	800a3c0 <__sflush_r>
 800a520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a522:	0005      	movs	r5, r0
 800a524:	07db      	lsls	r3, r3, #31
 800a526:	d4de      	bmi.n	800a4e6 <_fflush_r+0xe>
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	059b      	lsls	r3, r3, #22
 800a52c:	d4db      	bmi.n	800a4e6 <_fflush_r+0xe>
 800a52e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a530:	f000 f91a 	bl	800a768 <__retarget_lock_release_recursive>
 800a534:	e7d7      	b.n	800a4e6 <_fflush_r+0xe>
 800a536:	4b06      	ldr	r3, [pc, #24]	; (800a550 <_fflush_r+0x78>)
 800a538:	429c      	cmp	r4, r3
 800a53a:	d101      	bne.n	800a540 <_fflush_r+0x68>
 800a53c:	68ac      	ldr	r4, [r5, #8]
 800a53e:	e7df      	b.n	800a500 <_fflush_r+0x28>
 800a540:	4b04      	ldr	r3, [pc, #16]	; (800a554 <_fflush_r+0x7c>)
 800a542:	429c      	cmp	r4, r3
 800a544:	d1dc      	bne.n	800a500 <_fflush_r+0x28>
 800a546:	68ec      	ldr	r4, [r5, #12]
 800a548:	e7da      	b.n	800a500 <_fflush_r+0x28>
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	0800bbb4 	.word	0x0800bbb4
 800a550:	0800bbd4 	.word	0x0800bbd4
 800a554:	0800bb94 	.word	0x0800bb94

0800a558 <std>:
 800a558:	2300      	movs	r3, #0
 800a55a:	b510      	push	{r4, lr}
 800a55c:	0004      	movs	r4, r0
 800a55e:	6003      	str	r3, [r0, #0]
 800a560:	6043      	str	r3, [r0, #4]
 800a562:	6083      	str	r3, [r0, #8]
 800a564:	8181      	strh	r1, [r0, #12]
 800a566:	6643      	str	r3, [r0, #100]	; 0x64
 800a568:	0019      	movs	r1, r3
 800a56a:	81c2      	strh	r2, [r0, #14]
 800a56c:	6103      	str	r3, [r0, #16]
 800a56e:	6143      	str	r3, [r0, #20]
 800a570:	6183      	str	r3, [r0, #24]
 800a572:	2208      	movs	r2, #8
 800a574:	305c      	adds	r0, #92	; 0x5c
 800a576:	f7fe faa3 	bl	8008ac0 <memset>
 800a57a:	4b05      	ldr	r3, [pc, #20]	; (800a590 <std+0x38>)
 800a57c:	6224      	str	r4, [r4, #32]
 800a57e:	6263      	str	r3, [r4, #36]	; 0x24
 800a580:	4b04      	ldr	r3, [pc, #16]	; (800a594 <std+0x3c>)
 800a582:	62a3      	str	r3, [r4, #40]	; 0x28
 800a584:	4b04      	ldr	r3, [pc, #16]	; (800a598 <std+0x40>)
 800a586:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a588:	4b04      	ldr	r3, [pc, #16]	; (800a59c <std+0x44>)
 800a58a:	6323      	str	r3, [r4, #48]	; 0x30
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	46c0      	nop			; (mov r8, r8)
 800a590:	0800b4bd 	.word	0x0800b4bd
 800a594:	0800b4e5 	.word	0x0800b4e5
 800a598:	0800b51d 	.word	0x0800b51d
 800a59c:	0800b549 	.word	0x0800b549

0800a5a0 <_cleanup_r>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4902      	ldr	r1, [pc, #8]	; (800a5ac <_cleanup_r+0xc>)
 800a5a4:	f000 f8ba 	bl	800a71c <_fwalk_reent>
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	0800a4d9 	.word	0x0800a4d9

0800a5b0 <__sfmoreglue>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	2568      	movs	r5, #104	; 0x68
 800a5b4:	1e4a      	subs	r2, r1, #1
 800a5b6:	4355      	muls	r5, r2
 800a5b8:	000e      	movs	r6, r1
 800a5ba:	0029      	movs	r1, r5
 800a5bc:	3174      	adds	r1, #116	; 0x74
 800a5be:	f000 fd93 	bl	800b0e8 <_malloc_r>
 800a5c2:	1e04      	subs	r4, r0, #0
 800a5c4:	d008      	beq.n	800a5d8 <__sfmoreglue+0x28>
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	002a      	movs	r2, r5
 800a5ca:	6001      	str	r1, [r0, #0]
 800a5cc:	6046      	str	r6, [r0, #4]
 800a5ce:	300c      	adds	r0, #12
 800a5d0:	60a0      	str	r0, [r4, #8]
 800a5d2:	3268      	adds	r2, #104	; 0x68
 800a5d4:	f7fe fa74 	bl	8008ac0 <memset>
 800a5d8:	0020      	movs	r0, r4
 800a5da:	bd70      	pop	{r4, r5, r6, pc}

0800a5dc <__sfp_lock_acquire>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	4802      	ldr	r0, [pc, #8]	; (800a5e8 <__sfp_lock_acquire+0xc>)
 800a5e0:	f000 f8c1 	bl	800a766 <__retarget_lock_acquire_recursive>
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	20000921 	.word	0x20000921

0800a5ec <__sfp_lock_release>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	4802      	ldr	r0, [pc, #8]	; (800a5f8 <__sfp_lock_release+0xc>)
 800a5f0:	f000 f8ba 	bl	800a768 <__retarget_lock_release_recursive>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	20000921 	.word	0x20000921

0800a5fc <__sinit_lock_acquire>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	4802      	ldr	r0, [pc, #8]	; (800a608 <__sinit_lock_acquire+0xc>)
 800a600:	f000 f8b1 	bl	800a766 <__retarget_lock_acquire_recursive>
 800a604:	bd10      	pop	{r4, pc}
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	20000922 	.word	0x20000922

0800a60c <__sinit_lock_release>:
 800a60c:	b510      	push	{r4, lr}
 800a60e:	4802      	ldr	r0, [pc, #8]	; (800a618 <__sinit_lock_release+0xc>)
 800a610:	f000 f8aa 	bl	800a768 <__retarget_lock_release_recursive>
 800a614:	bd10      	pop	{r4, pc}
 800a616:	46c0      	nop			; (mov r8, r8)
 800a618:	20000922 	.word	0x20000922

0800a61c <__sinit>:
 800a61c:	b513      	push	{r0, r1, r4, lr}
 800a61e:	0004      	movs	r4, r0
 800a620:	f7ff ffec 	bl	800a5fc <__sinit_lock_acquire>
 800a624:	69a3      	ldr	r3, [r4, #24]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <__sinit+0x14>
 800a62a:	f7ff ffef 	bl	800a60c <__sinit_lock_release>
 800a62e:	bd13      	pop	{r0, r1, r4, pc}
 800a630:	64a3      	str	r3, [r4, #72]	; 0x48
 800a632:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a634:	6523      	str	r3, [r4, #80]	; 0x50
 800a636:	4b13      	ldr	r3, [pc, #76]	; (800a684 <__sinit+0x68>)
 800a638:	4a13      	ldr	r2, [pc, #76]	; (800a688 <__sinit+0x6c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	42a3      	cmp	r3, r4
 800a642:	d101      	bne.n	800a648 <__sinit+0x2c>
 800a644:	2301      	movs	r3, #1
 800a646:	61a3      	str	r3, [r4, #24]
 800a648:	0020      	movs	r0, r4
 800a64a:	f000 f81f 	bl	800a68c <__sfp>
 800a64e:	6060      	str	r0, [r4, #4]
 800a650:	0020      	movs	r0, r4
 800a652:	f000 f81b 	bl	800a68c <__sfp>
 800a656:	60a0      	str	r0, [r4, #8]
 800a658:	0020      	movs	r0, r4
 800a65a:	f000 f817 	bl	800a68c <__sfp>
 800a65e:	2200      	movs	r2, #0
 800a660:	2104      	movs	r1, #4
 800a662:	60e0      	str	r0, [r4, #12]
 800a664:	6860      	ldr	r0, [r4, #4]
 800a666:	f7ff ff77 	bl	800a558 <std>
 800a66a:	2201      	movs	r2, #1
 800a66c:	2109      	movs	r1, #9
 800a66e:	68a0      	ldr	r0, [r4, #8]
 800a670:	f7ff ff72 	bl	800a558 <std>
 800a674:	2202      	movs	r2, #2
 800a676:	2112      	movs	r1, #18
 800a678:	68e0      	ldr	r0, [r4, #12]
 800a67a:	f7ff ff6d 	bl	800a558 <std>
 800a67e:	2301      	movs	r3, #1
 800a680:	61a3      	str	r3, [r4, #24]
 800a682:	e7d2      	b.n	800a62a <__sinit+0xe>
 800a684:	0800bacc 	.word	0x0800bacc
 800a688:	0800a5a1 	.word	0x0800a5a1

0800a68c <__sfp>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	0007      	movs	r7, r0
 800a690:	f7ff ffa4 	bl	800a5dc <__sfp_lock_acquire>
 800a694:	4b1f      	ldr	r3, [pc, #124]	; (800a714 <__sfp+0x88>)
 800a696:	681e      	ldr	r6, [r3, #0]
 800a698:	69b3      	ldr	r3, [r6, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <__sfp+0x18>
 800a69e:	0030      	movs	r0, r6
 800a6a0:	f7ff ffbc 	bl	800a61c <__sinit>
 800a6a4:	3648      	adds	r6, #72	; 0x48
 800a6a6:	68b4      	ldr	r4, [r6, #8]
 800a6a8:	6873      	ldr	r3, [r6, #4]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	d504      	bpl.n	800a6b8 <__sfp+0x2c>
 800a6ae:	6833      	ldr	r3, [r6, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d022      	beq.n	800a6fa <__sfp+0x6e>
 800a6b4:	6836      	ldr	r6, [r6, #0]
 800a6b6:	e7f6      	b.n	800a6a6 <__sfp+0x1a>
 800a6b8:	220c      	movs	r2, #12
 800a6ba:	5ea5      	ldrsh	r5, [r4, r2]
 800a6bc:	2d00      	cmp	r5, #0
 800a6be:	d11a      	bne.n	800a6f6 <__sfp+0x6a>
 800a6c0:	0020      	movs	r0, r4
 800a6c2:	4b15      	ldr	r3, [pc, #84]	; (800a718 <__sfp+0x8c>)
 800a6c4:	3058      	adds	r0, #88	; 0x58
 800a6c6:	60e3      	str	r3, [r4, #12]
 800a6c8:	6665      	str	r5, [r4, #100]	; 0x64
 800a6ca:	f000 f84b 	bl	800a764 <__retarget_lock_init_recursive>
 800a6ce:	f7ff ff8d 	bl	800a5ec <__sfp_lock_release>
 800a6d2:	0020      	movs	r0, r4
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	0029      	movs	r1, r5
 800a6d8:	6025      	str	r5, [r4, #0]
 800a6da:	60a5      	str	r5, [r4, #8]
 800a6dc:	6065      	str	r5, [r4, #4]
 800a6de:	6125      	str	r5, [r4, #16]
 800a6e0:	6165      	str	r5, [r4, #20]
 800a6e2:	61a5      	str	r5, [r4, #24]
 800a6e4:	305c      	adds	r0, #92	; 0x5c
 800a6e6:	f7fe f9eb 	bl	8008ac0 <memset>
 800a6ea:	6365      	str	r5, [r4, #52]	; 0x34
 800a6ec:	63a5      	str	r5, [r4, #56]	; 0x38
 800a6ee:	64a5      	str	r5, [r4, #72]	; 0x48
 800a6f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a6f2:	0020      	movs	r0, r4
 800a6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f6:	3468      	adds	r4, #104	; 0x68
 800a6f8:	e7d7      	b.n	800a6aa <__sfp+0x1e>
 800a6fa:	2104      	movs	r1, #4
 800a6fc:	0038      	movs	r0, r7
 800a6fe:	f7ff ff57 	bl	800a5b0 <__sfmoreglue>
 800a702:	1e04      	subs	r4, r0, #0
 800a704:	6030      	str	r0, [r6, #0]
 800a706:	d1d5      	bne.n	800a6b4 <__sfp+0x28>
 800a708:	f7ff ff70 	bl	800a5ec <__sfp_lock_release>
 800a70c:	230c      	movs	r3, #12
 800a70e:	603b      	str	r3, [r7, #0]
 800a710:	e7ef      	b.n	800a6f2 <__sfp+0x66>
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	0800bacc 	.word	0x0800bacc
 800a718:	ffff0001 	.word	0xffff0001

0800a71c <_fwalk_reent>:
 800a71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a71e:	0004      	movs	r4, r0
 800a720:	0006      	movs	r6, r0
 800a722:	2700      	movs	r7, #0
 800a724:	9101      	str	r1, [sp, #4]
 800a726:	3448      	adds	r4, #72	; 0x48
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	68a5      	ldr	r5, [r4, #8]
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	9b00      	ldr	r3, [sp, #0]
 800a730:	3b01      	subs	r3, #1
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	d504      	bpl.n	800a740 <_fwalk_reent+0x24>
 800a736:	6824      	ldr	r4, [r4, #0]
 800a738:	2c00      	cmp	r4, #0
 800a73a:	d1f5      	bne.n	800a728 <_fwalk_reent+0xc>
 800a73c:	0038      	movs	r0, r7
 800a73e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a740:	89ab      	ldrh	r3, [r5, #12]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d908      	bls.n	800a758 <_fwalk_reent+0x3c>
 800a746:	220e      	movs	r2, #14
 800a748:	5eab      	ldrsh	r3, [r5, r2]
 800a74a:	3301      	adds	r3, #1
 800a74c:	d004      	beq.n	800a758 <_fwalk_reent+0x3c>
 800a74e:	0029      	movs	r1, r5
 800a750:	0030      	movs	r0, r6
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	4798      	blx	r3
 800a756:	4307      	orrs	r7, r0
 800a758:	3568      	adds	r5, #104	; 0x68
 800a75a:	e7e8      	b.n	800a72e <_fwalk_reent+0x12>

0800a75c <_localeconv_r>:
 800a75c:	4800      	ldr	r0, [pc, #0]	; (800a760 <_localeconv_r+0x4>)
 800a75e:	4770      	bx	lr
 800a760:	20000160 	.word	0x20000160

0800a764 <__retarget_lock_init_recursive>:
 800a764:	4770      	bx	lr

0800a766 <__retarget_lock_acquire_recursive>:
 800a766:	4770      	bx	lr

0800a768 <__retarget_lock_release_recursive>:
 800a768:	4770      	bx	lr
	...

0800a76c <__swhatbuf_r>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	000e      	movs	r6, r1
 800a770:	001d      	movs	r5, r3
 800a772:	230e      	movs	r3, #14
 800a774:	5ec9      	ldrsh	r1, [r1, r3]
 800a776:	0014      	movs	r4, r2
 800a778:	b096      	sub	sp, #88	; 0x58
 800a77a:	2900      	cmp	r1, #0
 800a77c:	da08      	bge.n	800a790 <__swhatbuf_r+0x24>
 800a77e:	220c      	movs	r2, #12
 800a780:	5eb3      	ldrsh	r3, [r6, r2]
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	061b      	lsls	r3, r3, #24
 800a788:	d411      	bmi.n	800a7ae <__swhatbuf_r+0x42>
 800a78a:	2380      	movs	r3, #128	; 0x80
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	e00f      	b.n	800a7b0 <__swhatbuf_r+0x44>
 800a790:	466a      	mov	r2, sp
 800a792:	f000 ff33 	bl	800b5fc <_fstat_r>
 800a796:	2800      	cmp	r0, #0
 800a798:	dbf1      	blt.n	800a77e <__swhatbuf_r+0x12>
 800a79a:	23f0      	movs	r3, #240	; 0xf0
 800a79c:	9901      	ldr	r1, [sp, #4]
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	4019      	ands	r1, r3
 800a7a2:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <__swhatbuf_r+0x4c>)
 800a7a4:	18c9      	adds	r1, r1, r3
 800a7a6:	424b      	negs	r3, r1
 800a7a8:	4159      	adcs	r1, r3
 800a7aa:	6029      	str	r1, [r5, #0]
 800a7ac:	e7ed      	b.n	800a78a <__swhatbuf_r+0x1e>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	b016      	add	sp, #88	; 0x58
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	ffffe000 	.word	0xffffe000

0800a7bc <__smakebuf_r>:
 800a7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7be:	2602      	movs	r6, #2
 800a7c0:	898b      	ldrh	r3, [r1, #12]
 800a7c2:	0005      	movs	r5, r0
 800a7c4:	000c      	movs	r4, r1
 800a7c6:	4233      	tst	r3, r6
 800a7c8:	d006      	beq.n	800a7d8 <__smakebuf_r+0x1c>
 800a7ca:	0023      	movs	r3, r4
 800a7cc:	3347      	adds	r3, #71	; 0x47
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	6163      	str	r3, [r4, #20]
 800a7d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a7d8:	466a      	mov	r2, sp
 800a7da:	ab01      	add	r3, sp, #4
 800a7dc:	f7ff ffc6 	bl	800a76c <__swhatbuf_r>
 800a7e0:	9900      	ldr	r1, [sp, #0]
 800a7e2:	0007      	movs	r7, r0
 800a7e4:	0028      	movs	r0, r5
 800a7e6:	f000 fc7f 	bl	800b0e8 <_malloc_r>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d108      	bne.n	800a800 <__smakebuf_r+0x44>
 800a7ee:	220c      	movs	r2, #12
 800a7f0:	5ea3      	ldrsh	r3, [r4, r2]
 800a7f2:	059a      	lsls	r2, r3, #22
 800a7f4:	d4ef      	bmi.n	800a7d6 <__smakebuf_r+0x1a>
 800a7f6:	2203      	movs	r2, #3
 800a7f8:	4393      	bics	r3, r2
 800a7fa:	431e      	orrs	r6, r3
 800a7fc:	81a6      	strh	r6, [r4, #12]
 800a7fe:	e7e4      	b.n	800a7ca <__smakebuf_r+0xe>
 800a800:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <__smakebuf_r+0x84>)
 800a802:	62ab      	str	r3, [r5, #40]	; 0x28
 800a804:	2380      	movs	r3, #128	; 0x80
 800a806:	89a2      	ldrh	r2, [r4, #12]
 800a808:	6020      	str	r0, [r4, #0]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	81a3      	strh	r3, [r4, #12]
 800a80e:	9b00      	ldr	r3, [sp, #0]
 800a810:	6120      	str	r0, [r4, #16]
 800a812:	6163      	str	r3, [r4, #20]
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00d      	beq.n	800a836 <__smakebuf_r+0x7a>
 800a81a:	0028      	movs	r0, r5
 800a81c:	230e      	movs	r3, #14
 800a81e:	5ee1      	ldrsh	r1, [r4, r3]
 800a820:	f000 fefe 	bl	800b620 <_isatty_r>
 800a824:	2800      	cmp	r0, #0
 800a826:	d006      	beq.n	800a836 <__smakebuf_r+0x7a>
 800a828:	2203      	movs	r2, #3
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	4393      	bics	r3, r2
 800a82e:	001a      	movs	r2, r3
 800a830:	2301      	movs	r3, #1
 800a832:	4313      	orrs	r3, r2
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	89a0      	ldrh	r0, [r4, #12]
 800a838:	4307      	orrs	r7, r0
 800a83a:	81a7      	strh	r7, [r4, #12]
 800a83c:	e7cb      	b.n	800a7d6 <__smakebuf_r+0x1a>
 800a83e:	46c0      	nop			; (mov r8, r8)
 800a840:	0800a5a1 	.word	0x0800a5a1

0800a844 <malloc>:
 800a844:	b510      	push	{r4, lr}
 800a846:	4b03      	ldr	r3, [pc, #12]	; (800a854 <malloc+0x10>)
 800a848:	0001      	movs	r1, r0
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	f000 fc4c 	bl	800b0e8 <_malloc_r>
 800a850:	bd10      	pop	{r4, pc}
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	2000000c 	.word	0x2000000c

0800a858 <memchr>:
 800a858:	b2c9      	uxtb	r1, r1
 800a85a:	1882      	adds	r2, r0, r2
 800a85c:	4290      	cmp	r0, r2
 800a85e:	d101      	bne.n	800a864 <memchr+0xc>
 800a860:	2000      	movs	r0, #0
 800a862:	4770      	bx	lr
 800a864:	7803      	ldrb	r3, [r0, #0]
 800a866:	428b      	cmp	r3, r1
 800a868:	d0fb      	beq.n	800a862 <memchr+0xa>
 800a86a:	3001      	adds	r0, #1
 800a86c:	e7f6      	b.n	800a85c <memchr+0x4>

0800a86e <memcpy>:
 800a86e:	2300      	movs	r3, #0
 800a870:	b510      	push	{r4, lr}
 800a872:	429a      	cmp	r2, r3
 800a874:	d100      	bne.n	800a878 <memcpy+0xa>
 800a876:	bd10      	pop	{r4, pc}
 800a878:	5ccc      	ldrb	r4, [r1, r3]
 800a87a:	54c4      	strb	r4, [r0, r3]
 800a87c:	3301      	adds	r3, #1
 800a87e:	e7f8      	b.n	800a872 <memcpy+0x4>

0800a880 <_Balloc>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a884:	0006      	movs	r6, r0
 800a886:	000c      	movs	r4, r1
 800a888:	2d00      	cmp	r5, #0
 800a88a:	d10e      	bne.n	800a8aa <_Balloc+0x2a>
 800a88c:	2010      	movs	r0, #16
 800a88e:	f7ff ffd9 	bl	800a844 <malloc>
 800a892:	1e02      	subs	r2, r0, #0
 800a894:	6270      	str	r0, [r6, #36]	; 0x24
 800a896:	d104      	bne.n	800a8a2 <_Balloc+0x22>
 800a898:	2166      	movs	r1, #102	; 0x66
 800a89a:	4b19      	ldr	r3, [pc, #100]	; (800a900 <_Balloc+0x80>)
 800a89c:	4819      	ldr	r0, [pc, #100]	; (800a904 <_Balloc+0x84>)
 800a89e:	f000 fe6d 	bl	800b57c <__assert_func>
 800a8a2:	6045      	str	r5, [r0, #4]
 800a8a4:	6085      	str	r5, [r0, #8]
 800a8a6:	6005      	str	r5, [r0, #0]
 800a8a8:	60c5      	str	r5, [r0, #12]
 800a8aa:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a8ac:	68eb      	ldr	r3, [r5, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <_Balloc+0x5a>
 800a8b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a8b4:	00a2      	lsls	r2, r4, #2
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	189b      	adds	r3, r3, r2
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d118      	bne.n	800a8f2 <_Balloc+0x72>
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	000d      	movs	r5, r1
 800a8c4:	40a5      	lsls	r5, r4
 800a8c6:	1d6a      	adds	r2, r5, #5
 800a8c8:	0030      	movs	r0, r6
 800a8ca:	0092      	lsls	r2, r2, #2
 800a8cc:	f000 fb74 	bl	800afb8 <_calloc_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d00c      	beq.n	800a8ee <_Balloc+0x6e>
 800a8d4:	6044      	str	r4, [r0, #4]
 800a8d6:	6085      	str	r5, [r0, #8]
 800a8d8:	e00d      	b.n	800a8f6 <_Balloc+0x76>
 800a8da:	2221      	movs	r2, #33	; 0x21
 800a8dc:	2104      	movs	r1, #4
 800a8de:	0030      	movs	r0, r6
 800a8e0:	f000 fb6a 	bl	800afb8 <_calloc_r>
 800a8e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a8e6:	60e8      	str	r0, [r5, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e1      	bne.n	800a8b2 <_Balloc+0x32>
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
 800a8f2:	6802      	ldr	r2, [r0, #0]
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6103      	str	r3, [r0, #16]
 800a8fa:	60c3      	str	r3, [r0, #12]
 800a8fc:	e7f8      	b.n	800a8f0 <_Balloc+0x70>
 800a8fe:	46c0      	nop			; (mov r8, r8)
 800a900:	0800bb11 	.word	0x0800bb11
 800a904:	0800bbf4 	.word	0x0800bbf4

0800a908 <_Bfree>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a90c:	0005      	movs	r5, r0
 800a90e:	000c      	movs	r4, r1
 800a910:	2e00      	cmp	r6, #0
 800a912:	d10e      	bne.n	800a932 <_Bfree+0x2a>
 800a914:	2010      	movs	r0, #16
 800a916:	f7ff ff95 	bl	800a844 <malloc>
 800a91a:	1e02      	subs	r2, r0, #0
 800a91c:	6268      	str	r0, [r5, #36]	; 0x24
 800a91e:	d104      	bne.n	800a92a <_Bfree+0x22>
 800a920:	218a      	movs	r1, #138	; 0x8a
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <_Bfree+0x40>)
 800a924:	4809      	ldr	r0, [pc, #36]	; (800a94c <_Bfree+0x44>)
 800a926:	f000 fe29 	bl	800b57c <__assert_func>
 800a92a:	6046      	str	r6, [r0, #4]
 800a92c:	6086      	str	r6, [r0, #8]
 800a92e:	6006      	str	r6, [r0, #0]
 800a930:	60c6      	str	r6, [r0, #12]
 800a932:	2c00      	cmp	r4, #0
 800a934:	d007      	beq.n	800a946 <_Bfree+0x3e>
 800a936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a938:	6862      	ldr	r2, [r4, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	0092      	lsls	r2, r2, #2
 800a93e:	189b      	adds	r3, r3, r2
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	6022      	str	r2, [r4, #0]
 800a944:	601c      	str	r4, [r3, #0]
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	0800bb11 	.word	0x0800bb11
 800a94c:	0800bbf4 	.word	0x0800bbf4

0800a950 <__multadd>:
 800a950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a952:	000e      	movs	r6, r1
 800a954:	9001      	str	r0, [sp, #4]
 800a956:	000c      	movs	r4, r1
 800a958:	001d      	movs	r5, r3
 800a95a:	2000      	movs	r0, #0
 800a95c:	690f      	ldr	r7, [r1, #16]
 800a95e:	3614      	adds	r6, #20
 800a960:	6833      	ldr	r3, [r6, #0]
 800a962:	3001      	adds	r0, #1
 800a964:	b299      	uxth	r1, r3
 800a966:	4351      	muls	r1, r2
 800a968:	0c1b      	lsrs	r3, r3, #16
 800a96a:	4353      	muls	r3, r2
 800a96c:	1949      	adds	r1, r1, r5
 800a96e:	0c0d      	lsrs	r5, r1, #16
 800a970:	195b      	adds	r3, r3, r5
 800a972:	0c1d      	lsrs	r5, r3, #16
 800a974:	b289      	uxth	r1, r1
 800a976:	041b      	lsls	r3, r3, #16
 800a978:	185b      	adds	r3, r3, r1
 800a97a:	c608      	stmia	r6!, {r3}
 800a97c:	4287      	cmp	r7, r0
 800a97e:	dcef      	bgt.n	800a960 <__multadd+0x10>
 800a980:	2d00      	cmp	r5, #0
 800a982:	d022      	beq.n	800a9ca <__multadd+0x7a>
 800a984:	68a3      	ldr	r3, [r4, #8]
 800a986:	42bb      	cmp	r3, r7
 800a988:	dc19      	bgt.n	800a9be <__multadd+0x6e>
 800a98a:	6863      	ldr	r3, [r4, #4]
 800a98c:	9801      	ldr	r0, [sp, #4]
 800a98e:	1c59      	adds	r1, r3, #1
 800a990:	f7ff ff76 	bl	800a880 <_Balloc>
 800a994:	1e06      	subs	r6, r0, #0
 800a996:	d105      	bne.n	800a9a4 <__multadd+0x54>
 800a998:	0002      	movs	r2, r0
 800a99a:	21b5      	movs	r1, #181	; 0xb5
 800a99c:	4b0c      	ldr	r3, [pc, #48]	; (800a9d0 <__multadd+0x80>)
 800a99e:	480d      	ldr	r0, [pc, #52]	; (800a9d4 <__multadd+0x84>)
 800a9a0:	f000 fdec 	bl	800b57c <__assert_func>
 800a9a4:	0021      	movs	r1, r4
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	310c      	adds	r1, #12
 800a9aa:	1c9a      	adds	r2, r3, #2
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	300c      	adds	r0, #12
 800a9b0:	f7ff ff5d 	bl	800a86e <memcpy>
 800a9b4:	0021      	movs	r1, r4
 800a9b6:	9801      	ldr	r0, [sp, #4]
 800a9b8:	f7ff ffa6 	bl	800a908 <_Bfree>
 800a9bc:	0034      	movs	r4, r6
 800a9be:	1d3b      	adds	r3, r7, #4
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	18e3      	adds	r3, r4, r3
 800a9c4:	605d      	str	r5, [r3, #4]
 800a9c6:	1c7b      	adds	r3, r7, #1
 800a9c8:	6123      	str	r3, [r4, #16]
 800a9ca:	0020      	movs	r0, r4
 800a9cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	0800bb83 	.word	0x0800bb83
 800a9d4:	0800bbf4 	.word	0x0800bbf4

0800a9d8 <__hi0bits>:
 800a9d8:	0003      	movs	r3, r0
 800a9da:	0c02      	lsrs	r2, r0, #16
 800a9dc:	2000      	movs	r0, #0
 800a9de:	4282      	cmp	r2, r0
 800a9e0:	d101      	bne.n	800a9e6 <__hi0bits+0xe>
 800a9e2:	041b      	lsls	r3, r3, #16
 800a9e4:	3010      	adds	r0, #16
 800a9e6:	0e1a      	lsrs	r2, r3, #24
 800a9e8:	d101      	bne.n	800a9ee <__hi0bits+0x16>
 800a9ea:	3008      	adds	r0, #8
 800a9ec:	021b      	lsls	r3, r3, #8
 800a9ee:	0f1a      	lsrs	r2, r3, #28
 800a9f0:	d101      	bne.n	800a9f6 <__hi0bits+0x1e>
 800a9f2:	3004      	adds	r0, #4
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	0f9a      	lsrs	r2, r3, #30
 800a9f8:	d101      	bne.n	800a9fe <__hi0bits+0x26>
 800a9fa:	3002      	adds	r0, #2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	db03      	blt.n	800aa0a <__hi0bits+0x32>
 800aa02:	3001      	adds	r0, #1
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	d400      	bmi.n	800aa0a <__hi0bits+0x32>
 800aa08:	2020      	movs	r0, #32
 800aa0a:	4770      	bx	lr

0800aa0c <__lo0bits>:
 800aa0c:	6803      	ldr	r3, [r0, #0]
 800aa0e:	0002      	movs	r2, r0
 800aa10:	2107      	movs	r1, #7
 800aa12:	0018      	movs	r0, r3
 800aa14:	4008      	ands	r0, r1
 800aa16:	420b      	tst	r3, r1
 800aa18:	d00d      	beq.n	800aa36 <__lo0bits+0x2a>
 800aa1a:	3906      	subs	r1, #6
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	420b      	tst	r3, r1
 800aa20:	d105      	bne.n	800aa2e <__lo0bits+0x22>
 800aa22:	3002      	adds	r0, #2
 800aa24:	4203      	tst	r3, r0
 800aa26:	d003      	beq.n	800aa30 <__lo0bits+0x24>
 800aa28:	40cb      	lsrs	r3, r1
 800aa2a:	0008      	movs	r0, r1
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	4770      	bx	lr
 800aa30:	089b      	lsrs	r3, r3, #2
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	e7fb      	b.n	800aa2e <__lo0bits+0x22>
 800aa36:	b299      	uxth	r1, r3
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d101      	bne.n	800aa40 <__lo0bits+0x34>
 800aa3c:	2010      	movs	r0, #16
 800aa3e:	0c1b      	lsrs	r3, r3, #16
 800aa40:	b2d9      	uxtb	r1, r3
 800aa42:	2900      	cmp	r1, #0
 800aa44:	d101      	bne.n	800aa4a <__lo0bits+0x3e>
 800aa46:	3008      	adds	r0, #8
 800aa48:	0a1b      	lsrs	r3, r3, #8
 800aa4a:	0719      	lsls	r1, r3, #28
 800aa4c:	d101      	bne.n	800aa52 <__lo0bits+0x46>
 800aa4e:	3004      	adds	r0, #4
 800aa50:	091b      	lsrs	r3, r3, #4
 800aa52:	0799      	lsls	r1, r3, #30
 800aa54:	d101      	bne.n	800aa5a <__lo0bits+0x4e>
 800aa56:	3002      	adds	r0, #2
 800aa58:	089b      	lsrs	r3, r3, #2
 800aa5a:	07d9      	lsls	r1, r3, #31
 800aa5c:	d4e9      	bmi.n	800aa32 <__lo0bits+0x26>
 800aa5e:	3001      	adds	r0, #1
 800aa60:	085b      	lsrs	r3, r3, #1
 800aa62:	d1e6      	bne.n	800aa32 <__lo0bits+0x26>
 800aa64:	2020      	movs	r0, #32
 800aa66:	e7e2      	b.n	800aa2e <__lo0bits+0x22>

0800aa68 <__i2b>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	000c      	movs	r4, r1
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	f7ff ff07 	bl	800a880 <_Balloc>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d106      	bne.n	800aa84 <__i2b+0x1c>
 800aa76:	21a0      	movs	r1, #160	; 0xa0
 800aa78:	0002      	movs	r2, r0
 800aa7a:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <__i2b+0x24>)
 800aa7c:	4804      	ldr	r0, [pc, #16]	; (800aa90 <__i2b+0x28>)
 800aa7e:	0049      	lsls	r1, r1, #1
 800aa80:	f000 fd7c 	bl	800b57c <__assert_func>
 800aa84:	2301      	movs	r3, #1
 800aa86:	6144      	str	r4, [r0, #20]
 800aa88:	6103      	str	r3, [r0, #16]
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	0800bb83 	.word	0x0800bb83
 800aa90:	0800bbf4 	.word	0x0800bbf4

0800aa94 <__multiply>:
 800aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa96:	690b      	ldr	r3, [r1, #16]
 800aa98:	0014      	movs	r4, r2
 800aa9a:	6912      	ldr	r2, [r2, #16]
 800aa9c:	000d      	movs	r5, r1
 800aa9e:	b089      	sub	sp, #36	; 0x24
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	da01      	bge.n	800aaa8 <__multiply+0x14>
 800aaa4:	0025      	movs	r5, r4
 800aaa6:	000c      	movs	r4, r1
 800aaa8:	692f      	ldr	r7, [r5, #16]
 800aaaa:	6926      	ldr	r6, [r4, #16]
 800aaac:	6869      	ldr	r1, [r5, #4]
 800aaae:	19bb      	adds	r3, r7, r6
 800aab0:	9302      	str	r3, [sp, #8]
 800aab2:	68ab      	ldr	r3, [r5, #8]
 800aab4:	19ba      	adds	r2, r7, r6
 800aab6:	4293      	cmp	r3, r2
 800aab8:	da00      	bge.n	800aabc <__multiply+0x28>
 800aaba:	3101      	adds	r1, #1
 800aabc:	f7ff fee0 	bl	800a880 <_Balloc>
 800aac0:	9001      	str	r0, [sp, #4]
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d106      	bne.n	800aad4 <__multiply+0x40>
 800aac6:	215e      	movs	r1, #94	; 0x5e
 800aac8:	0002      	movs	r2, r0
 800aaca:	4b48      	ldr	r3, [pc, #288]	; (800abec <__multiply+0x158>)
 800aacc:	4848      	ldr	r0, [pc, #288]	; (800abf0 <__multiply+0x15c>)
 800aace:	31ff      	adds	r1, #255	; 0xff
 800aad0:	f000 fd54 	bl	800b57c <__assert_func>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	3314      	adds	r3, #20
 800aada:	469c      	mov	ip, r3
 800aadc:	19bb      	adds	r3, r7, r6
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4463      	add	r3, ip
 800aae2:	9303      	str	r3, [sp, #12]
 800aae4:	4663      	mov	r3, ip
 800aae6:	9903      	ldr	r1, [sp, #12]
 800aae8:	428b      	cmp	r3, r1
 800aaea:	d32c      	bcc.n	800ab46 <__multiply+0xb2>
 800aaec:	002b      	movs	r3, r5
 800aaee:	0022      	movs	r2, r4
 800aaf0:	3314      	adds	r3, #20
 800aaf2:	00bf      	lsls	r7, r7, #2
 800aaf4:	3214      	adds	r2, #20
 800aaf6:	9306      	str	r3, [sp, #24]
 800aaf8:	00b6      	lsls	r6, r6, #2
 800aafa:	19db      	adds	r3, r3, r7
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	1993      	adds	r3, r2, r6
 800ab00:	9307      	str	r3, [sp, #28]
 800ab02:	2304      	movs	r3, #4
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	002b      	movs	r3, r5
 800ab08:	9904      	ldr	r1, [sp, #16]
 800ab0a:	3315      	adds	r3, #21
 800ab0c:	9200      	str	r2, [sp, #0]
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	d305      	bcc.n	800ab1e <__multiply+0x8a>
 800ab12:	1b4b      	subs	r3, r1, r5
 800ab14:	3b15      	subs	r3, #21
 800ab16:	089b      	lsrs	r3, r3, #2
 800ab18:	3301      	adds	r3, #1
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	9a00      	ldr	r2, [sp, #0]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d311      	bcc.n	800ab4a <__multiply+0xb6>
 800ab26:	9b02      	ldr	r3, [sp, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	dd06      	ble.n	800ab3a <__multiply+0xa6>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	3b04      	subs	r3, #4
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d053      	beq.n	800abe2 <__multiply+0x14e>
 800ab3a:	9b01      	ldr	r3, [sp, #4]
 800ab3c:	9a02      	ldr	r2, [sp, #8]
 800ab3e:	0018      	movs	r0, r3
 800ab40:	611a      	str	r2, [r3, #16]
 800ab42:	b009      	add	sp, #36	; 0x24
 800ab44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab46:	c304      	stmia	r3!, {r2}
 800ab48:	e7cd      	b.n	800aae6 <__multiply+0x52>
 800ab4a:	9b00      	ldr	r3, [sp, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	b298      	uxth	r0, r3
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d01b      	beq.n	800ab8c <__multiply+0xf8>
 800ab54:	4667      	mov	r7, ip
 800ab56:	2400      	movs	r4, #0
 800ab58:	9e06      	ldr	r6, [sp, #24]
 800ab5a:	ce02      	ldmia	r6!, {r1}
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	b28b      	uxth	r3, r1
 800ab60:	4343      	muls	r3, r0
 800ab62:	b292      	uxth	r2, r2
 800ab64:	189b      	adds	r3, r3, r2
 800ab66:	191b      	adds	r3, r3, r4
 800ab68:	0c0c      	lsrs	r4, r1, #16
 800ab6a:	4344      	muls	r4, r0
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	0c11      	lsrs	r1, r2, #16
 800ab70:	1861      	adds	r1, r4, r1
 800ab72:	0c1c      	lsrs	r4, r3, #16
 800ab74:	1909      	adds	r1, r1, r4
 800ab76:	0c0c      	lsrs	r4, r1, #16
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	0409      	lsls	r1, r1, #16
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	c708      	stmia	r7!, {r3}
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	42b3      	cmp	r3, r6
 800ab84:	d8e9      	bhi.n	800ab5a <__multiply+0xc6>
 800ab86:	4663      	mov	r3, ip
 800ab88:	9a05      	ldr	r2, [sp, #20]
 800ab8a:	509c      	str	r4, [r3, r2]
 800ab8c:	9b00      	ldr	r3, [sp, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	0c1e      	lsrs	r6, r3, #16
 800ab92:	d020      	beq.n	800abd6 <__multiply+0x142>
 800ab94:	4663      	mov	r3, ip
 800ab96:	002c      	movs	r4, r5
 800ab98:	4660      	mov	r0, ip
 800ab9a:	2700      	movs	r7, #0
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3414      	adds	r4, #20
 800aba0:	6822      	ldr	r2, [r4, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	b291      	uxth	r1, r2
 800aba6:	4371      	muls	r1, r6
 800aba8:	6802      	ldr	r2, [r0, #0]
 800abaa:	0c12      	lsrs	r2, r2, #16
 800abac:	1889      	adds	r1, r1, r2
 800abae:	19cf      	adds	r7, r1, r7
 800abb0:	0439      	lsls	r1, r7, #16
 800abb2:	430b      	orrs	r3, r1
 800abb4:	6003      	str	r3, [r0, #0]
 800abb6:	cc02      	ldmia	r4!, {r1}
 800abb8:	6843      	ldr	r3, [r0, #4]
 800abba:	0c09      	lsrs	r1, r1, #16
 800abbc:	4371      	muls	r1, r6
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	0c3f      	lsrs	r7, r7, #16
 800abc2:	18cb      	adds	r3, r1, r3
 800abc4:	9a04      	ldr	r2, [sp, #16]
 800abc6:	19db      	adds	r3, r3, r7
 800abc8:	0c1f      	lsrs	r7, r3, #16
 800abca:	3004      	adds	r0, #4
 800abcc:	42a2      	cmp	r2, r4
 800abce:	d8e7      	bhi.n	800aba0 <__multiply+0x10c>
 800abd0:	4662      	mov	r2, ip
 800abd2:	9905      	ldr	r1, [sp, #20]
 800abd4:	5053      	str	r3, [r2, r1]
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	3304      	adds	r3, #4
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	2304      	movs	r3, #4
 800abde:	449c      	add	ip, r3
 800abe0:	e79d      	b.n	800ab1e <__multiply+0x8a>
 800abe2:	9b02      	ldr	r3, [sp, #8]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	e79d      	b.n	800ab26 <__multiply+0x92>
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	0800bb83 	.word	0x0800bb83
 800abf0:	0800bbf4 	.word	0x0800bbf4

0800abf4 <__pow5mult>:
 800abf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf6:	2303      	movs	r3, #3
 800abf8:	0015      	movs	r5, r2
 800abfa:	0007      	movs	r7, r0
 800abfc:	000e      	movs	r6, r1
 800abfe:	401a      	ands	r2, r3
 800ac00:	421d      	tst	r5, r3
 800ac02:	d008      	beq.n	800ac16 <__pow5mult+0x22>
 800ac04:	4925      	ldr	r1, [pc, #148]	; (800ac9c <__pow5mult+0xa8>)
 800ac06:	3a01      	subs	r2, #1
 800ac08:	0092      	lsls	r2, r2, #2
 800ac0a:	5852      	ldr	r2, [r2, r1]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	0031      	movs	r1, r6
 800ac10:	f7ff fe9e 	bl	800a950 <__multadd>
 800ac14:	0006      	movs	r6, r0
 800ac16:	10ad      	asrs	r5, r5, #2
 800ac18:	d03d      	beq.n	800ac96 <__pow5mult+0xa2>
 800ac1a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ac1c:	2c00      	cmp	r4, #0
 800ac1e:	d10f      	bne.n	800ac40 <__pow5mult+0x4c>
 800ac20:	2010      	movs	r0, #16
 800ac22:	f7ff fe0f 	bl	800a844 <malloc>
 800ac26:	1e02      	subs	r2, r0, #0
 800ac28:	6278      	str	r0, [r7, #36]	; 0x24
 800ac2a:	d105      	bne.n	800ac38 <__pow5mult+0x44>
 800ac2c:	21d7      	movs	r1, #215	; 0xd7
 800ac2e:	4b1c      	ldr	r3, [pc, #112]	; (800aca0 <__pow5mult+0xac>)
 800ac30:	481c      	ldr	r0, [pc, #112]	; (800aca4 <__pow5mult+0xb0>)
 800ac32:	0049      	lsls	r1, r1, #1
 800ac34:	f000 fca2 	bl	800b57c <__assert_func>
 800ac38:	6044      	str	r4, [r0, #4]
 800ac3a:	6084      	str	r4, [r0, #8]
 800ac3c:	6004      	str	r4, [r0, #0]
 800ac3e:	60c4      	str	r4, [r0, #12]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	689c      	ldr	r4, [r3, #8]
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d108      	bne.n	800ac5c <__pow5mult+0x68>
 800ac4a:	0038      	movs	r0, r7
 800ac4c:	4916      	ldr	r1, [pc, #88]	; (800aca8 <__pow5mult+0xb4>)
 800ac4e:	f7ff ff0b 	bl	800aa68 <__i2b>
 800ac52:	9b01      	ldr	r3, [sp, #4]
 800ac54:	0004      	movs	r4, r0
 800ac56:	6098      	str	r0, [r3, #8]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	6003      	str	r3, [r0, #0]
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	421d      	tst	r5, r3
 800ac60:	d00a      	beq.n	800ac78 <__pow5mult+0x84>
 800ac62:	0031      	movs	r1, r6
 800ac64:	0022      	movs	r2, r4
 800ac66:	0038      	movs	r0, r7
 800ac68:	f7ff ff14 	bl	800aa94 <__multiply>
 800ac6c:	0031      	movs	r1, r6
 800ac6e:	9001      	str	r0, [sp, #4]
 800ac70:	0038      	movs	r0, r7
 800ac72:	f7ff fe49 	bl	800a908 <_Bfree>
 800ac76:	9e01      	ldr	r6, [sp, #4]
 800ac78:	106d      	asrs	r5, r5, #1
 800ac7a:	d00c      	beq.n	800ac96 <__pow5mult+0xa2>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d107      	bne.n	800ac92 <__pow5mult+0x9e>
 800ac82:	0022      	movs	r2, r4
 800ac84:	0021      	movs	r1, r4
 800ac86:	0038      	movs	r0, r7
 800ac88:	f7ff ff04 	bl	800aa94 <__multiply>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	6020      	str	r0, [r4, #0]
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	0004      	movs	r4, r0
 800ac94:	e7e2      	b.n	800ac5c <__pow5mult+0x68>
 800ac96:	0030      	movs	r0, r6
 800ac98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	0800bd40 	.word	0x0800bd40
 800aca0:	0800bb11 	.word	0x0800bb11
 800aca4:	0800bbf4 	.word	0x0800bbf4
 800aca8:	00000271 	.word	0x00000271

0800acac <__lshift>:
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	000c      	movs	r4, r1
 800acb0:	0017      	movs	r7, r2
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	1155      	asrs	r5, r2, #5
 800acb6:	b087      	sub	sp, #28
 800acb8:	18eb      	adds	r3, r5, r3
 800acba:	9302      	str	r3, [sp, #8]
 800acbc:	3301      	adds	r3, #1
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	6849      	ldr	r1, [r1, #4]
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	9004      	str	r0, [sp, #16]
 800acc6:	9a01      	ldr	r2, [sp, #4]
 800acc8:	4293      	cmp	r3, r2
 800acca:	db10      	blt.n	800acee <__lshift+0x42>
 800accc:	9804      	ldr	r0, [sp, #16]
 800acce:	f7ff fdd7 	bl	800a880 <_Balloc>
 800acd2:	2300      	movs	r3, #0
 800acd4:	0002      	movs	r2, r0
 800acd6:	0006      	movs	r6, r0
 800acd8:	0019      	movs	r1, r3
 800acda:	3214      	adds	r2, #20
 800acdc:	4298      	cmp	r0, r3
 800acde:	d10c      	bne.n	800acfa <__lshift+0x4e>
 800ace0:	21da      	movs	r1, #218	; 0xda
 800ace2:	0002      	movs	r2, r0
 800ace4:	4b26      	ldr	r3, [pc, #152]	; (800ad80 <__lshift+0xd4>)
 800ace6:	4827      	ldr	r0, [pc, #156]	; (800ad84 <__lshift+0xd8>)
 800ace8:	31ff      	adds	r1, #255	; 0xff
 800acea:	f000 fc47 	bl	800b57c <__assert_func>
 800acee:	3101      	adds	r1, #1
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	e7e8      	b.n	800acc6 <__lshift+0x1a>
 800acf4:	0098      	lsls	r0, r3, #2
 800acf6:	5011      	str	r1, [r2, r0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	42ab      	cmp	r3, r5
 800acfc:	dbfa      	blt.n	800acf4 <__lshift+0x48>
 800acfe:	43eb      	mvns	r3, r5
 800ad00:	17db      	asrs	r3, r3, #31
 800ad02:	401d      	ands	r5, r3
 800ad04:	211f      	movs	r1, #31
 800ad06:	0023      	movs	r3, r4
 800ad08:	0038      	movs	r0, r7
 800ad0a:	00ad      	lsls	r5, r5, #2
 800ad0c:	1955      	adds	r5, r2, r5
 800ad0e:	6922      	ldr	r2, [r4, #16]
 800ad10:	3314      	adds	r3, #20
 800ad12:	0092      	lsls	r2, r2, #2
 800ad14:	4008      	ands	r0, r1
 800ad16:	4684      	mov	ip, r0
 800ad18:	189a      	adds	r2, r3, r2
 800ad1a:	420f      	tst	r7, r1
 800ad1c:	d02a      	beq.n	800ad74 <__lshift+0xc8>
 800ad1e:	3101      	adds	r1, #1
 800ad20:	1a09      	subs	r1, r1, r0
 800ad22:	9105      	str	r1, [sp, #20]
 800ad24:	2100      	movs	r1, #0
 800ad26:	9503      	str	r5, [sp, #12]
 800ad28:	4667      	mov	r7, ip
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	40b8      	lsls	r0, r7
 800ad2e:	4301      	orrs	r1, r0
 800ad30:	9803      	ldr	r0, [sp, #12]
 800ad32:	c002      	stmia	r0!, {r1}
 800ad34:	cb02      	ldmia	r3!, {r1}
 800ad36:	9003      	str	r0, [sp, #12]
 800ad38:	9805      	ldr	r0, [sp, #20]
 800ad3a:	40c1      	lsrs	r1, r0
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d8f3      	bhi.n	800ad28 <__lshift+0x7c>
 800ad40:	0020      	movs	r0, r4
 800ad42:	3015      	adds	r0, #21
 800ad44:	2304      	movs	r3, #4
 800ad46:	4282      	cmp	r2, r0
 800ad48:	d304      	bcc.n	800ad54 <__lshift+0xa8>
 800ad4a:	1b13      	subs	r3, r2, r4
 800ad4c:	3b15      	subs	r3, #21
 800ad4e:	089b      	lsrs	r3, r3, #2
 800ad50:	3301      	adds	r3, #1
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	50e9      	str	r1, [r5, r3]
 800ad56:	2900      	cmp	r1, #0
 800ad58:	d002      	beq.n	800ad60 <__lshift+0xb4>
 800ad5a:	9b02      	ldr	r3, [sp, #8]
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	9301      	str	r3, [sp, #4]
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	9804      	ldr	r0, [sp, #16]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	0021      	movs	r1, r4
 800ad68:	6133      	str	r3, [r6, #16]
 800ad6a:	f7ff fdcd 	bl	800a908 <_Bfree>
 800ad6e:	0030      	movs	r0, r6
 800ad70:	b007      	add	sp, #28
 800ad72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad74:	cb02      	ldmia	r3!, {r1}
 800ad76:	c502      	stmia	r5!, {r1}
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d8fb      	bhi.n	800ad74 <__lshift+0xc8>
 800ad7c:	e7f0      	b.n	800ad60 <__lshift+0xb4>
 800ad7e:	46c0      	nop			; (mov r8, r8)
 800ad80:	0800bb83 	.word	0x0800bb83
 800ad84:	0800bbf4 	.word	0x0800bbf4

0800ad88 <__mcmp>:
 800ad88:	6902      	ldr	r2, [r0, #16]
 800ad8a:	690b      	ldr	r3, [r1, #16]
 800ad8c:	b530      	push	{r4, r5, lr}
 800ad8e:	0004      	movs	r4, r0
 800ad90:	1ad0      	subs	r0, r2, r3
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d10d      	bne.n	800adb2 <__mcmp+0x2a>
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	3414      	adds	r4, #20
 800ad9a:	3114      	adds	r1, #20
 800ad9c:	18e2      	adds	r2, r4, r3
 800ad9e:	18c9      	adds	r1, r1, r3
 800ada0:	3a04      	subs	r2, #4
 800ada2:	3904      	subs	r1, #4
 800ada4:	6815      	ldr	r5, [r2, #0]
 800ada6:	680b      	ldr	r3, [r1, #0]
 800ada8:	429d      	cmp	r5, r3
 800adaa:	d003      	beq.n	800adb4 <__mcmp+0x2c>
 800adac:	2001      	movs	r0, #1
 800adae:	429d      	cmp	r5, r3
 800adb0:	d303      	bcc.n	800adba <__mcmp+0x32>
 800adb2:	bd30      	pop	{r4, r5, pc}
 800adb4:	4294      	cmp	r4, r2
 800adb6:	d3f3      	bcc.n	800ada0 <__mcmp+0x18>
 800adb8:	e7fb      	b.n	800adb2 <__mcmp+0x2a>
 800adba:	4240      	negs	r0, r0
 800adbc:	e7f9      	b.n	800adb2 <__mcmp+0x2a>
	...

0800adc0 <__mdiff>:
 800adc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adc2:	000e      	movs	r6, r1
 800adc4:	0007      	movs	r7, r0
 800adc6:	0011      	movs	r1, r2
 800adc8:	0030      	movs	r0, r6
 800adca:	b087      	sub	sp, #28
 800adcc:	0014      	movs	r4, r2
 800adce:	f7ff ffdb 	bl	800ad88 <__mcmp>
 800add2:	1e05      	subs	r5, r0, #0
 800add4:	d110      	bne.n	800adf8 <__mdiff+0x38>
 800add6:	0001      	movs	r1, r0
 800add8:	0038      	movs	r0, r7
 800adda:	f7ff fd51 	bl	800a880 <_Balloc>
 800adde:	1e02      	subs	r2, r0, #0
 800ade0:	d104      	bne.n	800adec <__mdiff+0x2c>
 800ade2:	4b40      	ldr	r3, [pc, #256]	; (800aee4 <__mdiff+0x124>)
 800ade4:	4940      	ldr	r1, [pc, #256]	; (800aee8 <__mdiff+0x128>)
 800ade6:	4841      	ldr	r0, [pc, #260]	; (800aeec <__mdiff+0x12c>)
 800ade8:	f000 fbc8 	bl	800b57c <__assert_func>
 800adec:	2301      	movs	r3, #1
 800adee:	6145      	str	r5, [r0, #20]
 800adf0:	6103      	str	r3, [r0, #16]
 800adf2:	0010      	movs	r0, r2
 800adf4:	b007      	add	sp, #28
 800adf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf8:	2301      	movs	r3, #1
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	2800      	cmp	r0, #0
 800adfe:	db04      	blt.n	800ae0a <__mdiff+0x4a>
 800ae00:	0023      	movs	r3, r4
 800ae02:	0034      	movs	r4, r6
 800ae04:	001e      	movs	r6, r3
 800ae06:	2300      	movs	r3, #0
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	0038      	movs	r0, r7
 800ae0c:	6861      	ldr	r1, [r4, #4]
 800ae0e:	f7ff fd37 	bl	800a880 <_Balloc>
 800ae12:	1e02      	subs	r2, r0, #0
 800ae14:	d103      	bne.n	800ae1e <__mdiff+0x5e>
 800ae16:	2190      	movs	r1, #144	; 0x90
 800ae18:	4b32      	ldr	r3, [pc, #200]	; (800aee4 <__mdiff+0x124>)
 800ae1a:	0089      	lsls	r1, r1, #2
 800ae1c:	e7e3      	b.n	800ade6 <__mdiff+0x26>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	2700      	movs	r7, #0
 800ae22:	60c3      	str	r3, [r0, #12]
 800ae24:	6920      	ldr	r0, [r4, #16]
 800ae26:	3414      	adds	r4, #20
 800ae28:	9401      	str	r4, [sp, #4]
 800ae2a:	9b01      	ldr	r3, [sp, #4]
 800ae2c:	0084      	lsls	r4, r0, #2
 800ae2e:	191b      	adds	r3, r3, r4
 800ae30:	0034      	movs	r4, r6
 800ae32:	9302      	str	r3, [sp, #8]
 800ae34:	6933      	ldr	r3, [r6, #16]
 800ae36:	3414      	adds	r4, #20
 800ae38:	0099      	lsls	r1, r3, #2
 800ae3a:	1863      	adds	r3, r4, r1
 800ae3c:	9303      	str	r3, [sp, #12]
 800ae3e:	0013      	movs	r3, r2
 800ae40:	3314      	adds	r3, #20
 800ae42:	469c      	mov	ip, r3
 800ae44:	9305      	str	r3, [sp, #20]
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	9304      	str	r3, [sp, #16]
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	cc02      	ldmia	r4!, {r1}
 800ae4e:	cb20      	ldmia	r3!, {r5}
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	b2ab      	uxth	r3, r5
 800ae54:	19df      	adds	r7, r3, r7
 800ae56:	b28b      	uxth	r3, r1
 800ae58:	1afb      	subs	r3, r7, r3
 800ae5a:	0c09      	lsrs	r1, r1, #16
 800ae5c:	0c2d      	lsrs	r5, r5, #16
 800ae5e:	1a6d      	subs	r5, r5, r1
 800ae60:	1419      	asrs	r1, r3, #16
 800ae62:	186d      	adds	r5, r5, r1
 800ae64:	4661      	mov	r1, ip
 800ae66:	142f      	asrs	r7, r5, #16
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	042d      	lsls	r5, r5, #16
 800ae6c:	432b      	orrs	r3, r5
 800ae6e:	c108      	stmia	r1!, {r3}
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	468c      	mov	ip, r1
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	d8e8      	bhi.n	800ae4a <__mdiff+0x8a>
 800ae78:	0031      	movs	r1, r6
 800ae7a:	9c03      	ldr	r4, [sp, #12]
 800ae7c:	3115      	adds	r1, #21
 800ae7e:	2304      	movs	r3, #4
 800ae80:	428c      	cmp	r4, r1
 800ae82:	d304      	bcc.n	800ae8e <__mdiff+0xce>
 800ae84:	1ba3      	subs	r3, r4, r6
 800ae86:	3b15      	subs	r3, #21
 800ae88:	089b      	lsrs	r3, r3, #2
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	9901      	ldr	r1, [sp, #4]
 800ae90:	18cc      	adds	r4, r1, r3
 800ae92:	9905      	ldr	r1, [sp, #20]
 800ae94:	0026      	movs	r6, r4
 800ae96:	18cb      	adds	r3, r1, r3
 800ae98:	469c      	mov	ip, r3
 800ae9a:	9902      	ldr	r1, [sp, #8]
 800ae9c:	428e      	cmp	r6, r1
 800ae9e:	d310      	bcc.n	800aec2 <__mdiff+0x102>
 800aea0:	9e02      	ldr	r6, [sp, #8]
 800aea2:	1ee1      	subs	r1, r4, #3
 800aea4:	2500      	movs	r5, #0
 800aea6:	428e      	cmp	r6, r1
 800aea8:	d304      	bcc.n	800aeb4 <__mdiff+0xf4>
 800aeaa:	0031      	movs	r1, r6
 800aeac:	3103      	adds	r1, #3
 800aeae:	1b0c      	subs	r4, r1, r4
 800aeb0:	08a4      	lsrs	r4, r4, #2
 800aeb2:	00a5      	lsls	r5, r4, #2
 800aeb4:	195b      	adds	r3, r3, r5
 800aeb6:	3b04      	subs	r3, #4
 800aeb8:	6819      	ldr	r1, [r3, #0]
 800aeba:	2900      	cmp	r1, #0
 800aebc:	d00f      	beq.n	800aede <__mdiff+0x11e>
 800aebe:	6110      	str	r0, [r2, #16]
 800aec0:	e797      	b.n	800adf2 <__mdiff+0x32>
 800aec2:	ce02      	ldmia	r6!, {r1}
 800aec4:	b28d      	uxth	r5, r1
 800aec6:	19ed      	adds	r5, r5, r7
 800aec8:	0c0f      	lsrs	r7, r1, #16
 800aeca:	1429      	asrs	r1, r5, #16
 800aecc:	1879      	adds	r1, r7, r1
 800aece:	140f      	asrs	r7, r1, #16
 800aed0:	b2ad      	uxth	r5, r5
 800aed2:	0409      	lsls	r1, r1, #16
 800aed4:	430d      	orrs	r5, r1
 800aed6:	4661      	mov	r1, ip
 800aed8:	c120      	stmia	r1!, {r5}
 800aeda:	468c      	mov	ip, r1
 800aedc:	e7dd      	b.n	800ae9a <__mdiff+0xda>
 800aede:	3801      	subs	r0, #1
 800aee0:	e7e9      	b.n	800aeb6 <__mdiff+0xf6>
 800aee2:	46c0      	nop			; (mov r8, r8)
 800aee4:	0800bb83 	.word	0x0800bb83
 800aee8:	00000232 	.word	0x00000232
 800aeec:	0800bbf4 	.word	0x0800bbf4

0800aef0 <__d2b>:
 800aef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef2:	2101      	movs	r1, #1
 800aef4:	0014      	movs	r4, r2
 800aef6:	001e      	movs	r6, r3
 800aef8:	9f08      	ldr	r7, [sp, #32]
 800aefa:	f7ff fcc1 	bl	800a880 <_Balloc>
 800aefe:	1e05      	subs	r5, r0, #0
 800af00:	d105      	bne.n	800af0e <__d2b+0x1e>
 800af02:	0002      	movs	r2, r0
 800af04:	4b26      	ldr	r3, [pc, #152]	; (800afa0 <__d2b+0xb0>)
 800af06:	4927      	ldr	r1, [pc, #156]	; (800afa4 <__d2b+0xb4>)
 800af08:	4827      	ldr	r0, [pc, #156]	; (800afa8 <__d2b+0xb8>)
 800af0a:	f000 fb37 	bl	800b57c <__assert_func>
 800af0e:	0333      	lsls	r3, r6, #12
 800af10:	0076      	lsls	r6, r6, #1
 800af12:	0b1b      	lsrs	r3, r3, #12
 800af14:	0d76      	lsrs	r6, r6, #21
 800af16:	d124      	bne.n	800af62 <__d2b+0x72>
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	2c00      	cmp	r4, #0
 800af1c:	d027      	beq.n	800af6e <__d2b+0x7e>
 800af1e:	4668      	mov	r0, sp
 800af20:	9400      	str	r4, [sp, #0]
 800af22:	f7ff fd73 	bl	800aa0c <__lo0bits>
 800af26:	9c00      	ldr	r4, [sp, #0]
 800af28:	2800      	cmp	r0, #0
 800af2a:	d01e      	beq.n	800af6a <__d2b+0x7a>
 800af2c:	9b01      	ldr	r3, [sp, #4]
 800af2e:	2120      	movs	r1, #32
 800af30:	001a      	movs	r2, r3
 800af32:	1a09      	subs	r1, r1, r0
 800af34:	408a      	lsls	r2, r1
 800af36:	40c3      	lsrs	r3, r0
 800af38:	4322      	orrs	r2, r4
 800af3a:	616a      	str	r2, [r5, #20]
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	9c01      	ldr	r4, [sp, #4]
 800af40:	61ac      	str	r4, [r5, #24]
 800af42:	1e63      	subs	r3, r4, #1
 800af44:	419c      	sbcs	r4, r3
 800af46:	3401      	adds	r4, #1
 800af48:	612c      	str	r4, [r5, #16]
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	d018      	beq.n	800af80 <__d2b+0x90>
 800af4e:	4b17      	ldr	r3, [pc, #92]	; (800afac <__d2b+0xbc>)
 800af50:	18f6      	adds	r6, r6, r3
 800af52:	2335      	movs	r3, #53	; 0x35
 800af54:	1836      	adds	r6, r6, r0
 800af56:	1a18      	subs	r0, r3, r0
 800af58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5a:	603e      	str	r6, [r7, #0]
 800af5c:	6018      	str	r0, [r3, #0]
 800af5e:	0028      	movs	r0, r5
 800af60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af62:	2280      	movs	r2, #128	; 0x80
 800af64:	0352      	lsls	r2, r2, #13
 800af66:	4313      	orrs	r3, r2
 800af68:	e7d6      	b.n	800af18 <__d2b+0x28>
 800af6a:	616c      	str	r4, [r5, #20]
 800af6c:	e7e7      	b.n	800af3e <__d2b+0x4e>
 800af6e:	a801      	add	r0, sp, #4
 800af70:	f7ff fd4c 	bl	800aa0c <__lo0bits>
 800af74:	2401      	movs	r4, #1
 800af76:	9b01      	ldr	r3, [sp, #4]
 800af78:	612c      	str	r4, [r5, #16]
 800af7a:	616b      	str	r3, [r5, #20]
 800af7c:	3020      	adds	r0, #32
 800af7e:	e7e4      	b.n	800af4a <__d2b+0x5a>
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <__d2b+0xc0>)
 800af82:	18c0      	adds	r0, r0, r3
 800af84:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <__d2b+0xc4>)
 800af86:	6038      	str	r0, [r7, #0]
 800af88:	18e3      	adds	r3, r4, r3
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	18eb      	adds	r3, r5, r3
 800af8e:	6958      	ldr	r0, [r3, #20]
 800af90:	f7ff fd22 	bl	800a9d8 <__hi0bits>
 800af94:	0164      	lsls	r4, r4, #5
 800af96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af98:	1a24      	subs	r4, r4, r0
 800af9a:	601c      	str	r4, [r3, #0]
 800af9c:	e7df      	b.n	800af5e <__d2b+0x6e>
 800af9e:	46c0      	nop			; (mov r8, r8)
 800afa0:	0800bb83 	.word	0x0800bb83
 800afa4:	0000030a 	.word	0x0000030a
 800afa8:	0800bbf4 	.word	0x0800bbf4
 800afac:	fffffbcd 	.word	0xfffffbcd
 800afb0:	fffffbce 	.word	0xfffffbce
 800afb4:	3fffffff 	.word	0x3fffffff

0800afb8 <_calloc_r>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	0c13      	lsrs	r3, r2, #16
 800afbc:	0c0d      	lsrs	r5, r1, #16
 800afbe:	d11e      	bne.n	800affe <_calloc_r+0x46>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10c      	bne.n	800afde <_calloc_r+0x26>
 800afc4:	b289      	uxth	r1, r1
 800afc6:	b294      	uxth	r4, r2
 800afc8:	434c      	muls	r4, r1
 800afca:	0021      	movs	r1, r4
 800afcc:	f000 f88c 	bl	800b0e8 <_malloc_r>
 800afd0:	1e05      	subs	r5, r0, #0
 800afd2:	d01b      	beq.n	800b00c <_calloc_r+0x54>
 800afd4:	0022      	movs	r2, r4
 800afd6:	2100      	movs	r1, #0
 800afd8:	f7fd fd72 	bl	8008ac0 <memset>
 800afdc:	e016      	b.n	800b00c <_calloc_r+0x54>
 800afde:	1c1d      	adds	r5, r3, #0
 800afe0:	1c0b      	adds	r3, r1, #0
 800afe2:	b292      	uxth	r2, r2
 800afe4:	b289      	uxth	r1, r1
 800afe6:	b29c      	uxth	r4, r3
 800afe8:	4351      	muls	r1, r2
 800afea:	b2ab      	uxth	r3, r5
 800afec:	4363      	muls	r3, r4
 800afee:	0c0c      	lsrs	r4, r1, #16
 800aff0:	191c      	adds	r4, r3, r4
 800aff2:	0c22      	lsrs	r2, r4, #16
 800aff4:	d107      	bne.n	800b006 <_calloc_r+0x4e>
 800aff6:	0424      	lsls	r4, r4, #16
 800aff8:	b289      	uxth	r1, r1
 800affa:	430c      	orrs	r4, r1
 800affc:	e7e5      	b.n	800afca <_calloc_r+0x12>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <_calloc_r+0x4e>
 800b002:	1c13      	adds	r3, r2, #0
 800b004:	e7ed      	b.n	800afe2 <_calloc_r+0x2a>
 800b006:	230c      	movs	r3, #12
 800b008:	2500      	movs	r5, #0
 800b00a:	6003      	str	r3, [r0, #0]
 800b00c:	0028      	movs	r0, r5
 800b00e:	bd70      	pop	{r4, r5, r6, pc}

0800b010 <_free_r>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	0005      	movs	r5, r0
 800b014:	2900      	cmp	r1, #0
 800b016:	d010      	beq.n	800b03a <_free_r+0x2a>
 800b018:	1f0c      	subs	r4, r1, #4
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	da00      	bge.n	800b022 <_free_r+0x12>
 800b020:	18e4      	adds	r4, r4, r3
 800b022:	0028      	movs	r0, r5
 800b024:	f000 fb34 	bl	800b690 <__malloc_lock>
 800b028:	4a1d      	ldr	r2, [pc, #116]	; (800b0a0 <_free_r+0x90>)
 800b02a:	6813      	ldr	r3, [r2, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d105      	bne.n	800b03c <_free_r+0x2c>
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	6014      	str	r4, [r2, #0]
 800b034:	0028      	movs	r0, r5
 800b036:	f000 fb33 	bl	800b6a0 <__malloc_unlock>
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	d908      	bls.n	800b052 <_free_r+0x42>
 800b040:	6821      	ldr	r1, [r4, #0]
 800b042:	1860      	adds	r0, r4, r1
 800b044:	4283      	cmp	r3, r0
 800b046:	d1f3      	bne.n	800b030 <_free_r+0x20>
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	1841      	adds	r1, r0, r1
 800b04e:	6021      	str	r1, [r4, #0]
 800b050:	e7ee      	b.n	800b030 <_free_r+0x20>
 800b052:	001a      	movs	r2, r3
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <_free_r+0x4e>
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	d9f9      	bls.n	800b052 <_free_r+0x42>
 800b05e:	6811      	ldr	r1, [r2, #0]
 800b060:	1850      	adds	r0, r2, r1
 800b062:	42a0      	cmp	r0, r4
 800b064:	d10b      	bne.n	800b07e <_free_r+0x6e>
 800b066:	6820      	ldr	r0, [r4, #0]
 800b068:	1809      	adds	r1, r1, r0
 800b06a:	1850      	adds	r0, r2, r1
 800b06c:	6011      	str	r1, [r2, #0]
 800b06e:	4283      	cmp	r3, r0
 800b070:	d1e0      	bne.n	800b034 <_free_r+0x24>
 800b072:	6818      	ldr	r0, [r3, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	1841      	adds	r1, r0, r1
 800b078:	6011      	str	r1, [r2, #0]
 800b07a:	6053      	str	r3, [r2, #4]
 800b07c:	e7da      	b.n	800b034 <_free_r+0x24>
 800b07e:	42a0      	cmp	r0, r4
 800b080:	d902      	bls.n	800b088 <_free_r+0x78>
 800b082:	230c      	movs	r3, #12
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	e7d5      	b.n	800b034 <_free_r+0x24>
 800b088:	6821      	ldr	r1, [r4, #0]
 800b08a:	1860      	adds	r0, r4, r1
 800b08c:	4283      	cmp	r3, r0
 800b08e:	d103      	bne.n	800b098 <_free_r+0x88>
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	1841      	adds	r1, r0, r1
 800b096:	6021      	str	r1, [r4, #0]
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	6054      	str	r4, [r2, #4]
 800b09c:	e7ca      	b.n	800b034 <_free_r+0x24>
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	20000924 	.word	0x20000924

0800b0a4 <sbrk_aligned>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	4e0f      	ldr	r6, [pc, #60]	; (800b0e4 <sbrk_aligned+0x40>)
 800b0a8:	000d      	movs	r5, r1
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	0004      	movs	r4, r0
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	d102      	bne.n	800b0b8 <sbrk_aligned+0x14>
 800b0b2:	f000 f9f1 	bl	800b498 <_sbrk_r>
 800b0b6:	6030      	str	r0, [r6, #0]
 800b0b8:	0029      	movs	r1, r5
 800b0ba:	0020      	movs	r0, r4
 800b0bc:	f000 f9ec 	bl	800b498 <_sbrk_r>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d00a      	beq.n	800b0da <sbrk_aligned+0x36>
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	1cc5      	adds	r5, r0, #3
 800b0c8:	439d      	bics	r5, r3
 800b0ca:	42a8      	cmp	r0, r5
 800b0cc:	d007      	beq.n	800b0de <sbrk_aligned+0x3a>
 800b0ce:	1a29      	subs	r1, r5, r0
 800b0d0:	0020      	movs	r0, r4
 800b0d2:	f000 f9e1 	bl	800b498 <_sbrk_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d101      	bne.n	800b0de <sbrk_aligned+0x3a>
 800b0da:	2501      	movs	r5, #1
 800b0dc:	426d      	negs	r5, r5
 800b0de:	0028      	movs	r0, r5
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
 800b0e2:	46c0      	nop			; (mov r8, r8)
 800b0e4:	20000928 	.word	0x20000928

0800b0e8 <_malloc_r>:
 800b0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	1ccb      	adds	r3, r1, #3
 800b0ee:	4393      	bics	r3, r2
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	0006      	movs	r6, r0
 800b0f4:	001f      	movs	r7, r3
 800b0f6:	2b0c      	cmp	r3, #12
 800b0f8:	d232      	bcs.n	800b160 <_malloc_r+0x78>
 800b0fa:	270c      	movs	r7, #12
 800b0fc:	42b9      	cmp	r1, r7
 800b0fe:	d831      	bhi.n	800b164 <_malloc_r+0x7c>
 800b100:	0030      	movs	r0, r6
 800b102:	f000 fac5 	bl	800b690 <__malloc_lock>
 800b106:	4d32      	ldr	r5, [pc, #200]	; (800b1d0 <_malloc_r+0xe8>)
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	001c      	movs	r4, r3
 800b10c:	2c00      	cmp	r4, #0
 800b10e:	d12e      	bne.n	800b16e <_malloc_r+0x86>
 800b110:	0039      	movs	r1, r7
 800b112:	0030      	movs	r0, r6
 800b114:	f7ff ffc6 	bl	800b0a4 <sbrk_aligned>
 800b118:	0004      	movs	r4, r0
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	d11e      	bne.n	800b15c <_malloc_r+0x74>
 800b11e:	682c      	ldr	r4, [r5, #0]
 800b120:	0025      	movs	r5, r4
 800b122:	2d00      	cmp	r5, #0
 800b124:	d14a      	bne.n	800b1bc <_malloc_r+0xd4>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	0029      	movs	r1, r5
 800b12a:	18e3      	adds	r3, r4, r3
 800b12c:	0030      	movs	r0, r6
 800b12e:	9301      	str	r3, [sp, #4]
 800b130:	f000 f9b2 	bl	800b498 <_sbrk_r>
 800b134:	9b01      	ldr	r3, [sp, #4]
 800b136:	4283      	cmp	r3, r0
 800b138:	d143      	bne.n	800b1c2 <_malloc_r+0xda>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	3703      	adds	r7, #3
 800b13e:	1aff      	subs	r7, r7, r3
 800b140:	2303      	movs	r3, #3
 800b142:	439f      	bics	r7, r3
 800b144:	3708      	adds	r7, #8
 800b146:	2f0c      	cmp	r7, #12
 800b148:	d200      	bcs.n	800b14c <_malloc_r+0x64>
 800b14a:	270c      	movs	r7, #12
 800b14c:	0039      	movs	r1, r7
 800b14e:	0030      	movs	r0, r6
 800b150:	f7ff ffa8 	bl	800b0a4 <sbrk_aligned>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d034      	beq.n	800b1c2 <_malloc_r+0xda>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	19df      	adds	r7, r3, r7
 800b15c:	6027      	str	r7, [r4, #0]
 800b15e:	e013      	b.n	800b188 <_malloc_r+0xa0>
 800b160:	2b00      	cmp	r3, #0
 800b162:	dacb      	bge.n	800b0fc <_malloc_r+0x14>
 800b164:	230c      	movs	r3, #12
 800b166:	2500      	movs	r5, #0
 800b168:	6033      	str	r3, [r6, #0]
 800b16a:	0028      	movs	r0, r5
 800b16c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	1bd1      	subs	r1, r2, r7
 800b172:	d420      	bmi.n	800b1b6 <_malloc_r+0xce>
 800b174:	290b      	cmp	r1, #11
 800b176:	d917      	bls.n	800b1a8 <_malloc_r+0xc0>
 800b178:	19e2      	adds	r2, r4, r7
 800b17a:	6027      	str	r7, [r4, #0]
 800b17c:	42a3      	cmp	r3, r4
 800b17e:	d111      	bne.n	800b1a4 <_malloc_r+0xbc>
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	6011      	str	r1, [r2, #0]
 800b186:	6053      	str	r3, [r2, #4]
 800b188:	0030      	movs	r0, r6
 800b18a:	0025      	movs	r5, r4
 800b18c:	f000 fa88 	bl	800b6a0 <__malloc_unlock>
 800b190:	2207      	movs	r2, #7
 800b192:	350b      	adds	r5, #11
 800b194:	1d23      	adds	r3, r4, #4
 800b196:	4395      	bics	r5, r2
 800b198:	1aea      	subs	r2, r5, r3
 800b19a:	429d      	cmp	r5, r3
 800b19c:	d0e5      	beq.n	800b16a <_malloc_r+0x82>
 800b19e:	1b5b      	subs	r3, r3, r5
 800b1a0:	50a3      	str	r3, [r4, r2]
 800b1a2:	e7e2      	b.n	800b16a <_malloc_r+0x82>
 800b1a4:	605a      	str	r2, [r3, #4]
 800b1a6:	e7ec      	b.n	800b182 <_malloc_r+0x9a>
 800b1a8:	6862      	ldr	r2, [r4, #4]
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	d101      	bne.n	800b1b2 <_malloc_r+0xca>
 800b1ae:	602a      	str	r2, [r5, #0]
 800b1b0:	e7ea      	b.n	800b188 <_malloc_r+0xa0>
 800b1b2:	605a      	str	r2, [r3, #4]
 800b1b4:	e7e8      	b.n	800b188 <_malloc_r+0xa0>
 800b1b6:	0023      	movs	r3, r4
 800b1b8:	6864      	ldr	r4, [r4, #4]
 800b1ba:	e7a7      	b.n	800b10c <_malloc_r+0x24>
 800b1bc:	002c      	movs	r4, r5
 800b1be:	686d      	ldr	r5, [r5, #4]
 800b1c0:	e7af      	b.n	800b122 <_malloc_r+0x3a>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	0030      	movs	r0, r6
 800b1c6:	6033      	str	r3, [r6, #0]
 800b1c8:	f000 fa6a 	bl	800b6a0 <__malloc_unlock>
 800b1cc:	e7cd      	b.n	800b16a <_malloc_r+0x82>
 800b1ce:	46c0      	nop			; (mov r8, r8)
 800b1d0:	20000924 	.word	0x20000924

0800b1d4 <__sfputc_r>:
 800b1d4:	6893      	ldr	r3, [r2, #8]
 800b1d6:	b510      	push	{r4, lr}
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	6093      	str	r3, [r2, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da04      	bge.n	800b1ea <__sfputc_r+0x16>
 800b1e0:	6994      	ldr	r4, [r2, #24]
 800b1e2:	42a3      	cmp	r3, r4
 800b1e4:	db07      	blt.n	800b1f6 <__sfputc_r+0x22>
 800b1e6:	290a      	cmp	r1, #10
 800b1e8:	d005      	beq.n	800b1f6 <__sfputc_r+0x22>
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	1c58      	adds	r0, r3, #1
 800b1ee:	6010      	str	r0, [r2, #0]
 800b1f0:	7019      	strb	r1, [r3, #0]
 800b1f2:	0008      	movs	r0, r1
 800b1f4:	bd10      	pop	{r4, pc}
 800b1f6:	f7fe f96f 	bl	80094d8 <__swbuf_r>
 800b1fa:	0001      	movs	r1, r0
 800b1fc:	e7f9      	b.n	800b1f2 <__sfputc_r+0x1e>

0800b1fe <__sfputs_r>:
 800b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b200:	0006      	movs	r6, r0
 800b202:	000f      	movs	r7, r1
 800b204:	0014      	movs	r4, r2
 800b206:	18d5      	adds	r5, r2, r3
 800b208:	42ac      	cmp	r4, r5
 800b20a:	d101      	bne.n	800b210 <__sfputs_r+0x12>
 800b20c:	2000      	movs	r0, #0
 800b20e:	e007      	b.n	800b220 <__sfputs_r+0x22>
 800b210:	7821      	ldrb	r1, [r4, #0]
 800b212:	003a      	movs	r2, r7
 800b214:	0030      	movs	r0, r6
 800b216:	f7ff ffdd 	bl	800b1d4 <__sfputc_r>
 800b21a:	3401      	adds	r4, #1
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d1f3      	bne.n	800b208 <__sfputs_r+0xa>
 800b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b224 <_vfiprintf_r>:
 800b224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b226:	b0a1      	sub	sp, #132	; 0x84
 800b228:	0006      	movs	r6, r0
 800b22a:	000c      	movs	r4, r1
 800b22c:	001f      	movs	r7, r3
 800b22e:	9203      	str	r2, [sp, #12]
 800b230:	2800      	cmp	r0, #0
 800b232:	d004      	beq.n	800b23e <_vfiprintf_r+0x1a>
 800b234:	6983      	ldr	r3, [r0, #24]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <_vfiprintf_r+0x1a>
 800b23a:	f7ff f9ef 	bl	800a61c <__sinit>
 800b23e:	4b8e      	ldr	r3, [pc, #568]	; (800b478 <_vfiprintf_r+0x254>)
 800b240:	429c      	cmp	r4, r3
 800b242:	d11c      	bne.n	800b27e <_vfiprintf_r+0x5a>
 800b244:	6874      	ldr	r4, [r6, #4]
 800b246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b248:	07db      	lsls	r3, r3, #31
 800b24a:	d405      	bmi.n	800b258 <_vfiprintf_r+0x34>
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	059b      	lsls	r3, r3, #22
 800b250:	d402      	bmi.n	800b258 <_vfiprintf_r+0x34>
 800b252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b254:	f7ff fa87 	bl	800a766 <__retarget_lock_acquire_recursive>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	071b      	lsls	r3, r3, #28
 800b25c:	d502      	bpl.n	800b264 <_vfiprintf_r+0x40>
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11d      	bne.n	800b2a0 <_vfiprintf_r+0x7c>
 800b264:	0021      	movs	r1, r4
 800b266:	0030      	movs	r0, r6
 800b268:	f7fe f98c 	bl	8009584 <__swsetup_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d017      	beq.n	800b2a0 <_vfiprintf_r+0x7c>
 800b270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b272:	07db      	lsls	r3, r3, #31
 800b274:	d50d      	bpl.n	800b292 <_vfiprintf_r+0x6e>
 800b276:	2001      	movs	r0, #1
 800b278:	4240      	negs	r0, r0
 800b27a:	b021      	add	sp, #132	; 0x84
 800b27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b27e:	4b7f      	ldr	r3, [pc, #508]	; (800b47c <_vfiprintf_r+0x258>)
 800b280:	429c      	cmp	r4, r3
 800b282:	d101      	bne.n	800b288 <_vfiprintf_r+0x64>
 800b284:	68b4      	ldr	r4, [r6, #8]
 800b286:	e7de      	b.n	800b246 <_vfiprintf_r+0x22>
 800b288:	4b7d      	ldr	r3, [pc, #500]	; (800b480 <_vfiprintf_r+0x25c>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d1db      	bne.n	800b246 <_vfiprintf_r+0x22>
 800b28e:	68f4      	ldr	r4, [r6, #12]
 800b290:	e7d9      	b.n	800b246 <_vfiprintf_r+0x22>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	059b      	lsls	r3, r3, #22
 800b296:	d4ee      	bmi.n	800b276 <_vfiprintf_r+0x52>
 800b298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b29a:	f7ff fa65 	bl	800a768 <__retarget_lock_release_recursive>
 800b29e:	e7ea      	b.n	800b276 <_vfiprintf_r+0x52>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	ad08      	add	r5, sp, #32
 800b2a4:	616b      	str	r3, [r5, #20]
 800b2a6:	3320      	adds	r3, #32
 800b2a8:	766b      	strb	r3, [r5, #25]
 800b2aa:	3310      	adds	r3, #16
 800b2ac:	76ab      	strb	r3, [r5, #26]
 800b2ae:	9707      	str	r7, [sp, #28]
 800b2b0:	9f03      	ldr	r7, [sp, #12]
 800b2b2:	783b      	ldrb	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <_vfiprintf_r+0x98>
 800b2b8:	2b25      	cmp	r3, #37	; 0x25
 800b2ba:	d14e      	bne.n	800b35a <_vfiprintf_r+0x136>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	1afb      	subs	r3, r7, r3
 800b2c0:	9305      	str	r3, [sp, #20]
 800b2c2:	9b03      	ldr	r3, [sp, #12]
 800b2c4:	429f      	cmp	r7, r3
 800b2c6:	d00d      	beq.n	800b2e4 <_vfiprintf_r+0xc0>
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	0021      	movs	r1, r4
 800b2cc:	0030      	movs	r0, r6
 800b2ce:	9a03      	ldr	r2, [sp, #12]
 800b2d0:	f7ff ff95 	bl	800b1fe <__sfputs_r>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d100      	bne.n	800b2da <_vfiprintf_r+0xb6>
 800b2d8:	e0b5      	b.n	800b446 <_vfiprintf_r+0x222>
 800b2da:	696a      	ldr	r2, [r5, #20]
 800b2dc:	9b05      	ldr	r3, [sp, #20]
 800b2de:	4694      	mov	ip, r2
 800b2e0:	4463      	add	r3, ip
 800b2e2:	616b      	str	r3, [r5, #20]
 800b2e4:	783b      	ldrb	r3, [r7, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d100      	bne.n	800b2ec <_vfiprintf_r+0xc8>
 800b2ea:	e0ac      	b.n	800b446 <_vfiprintf_r+0x222>
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	1c7b      	adds	r3, r7, #1
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	4252      	negs	r2, r2
 800b2f6:	606a      	str	r2, [r5, #4]
 800b2f8:	a904      	add	r1, sp, #16
 800b2fa:	3254      	adds	r2, #84	; 0x54
 800b2fc:	1852      	adds	r2, r2, r1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	60eb      	str	r3, [r5, #12]
 800b302:	60ab      	str	r3, [r5, #8]
 800b304:	7013      	strb	r3, [r2, #0]
 800b306:	65ab      	str	r3, [r5, #88]	; 0x58
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	2205      	movs	r2, #5
 800b30c:	7819      	ldrb	r1, [r3, #0]
 800b30e:	485d      	ldr	r0, [pc, #372]	; (800b484 <_vfiprintf_r+0x260>)
 800b310:	f7ff faa2 	bl	800a858 <memchr>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	1c5f      	adds	r7, r3, #1
 800b318:	2800      	cmp	r0, #0
 800b31a:	d120      	bne.n	800b35e <_vfiprintf_r+0x13a>
 800b31c:	682a      	ldr	r2, [r5, #0]
 800b31e:	06d3      	lsls	r3, r2, #27
 800b320:	d504      	bpl.n	800b32c <_vfiprintf_r+0x108>
 800b322:	2353      	movs	r3, #83	; 0x53
 800b324:	a904      	add	r1, sp, #16
 800b326:	185b      	adds	r3, r3, r1
 800b328:	2120      	movs	r1, #32
 800b32a:	7019      	strb	r1, [r3, #0]
 800b32c:	0713      	lsls	r3, r2, #28
 800b32e:	d504      	bpl.n	800b33a <_vfiprintf_r+0x116>
 800b330:	2353      	movs	r3, #83	; 0x53
 800b332:	a904      	add	r1, sp, #16
 800b334:	185b      	adds	r3, r3, r1
 800b336:	212b      	movs	r1, #43	; 0x2b
 800b338:	7019      	strb	r1, [r3, #0]
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b2a      	cmp	r3, #42	; 0x2a
 800b340:	d016      	beq.n	800b370 <_vfiprintf_r+0x14c>
 800b342:	2100      	movs	r1, #0
 800b344:	68eb      	ldr	r3, [r5, #12]
 800b346:	9f03      	ldr	r7, [sp, #12]
 800b348:	783a      	ldrb	r2, [r7, #0]
 800b34a:	1c78      	adds	r0, r7, #1
 800b34c:	3a30      	subs	r2, #48	; 0x30
 800b34e:	4684      	mov	ip, r0
 800b350:	2a09      	cmp	r2, #9
 800b352:	d94f      	bls.n	800b3f4 <_vfiprintf_r+0x1d0>
 800b354:	2900      	cmp	r1, #0
 800b356:	d111      	bne.n	800b37c <_vfiprintf_r+0x158>
 800b358:	e017      	b.n	800b38a <_vfiprintf_r+0x166>
 800b35a:	3701      	adds	r7, #1
 800b35c:	e7a9      	b.n	800b2b2 <_vfiprintf_r+0x8e>
 800b35e:	4b49      	ldr	r3, [pc, #292]	; (800b484 <_vfiprintf_r+0x260>)
 800b360:	682a      	ldr	r2, [r5, #0]
 800b362:	1ac0      	subs	r0, r0, r3
 800b364:	2301      	movs	r3, #1
 800b366:	4083      	lsls	r3, r0
 800b368:	4313      	orrs	r3, r2
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	9703      	str	r7, [sp, #12]
 800b36e:	e7cb      	b.n	800b308 <_vfiprintf_r+0xe4>
 800b370:	9b07      	ldr	r3, [sp, #28]
 800b372:	1d19      	adds	r1, r3, #4
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	9107      	str	r1, [sp, #28]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	db01      	blt.n	800b380 <_vfiprintf_r+0x15c>
 800b37c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b37e:	e004      	b.n	800b38a <_vfiprintf_r+0x166>
 800b380:	425b      	negs	r3, r3
 800b382:	60eb      	str	r3, [r5, #12]
 800b384:	2302      	movs	r3, #2
 800b386:	4313      	orrs	r3, r2
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	783b      	ldrb	r3, [r7, #0]
 800b38c:	2b2e      	cmp	r3, #46	; 0x2e
 800b38e:	d10a      	bne.n	800b3a6 <_vfiprintf_r+0x182>
 800b390:	787b      	ldrb	r3, [r7, #1]
 800b392:	2b2a      	cmp	r3, #42	; 0x2a
 800b394:	d137      	bne.n	800b406 <_vfiprintf_r+0x1e2>
 800b396:	9b07      	ldr	r3, [sp, #28]
 800b398:	3702      	adds	r7, #2
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	9207      	str	r2, [sp, #28]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	db2d      	blt.n	800b400 <_vfiprintf_r+0x1dc>
 800b3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a6:	2203      	movs	r2, #3
 800b3a8:	7839      	ldrb	r1, [r7, #0]
 800b3aa:	4837      	ldr	r0, [pc, #220]	; (800b488 <_vfiprintf_r+0x264>)
 800b3ac:	f7ff fa54 	bl	800a858 <memchr>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d007      	beq.n	800b3c4 <_vfiprintf_r+0x1a0>
 800b3b4:	4b34      	ldr	r3, [pc, #208]	; (800b488 <_vfiprintf_r+0x264>)
 800b3b6:	682a      	ldr	r2, [r5, #0]
 800b3b8:	1ac0      	subs	r0, r0, r3
 800b3ba:	2340      	movs	r3, #64	; 0x40
 800b3bc:	4083      	lsls	r3, r0
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	3701      	adds	r7, #1
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	7839      	ldrb	r1, [r7, #0]
 800b3c6:	1c7b      	adds	r3, r7, #1
 800b3c8:	2206      	movs	r2, #6
 800b3ca:	4830      	ldr	r0, [pc, #192]	; (800b48c <_vfiprintf_r+0x268>)
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	7629      	strb	r1, [r5, #24]
 800b3d0:	f7ff fa42 	bl	800a858 <memchr>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d045      	beq.n	800b464 <_vfiprintf_r+0x240>
 800b3d8:	4b2d      	ldr	r3, [pc, #180]	; (800b490 <_vfiprintf_r+0x26c>)
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d127      	bne.n	800b42e <_vfiprintf_r+0x20a>
 800b3de:	2207      	movs	r2, #7
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	3307      	adds	r3, #7
 800b3e4:	4393      	bics	r3, r2
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	9307      	str	r3, [sp, #28]
 800b3ea:	696b      	ldr	r3, [r5, #20]
 800b3ec:	9a04      	ldr	r2, [sp, #16]
 800b3ee:	189b      	adds	r3, r3, r2
 800b3f0:	616b      	str	r3, [r5, #20]
 800b3f2:	e75d      	b.n	800b2b0 <_vfiprintf_r+0x8c>
 800b3f4:	210a      	movs	r1, #10
 800b3f6:	434b      	muls	r3, r1
 800b3f8:	4667      	mov	r7, ip
 800b3fa:	189b      	adds	r3, r3, r2
 800b3fc:	3909      	subs	r1, #9
 800b3fe:	e7a3      	b.n	800b348 <_vfiprintf_r+0x124>
 800b400:	2301      	movs	r3, #1
 800b402:	425b      	negs	r3, r3
 800b404:	e7ce      	b.n	800b3a4 <_vfiprintf_r+0x180>
 800b406:	2300      	movs	r3, #0
 800b408:	001a      	movs	r2, r3
 800b40a:	3701      	adds	r7, #1
 800b40c:	606b      	str	r3, [r5, #4]
 800b40e:	7839      	ldrb	r1, [r7, #0]
 800b410:	1c78      	adds	r0, r7, #1
 800b412:	3930      	subs	r1, #48	; 0x30
 800b414:	4684      	mov	ip, r0
 800b416:	2909      	cmp	r1, #9
 800b418:	d903      	bls.n	800b422 <_vfiprintf_r+0x1fe>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0c3      	beq.n	800b3a6 <_vfiprintf_r+0x182>
 800b41e:	9209      	str	r2, [sp, #36]	; 0x24
 800b420:	e7c1      	b.n	800b3a6 <_vfiprintf_r+0x182>
 800b422:	230a      	movs	r3, #10
 800b424:	435a      	muls	r2, r3
 800b426:	4667      	mov	r7, ip
 800b428:	1852      	adds	r2, r2, r1
 800b42a:	3b09      	subs	r3, #9
 800b42c:	e7ef      	b.n	800b40e <_vfiprintf_r+0x1ea>
 800b42e:	ab07      	add	r3, sp, #28
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	0022      	movs	r2, r4
 800b434:	0029      	movs	r1, r5
 800b436:	0030      	movs	r0, r6
 800b438:	4b16      	ldr	r3, [pc, #88]	; (800b494 <_vfiprintf_r+0x270>)
 800b43a:	f7fd fbf3 	bl	8008c24 <_printf_float>
 800b43e:	9004      	str	r0, [sp, #16]
 800b440:	9b04      	ldr	r3, [sp, #16]
 800b442:	3301      	adds	r3, #1
 800b444:	d1d1      	bne.n	800b3ea <_vfiprintf_r+0x1c6>
 800b446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b448:	07db      	lsls	r3, r3, #31
 800b44a:	d405      	bmi.n	800b458 <_vfiprintf_r+0x234>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	059b      	lsls	r3, r3, #22
 800b450:	d402      	bmi.n	800b458 <_vfiprintf_r+0x234>
 800b452:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b454:	f7ff f988 	bl	800a768 <__retarget_lock_release_recursive>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	065b      	lsls	r3, r3, #25
 800b45c:	d500      	bpl.n	800b460 <_vfiprintf_r+0x23c>
 800b45e:	e70a      	b.n	800b276 <_vfiprintf_r+0x52>
 800b460:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b462:	e70a      	b.n	800b27a <_vfiprintf_r+0x56>
 800b464:	ab07      	add	r3, sp, #28
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	0022      	movs	r2, r4
 800b46a:	0029      	movs	r1, r5
 800b46c:	0030      	movs	r0, r6
 800b46e:	4b09      	ldr	r3, [pc, #36]	; (800b494 <_vfiprintf_r+0x270>)
 800b470:	f7fd fe8a 	bl	8009188 <_printf_i>
 800b474:	e7e3      	b.n	800b43e <_vfiprintf_r+0x21a>
 800b476:	46c0      	nop			; (mov r8, r8)
 800b478:	0800bbb4 	.word	0x0800bbb4
 800b47c:	0800bbd4 	.word	0x0800bbd4
 800b480:	0800bb94 	.word	0x0800bb94
 800b484:	0800bd4c 	.word	0x0800bd4c
 800b488:	0800bd52 	.word	0x0800bd52
 800b48c:	0800bd56 	.word	0x0800bd56
 800b490:	08008c25 	.word	0x08008c25
 800b494:	0800b1ff 	.word	0x0800b1ff

0800b498 <_sbrk_r>:
 800b498:	2300      	movs	r3, #0
 800b49a:	b570      	push	{r4, r5, r6, lr}
 800b49c:	4d06      	ldr	r5, [pc, #24]	; (800b4b8 <_sbrk_r+0x20>)
 800b49e:	0004      	movs	r4, r0
 800b4a0:	0008      	movs	r0, r1
 800b4a2:	602b      	str	r3, [r5, #0]
 800b4a4:	f7f8 fe18 	bl	80040d8 <_sbrk>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d103      	bne.n	800b4b4 <_sbrk_r+0x1c>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d000      	beq.n	800b4b4 <_sbrk_r+0x1c>
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	bd70      	pop	{r4, r5, r6, pc}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	2000092c 	.word	0x2000092c

0800b4bc <__sread>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	000c      	movs	r4, r1
 800b4c0:	250e      	movs	r5, #14
 800b4c2:	5f49      	ldrsh	r1, [r1, r5]
 800b4c4:	f000 f8f4 	bl	800b6b0 <_read_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	db03      	blt.n	800b4d4 <__sread+0x18>
 800b4cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b4ce:	181b      	adds	r3, r3, r0
 800b4d0:	6563      	str	r3, [r4, #84]	; 0x54
 800b4d2:	bd70      	pop	{r4, r5, r6, pc}
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	4a02      	ldr	r2, [pc, #8]	; (800b4e0 <__sread+0x24>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	81a3      	strh	r3, [r4, #12]
 800b4dc:	e7f9      	b.n	800b4d2 <__sread+0x16>
 800b4de:	46c0      	nop			; (mov r8, r8)
 800b4e0:	ffffefff 	.word	0xffffefff

0800b4e4 <__swrite>:
 800b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e6:	001f      	movs	r7, r3
 800b4e8:	898b      	ldrh	r3, [r1, #12]
 800b4ea:	0005      	movs	r5, r0
 800b4ec:	000c      	movs	r4, r1
 800b4ee:	0016      	movs	r6, r2
 800b4f0:	05db      	lsls	r3, r3, #23
 800b4f2:	d505      	bpl.n	800b500 <__swrite+0x1c>
 800b4f4:	230e      	movs	r3, #14
 800b4f6:	5ec9      	ldrsh	r1, [r1, r3]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	f000 f8a2 	bl	800b644 <_lseek_r>
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	4a05      	ldr	r2, [pc, #20]	; (800b518 <__swrite+0x34>)
 800b504:	0028      	movs	r0, r5
 800b506:	4013      	ands	r3, r2
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	0032      	movs	r2, r6
 800b50c:	230e      	movs	r3, #14
 800b50e:	5ee1      	ldrsh	r1, [r4, r3]
 800b510:	003b      	movs	r3, r7
 800b512:	f000 f81f 	bl	800b554 <_write_r>
 800b516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b518:	ffffefff 	.word	0xffffefff

0800b51c <__sseek>:
 800b51c:	b570      	push	{r4, r5, r6, lr}
 800b51e:	000c      	movs	r4, r1
 800b520:	250e      	movs	r5, #14
 800b522:	5f49      	ldrsh	r1, [r1, r5]
 800b524:	f000 f88e 	bl	800b644 <_lseek_r>
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	1c42      	adds	r2, r0, #1
 800b52c:	d103      	bne.n	800b536 <__sseek+0x1a>
 800b52e:	4a05      	ldr	r2, [pc, #20]	; (800b544 <__sseek+0x28>)
 800b530:	4013      	ands	r3, r2
 800b532:	81a3      	strh	r3, [r4, #12]
 800b534:	bd70      	pop	{r4, r5, r6, pc}
 800b536:	2280      	movs	r2, #128	; 0x80
 800b538:	0152      	lsls	r2, r2, #5
 800b53a:	4313      	orrs	r3, r2
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	6560      	str	r0, [r4, #84]	; 0x54
 800b540:	e7f8      	b.n	800b534 <__sseek+0x18>
 800b542:	46c0      	nop			; (mov r8, r8)
 800b544:	ffffefff 	.word	0xffffefff

0800b548 <__sclose>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	230e      	movs	r3, #14
 800b54c:	5ec9      	ldrsh	r1, [r1, r3]
 800b54e:	f000 f833 	bl	800b5b8 <_close_r>
 800b552:	bd10      	pop	{r4, pc}

0800b554 <_write_r>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	0004      	movs	r4, r0
 800b558:	0008      	movs	r0, r1
 800b55a:	0011      	movs	r1, r2
 800b55c:	001a      	movs	r2, r3
 800b55e:	2300      	movs	r3, #0
 800b560:	4d05      	ldr	r5, [pc, #20]	; (800b578 <_write_r+0x24>)
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7f8 fd6f 	bl	8004046 <_write>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d103      	bne.n	800b574 <_write_r+0x20>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d000      	beq.n	800b574 <_write_r+0x20>
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	bd70      	pop	{r4, r5, r6, pc}
 800b576:	46c0      	nop			; (mov r8, r8)
 800b578:	2000092c 	.word	0x2000092c

0800b57c <__assert_func>:
 800b57c:	b530      	push	{r4, r5, lr}
 800b57e:	0014      	movs	r4, r2
 800b580:	001a      	movs	r2, r3
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <__assert_func+0x2c>)
 800b584:	0005      	movs	r5, r0
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	b085      	sub	sp, #20
 800b58a:	68d8      	ldr	r0, [r3, #12]
 800b58c:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <__assert_func+0x30>)
 800b58e:	2c00      	cmp	r4, #0
 800b590:	d101      	bne.n	800b596 <__assert_func+0x1a>
 800b592:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <__assert_func+0x34>)
 800b594:	001c      	movs	r4, r3
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	9100      	str	r1, [sp, #0]
 800b59a:	002b      	movs	r3, r5
 800b59c:	4905      	ldr	r1, [pc, #20]	; (800b5b4 <__assert_func+0x38>)
 800b59e:	9402      	str	r4, [sp, #8]
 800b5a0:	f000 f81c 	bl	800b5dc <fiprintf>
 800b5a4:	f000 f8a5 	bl	800b6f2 <abort>
 800b5a8:	2000000c 	.word	0x2000000c
 800b5ac:	0800bd5d 	.word	0x0800bd5d
 800b5b0:	0800bd98 	.word	0x0800bd98
 800b5b4:	0800bd6a 	.word	0x0800bd6a

0800b5b8 <_close_r>:
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	b570      	push	{r4, r5, r6, lr}
 800b5bc:	4d06      	ldr	r5, [pc, #24]	; (800b5d8 <_close_r+0x20>)
 800b5be:	0004      	movs	r4, r0
 800b5c0:	0008      	movs	r0, r1
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	f7f8 fd5b 	bl	800407e <_close>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d103      	bne.n	800b5d4 <_close_r+0x1c>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d000      	beq.n	800b5d4 <_close_r+0x1c>
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	bd70      	pop	{r4, r5, r6, pc}
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	2000092c 	.word	0x2000092c

0800b5dc <fiprintf>:
 800b5dc:	b40e      	push	{r1, r2, r3}
 800b5de:	b503      	push	{r0, r1, lr}
 800b5e0:	0001      	movs	r1, r0
 800b5e2:	ab03      	add	r3, sp, #12
 800b5e4:	4804      	ldr	r0, [pc, #16]	; (800b5f8 <fiprintf+0x1c>)
 800b5e6:	cb04      	ldmia	r3!, {r2}
 800b5e8:	6800      	ldr	r0, [r0, #0]
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	f7ff fe1a 	bl	800b224 <_vfiprintf_r>
 800b5f0:	b002      	add	sp, #8
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	b003      	add	sp, #12
 800b5f6:	4718      	bx	r3
 800b5f8:	2000000c 	.word	0x2000000c

0800b5fc <_fstat_r>:
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	b570      	push	{r4, r5, r6, lr}
 800b600:	4d06      	ldr	r5, [pc, #24]	; (800b61c <_fstat_r+0x20>)
 800b602:	0004      	movs	r4, r0
 800b604:	0008      	movs	r0, r1
 800b606:	0011      	movs	r1, r2
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	f7f8 fd42 	bl	8004092 <_fstat>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d103      	bne.n	800b61a <_fstat_r+0x1e>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d000      	beq.n	800b61a <_fstat_r+0x1e>
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	2000092c 	.word	0x2000092c

0800b620 <_isatty_r>:
 800b620:	2300      	movs	r3, #0
 800b622:	b570      	push	{r4, r5, r6, lr}
 800b624:	4d06      	ldr	r5, [pc, #24]	; (800b640 <_isatty_r+0x20>)
 800b626:	0004      	movs	r4, r0
 800b628:	0008      	movs	r0, r1
 800b62a:	602b      	str	r3, [r5, #0]
 800b62c:	f7f8 fd3f 	bl	80040ae <_isatty>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d103      	bne.n	800b63c <_isatty_r+0x1c>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d000      	beq.n	800b63c <_isatty_r+0x1c>
 800b63a:	6023      	str	r3, [r4, #0]
 800b63c:	bd70      	pop	{r4, r5, r6, pc}
 800b63e:	46c0      	nop			; (mov r8, r8)
 800b640:	2000092c 	.word	0x2000092c

0800b644 <_lseek_r>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	0004      	movs	r4, r0
 800b648:	0008      	movs	r0, r1
 800b64a:	0011      	movs	r1, r2
 800b64c:	001a      	movs	r2, r3
 800b64e:	2300      	movs	r3, #0
 800b650:	4d05      	ldr	r5, [pc, #20]	; (800b668 <_lseek_r+0x24>)
 800b652:	602b      	str	r3, [r5, #0]
 800b654:	f7f8 fd34 	bl	80040c0 <_lseek>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d103      	bne.n	800b664 <_lseek_r+0x20>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d000      	beq.n	800b664 <_lseek_r+0x20>
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	46c0      	nop			; (mov r8, r8)
 800b668:	2000092c 	.word	0x2000092c

0800b66c <__ascii_mbtowc>:
 800b66c:	b082      	sub	sp, #8
 800b66e:	2900      	cmp	r1, #0
 800b670:	d100      	bne.n	800b674 <__ascii_mbtowc+0x8>
 800b672:	a901      	add	r1, sp, #4
 800b674:	1e10      	subs	r0, r2, #0
 800b676:	d006      	beq.n	800b686 <__ascii_mbtowc+0x1a>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d006      	beq.n	800b68a <__ascii_mbtowc+0x1e>
 800b67c:	7813      	ldrb	r3, [r2, #0]
 800b67e:	600b      	str	r3, [r1, #0]
 800b680:	7810      	ldrb	r0, [r2, #0]
 800b682:	1e43      	subs	r3, r0, #1
 800b684:	4198      	sbcs	r0, r3
 800b686:	b002      	add	sp, #8
 800b688:	4770      	bx	lr
 800b68a:	2002      	movs	r0, #2
 800b68c:	4240      	negs	r0, r0
 800b68e:	e7fa      	b.n	800b686 <__ascii_mbtowc+0x1a>

0800b690 <__malloc_lock>:
 800b690:	b510      	push	{r4, lr}
 800b692:	4802      	ldr	r0, [pc, #8]	; (800b69c <__malloc_lock+0xc>)
 800b694:	f7ff f867 	bl	800a766 <__retarget_lock_acquire_recursive>
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	20000920 	.word	0x20000920

0800b6a0 <__malloc_unlock>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	4802      	ldr	r0, [pc, #8]	; (800b6ac <__malloc_unlock+0xc>)
 800b6a4:	f7ff f860 	bl	800a768 <__retarget_lock_release_recursive>
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	46c0      	nop			; (mov r8, r8)
 800b6ac:	20000920 	.word	0x20000920

0800b6b0 <_read_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	0004      	movs	r4, r0
 800b6b4:	0008      	movs	r0, r1
 800b6b6:	0011      	movs	r1, r2
 800b6b8:	001a      	movs	r2, r3
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	4d05      	ldr	r5, [pc, #20]	; (800b6d4 <_read_r+0x24>)
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	f7f8 fca4 	bl	800400c <_read>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d103      	bne.n	800b6d0 <_read_r+0x20>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d000      	beq.n	800b6d0 <_read_r+0x20>
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
 800b6d2:	46c0      	nop			; (mov r8, r8)
 800b6d4:	2000092c 	.word	0x2000092c

0800b6d8 <__ascii_wctomb>:
 800b6d8:	0003      	movs	r3, r0
 800b6da:	1e08      	subs	r0, r1, #0
 800b6dc:	d005      	beq.n	800b6ea <__ascii_wctomb+0x12>
 800b6de:	2aff      	cmp	r2, #255	; 0xff
 800b6e0:	d904      	bls.n	800b6ec <__ascii_wctomb+0x14>
 800b6e2:	228a      	movs	r2, #138	; 0x8a
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	4240      	negs	r0, r0
 800b6ea:	4770      	bx	lr
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	700a      	strb	r2, [r1, #0]
 800b6f0:	e7fb      	b.n	800b6ea <__ascii_wctomb+0x12>

0800b6f2 <abort>:
 800b6f2:	2006      	movs	r0, #6
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	f000 f82d 	bl	800b754 <raise>
 800b6fa:	2001      	movs	r0, #1
 800b6fc:	f7f8 fc7a 	bl	8003ff4 <_exit>

0800b700 <_raise_r>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	0004      	movs	r4, r0
 800b704:	000d      	movs	r5, r1
 800b706:	291f      	cmp	r1, #31
 800b708:	d904      	bls.n	800b714 <_raise_r+0x14>
 800b70a:	2316      	movs	r3, #22
 800b70c:	6003      	str	r3, [r0, #0]
 800b70e:	2001      	movs	r0, #1
 800b710:	4240      	negs	r0, r0
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b716:	2b00      	cmp	r3, #0
 800b718:	d004      	beq.n	800b724 <_raise_r+0x24>
 800b71a:	008a      	lsls	r2, r1, #2
 800b71c:	189b      	adds	r3, r3, r2
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	2a00      	cmp	r2, #0
 800b722:	d108      	bne.n	800b736 <_raise_r+0x36>
 800b724:	0020      	movs	r0, r4
 800b726:	f000 f831 	bl	800b78c <_getpid_r>
 800b72a:	002a      	movs	r2, r5
 800b72c:	0001      	movs	r1, r0
 800b72e:	0020      	movs	r0, r4
 800b730:	f000 f81a 	bl	800b768 <_kill_r>
 800b734:	e7ed      	b.n	800b712 <_raise_r+0x12>
 800b736:	2000      	movs	r0, #0
 800b738:	2a01      	cmp	r2, #1
 800b73a:	d0ea      	beq.n	800b712 <_raise_r+0x12>
 800b73c:	1c51      	adds	r1, r2, #1
 800b73e:	d103      	bne.n	800b748 <_raise_r+0x48>
 800b740:	2316      	movs	r3, #22
 800b742:	3001      	adds	r0, #1
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	e7e4      	b.n	800b712 <_raise_r+0x12>
 800b748:	2400      	movs	r4, #0
 800b74a:	0028      	movs	r0, r5
 800b74c:	601c      	str	r4, [r3, #0]
 800b74e:	4790      	blx	r2
 800b750:	0020      	movs	r0, r4
 800b752:	e7de      	b.n	800b712 <_raise_r+0x12>

0800b754 <raise>:
 800b754:	b510      	push	{r4, lr}
 800b756:	4b03      	ldr	r3, [pc, #12]	; (800b764 <raise+0x10>)
 800b758:	0001      	movs	r1, r0
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	f7ff ffd0 	bl	800b700 <_raise_r>
 800b760:	bd10      	pop	{r4, pc}
 800b762:	46c0      	nop			; (mov r8, r8)
 800b764:	2000000c 	.word	0x2000000c

0800b768 <_kill_r>:
 800b768:	2300      	movs	r3, #0
 800b76a:	b570      	push	{r4, r5, r6, lr}
 800b76c:	4d06      	ldr	r5, [pc, #24]	; (800b788 <_kill_r+0x20>)
 800b76e:	0004      	movs	r4, r0
 800b770:	0008      	movs	r0, r1
 800b772:	0011      	movs	r1, r2
 800b774:	602b      	str	r3, [r5, #0]
 800b776:	f7f8 fc2d 	bl	8003fd4 <_kill>
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	d103      	bne.n	800b786 <_kill_r+0x1e>
 800b77e:	682b      	ldr	r3, [r5, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d000      	beq.n	800b786 <_kill_r+0x1e>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd70      	pop	{r4, r5, r6, pc}
 800b788:	2000092c 	.word	0x2000092c

0800b78c <_getpid_r>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	f7f8 fc1b 	bl	8003fc8 <_getpid>
 800b792:	bd10      	pop	{r4, pc}

0800b794 <_init>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	46c0      	nop			; (mov r8, r8)
 800b798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79a:	bc08      	pop	{r3}
 800b79c:	469e      	mov	lr, r3
 800b79e:	4770      	bx	lr

0800b7a0 <_fini>:
 800b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a6:	bc08      	pop	{r3}
 800b7a8:	469e      	mov	lr, r3
 800b7aa:	4770      	bx	lr
